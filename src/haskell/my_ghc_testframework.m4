--- THIS IS A PREPROCESSED FILE,DO NOT EDIT
-- TODO:Gradually shift towards Template Haskell
m4_divert(`-1')
m4_changequote(`{-[',`]-}')

m4_define({-[ASSERT]-},{-[m4_test_append($1)]-})
m4_define({-[ASSERT_EQ]-},{-[m4_test_append($1 @?= $2)]-})
m4_define({-[ASSERT_TRUE]-},{-[m4_test_append($1 @?= True)]-})
m4_define({-[ASSERT_FALSE]-},{-[m4_test_append($1 @?= False)]-})
m4_define({-[ASSERT_JUST]-},{-[m4_test_append($1 @?= (Just $2))]-})
m4_define({-[QUICKCHECK]-},{-[m4_test_append(quickCheck($1))]-})
m4_define({-[UNIMPLEMENTED]-},{-[ERROR("unimplemented")]-})
m4_define({-[ERROR]-},{-[m4_dnl
error ("{-[\n]-}m4___file__:m4___line__:"++ ($1))m4_dnl
]-})



# TODO:How to correctly implement this?
# CPP stringize operaotor '#' is not supported in the "traditional mode"
# which Haskell uses for preprocessing.
# Perhaps I should implement this with Template Haskell.
m4_define({-[m4_stringize]-},{-["m4_translit(($@),"
,||)"]-})
#m4_define({-[m4_stringize]-},{-["FIXME: __m4_stringize__"]-})
#m4_define({-[m4_stringize]-},{-[__MY_STRINGIZE(($@)) ]-})

m4_define({-[m4_test]-}, m4_dnl
{-[m4_dnl
m4_ifelse({-[$#]-},0,,{-[$#]-},1,{-[m4_test_append({-[$1]-}) ]-},m4_dnl
{-[m4_dnl
m4_test_append({-[$1]-})m4_dnl
m4_test(m4_shift($@))m4_dnl
]-}
)m4_dnl
]-})


m4_define({-[m4_test_append]-}, m4_dnl
{-[m4_dnl
m4_divert({-[2]-})m4_dnl 
 ,($1,"m4___file__:m4___line__:" ++ m4_stringize({-[$1]-}))
m4_divert({-[0]-})m4_dnl
]-})

m4_define({-[m4_test_output]-}, m4_dnl
{-[m4_dnl
m4_divert(1)
-- Following texts were automatically generated by m4
testDefinitions :: [ (Test.HUnit.Assertion , String) ]
testDefinitions = tail [
 undefined
m4_divert(3) 
 ];

testList :: Test.HUnit.Test
testList = Test.HUnit.TestList (Prelude.map makeTestLabel testDefinitions)
        where makeTestLabel (assertion,label) = Test.HUnit.TestLabel label (Test.HUnit.TestCase assertion)

runTests :: IO ()
runTests = Test.HUnit.runTestTT testList >> Prelude.return ()
m4_divert(0)
]-})

m4_test_output{-[]-}m4_dnl
m4_divert{-[]-}m4_dnl
