/* DO NOT EDIT! 
Copyright (C) 2011,2012 Makoto Nishiura.

This file is part of ERASM++.

ERASM++ is free software; you can redistribute it and/or modify it under
the terms of the GNU General Public License as published by the Free
Software Foundation; either version 3, or (at your option) any later
version.

ERASM++ is distributed in the hope that it will be useful, but WITHOUT ANY
WARRANTY; without even the implied warranty of MERCHANTABILITY or
FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
for more details.

You should have received a copy of the GNU General Public License
along with ERASM++; see the file COPYING3.  If not see
 <http://www.gnu.org/licenses/>. */

switch (*p++) {
   case (0x0):
   {
       /* EncodedInstructionDefinition {{[]
                                     ;00 
                                     ;Just Modrm
                                     ;Just RMBoth
                                     ;Nothing
                                     ;[]
                                     ;Nothing
                                     ;Nothing}
                                    ;Prototype {protoMnemonic = "ADD", protoOperands = [OpRM8,OpR8]}
                                    ;[(EncModrm_rm,OperandReadWrite)
                                     ,(EncModrm_reg,OperandReadOnly)]
                                    ;64bit: True
                                    ;legacy: True
                                    ;Add r8 to r/m8.} */
       
       ERASM_DECODER_DO_ACTION (1,
                                Add,
                                Just<OpRM8>,
                                Just<EncModrm_rm>,
                                Just<OpR8>,
                                Just<EncModrm_reg>,
                                Nothing,
                                Nothing);
   }
   case (0x1):
   if (is_data16)
      {
          /* EncodedInstructionDefinition {{[]
                                        ;01 
                                        ;Just Modrm
                                        ;Just RMBoth
                                        ;Nothing
                                        ;[]
                                        ;Just Op16
                                        ;Nothing}
                                       ;Prototype {protoMnemonic = "ADD", protoOperands = [OpRM16,OpR16]}
                                       ;[(EncModrm_rm,OperandReadWrite)
                                        ,(EncModrm_reg,OperandReadOnly)]
                                       ;64bit: True
                                       ;legacy: True
                                       ;Add r16 to r/m16.} */
          
          ERASM_DECODER_DO_ACTION (1,
                                   Add,
                                   Just<OpRM16>,
                                   Just<EncModrm_rm>,
                                   Just<OpR16>,
                                   Just<EncModrm_reg>,
                                   Nothing,
                                   Nothing);
      }
   else
      {
          /* EncodedInstructionDefinition {{[]
                                        ;01 
                                        ;Just Modrm
                                        ;Just RMBoth
                                        ;Nothing
                                        ;[]
                                        ;Just Op32
                                        ;Nothing}
                                       ;Prototype {protoMnemonic = "ADD", protoOperands = [OpRM32,OpR32]}
                                       ;[(EncModrm_rm,OperandReadWrite)
                                        ,(EncModrm_reg,OperandReadOnly)]
                                       ;64bit: True
                                       ;legacy: True
                                       ;Add r32 to r/m32.} */
          
          ERASM_DECODER_DO_ACTION (1,
                                   Add,
                                   Just<OpRM32>,
                                   Just<EncModrm_rm>,
                                   Just<OpR32>,
                                   Just<EncModrm_reg>,
                                   Nothing,
                                   Nothing);
      }
   case (0x2):
   {
       /* EncodedInstructionDefinition {{[]
                                     ;02 
                                     ;Just Modrm
                                     ;Just RMBoth
                                     ;Nothing
                                     ;[]
                                     ;Nothing
                                     ;Nothing}
                                    ;Prototype {protoMnemonic = "ADD", protoOperands = [OpR8,OpRM8]}
                                    ;[(EncModrm_reg
                                      ,OperandReadWrite)
                                     ,(EncModrm_rm,OperandReadOnly)]
                                    ;64bit: True
                                    ;legacy: True
                                    ;Add r/m8 to r8.} */
       
       ERASM_DECODER_DO_ACTION (1,
                                Add,
                                Just<OpR8>,
                                Just<EncModrm_reg>,
                                Just<OpRM8>,
                                Just<EncModrm_rm>,
                                Nothing,
                                Nothing);
   }
   case (0x3):
   if (is_data16)
      {
          /* EncodedInstructionDefinition {{[]
                                        ;03 
                                        ;Just Modrm
                                        ;Just RMBoth
                                        ;Nothing
                                        ;[]
                                        ;Just Op16
                                        ;Nothing}
                                       ;Prototype {protoMnemonic = "ADD", protoOperands = [OpR16,OpRM16]}
                                       ;[(EncModrm_reg
                                         ,OperandReadWrite)
                                        ,(EncModrm_rm,OperandReadOnly)]
                                       ;64bit: True
                                       ;legacy: True
                                       ;Add r/m16 to r16.} */
          
          ERASM_DECODER_DO_ACTION (1,
                                   Add,
                                   Just<OpR16>,
                                   Just<EncModrm_reg>,
                                   Just<OpRM16>,
                                   Just<EncModrm_rm>,
                                   Nothing,
                                   Nothing);
      }
   else
      {
          /* EncodedInstructionDefinition {{[]
                                        ;03 
                                        ;Just Modrm
                                        ;Just RMBoth
                                        ;Nothing
                                        ;[]
                                        ;Just Op32
                                        ;Nothing}
                                       ;Prototype {protoMnemonic = "ADD", protoOperands = [OpR32,OpRM32]}
                                       ;[(EncModrm_reg
                                         ,OperandReadWrite)
                                        ,(EncModrm_rm,OperandReadOnly)]
                                       ;64bit: True
                                       ;legacy: True
                                       ;Add r/m32 to r32.} */
          
          ERASM_DECODER_DO_ACTION (1,
                                   Add,
                                   Just<OpR32>,
                                   Just<EncModrm_reg>,
                                   Just<OpRM32>,
                                   Just<EncModrm_rm>,
                                   Nothing,
                                   Nothing);
      }
   case (0x4):
   {
       /* EncodedInstructionDefinition {{[]
                                     ;04 
                                     ;Nothing
                                     ;Nothing
                                     ;Nothing
                                     ;[IMM_IB]
                                     ;Nothing
                                     ;Nothing}
                                    ;Prototype {protoMnemonic = "ADD", protoOperands = [OpAL,OpIMM8]}
                                    ;[(EncImplicit,OperandReadWrite)
                                     ,(EncIMM,OperandReadWrite)]
                                    ;64bit: True
                                    ;legacy: True
                                    ;Add imm8 to AL.} */
       
       ERASM_DECODER_DO_ACTION (1,
                                Add,
                                Just<OpAL>,
                                Just<EncImplicit>,
                                Just<OpIMM8>,
                                Just<EncIMM>,
                                Nothing,
                                Nothing);
   }
   case (0x5):
   if (is_data16)
      {
          /* EncodedInstructionDefinition {{[]
                                        ;05 
                                        ;Nothing
                                        ;Nothing
                                        ;Nothing
                                        ;[IMM_IW]
                                        ;Just Op16
                                        ;Nothing}
                                       ;Prototype {protoMnemonic = "ADD", protoOperands = [OpAX,OpIMM16]}
                                       ;[(EncImplicit,OperandReadWrite)
                                        ,(EncIMM,OperandReadWrite)]
                                       ;64bit: True
                                       ;legacy: True
                                       ;Add imm16 to AX.} */
          
          ERASM_DECODER_DO_ACTION (1,
                                   Add,
                                   Just<OpAX>,
                                   Just<EncImplicit>,
                                   Just<OpIMM16>,
                                   Just<EncIMM>,
                                   Nothing,
                                   Nothing);
      }
   else
      {
          /* EncodedInstructionDefinition {{[]
                                        ;05 
                                        ;Nothing
                                        ;Nothing
                                        ;Nothing
                                        ;[IMM_ID]
                                        ;Just Op32
                                        ;Nothing}
                                       ;Prototype {protoMnemonic = "ADD", protoOperands = [OpEAX,OpIMM32]}
                                       ;[(EncImplicit,OperandReadWrite)
                                        ,(EncIMM,OperandReadWrite)]
                                       ;64bit: True
                                       ;legacy: True
                                       ;Add imm32 to EAX.} */
          
          ERASM_DECODER_DO_ACTION (1,
                                   Add,
                                   Just<OpEAX>,
                                   Just<EncImplicit>,
                                   Just<OpIMM32>,
                                   Just<EncIMM>,
                                   Nothing,
                                   Nothing);
      }
   case (0x6):
   {
       /* EncodedInstructionDefinition {{[]
                                     ;06 
                                     ;Nothing
                                     ;Nothing
                                     ;Nothing
                                     ;[]
                                     ;Nothing
                                     ;Nothing}
                                    ;Prototype {protoMnemonic = "PUSH", protoOperands = [OpES]}
                                    ;[(EncImplicit
                                      ,OperandReadWrite)]
                                    ;64bit: False
                                    ;legacy: True
                                    ;Push ES.} */
       
       ERASM_DECODER_DO_ACTION (1,
                                Push,
                                Just<OpES>,
                                Just<EncImplicit>,
                                Nothing,
                                Nothing,
                                Nothing,
                                Nothing);
   }
   case (0x7):
   {
       /* EncodedInstructionDefinition {{[]
                                     ;07 
                                     ;Nothing
                                     ;Nothing
                                     ;Nothing
                                     ;[]
                                     ;Nothing
                                     ;Nothing}
                                    ;Prototype {protoMnemonic = "POP", protoOperands = [OpES]}
                                    ;[(EncImplicit
                                      ,OperandReadWrite)]
                                    ;64bit: False
                                    ;legacy: True
                                    ;Pop top of stack into ES; increment stack pointer.} */
       
       ERASM_DECODER_DO_ACTION (1,
                                Pop,
                                Just<OpES>,
                                Just<EncImplicit>,
                                Nothing,
                                Nothing,
                                Nothing,
                                Nothing);
   }
   case (0x8):
   {
       /* EncodedInstructionDefinition {{[]
                                     ;08 
                                     ;Just Modrm
                                     ;Just RMBoth
                                     ;Nothing
                                     ;[]
                                     ;Nothing
                                     ;Nothing}
                                    ;Prototype {protoMnemonic = "OR", protoOperands = [OpRM8,OpR8]}
                                    ;[(EncModrm_rm,OperandReadWrite)
                                     ,(EncModrm_reg,OperandReadOnly)]
                                    ;64bit: True
                                    ;legacy: True
                                    ;r/m8 OR r8.} */
       
       ERASM_DECODER_DO_ACTION (1,
                                Or,
                                Just<OpRM8>,
                                Just<EncModrm_rm>,
                                Just<OpR8>,
                                Just<EncModrm_reg>,
                                Nothing,
                                Nothing);
   }
   case (0x9):
   if (is_data16)
      {
          /* EncodedInstructionDefinition {{[]
                                        ;09 
                                        ;Just Modrm
                                        ;Just RMBoth
                                        ;Nothing
                                        ;[]
                                        ;Just Op16
                                        ;Nothing}
                                       ;Prototype {protoMnemonic = "OR", protoOperands = [OpRM16,OpR16]}
                                       ;[(EncModrm_rm,OperandReadWrite)
                                        ,(EncModrm_reg,OperandReadOnly)]
                                       ;64bit: True
                                       ;legacy: True
                                       ;r/m16 OR r16.} */
          
          ERASM_DECODER_DO_ACTION (1,
                                   Or,
                                   Just<OpRM16>,
                                   Just<EncModrm_rm>,
                                   Just<OpR16>,
                                   Just<EncModrm_reg>,
                                   Nothing,
                                   Nothing);
      }
   else
      {
          /* EncodedInstructionDefinition {{[]
                                        ;09 
                                        ;Just Modrm
                                        ;Just RMBoth
                                        ;Nothing
                                        ;[]
                                        ;Just Op32
                                        ;Nothing}
                                       ;Prototype {protoMnemonic = "OR", protoOperands = [OpRM32,OpR32]}
                                       ;[(EncModrm_rm,OperandReadWrite)
                                        ,(EncModrm_reg,OperandReadOnly)]
                                       ;64bit: True
                                       ;legacy: True
                                       ;r/m32 OR r32.} */
          
          ERASM_DECODER_DO_ACTION (1,
                                   Or,
                                   Just<OpRM32>,
                                   Just<EncModrm_rm>,
                                   Just<OpR32>,
                                   Just<EncModrm_reg>,
                                   Nothing,
                                   Nothing);
      }
   case (0xa):
   {
       /* EncodedInstructionDefinition {{[]
                                     ;0A 
                                     ;Just Modrm
                                     ;Just RMBoth
                                     ;Nothing
                                     ;[]
                                     ;Nothing
                                     ;Nothing}
                                    ;Prototype {protoMnemonic = "OR", protoOperands = [OpR8,OpRM8]}
                                    ;[(EncModrm_reg
                                      ,OperandReadWrite)
                                     ,(EncModrm_rm,OperandReadOnly)]
                                    ;64bit: True
                                    ;legacy: True
                                    ;r8 OR r/m8.} */
       
       ERASM_DECODER_DO_ACTION (1,
                                Or,
                                Just<OpR8>,
                                Just<EncModrm_reg>,
                                Just<OpRM8>,
                                Just<EncModrm_rm>,
                                Nothing,
                                Nothing);
   }
   case (0xb):
   if (is_data16)
      {
          /* EncodedInstructionDefinition {{[]
                                        ;0B 
                                        ;Just Modrm
                                        ;Just RMBoth
                                        ;Nothing
                                        ;[]
                                        ;Just Op16
                                        ;Nothing}
                                       ;Prototype {protoMnemonic = "OR", protoOperands = [OpR16,OpRM16]}
                                       ;[(EncModrm_reg
                                         ,OperandReadWrite)
                                        ,(EncModrm_rm,OperandReadOnly)]
                                       ;64bit: True
                                       ;legacy: True
                                       ;r16 OR r/m16.} */
          
          ERASM_DECODER_DO_ACTION (1,
                                   Or,
                                   Just<OpR16>,
                                   Just<EncModrm_reg>,
                                   Just<OpRM16>,
                                   Just<EncModrm_rm>,
                                   Nothing,
                                   Nothing);
      }
   else
      {
          /* EncodedInstructionDefinition {{[]
                                        ;0B 
                                        ;Just Modrm
                                        ;Just RMBoth
                                        ;Nothing
                                        ;[]
                                        ;Just Op32
                                        ;Nothing}
                                       ;Prototype {protoMnemonic = "OR", protoOperands = [OpR32,OpRM32]}
                                       ;[(EncModrm_reg
                                         ,OperandReadWrite)
                                        ,(EncModrm_rm,OperandReadOnly)]
                                       ;64bit: True
                                       ;legacy: True
                                       ;r32 OR r/m32.} */
          
          ERASM_DECODER_DO_ACTION (1,
                                   Or,
                                   Just<OpR32>,
                                   Just<EncModrm_reg>,
                                   Just<OpRM32>,
                                   Just<EncModrm_rm>,
                                   Nothing,
                                   Nothing);
      }
   case (0xc):
   {
       /* EncodedInstructionDefinition {{[]
                                     ;0C 
                                     ;Nothing
                                     ;Nothing
                                     ;Nothing
                                     ;[IMM_IB]
                                     ;Nothing
                                     ;Nothing}
                                    ;Prototype {protoMnemonic = "OR", protoOperands = [OpAL,OpIMM8]}
                                    ;[(EncImplicit,OperandReadWrite)
                                     ,(EncIMM,OperandReadWrite)]
                                    ;64bit: True
                                    ;legacy: True
                                    ;AL OR imm8.} */
       
       ERASM_DECODER_DO_ACTION (1,
                                Or,
                                Just<OpAL>,
                                Just<EncImplicit>,
                                Just<OpIMM8>,
                                Just<EncIMM>,
                                Nothing,
                                Nothing);
   }
   case (0xd):
   if (is_data16)
      {
          /* EncodedInstructionDefinition {{[]
                                        ;0D 
                                        ;Nothing
                                        ;Nothing
                                        ;Nothing
                                        ;[IMM_IW]
                                        ;Just Op16
                                        ;Nothing}
                                       ;Prototype {protoMnemonic = "OR", protoOperands = [OpAX,OpIMM16]}
                                       ;[(EncImplicit,OperandReadWrite)
                                        ,(EncIMM,OperandReadWrite)]
                                       ;64bit: True
                                       ;legacy: True
                                       ;AX OR imm16.} */
          
          ERASM_DECODER_DO_ACTION (1,
                                   Or,
                                   Just<OpAX>,
                                   Just<EncImplicit>,
                                   Just<OpIMM16>,
                                   Just<EncIMM>,
                                   Nothing,
                                   Nothing);
      }
   else
      {
          /* EncodedInstructionDefinition {{[]
                                        ;0D 
                                        ;Nothing
                                        ;Nothing
                                        ;Nothing
                                        ;[IMM_ID]
                                        ;Just Op32
                                        ;Nothing}
                                       ;Prototype {protoMnemonic = "OR", protoOperands = [OpEAX,OpIMM32]}
                                       ;[(EncImplicit,OperandReadWrite)
                                        ,(EncIMM,OperandReadWrite)]
                                       ;64bit: True
                                       ;legacy: True
                                       ;EAX OR imm32.} */
          
          ERASM_DECODER_DO_ACTION (1,
                                   Or,
                                   Just<OpEAX>,
                                   Just<EncImplicit>,
                                   Just<OpIMM32>,
                                   Just<EncIMM>,
                                   Nothing,
                                   Nothing);
      }
   case (0xe):
   {
       /* EncodedInstructionDefinition {{[]
                                     ;0E 
                                     ;Nothing
                                     ;Nothing
                                     ;Nothing
                                     ;[]
                                     ;Nothing
                                     ;Nothing}
                                    ;Prototype {protoMnemonic = "PUSH", protoOperands = [OpCS]}
                                    ;[(EncImplicit
                                      ,OperandReadWrite)]
                                    ;64bit: False
                                    ;legacy: True
                                    ;Push CS.} */
       
       ERASM_DECODER_DO_ACTION (1,
                                Push,
                                Just<OpCS>,
                                Just<EncImplicit>,
                                Nothing,
                                Nothing,
                                Nothing,
                                Nothing);
   }
   case (0xf):
   switch (*p++) {
      case (0x0):
      switch (modrm_reg_op (p)) {
         case (0):
         {
             /* EncodedInstructionDefinition {{[]
                                           ;0F 00 
                                           ;Just (ModrmDigit 0)
                                           ;Just RMBoth
                                           ;Nothing
                                           ;[]
                                           ;Nothing
                                           ;Nothing}
                                          ;Prototype {protoMnemonic = "SLDT", protoOperands = [OpRM16]}
                                          ;[(EncModrm_rm
                                            ,OperandReadWrite)]
                                          ;64bit: True
                                          ;legacy: True
                                          ;Stores segment selector from LDTR in r/m16.} */
             
             ERASM_DECODER_DO_ACTION (2,
                                      Sldt,
                                      Just<OpRM16>,
                                      Just<EncModrm_rm>,
                                      Nothing,
                                      Nothing,
                                      Nothing,
                                      Nothing);
         }
         case (1):
         {
             /* EncodedInstructionDefinition {{[]
                                           ;0F 00 
                                           ;Just (ModrmDigit 1)
                                           ;Just RMBoth
                                           ;Nothing
                                           ;[]
                                           ;Nothing
                                           ;Nothing}
                                          ;Prototype {protoMnemonic = "STR", protoOperands = [OpRM16]}
                                          ;[(EncModrm_rm
                                            ,OperandReadWrite)]
                                          ;64bit: True
                                          ;legacy: True
                                          ;Stores segment selector from TR in r/m16.} */
             
             ERASM_DECODER_DO_ACTION (2,
                                      Str,
                                      Just<OpRM16>,
                                      Just<EncModrm_rm>,
                                      Nothing,
                                      Nothing,
                                      Nothing,
                                      Nothing);
         }
         case (2):
         {
             /* EncodedInstructionDefinition {{[]
                                           ;0F 00 
                                           ;Just (ModrmDigit 2)
                                           ;Just RMBoth
                                           ;Nothing
                                           ;[]
                                           ;Nothing
                                           ;Nothing}
                                          ;Prototype {protoMnemonic = "LLDT", protoOperands = [OpRM16]}
                                          ;[(EncModrm_rm,OperandReadOnly)]
                                          ;64bit: True
                                          ;legacy: True
                                          ;Load segment selector r/m16 into LDTR.} */
             
             ERASM_DECODER_DO_ACTION (2,
                                      Lldt,
                                      Just<OpRM16>,
                                      Just<EncModrm_rm>,
                                      Nothing,
                                      Nothing,
                                      Nothing,
                                      Nothing);
         }
         case (3):
         {
             /* EncodedInstructionDefinition {{[]
                                           ;0F 00 
                                           ;Just (ModrmDigit 3)
                                           ;Just RMBoth
                                           ;Nothing
                                           ;[]
                                           ;Nothing
                                           ;Nothing}
                                          ;Prototype {protoMnemonic = "LTR", protoOperands = [OpRM16]}
                                          ;[(EncModrm_rm,OperandReadOnly)]
                                          ;64bit: True
                                          ;legacy: True
                                          ;Load r/m16 into task register.} */
             
             ERASM_DECODER_DO_ACTION (2,
                                      Ltr,
                                      Just<OpRM16>,
                                      Just<EncModrm_rm>,
                                      Nothing,
                                      Nothing,
                                      Nothing,
                                      Nothing);
         }
         case (4):
         {
             /* EncodedInstructionDefinition {{[]
                                           ;0F 00 
                                           ;Just (ModrmDigit 4)
                                           ;Just RMBoth
                                           ;Nothing
                                           ;[]
                                           ;Nothing
                                           ;Nothing}
                                          ;Prototype {protoMnemonic = "VERR", protoOperands = [OpRM16]}
                                          ;[(EncModrm_rm,OperandReadOnly)]
                                          ;64bit: True
                                          ;legacy: True
                                          ;Set ZF=1 if segment specified with r/m16 can be read.} */
             
             ERASM_DECODER_DO_ACTION (2,
                                      Verr,
                                      Just<OpRM16>,
                                      Just<EncModrm_rm>,
                                      Nothing,
                                      Nothing,
                                      Nothing,
                                      Nothing);
         }
         case (5):
         {
             /* EncodedInstructionDefinition {{[]
                                           ;0F 00 
                                           ;Just (ModrmDigit 5)
                                           ;Just RMBoth
                                           ;Nothing
                                           ;[]
                                           ;Nothing
                                           ;Nothing}
                                          ;Prototype {protoMnemonic = "VERW", protoOperands = [OpRM16]}
                                          ;[(EncModrm_rm,OperandReadOnly)]
                                          ;64bit: True
                                          ;legacy: True
                                          ;Set ZF=1 if segment specified with r/m16 can be written.} */
             
             ERASM_DECODER_DO_ACTION (2,
                                      Verw,
                                      Just<OpRM16>,
                                      Just<EncModrm_rm>,
                                      Nothing,
                                      Nothing,
                                      Nothing,
                                      Nothing);
         }
         
      }
      case (0x1):
      if (modrm_mod3 (p))
         switch (modrm_reg_op (p)) {
            case (0):
            switch (modrm_rm (p)) {
               case (1):
               {
                   /* EncodedInstructionDefinition {{[]
                                                 ;0F 01 C1 
                                                 ;Nothing
                                                 ;Nothing
                                                 ;Nothing
                                                 ;[]
                                                 ;Nothing
                                                 ;Nothing}
                                                ;Prototype {protoMnemonic = "VMCALL", protoOperands = []}
                                                ;[]
                                                ;64bit: True
                                                ;legacy: True
                                                ;Call to VM monitor by causing VM exit.} */
                   
                   ERASM_DECODER_DO_ACTION (3,
                                            Vmcall,
                                            Nothing,
                                            Nothing,
                                            Nothing,
                                            Nothing,
                                            Nothing,
                                            Nothing);
               }
               case (2):
               {
                   /* EncodedInstructionDefinition {{[]
                                                 ;0F 01 C2 
                                                 ;Nothing
                                                 ;Nothing
                                                 ;Nothing
                                                 ;[]
                                                 ;Nothing
                                                 ;Nothing}
                                                ;Prototype {protoMnemonic = "VMLAUNCH", protoOperands = []}
                                                ;[]
                                                ;64bit: True
                                                ;legacy: True
                                                ;Launch virtual machine managed by current VMCS.} */
                   
                   ERASM_DECODER_DO_ACTION (3,
                                            Vmlaunch,
                                            Nothing,
                                            Nothing,
                                            Nothing,
                                            Nothing,
                                            Nothing,
                                            Nothing);
               }
               case (3):
               {
                   /* EncodedInstructionDefinition {{[]
                                                 ;0F 01 C3 
                                                 ;Nothing
                                                 ;Nothing
                                                 ;Nothing
                                                 ;[]
                                                 ;Nothing
                                                 ;Nothing}
                                                ;Prototype {protoMnemonic = "VMRESUME", protoOperands = []}
                                                ;[]
                                                ;64bit: True
                                                ;legacy: True
                                                ;Resume virtual machine managed by current VMCS.} */
                   
                   ERASM_DECODER_DO_ACTION (3,
                                            Vmresume,
                                            Nothing,
                                            Nothing,
                                            Nothing,
                                            Nothing,
                                            Nothing,
                                            Nothing);
               }
               case (4):
               {
                   /* EncodedInstructionDefinition {{[]
                                                 ;0F 01 C4 
                                                 ;Nothing
                                                 ;Nothing
                                                 ;Nothing
                                                 ;[]
                                                 ;Nothing
                                                 ;Nothing}
                                                ;Prototype {protoMnemonic = "VMXOFF", protoOperands = []}
                                                ;[]
                                                ;64bit: True
                                                ;legacy: True
                                                ;Leaves VMX operation.} */
                   
                   ERASM_DECODER_DO_ACTION (3,
                                            Vmxoff,
                                            Nothing,
                                            Nothing,
                                            Nothing,
                                            Nothing,
                                            Nothing,
                                            Nothing);
               }
               default:
               goto decode_error;
            }
            case (1):
            switch (modrm_rm (p)) {
               case (0):
               {
                   /* EncodedInstructionDefinition {{[]
                                                 ;0F 01 C8 
                                                 ;Nothing
                                                 ;Nothing
                                                 ;Nothing
                                                 ;[]
                                                 ;Nothing
                                                 ;Nothing}
                                                ;Prototype {protoMnemonic = "MONITOR", protoOperands = []}
                                                ;[]
                                                ;64bit: True
                                                ;legacy: True
                                                ;Sets up a linear address range to be monitored by hardware and activates the monitor. The address range should be a write-back memory caching type. The address is DS:EAX (DS:RAX in 64-bit mode).} */
                   
                   ERASM_DECODER_DO_ACTION (3,
                                            Monitor,
                                            Nothing,
                                            Nothing,
                                            Nothing,
                                            Nothing,
                                            Nothing,
                                            Nothing);
               }
               case (1):
               {
                   /* EncodedInstructionDefinition {{[]
                                                 ;0F 01 C9 
                                                 ;Nothing
                                                 ;Nothing
                                                 ;Nothing
                                                 ;[]
                                                 ;Nothing
                                                 ;Nothing}
                                                ;Prototype {protoMnemonic = "MWAIT", protoOperands = []}
                                                ;[]
                                                ;64bit: True
                                                ;legacy: True
                                                ;A hint that allow the processor to stop instruction execution and enter an implementation- dependent optimized state until occurrence of a class of events.} */
                   
                   ERASM_DECODER_DO_ACTION (3,
                                            Mwait,
                                            Nothing,
                                            Nothing,
                                            Nothing,
                                            Nothing,
                                            Nothing,
                                            Nothing);
               }
               default:
               goto decode_error;
            }
            case (2):
            switch (modrm_rm (p)) {
               case (0):
               {
                   /* EncodedInstructionDefinition {{[]
                                                 ;0F 01 D0 
                                                 ;Nothing
                                                 ;Nothing
                                                 ;Nothing
                                                 ;[]
                                                 ;Nothing
                                                 ;Nothing}
                                                ;Prototype {protoMnemonic = "XGETBV", protoOperands = []}
                                                ;[]
                                                ;64bit: True
                                                ;legacy: True
                                                ;Reads an XCR specified by ECX into EDX:EAX.} */
                   
                   ERASM_DECODER_DO_ACTION (3,
                                            Xgetbv,
                                            Nothing,
                                            Nothing,
                                            Nothing,
                                            Nothing,
                                            Nothing,
                                            Nothing);
               }
               case (1):
               {
                   /* EncodedInstructionDefinition {{[]
                                                 ;0F 01 D1 
                                                 ;Nothing
                                                 ;Nothing
                                                 ;Nothing
                                                 ;[]
                                                 ;Nothing
                                                 ;Nothing}
                                                ;Prototype {protoMnemonic = "XSETBV", protoOperands = []}
                                                ;[]
                                                ;64bit: True
                                                ;legacy: True
                                                ;Write the value in EDX:EAX to the XCR specified by ECX.} */
                   
                   ERASM_DECODER_DO_ACTION (3,
                                            Xsetbv,
                                            Nothing,
                                            Nothing,
                                            Nothing,
                                            Nothing,
                                            Nothing,
                                            Nothing);
               }
               default:
               goto decode_error;
            }
            case (4):
            if (is_data16)
               {
                   /* EncodedInstructionDefinition {{[]
                                                 ;0F 01 
                                                 ;Just (ModrmDigit 4)
                                                 ;Just RMBoth
                                                 ;Nothing
                                                 ;[]
                                                 ;Just Op16
                                                 ;Nothing}
                                                ;Prototype {protoMnemonic = "SMSW", protoOperands = [OpRM16]}
                                                ;[(EncModrm_rm
                                                  ,OperandReadWrite)]
                                                ;64bit: True
                                                ;legacy: True
                                                ;Store machine status word to r/m16.} */
                   
                   ERASM_DECODER_DO_ACTION (2,
                                            Smsw,
                                            Just<OpRM16>,
                                            Just<EncModrm_rm>,
                                            Nothing,
                                            Nothing,
                                            Nothing,
                                            Nothing);
               }
            else
               {
                   /* EncodedInstructionDefinition {{[]
                                                 ;0F 01 
                                                 ;Just (ModrmDigit 4)
                                                 ;Just RMBoth
                                                 ;Nothing
                                                 ;[]
                                                 ;Just Op32
                                                 ;Nothing}
                                                ;Prototype {protoMnemonic = "SMSW", protoOperands = [OpR32_M16]}
                                                ;[(EncModrm_rm
                                                  ,OperandReadWrite)]
                                                ;64bit: True
                                                ;legacy: True
                                                ;Store machine status word in low-order 16 bits of r32/m16; high-order 16 bits of r32 are undefined.} */
                   
                   ERASM_DECODER_DO_ACTION (2,
                                            Smsw,
                                            Just<OpR32_M16>,
                                            Just<EncModrm_rm>,
                                            Nothing,
                                            Nothing,
                                            Nothing,
                                            Nothing);
               }
            case (6):
            {
                /* EncodedInstructionDefinition {{[]
                                              ;0F 01 
                                              ;Just (ModrmDigit 6)
                                              ;Just RMBoth
                                              ;Nothing
                                              ;[]
                                              ;Nothing
                                              ;Nothing}
                                             ;Prototype {protoMnemonic = "LMSW", protoOperands = [OpRM16]}
                                             ;[(EncModrm_rm,OperandReadOnly)]
                                             ;64bit: True
                                             ;legacy: True
                                             ;Loads r/m16 in machine status word of CR0.} */
                
                ERASM_DECODER_DO_ACTION (2,
                                         Lmsw,
                                         Just<OpRM16>,
                                         Just<EncModrm_rm>,
                                         Nothing,
                                         Nothing,
                                         Nothing,
                                         Nothing);
            }
            case (7):
            switch (modrm_rm (p)) {
               case (1):
               {
                   /* EncodedInstructionDefinition {{[]
                                                 ;0F 01 F9 
                                                 ;Nothing
                                                 ;Nothing
                                                 ;Nothing
                                                 ;[]
                                                 ;Nothing
                                                 ;Nothing}
                                                ;Prototype {protoMnemonic = "RDTSCP", protoOperands = []}
                                                ;[]
                                                ;64bit: True
                                                ;legacy: True
                                                ;Read 64-bit time-stamp counter and 32-bit IA32_TSC_AUX value into EDX:EAX and ECX.} */
                   
                   ERASM_DECODER_DO_ACTION (3,
                                            Rdtscp,
                                            Nothing,
                                            Nothing,
                                            Nothing,
                                            Nothing,
                                            Nothing,
                                            Nothing);
               }
               default:
               goto decode_error;
            }
            
         }
      else
         switch (modrm_reg_op (p)) {
            case (0):
            {
                /* EncodedInstructionDefinition {{[]
                                              ;0F 01 
                                              ;Just (ModrmDigit 0)
                                              ;Just RMMemOnly
                                              ;Nothing
                                              ;[]
                                              ;Nothing
                                              ;Nothing}
                                             ;Prototype {protoMnemonic = "SGDT", protoOperands = [OpM]}
                                             ;[(EncModrm_rm
                                               ,OperandReadWrite)]
                                             ;64bit: True
                                             ;legacy: True
                                             ;Store GDTR to m.} */
                
                ERASM_DECODER_DO_ACTION (2,
                                         Sgdt,
                                         Just<OpM>,
                                         Just<EncModrm_rm_mem>,
                                         Nothing,
                                         Nothing,
                                         Nothing,
                                         Nothing);
            }
            case (1):
            {
                /* EncodedInstructionDefinition {{[]
                                              ;0F 01 
                                              ;Just (ModrmDigit 1)
                                              ;Just RMMemOnly
                                              ;Nothing
                                              ;[]
                                              ;Nothing
                                              ;Nothing}
                                             ;Prototype {protoMnemonic = "SIDT", protoOperands = [OpM]}
                                             ;[(EncModrm_rm
                                               ,OperandReadWrite)]
                                             ;64bit: True
                                             ;legacy: True
                                             ;Store IDTR to m.} */
                
                ERASM_DECODER_DO_ACTION (2,
                                         Sidt,
                                         Just<OpM>,
                                         Just<EncModrm_rm_mem>,
                                         Nothing,
                                         Nothing,
                                         Nothing,
                                         Nothing);
            }
            case (2):
            {
                /* EncodedInstructionDefinition {{[]
                                              ;0F 01 
                                              ;Just (ModrmDigit 2)
                                              ;Just RMMemOnly
                                              ;Nothing
                                              ;[]
                                              ;Nothing
                                              ;Nothing}
                                             ;Prototype {protoMnemonic = "LGDT", protoOperands = [OpM16_32]}
                                             ;[(EncModrm_rm,OperandReadOnly)]
                                             ;64bit: False
                                             ;legacy: True
                                             ;Load m into GDTR.} */
                
                ERASM_DECODER_DO_ACTION (2,
                                         Lgdt,
                                         Just<OpM16_32>,
                                         Just<EncModrm_rm_mem>,
                                         Nothing,
                                         Nothing,
                                         Nothing,
                                         Nothing);
            }
            case (3):
            {
                /* EncodedInstructionDefinition {{[]
                                              ;0F 01 
                                              ;Just (ModrmDigit 3)
                                              ;Just RMMemOnly
                                              ;Nothing
                                              ;[]
                                              ;Nothing
                                              ;Nothing}
                                             ;Prototype {protoMnemonic = "LIDT", protoOperands = [OpM16_32]}
                                             ;[(EncModrm_rm,OperandReadOnly)]
                                             ;64bit: False
                                             ;legacy: True
                                             ;Load m into IDTR.} */
                
                ERASM_DECODER_DO_ACTION (2,
                                         Lidt,
                                         Just<OpM16_32>,
                                         Just<EncModrm_rm_mem>,
                                         Nothing,
                                         Nothing,
                                         Nothing,
                                         Nothing);
            }
            case (4):
            if (is_data16)
               {
                   /* EncodedInstructionDefinition {{[]
                                                 ;0F 01 
                                                 ;Just (ModrmDigit 4)
                                                 ;Just RMBoth
                                                 ;Nothing
                                                 ;[]
                                                 ;Just Op16
                                                 ;Nothing}
                                                ;Prototype {protoMnemonic = "SMSW", protoOperands = [OpRM16]}
                                                ;[(EncModrm_rm
                                                  ,OperandReadWrite)]
                                                ;64bit: True
                                                ;legacy: True
                                                ;Store machine status word to r/m16.} */
                   
                   ERASM_DECODER_DO_ACTION (2,
                                            Smsw,
                                            Just<OpRM16>,
                                            Just<EncModrm_rm>,
                                            Nothing,
                                            Nothing,
                                            Nothing,
                                            Nothing);
               }
            else
               {
                   /* EncodedInstructionDefinition {{[]
                                                 ;0F 01 
                                                 ;Just (ModrmDigit 4)
                                                 ;Just RMBoth
                                                 ;Nothing
                                                 ;[]
                                                 ;Just Op32
                                                 ;Nothing}
                                                ;Prototype {protoMnemonic = "SMSW", protoOperands = [OpR32_M16]}
                                                ;[(EncModrm_rm
                                                  ,OperandReadWrite)]
                                                ;64bit: True
                                                ;legacy: True
                                                ;Store machine status word in low-order 16 bits of r32/m16; high-order 16 bits of r32 are undefined.} */
                   
                   ERASM_DECODER_DO_ACTION (2,
                                            Smsw,
                                            Just<OpR32_M16>,
                                            Just<EncModrm_rm>,
                                            Nothing,
                                            Nothing,
                                            Nothing,
                                            Nothing);
               }
            case (6):
            {
                /* EncodedInstructionDefinition {{[]
                                              ;0F 01 
                                              ;Just (ModrmDigit 6)
                                              ;Just RMBoth
                                              ;Nothing
                                              ;[]
                                              ;Nothing
                                              ;Nothing}
                                             ;Prototype {protoMnemonic = "LMSW", protoOperands = [OpRM16]}
                                             ;[(EncModrm_rm,OperandReadOnly)]
                                             ;64bit: True
                                             ;legacy: True
                                             ;Loads r/m16 in machine status word of CR0.} */
                
                ERASM_DECODER_DO_ACTION (2,
                                         Lmsw,
                                         Just<OpRM16>,
                                         Just<EncModrm_rm>,
                                         Nothing,
                                         Nothing,
                                         Nothing,
                                         Nothing);
            }
            case (7):
            {
                /* EncodedInstructionDefinition {{[]
                                              ;0F 01 
                                              ;Just (ModrmDigit 7)
                                              ;Just RMMemOnly
                                              ;Nothing
                                              ;[]
                                              ;Nothing
                                              ;Nothing}
                                             ;Prototype {protoMnemonic = "INVLPG", protoOperands = [OpM]}
                                             ;[(EncModrm_rm,OperandReadOnly)]
                                             ;64bit: True
                                             ;legacy: True
                                             ;Invalidate TLB Entry for page that contains m.} */
                
                ERASM_DECODER_DO_ACTION (2,
                                         Invlpg,
                                         Just<OpM>,
                                         Just<EncModrm_rm_mem>,
                                         Nothing,
                                         Nothing,
                                         Nothing,
                                         Nothing);
            }
            
         }
      case (0x2):
      if (is_data16)
         {
             /* EncodedInstructionDefinition {{[]
                                           ;0F 02 
                                           ;Just Modrm
                                           ;Just RMBoth
                                           ;Nothing
                                           ;[]
                                           ;Just Op16
                                           ;Nothing}
                                          ;Prototype {protoMnemonic = "LAR", protoOperands = [OpR16,OpRM16]}
                                          ;[(EncModrm_reg
                                            ,OperandReadWrite)
                                           ,(EncModrm_rm,OperandReadOnly)]
                                          ;64bit: True
                                          ;legacy: True
                                          ;r16 ← r16/m16 masked by FF00H.} */
             
             ERASM_DECODER_DO_ACTION (2,
                                      Lar,
                                      Just<OpR16>,
                                      Just<EncModrm_reg>,
                                      Just<OpRM16>,
                                      Just<EncModrm_rm>,
                                      Nothing,
                                      Nothing);
         }
      else
         {
             /* EncodedInstructionDefinition {{[]
                                           ;0F 02 
                                           ;Just Modrm
                                           ;Just RMBoth
                                           ;Nothing
                                           ;[]
                                           ;Just Op32
                                           ;Nothing}
                                          ;Prototype {protoMnemonic = "LAR", protoOperands = [OpR32,OpR32_M16]}
                                          ;[(EncModrm_reg
                                            ,OperandReadWrite)
                                           ,(EncModrm_rm,OperandReadOnly)]
                                          ;64bit: True
                                          ;legacy: True
                                          ;r32 ← r32/m16 masked by 00FxFF00H} */
             
             ERASM_DECODER_DO_ACTION (2,
                                      Lar,
                                      Just<OpR32>,
                                      Just<EncModrm_reg>,
                                      Just<OpR32_M16>,
                                      Just<EncModrm_rm>,
                                      Nothing,
                                      Nothing);
         }
      case (0x3):
      if (is_data16)
         {
             /* EncodedInstructionDefinition {{[]
                                           ;0F 03 
                                           ;Just Modrm
                                           ;Just RMBoth
                                           ;Nothing
                                           ;[]
                                           ;Just Op16
                                           ;Nothing}
                                          ;Prototype {protoMnemonic = "LSL", protoOperands = [OpR16,OpRM16]}
                                          ;[(EncModrm_reg
                                            ,OperandReadWrite)
                                           ,(EncModrm_rm,OperandReadOnly)]
                                          ;64bit: True
                                          ;legacy: True
                                          ;Load: r16 ← segment limit, selector r16/m16.} */
             
             ERASM_DECODER_DO_ACTION (2,
                                      Lsl,
                                      Just<OpR16>,
                                      Just<EncModrm_reg>,
                                      Just<OpRM16>,
                                      Just<EncModrm_rm>,
                                      Nothing,
                                      Nothing);
         }
      else
         {
             /* EncodedInstructionDefinition {{[]
                                           ;0F 03 
                                           ;Just Modrm
                                           ;Just RMBoth
                                           ;Nothing
                                           ;[]
                                           ;Just Op32
                                           ;Nothing}
                                          ;Prototype {protoMnemonic = "LSL", protoOperands = [OpR32,OpR32_M16]}
                                          ;[(EncModrm_reg
                                            ,OperandReadWrite)
                                           ,(EncModrm_rm,OperandReadOnly)]
                                          ;64bit: True
                                          ;legacy: True
                                          ;Load: r32 ← segment limit, selector r32/m16.} */
             
             ERASM_DECODER_DO_ACTION (2,
                                      Lsl,
                                      Just<OpR32>,
                                      Just<EncModrm_reg>,
                                      Just<OpR32_M16>,
                                      Just<EncModrm_rm>,
                                      Nothing,
                                      Nothing);
         }
      case (0x6):
      {
          /* EncodedInstructionDefinition {{[]
                                        ;0F 06 
                                        ;Nothing
                                        ;Nothing
                                        ;Nothing
                                        ;[]
                                        ;Nothing
                                        ;Nothing}
                                       ;Prototype {protoMnemonic = "CLTS", protoOperands = []}
                                       ;[]
                                       ;64bit: True
                                       ;legacy: True
                                       ;Clears TS flag in CR0.} */
          
          ERASM_DECODER_DO_ACTION (2,
                                   Clts,
                                   Nothing,
                                   Nothing,
                                   Nothing,
                                   Nothing,
                                   Nothing,
                                   Nothing);
      }
      case (0x8):
      {
          /* EncodedInstructionDefinition {{[]
                                        ;0F 08 
                                        ;Nothing
                                        ;Nothing
                                        ;Nothing
                                        ;[]
                                        ;Nothing
                                        ;Nothing}
                                       ;Prototype {protoMnemonic = "INVD", protoOperands = []}
                                       ;[]
                                       ;64bit: True
                                       ;legacy: True
                                       ;Flush internal caches; initiate flushing of external caches.} */
          
          ERASM_DECODER_DO_ACTION (2,
                                   Invd,
                                   Nothing,
                                   Nothing,
                                   Nothing,
                                   Nothing,
                                   Nothing,
                                   Nothing);
      }
      case (0x9):
      {
          /* EncodedInstructionDefinition {{[]
                                        ;0F 09 
                                        ;Nothing
                                        ;Nothing
                                        ;Nothing
                                        ;[]
                                        ;Nothing
                                        ;Nothing}
                                       ;Prototype {protoMnemonic = "WBINVD", protoOperands = []}
                                       ;[]
                                       ;64bit: True
                                       ;legacy: True
                                       ;Write back and flush Internal caches; initiate writing-back and flushing of external caches.} */
          
          ERASM_DECODER_DO_ACTION (2,
                                   Wbinvd,
                                   Nothing,
                                   Nothing,
                                   Nothing,
                                   Nothing,
                                   Nothing,
                                   Nothing);
      }
      case (0xb):
      {
          /* EncodedInstructionDefinition {{[]
                                        ;0F 0B 
                                        ;Nothing
                                        ;Nothing
                                        ;Nothing
                                        ;[]
                                        ;Nothing
                                        ;Nothing}
                                       ;Prototype {protoMnemonic = "UD2", protoOperands = []}
                                       ;[]
                                       ;64bit: True
                                       ;legacy: True
                                       ;Raise invalid opcode exception.} */
          
          ERASM_DECODER_DO_ACTION (2,
                                   Ud2,
                                   Nothing,
                                   Nothing,
                                   Nothing,
                                   Nothing,
                                   Nothing,
                                   Nothing);
      }
      case (0x10):
      if (prefix.repne)
         {
             /* EncodedInstructionDefinition {{[REPNE]
                                           ;0F 10 
                                           ;Just Modrm
                                           ;Just RMBoth
                                           ;Nothing
                                           ;[]
                                           ;Nothing
                                           ;Nothing}
                                          ;Prototype {protoMnemonic = "MOVSD", protoOperands = [OpXMM,OpXMM_M64]}
                                          ;[(EncModrm_reg
                                            ,OperandReadWrite)
                                           ,(EncModrm_rm,OperandReadOnly)]
                                          ;64bit: True
                                          ;legacy: True
                                          ;Move scalar double- precision floating-point value from xmm2/m64 to xmm1 register.} */
             
             ERASM_DECODER_DO_ACTION (2,
                                      Movsd,
                                      Just<OpXMM>,
                                      Just<EncModrm_reg>,
                                      Just<OpXMM_M64>,
                                      Just<EncModrm_rm>,
                                      Nothing,
                                      Nothing);
         }
      else
         if (prefix.rep)
            {
                /* EncodedInstructionDefinition {{[REP]
                                              ;0F 10 
                                              ;Just Modrm
                                              ;Just RMBoth
                                              ;Nothing
                                              ;[]
                                              ;Nothing
                                              ;Nothing}
                                             ;Prototype {protoMnemonic = "MOVSS", protoOperands = [OpXMM,OpXMM_M32]}
                                             ;[(EncModrm_reg
                                               ,OperandReadWrite)
                                              ,(EncModrm_rm,OperandReadOnly)]
                                             ;64bit: True
                                             ;legacy: True
                                             ;Move scalar single-precision floating-point value from xmm2/m32 to xmm1 register.} */
                
                ERASM_DECODER_DO_ACTION (2,
                                         Movss,
                                         Just<OpXMM>,
                                         Just<EncModrm_reg>,
                                         Just<OpXMM_M32>,
                                         Just<EncModrm_rm>,
                                         Nothing,
                                         Nothing);
            }
         else
            if (prefix.operand_size)
               {
                   /* EncodedInstructionDefinition {{[OPERAND_SIZE]
                                                 ;0F 10 
                                                 ;Just Modrm
                                                 ;Just RMBoth
                                                 ;Nothing
                                                 ;[]
                                                 ;Nothing
                                                 ;Nothing}
                                                ;Prototype {protoMnemonic = "MOVUPD", protoOperands = [OpXMM,OpXMM_M128]}
                                                ;[(EncModrm_reg
                                                  ,OperandReadWrite)
                                                 ,(EncModrm_rm,OperandReadOnly)]
                                                ;64bit: True
                                                ;legacy: True
                                                ;Move packed double- precision floating-point values from xmm2/m128 to xmm1.} */
                   
                   ERASM_DECODER_DO_ACTION (2,
                                            Movupd,
                                            Just<OpXMM>,
                                            Just<EncModrm_reg>,
                                            Just<OpXMM_M128>,
                                            Just<EncModrm_rm>,
                                            Nothing,
                                            Nothing);
               }
            else
               {
                   /* EncodedInstructionDefinition {{[]
                                                 ;0F 10 
                                                 ;Just Modrm
                                                 ;Just RMBoth
                                                 ;Nothing
                                                 ;[]
                                                 ;Nothing
                                                 ;Nothing}
                                                ;Prototype {protoMnemonic = "MOVUPS", protoOperands = [OpXMM,OpXMM_M128]}
                                                ;[(EncModrm_reg
                                                  ,OperandReadWrite)
                                                 ,(EncModrm_rm,OperandReadOnly)]
                                                ;64bit: True
                                                ;legacy: True
                                                ;Move packed single- precision floating-point values from xmm2/m128 to xmm1.} */
                   
                   ERASM_DECODER_DO_ACTION (2,
                                            Movups,
                                            Just<OpXMM>,
                                            Just<EncModrm_reg>,
                                            Just<OpXMM_M128>,
                                            Just<EncModrm_rm>,
                                            Nothing,
                                            Nothing);
               }
      case (0x11):
      if (prefix.repne)
         {
             /* EncodedInstructionDefinition {{[REPNE]
                                           ;0F 11 
                                           ;Just Modrm
                                           ;Just RMBoth
                                           ;Nothing
                                           ;[]
                                           ;Nothing
                                           ;Nothing}
                                          ;Prototype {protoMnemonic = "MOVSD", protoOperands = [OpXMM_M64,OpXMM]}
                                          ;[(EncModrm_rm,OperandReadWrite)
                                           ,(EncModrm_reg,OperandReadOnly)]
                                          ;64bit: True
                                          ;legacy: True
                                          ;Move scalar double- precision floating-point value from xmm1 register to xmm2/m64.} */
             
             ERASM_DECODER_DO_ACTION (2,
                                      Movsd,
                                      Just<OpXMM_M64>,
                                      Just<EncModrm_rm>,
                                      Just<OpXMM>,
                                      Just<EncModrm_reg>,
                                      Nothing,
                                      Nothing);
         }
      else
         if (prefix.rep)
            {
                /* EncodedInstructionDefinition {{[REP]
                                              ;0F 11 
                                              ;Just Modrm
                                              ;Just RMBoth
                                              ;Nothing
                                              ;[]
                                              ;Nothing
                                              ;Nothing}
                                             ;Prototype {protoMnemonic = "MOVSS", protoOperands = [OpXMM_M32,OpXMM]}
                                             ;[(EncModrm_rm,OperandReadWrite)
                                              ,(EncModrm_reg,OperandReadOnly)]
                                             ;64bit: True
                                             ;legacy: True
                                             ;Move scalar single-precision floating-point value from xmm1 register to xmm2/m32.} */
                
                ERASM_DECODER_DO_ACTION (2,
                                         Movss,
                                         Just<OpXMM_M32>,
                                         Just<EncModrm_rm>,
                                         Just<OpXMM>,
                                         Just<EncModrm_reg>,
                                         Nothing,
                                         Nothing);
            }
         else
            if (prefix.operand_size)
               {
                   /* EncodedInstructionDefinition {{[OPERAND_SIZE]
                                                 ;0F 11 
                                                 ;Just Modrm
                                                 ;Just RMBoth
                                                 ;Nothing
                                                 ;[]
                                                 ;Nothing
                                                 ;Nothing}
                                                ;Prototype {protoMnemonic = "MOVUPD", protoOperands = [OpXMM_M128,OpXMM]}
                                                ;[(EncModrm_rm,OperandReadWrite)
                                                 ,(EncModrm_reg,OperandReadOnly)]
                                                ;64bit: True
                                                ;legacy: True
                                                ;Move packed double- precision floating-point values from xmm1 to xmm2/m128.} */
                   
                   ERASM_DECODER_DO_ACTION (2,
                                            Movupd,
                                            Just<OpXMM_M128>,
                                            Just<EncModrm_rm>,
                                            Just<OpXMM>,
                                            Just<EncModrm_reg>,
                                            Nothing,
                                            Nothing);
               }
            else
               {
                   /* EncodedInstructionDefinition {{[]
                                                 ;0F 11 
                                                 ;Just Modrm
                                                 ;Just RMBoth
                                                 ;Nothing
                                                 ;[]
                                                 ;Nothing
                                                 ;Nothing}
                                                ;Prototype {protoMnemonic = "MOVUPS", protoOperands = [OpXMM_M128,OpXMM]}
                                                ;[(EncModrm_rm,OperandReadWrite)
                                                 ,(EncModrm_reg,OperandReadOnly)]
                                                ;64bit: True
                                                ;legacy: True
                                                ;Move packed single- precision floating-point values from xmm1 to xmm2/m128.} */
                   
                   ERASM_DECODER_DO_ACTION (2,
                                            Movups,
                                            Just<OpXMM_M128>,
                                            Just<EncModrm_rm>,
                                            Just<OpXMM>,
                                            Just<EncModrm_reg>,
                                            Nothing,
                                            Nothing);
               }
      case (0x12):
      if (modrm_mod3 (p))
         if (prefix.repne)
            {
                /* EncodedInstructionDefinition {{[REPNE]
                                              ;0F 12 
                                              ;Just Modrm
                                              ;Just RMBoth
                                              ;Nothing
                                              ;[]
                                              ;Nothing
                                              ;Nothing}
                                             ;Prototype {protoMnemonic = "MOVDDUP", protoOperands = [OpXMM,OpXMM_M64]}
                                             ;[(EncModrm_reg
                                               ,OperandReadWrite)
                                              ,(EncModrm_rm,OperandReadOnly)]
                                             ;64bit: True
                                             ;legacy: True
                                             ;Move one double-precision floating-point value from the lower 64-bit operand in xmm2/m64 to xmm1 and duplicate.} */
                
                ERASM_DECODER_DO_ACTION (2,
                                         Movddup,
                                         Just<OpXMM>,
                                         Just<EncModrm_reg>,
                                         Just<OpXMM_M64>,
                                         Just<EncModrm_rm>,
                                         Nothing,
                                         Nothing);
            }
         else
            if (prefix.rep)
               {
                   /* EncodedInstructionDefinition {{[REP]
                                                 ;0F 12 
                                                 ;Just Modrm
                                                 ;Just RMBoth
                                                 ;Nothing
                                                 ;[]
                                                 ;Nothing
                                                 ;Nothing}
                                                ;Prototype {protoMnemonic = "MOVSLDUP", protoOperands = [OpXMM,OpXMM_M128]}
                                                ;[(EncModrm_reg
                                                  ,OperandReadWrite)
                                                 ,(EncModrm_rm,OperandReadOnly)]
                                                ;64bit: True
                                                ;legacy: True
                                                ;Move two single-precision floating-point values from the lower 32-bit operand of each qword in xmm2/m128 to xmm1 and duplicate each 32-bit operand to the higher 32-bits of each qword.} */
                   
                   ERASM_DECODER_DO_ACTION (2,
                                            Movsldup,
                                            Just<OpXMM>,
                                            Just<EncModrm_reg>,
                                            Just<OpXMM_M128>,
                                            Just<EncModrm_rm>,
                                            Nothing,
                                            Nothing);
               }
            else
               {
                   /* EncodedInstructionDefinition {{[]
                                                 ;0F 12 
                                                 ;Just Modrm
                                                 ;Just RMRegOnly
                                                 ;Nothing
                                                 ;[]
                                                 ;Nothing
                                                 ;Nothing}
                                                ;Prototype {protoMnemonic = "MOVHLPS", protoOperands = [OpXMM,OpXMM]}
                                                ;[(EncModrm_reg
                                                  ,OperandReadWrite)
                                                 ,(EncModrm_rm,OperandReadOnly)]
                                                ;64bit: True
                                                ;legacy: True
                                                ;Move two packed single- precision floating-point values from high quadword of xmm2 to low quadword of xmm1.} */
                   
                   ERASM_DECODER_DO_ACTION (2,
                                            Movhlps,
                                            Just<OpXMM>,
                                            Just<EncModrm_reg>,
                                            Just<OpXMM>,
                                            Just<EncModrm_rm_reg>,
                                            Nothing,
                                            Nothing);
               }
      else
         if (prefix.repne)
            {
                /* EncodedInstructionDefinition {{[REPNE]
                                              ;0F 12 
                                              ;Just Modrm
                                              ;Just RMBoth
                                              ;Nothing
                                              ;[]
                                              ;Nothing
                                              ;Nothing}
                                             ;Prototype {protoMnemonic = "MOVDDUP", protoOperands = [OpXMM,OpXMM_M64]}
                                             ;[(EncModrm_reg
                                               ,OperandReadWrite)
                                              ,(EncModrm_rm,OperandReadOnly)]
                                             ;64bit: True
                                             ;legacy: True
                                             ;Move one double-precision floating-point value from the lower 64-bit operand in xmm2/m64 to xmm1 and duplicate.} */
                
                ERASM_DECODER_DO_ACTION (2,
                                         Movddup,
                                         Just<OpXMM>,
                                         Just<EncModrm_reg>,
                                         Just<OpXMM_M64>,
                                         Just<EncModrm_rm>,
                                         Nothing,
                                         Nothing);
            }
         else
            if (prefix.rep)
               {
                   /* EncodedInstructionDefinition {{[REP]
                                                 ;0F 12 
                                                 ;Just Modrm
                                                 ;Just RMBoth
                                                 ;Nothing
                                                 ;[]
                                                 ;Nothing
                                                 ;Nothing}
                                                ;Prototype {protoMnemonic = "MOVSLDUP", protoOperands = [OpXMM,OpXMM_M128]}
                                                ;[(EncModrm_reg
                                                  ,OperandReadWrite)
                                                 ,(EncModrm_rm,OperandReadOnly)]
                                                ;64bit: True
                                                ;legacy: True
                                                ;Move two single-precision floating-point values from the lower 32-bit operand of each qword in xmm2/m128 to xmm1 and duplicate each 32-bit operand to the higher 32-bits of each qword.} */
                   
                   ERASM_DECODER_DO_ACTION (2,
                                            Movsldup,
                                            Just<OpXMM>,
                                            Just<EncModrm_reg>,
                                            Just<OpXMM_M128>,
                                            Just<EncModrm_rm>,
                                            Nothing,
                                            Nothing);
               }
            else
               if (prefix.operand_size)
                  {
                      /* EncodedInstructionDefinition {{[OPERAND_SIZE]
                                                    ;0F 12 
                                                    ;Just Modrm
                                                    ;Just RMMemOnly
                                                    ;Nothing
                                                    ;[]
                                                    ;Nothing
                                                    ;Nothing}
                                                   ;Prototype {protoMnemonic = "MOVLPD", protoOperands = [OpXMM,OpM64]}
                                                   ;[(EncModrm_reg
                                                     ,OperandReadWrite)
                                                    ,(EncModrm_rm,OperandReadOnly)]
                                                   ;64bit: True
                                                   ;legacy: True
                                                   ;Move double-precision floating-point value from m64 to low quadword of xmm register.} */
                      
                      ERASM_DECODER_DO_ACTION (2,
                                               Movlpd,
                                               Just<OpXMM>,
                                               Just<EncModrm_reg>,
                                               Just<OpM64>,
                                               Just<EncModrm_rm_mem>,
                                               Nothing,
                                               Nothing);
                  }
               else
                  {
                      /* EncodedInstructionDefinition {{[]
                                                    ;0F 12 
                                                    ;Just Modrm
                                                    ;Just RMMemOnly
                                                    ;Nothing
                                                    ;[]
                                                    ;Nothing
                                                    ;Nothing}
                                                   ;Prototype {protoMnemonic = "MOVLPS", protoOperands = [OpXMM,OpM64]}
                                                   ;[(EncModrm_reg
                                                     ,OperandReadWrite)
                                                    ,(EncModrm_rm,OperandReadOnly)]
                                                   ;64bit: True
                                                   ;legacy: True
                                                   ;Move two packed single- precision floating-point values from m64 to low quadword of xmm.} */
                      
                      ERASM_DECODER_DO_ACTION (2,
                                               Movlps,
                                               Just<OpXMM>,
                                               Just<EncModrm_reg>,
                                               Just<OpM64>,
                                               Just<EncModrm_rm_mem>,
                                               Nothing,
                                               Nothing);
                  }
      case (0x13):
      if (!modrm_mod3 (p))
         if (prefix.operand_size)
            {
                /* EncodedInstructionDefinition {{[OPERAND_SIZE]
                                              ;0F 13 
                                              ;Just Modrm
                                              ;Just RMMemOnly
                                              ;Nothing
                                              ;[]
                                              ;Nothing
                                              ;Nothing}
                                             ;Prototype {protoMnemonic = "MOVLPD", protoOperands = [OpM64,OpXMM]}
                                             ;[(EncModrm_rm,OperandReadWrite)
                                              ,(EncModrm_reg,OperandReadOnly)]
                                             ;64bit: True
                                             ;legacy: True
                                             ;Move double-precision floating-point nvalue from low quadword of xmm register to m64.} */
                
                ERASM_DECODER_DO_ACTION (2,
                                         Movlpd,
                                         Just<OpM64>,
                                         Just<EncModrm_rm_mem>,
                                         Just<OpXMM>,
                                         Just<EncModrm_reg>,
                                         Nothing,
                                         Nothing);
            }
         else
            {
                /* EncodedInstructionDefinition {{[]
                                              ;0F 13 
                                              ;Just Modrm
                                              ;Just RMMemOnly
                                              ;Nothing
                                              ;[]
                                              ;Nothing
                                              ;Nothing}
                                             ;Prototype {protoMnemonic = "MOVLPS", protoOperands = [OpM64,OpXMM]}
                                             ;[(EncModrm_rm,OperandReadWrite)
                                              ,(EncModrm_reg,OperandReadOnly)]
                                             ;64bit: True
                                             ;legacy: True
                                             ;Move two packed single- precision floating-point values from low quadword of xmm to m64.} */
                
                ERASM_DECODER_DO_ACTION (2,
                                         Movlps,
                                         Just<OpM64>,
                                         Just<EncModrm_rm_mem>,
                                         Just<OpXMM>,
                                         Just<EncModrm_reg>,
                                         Nothing,
                                         Nothing);
            }
      else
         goto decode_error;
      case (0x14):
      if (prefix.operand_size)
         {
             /* EncodedInstructionDefinition {{[OPERAND_SIZE]
                                           ;0F 14 
                                           ;Just Modrm
                                           ;Just RMBoth
                                           ;Nothing
                                           ;[]
                                           ;Nothing
                                           ;Nothing}
                                          ;Prototype {protoMnemonic = "UNPCKLPD", protoOperands = [OpXMM,OpXMM_M128]}
                                          ;[(EncModrm_reg
                                            ,OperandReadWrite)
                                           ,(EncModrm_rm,OperandReadOnly)]
                                          ;64bit: True
                                          ;legacy: True
                                          ;Unpacks and Interleaves double-precision floating- point values from low quadwords of xmm1 and xmm2/m128.} */
             
             ERASM_DECODER_DO_ACTION (2,
                                      Unpcklpd,
                                      Just<OpXMM>,
                                      Just<EncModrm_reg>,
                                      Just<OpXMM_M128>,
                                      Just<EncModrm_rm>,
                                      Nothing,
                                      Nothing);
         }
      else
         {
             /* EncodedInstructionDefinition {{[]
                                           ;0F 14 
                                           ;Just Modrm
                                           ;Just RMBoth
                                           ;Nothing
                                           ;[]
                                           ;Nothing
                                           ;Nothing}
                                          ;Prototype {protoMnemonic = "UNPCKLPS", protoOperands = [OpXMM,OpXMM_M128]}
                                          ;[(EncModrm_reg
                                            ,OperandReadWrite)
                                           ,(EncModrm_rm,OperandReadOnly)]
                                          ;64bit: True
                                          ;legacy: True
                                          ;Unpacks and Interleaves single-precision floating- point values from low quadwords of xmm1 and xmm2/mem into xmm1.} */
             
             ERASM_DECODER_DO_ACTION (2,
                                      Unpcklps,
                                      Just<OpXMM>,
                                      Just<EncModrm_reg>,
                                      Just<OpXMM_M128>,
                                      Just<EncModrm_rm>,
                                      Nothing,
                                      Nothing);
         }
      case (0x15):
      if (prefix.operand_size)
         {
             /* EncodedInstructionDefinition {{[OPERAND_SIZE]
                                           ;0F 15 
                                           ;Just Modrm
                                           ;Just RMBoth
                                           ;Nothing
                                           ;[]
                                           ;Nothing
                                           ;Nothing}
                                          ;Prototype {protoMnemonic = "UNPCKHPD", protoOperands = [OpXMM,OpXMM_M128]}
                                          ;[(EncModrm_reg
                                            ,OperandReadWrite)
                                           ,(EncModrm_rm,OperandReadOnly)]
                                          ;64bit: True
                                          ;legacy: True
                                          ;Unpacks and Interleaves double-precision floating- point values from high quadwords of xmm1 and xmm2/m128.} */
             
             ERASM_DECODER_DO_ACTION (2,
                                      Unpckhpd,
                                      Just<OpXMM>,
                                      Just<EncModrm_reg>,
                                      Just<OpXMM_M128>,
                                      Just<EncModrm_rm>,
                                      Nothing,
                                      Nothing);
         }
      else
         {
             /* EncodedInstructionDefinition {{[]
                                           ;0F 15 
                                           ;Just Modrm
                                           ;Just RMBoth
                                           ;Nothing
                                           ;[]
                                           ;Nothing
                                           ;Nothing}
                                          ;Prototype {protoMnemonic = "UNPCKHPS", protoOperands = [OpXMM,OpXMM_M128]}
                                          ;[(EncModrm_reg
                                            ,OperandReadWrite)
                                           ,(EncModrm_rm,OperandReadOnly)]
                                          ;64bit: True
                                          ;legacy: True
                                          ;Unpacks and Interleaves single-precision floating- point values from high quadwords of xmm1 and xmm2/mem into xmm1.} */
             
             ERASM_DECODER_DO_ACTION (2,
                                      Unpckhps,
                                      Just<OpXMM>,
                                      Just<EncModrm_reg>,
                                      Just<OpXMM_M128>,
                                      Just<EncModrm_rm>,
                                      Nothing,
                                      Nothing);
         }
      case (0x16):
      if (modrm_mod3 (p))
         if (prefix.rep)
            {
                /* EncodedInstructionDefinition {{[REP]
                                              ;0F 16 
                                              ;Just Modrm
                                              ;Just RMBoth
                                              ;Nothing
                                              ;[]
                                              ;Nothing
                                              ;Nothing}
                                             ;Prototype {protoMnemonic = "MOVSHDUP", protoOperands = [OpXMM,OpXMM_M128]}
                                             ;[(EncModrm_reg
                                               ,OperandReadWrite)
                                              ,(EncModrm_rm,OperandReadOnly)]
                                             ;64bit: True
                                             ;legacy: True
                                             ;Move two single-precision floating-point values from the higher 32-bit operand of each qword in xmm2/m128 to xmm1 and duplicate each 32-bit operand to the lower 32-bits of each qword.} */
                
                ERASM_DECODER_DO_ACTION (2,
                                         Movshdup,
                                         Just<OpXMM>,
                                         Just<EncModrm_reg>,
                                         Just<OpXMM_M128>,
                                         Just<EncModrm_rm>,
                                         Nothing,
                                         Nothing);
            }
         else
            {
                /* EncodedInstructionDefinition {{[]
                                              ;0F 16 
                                              ;Just Modrm
                                              ;Just RMRegOnly
                                              ;Nothing
                                              ;[]
                                              ;Nothing
                                              ;Nothing}
                                             ;Prototype {protoMnemonic = "MOVLHPS", protoOperands = [OpXMM,OpXMM]}
                                             ;[(EncModrm_reg
                                               ,OperandReadWrite)
                                              ,(EncModrm_rm,OperandReadOnly)]
                                             ;64bit: True
                                             ;legacy: True
                                             ;Move two packed single- precision floating-point values from low quadword of xmm2 to high quadword of xmm1.} */
                
                ERASM_DECODER_DO_ACTION (2,
                                         Movlhps,
                                         Just<OpXMM>,
                                         Just<EncModrm_reg>,
                                         Just<OpXMM>,
                                         Just<EncModrm_rm_reg>,
                                         Nothing,
                                         Nothing);
            }
      else
         if (prefix.rep)
            {
                /* EncodedInstructionDefinition {{[REP]
                                              ;0F 16 
                                              ;Just Modrm
                                              ;Just RMBoth
                                              ;Nothing
                                              ;[]
                                              ;Nothing
                                              ;Nothing}
                                             ;Prototype {protoMnemonic = "MOVSHDUP", protoOperands = [OpXMM,OpXMM_M128]}
                                             ;[(EncModrm_reg
                                               ,OperandReadWrite)
                                              ,(EncModrm_rm,OperandReadOnly)]
                                             ;64bit: True
                                             ;legacy: True
                                             ;Move two single-precision floating-point values from the higher 32-bit operand of each qword in xmm2/m128 to xmm1 and duplicate each 32-bit operand to the lower 32-bits of each qword.} */
                
                ERASM_DECODER_DO_ACTION (2,
                                         Movshdup,
                                         Just<OpXMM>,
                                         Just<EncModrm_reg>,
                                         Just<OpXMM_M128>,
                                         Just<EncModrm_rm>,
                                         Nothing,
                                         Nothing);
            }
         else
            if (prefix.operand_size)
               {
                   /* EncodedInstructionDefinition {{[OPERAND_SIZE]
                                                 ;0F 16 
                                                 ;Just Modrm
                                                 ;Just RMMemOnly
                                                 ;Nothing
                                                 ;[]
                                                 ;Nothing
                                                 ;Nothing}
                                                ;Prototype {protoMnemonic = "MOVHPD", protoOperands = [OpXMM,OpM64]}
                                                ;[(EncModrm_reg
                                                  ,OperandReadWrite)
                                                 ,(EncModrm_rm,OperandReadOnly)]
                                                ;64bit: True
                                                ;legacy: True
                                                ;Move double-precision floating-point value from m64 to high quadword of xmm.} */
                   
                   ERASM_DECODER_DO_ACTION (2,
                                            Movhpd,
                                            Just<OpXMM>,
                                            Just<EncModrm_reg>,
                                            Just<OpM64>,
                                            Just<EncModrm_rm_mem>,
                                            Nothing,
                                            Nothing);
               }
            else
               {
                   /* EncodedInstructionDefinition {{[]
                                                 ;0F 16 
                                                 ;Just Modrm
                                                 ;Just RMMemOnly
                                                 ;Nothing
                                                 ;[]
                                                 ;Nothing
                                                 ;Nothing}
                                                ;Prototype {protoMnemonic = "MOVHPS", protoOperands = [OpXMM,OpM64]}
                                                ;[(EncModrm_reg
                                                  ,OperandReadWrite)
                                                 ,(EncModrm_rm,OperandReadOnly)]
                                                ;64bit: True
                                                ;legacy: True
                                                ;Move two packed single- precision floating-point values from m64 to high quadword of xmm.} */
                   
                   ERASM_DECODER_DO_ACTION (2,
                                            Movhps,
                                            Just<OpXMM>,
                                            Just<EncModrm_reg>,
                                            Just<OpM64>,
                                            Just<EncModrm_rm_mem>,
                                            Nothing,
                                            Nothing);
               }
      case (0x17):
      if (!modrm_mod3 (p))
         if (prefix.operand_size)
            {
                /* EncodedInstructionDefinition {{[OPERAND_SIZE]
                                              ;0F 17 
                                              ;Just Modrm
                                              ;Just RMMemOnly
                                              ;Nothing
                                              ;[]
                                              ;Nothing
                                              ;Nothing}
                                             ;Prototype {protoMnemonic = "MOVHPD", protoOperands = [OpM64,OpXMM]}
                                             ;[(EncModrm_rm,OperandReadWrite)
                                              ,(EncModrm_reg,OperandReadOnly)]
                                             ;64bit: True
                                             ;legacy: True
                                             ;Move double-precision floating-point value from high quadword of xmm to m64.} */
                
                ERASM_DECODER_DO_ACTION (2,
                                         Movhpd,
                                         Just<OpM64>,
                                         Just<EncModrm_rm_mem>,
                                         Just<OpXMM>,
                                         Just<EncModrm_reg>,
                                         Nothing,
                                         Nothing);
            }
         else
            {
                /* EncodedInstructionDefinition {{[]
                                              ;0F 17 
                                              ;Just Modrm
                                              ;Just RMMemOnly
                                              ;Nothing
                                              ;[]
                                              ;Nothing
                                              ;Nothing}
                                             ;Prototype {protoMnemonic = "MOVHPS", protoOperands = [OpM64,OpXMM]}
                                             ;[(EncModrm_rm,OperandReadWrite)
                                              ,(EncModrm_reg,OperandReadOnly)]
                                             ;64bit: True
                                             ;legacy: True
                                             ;Move two packed single- precision floating-point values from high quadword of xmm to m64.} */
                
                ERASM_DECODER_DO_ACTION (2,
                                         Movhps,
                                         Just<OpM64>,
                                         Just<EncModrm_rm_mem>,
                                         Just<OpXMM>,
                                         Just<EncModrm_reg>,
                                         Nothing,
                                         Nothing);
            }
      else
         goto decode_error;
      case (0x18):
      if (!modrm_mod3 (p))
         switch (modrm_reg_op (p)) {
            case (0):
            {
                /* EncodedInstructionDefinition {{[]
                                              ;0F 18 
                                              ;Just (ModrmDigit 0)
                                              ;Just RMMemOnly
                                              ;Nothing
                                              ;[]
                                              ;Nothing
                                              ;Nothing}
                                             ;Prototype {protoMnemonic = "PREFETCHNTA", protoOperands = [OpM8]}
                                             ;[(EncModrm_rm,OperandReadOnly)]
                                             ;64bit: True
                                             ;legacy: True
                                             ;Move data from m8 closer to the processor using NTA hint.} */
                
                ERASM_DECODER_DO_ACTION (2,
                                         Prefetchnta,
                                         Just<OpM8>,
                                         Just<EncModrm_rm_mem>,
                                         Nothing,
                                         Nothing,
                                         Nothing,
                                         Nothing);
            }
            case (1):
            {
                /* EncodedInstructionDefinition {{[]
                                              ;0F 18 
                                              ;Just (ModrmDigit 1)
                                              ;Just RMMemOnly
                                              ;Nothing
                                              ;[]
                                              ;Nothing
                                              ;Nothing}
                                             ;Prototype {protoMnemonic = "PREFETCHT0", protoOperands = [OpM8]}
                                             ;[(EncModrm_rm,OperandReadOnly)]
                                             ;64bit: True
                                             ;legacy: True
                                             ;Move data from m8 closer to the processor using T0 hint.} */
                
                ERASM_DECODER_DO_ACTION (2,
                                         Prefetcht0,
                                         Just<OpM8>,
                                         Just<EncModrm_rm_mem>,
                                         Nothing,
                                         Nothing,
                                         Nothing,
                                         Nothing);
            }
            case (2):
            {
                /* EncodedInstructionDefinition {{[]
                                              ;0F 18 
                                              ;Just (ModrmDigit 2)
                                              ;Just RMMemOnly
                                              ;Nothing
                                              ;[]
                                              ;Nothing
                                              ;Nothing}
                                             ;Prototype {protoMnemonic = "PREFETCHT1", protoOperands = [OpM8]}
                                             ;[(EncModrm_rm,OperandReadOnly)]
                                             ;64bit: True
                                             ;legacy: True
                                             ;Move data from m8 closer to the processor using T1 hint.} */
                
                ERASM_DECODER_DO_ACTION (2,
                                         Prefetcht1,
                                         Just<OpM8>,
                                         Just<EncModrm_rm_mem>,
                                         Nothing,
                                         Nothing,
                                         Nothing,
                                         Nothing);
            }
            case (3):
            {
                /* EncodedInstructionDefinition {{[]
                                              ;0F 18 
                                              ;Just (ModrmDigit 3)
                                              ;Just RMMemOnly
                                              ;Nothing
                                              ;[]
                                              ;Nothing
                                              ;Nothing}
                                             ;Prototype {protoMnemonic = "PREFETCHT2", protoOperands = [OpM8]}
                                             ;[(EncModrm_rm,OperandReadOnly)]
                                             ;64bit: True
                                             ;legacy: True
                                             ;Move data from m8 closer to the processor using T2 hint.} */
                
                ERASM_DECODER_DO_ACTION (2,
                                         Prefetcht2,
                                         Just<OpM8>,
                                         Just<EncModrm_rm_mem>,
                                         Nothing,
                                         Nothing,
                                         Nothing,
                                         Nothing);
            }
            
         }
      else
         goto decode_error;
      case (0x1f):
      switch (modrm_reg_op (p)) {
         case (0):
         if (is_data16)
            {
                /* EncodedInstructionDefinition {{[]
                                              ;0F 1F 
                                              ;Just (ModrmDigit 0)
                                              ;Just RMBoth
                                              ;Nothing
                                              ;[]
                                              ;Just Op16
                                              ;Nothing}
                                             ;Prototype {protoMnemonic = "NOP", protoOperands = [OpRM16]}
                                             ;[(EncModrm_rm,OperandReadOnly)]
                                             ;64bit: True
                                             ;legacy: True
                                             ;Multi-byte no-operation instruction.} */
                
                ERASM_DECODER_DO_ACTION (2,
                                         Nop,
                                         Just<OpRM16>,
                                         Just<EncModrm_rm>,
                                         Nothing,
                                         Nothing,
                                         Nothing,
                                         Nothing);
            }
         else
            {
                /* EncodedInstructionDefinition {{[]
                                              ;0F 1F 
                                              ;Just (ModrmDigit 0)
                                              ;Just RMBoth
                                              ;Nothing
                                              ;[]
                                              ;Just Op32
                                              ;Nothing}
                                             ;Prototype {protoMnemonic = "NOP", protoOperands = [OpRM32]}
                                             ;[(EncModrm_rm,OperandReadOnly)]
                                             ;64bit: True
                                             ;legacy: True
                                             ;Multi-byte no-operation instruction.} */
                
                ERASM_DECODER_DO_ACTION (2,
                                         Nop,
                                         Just<OpRM32>,
                                         Just<EncModrm_rm>,
                                         Nothing,
                                         Nothing,
                                         Nothing,
                                         Nothing);
            }
         
      }
      case (0x20):
      if (modrm_mod3 (p))
         {
             /* EncodedInstructionDefinition {{[]
                                           ;0F 20 
                                           ;Just Modrm
                                           ;Just RMRegOnly
                                           ;Nothing
                                           ;[]
                                           ;Nothing
                                           ;Nothing}
                                          ;Prototype {protoMnemonic = "MOV", protoOperands = [OpR32,OpCR]}
                                          ;[(EncModrm_rm,OperandReadWrite)
                                           ,(EncModrm_reg
                                            ,OperandReadWrite)]
                                          ;64bit: False
                                          ;legacy: True
                                          ;Move control register to r32} */
             
             ERASM_DECODER_DO_ACTION (2,
                                      Mov,
                                      Just<OpR32>,
                                      Just<EncModrm_rm_reg>,
                                      Just<OpCR>,
                                      Just<EncModrm_reg>,
                                      Nothing,
                                      Nothing);
         }
      else
         goto decode_error;
      case (0x21):
      if (modrm_mod3 (p))
         {
             /* EncodedInstructionDefinition {{[]
                                           ;0F 21 
                                           ;Just Modrm
                                           ;Just RMRegOnly
                                           ;Nothing
                                           ;[]
                                           ;Nothing
                                           ;Nothing}
                                          ;Prototype {protoMnemonic = "MOV", protoOperands = [OpR32,OpDR]}
                                          ;[(EncModrm_rm,OperandReadWrite)
                                           ,(EncModrm_reg
                                            ,OperandReadWrite)]
                                          ;64bit: False
                                          ;legacy: True
                                          ;Move debug register to r32} */
             
             ERASM_DECODER_DO_ACTION (2,
                                      Mov,
                                      Just<OpR32>,
                                      Just<EncModrm_rm_reg>,
                                      Just<OpDR>,
                                      Just<EncModrm_reg>,
                                      Nothing,
                                      Nothing);
         }
      else
         goto decode_error;
      case (0x22):
      if (modrm_mod3 (p))
         {
             /* EncodedInstructionDefinition {{[]
                                           ;0F 22 
                                           ;Just Modrm
                                           ;Just RMRegOnly
                                           ;Nothing
                                           ;[]
                                           ;Nothing
                                           ;Nothing}
                                          ;Prototype {protoMnemonic = "MOV", protoOperands = [OpCR,OpR32]}
                                          ;[(EncModrm_reg
                                            ,OperandReadWrite)
                                           ,(EncModrm_rm,OperandReadOnly)]
                                          ;64bit: False
                                          ;legacy: True
                                          ;Move r32 to control register} */
             
             ERASM_DECODER_DO_ACTION (2,
                                      Mov,
                                      Just<OpCR>,
                                      Just<EncModrm_reg>,
                                      Just<OpR32>,
                                      Just<EncModrm_rm_reg>,
                                      Nothing,
                                      Nothing);
         }
      else
         goto decode_error;
      case (0x23):
      if (modrm_mod3 (p))
         {
             /* EncodedInstructionDefinition {{[]
                                           ;0F 23 
                                           ;Just Modrm
                                           ;Just RMRegOnly
                                           ;Nothing
                                           ;[]
                                           ;Nothing
                                           ;Nothing}
                                          ;Prototype {protoMnemonic = "MOV", protoOperands = [OpDR,OpR32]}
                                          ;[(EncModrm_reg
                                            ,OperandReadWrite)
                                           ,(EncModrm_rm,OperandReadOnly)]
                                          ;64bit: False
                                          ;legacy: True
                                          ;Move r32 to debug register} */
             
             ERASM_DECODER_DO_ACTION (2,
                                      Mov,
                                      Just<OpDR>,
                                      Just<EncModrm_reg>,
                                      Just<OpR32>,
                                      Just<EncModrm_rm_reg>,
                                      Nothing,
                                      Nothing);
         }
      else
         goto decode_error;
      case (0x28):
      if (prefix.operand_size)
         {
             /* EncodedInstructionDefinition {{[OPERAND_SIZE]
                                           ;0F 28 
                                           ;Just Modrm
                                           ;Just RMBoth
                                           ;Nothing
                                           ;[]
                                           ;Nothing
                                           ;Nothing}
                                          ;Prototype {protoMnemonic = "MOVAPD", protoOperands = [OpXMM,OpXMM_M128]}
                                          ;[(EncModrm_reg
                                            ,OperandReadWrite)
                                           ,(EncModrm_rm,OperandReadOnly)]
                                          ;64bit: True
                                          ;legacy: True
                                          ;Move packed double- precision floating-point values from xmm2/m128 to xmm1.} */
             
             ERASM_DECODER_DO_ACTION (2,
                                      Movapd,
                                      Just<OpXMM>,
                                      Just<EncModrm_reg>,
                                      Just<OpXMM_M128>,
                                      Just<EncModrm_rm>,
                                      Nothing,
                                      Nothing);
         }
      else
         {
             /* EncodedInstructionDefinition {{[]
                                           ;0F 28 
                                           ;Just Modrm
                                           ;Just RMBoth
                                           ;Nothing
                                           ;[]
                                           ;Nothing
                                           ;Nothing}
                                          ;Prototype {protoMnemonic = "MOVAPS", protoOperands = [OpXMM,OpXMM_M128]}
                                          ;[(EncModrm_reg
                                            ,OperandReadWrite)
                                           ,(EncModrm_rm,OperandReadOnly)]
                                          ;64bit: True
                                          ;legacy: True
                                          ;Move packed single- precision floating-point values from xmm2/m128 to xmm1.} */
             
             ERASM_DECODER_DO_ACTION (2,
                                      Movaps,
                                      Just<OpXMM>,
                                      Just<EncModrm_reg>,
                                      Just<OpXMM_M128>,
                                      Just<EncModrm_rm>,
                                      Nothing,
                                      Nothing);
         }
      case (0x29):
      if (prefix.operand_size)
         {
             /* EncodedInstructionDefinition {{[OPERAND_SIZE]
                                           ;0F 29 
                                           ;Just Modrm
                                           ;Just RMBoth
                                           ;Nothing
                                           ;[]
                                           ;Nothing
                                           ;Nothing}
                                          ;Prototype {protoMnemonic = "MOVAPD", protoOperands = [OpXMM_M128,OpXMM]}
                                          ;[(EncModrm_rm,OperandReadWrite)
                                           ,(EncModrm_reg,OperandReadOnly)]
                                          ;64bit: True
                                          ;legacy: True
                                          ;Move packed double- precision floating-point values from xmm1 to xmm2/m128.} */
             
             ERASM_DECODER_DO_ACTION (2,
                                      Movapd,
                                      Just<OpXMM_M128>,
                                      Just<EncModrm_rm>,
                                      Just<OpXMM>,
                                      Just<EncModrm_reg>,
                                      Nothing,
                                      Nothing);
         }
      else
         {
             /* EncodedInstructionDefinition {{[]
                                           ;0F 29 
                                           ;Just Modrm
                                           ;Just RMBoth
                                           ;Nothing
                                           ;[]
                                           ;Nothing
                                           ;Nothing}
                                          ;Prototype {protoMnemonic = "MOVAPS", protoOperands = [OpXMM_M128,OpXMM]}
                                          ;[(EncModrm_rm,OperandReadWrite)
                                           ,(EncModrm_reg,OperandReadOnly)]
                                          ;64bit: True
                                          ;legacy: True
                                          ;Move packed single- precision floating-point values from xmm1 to xmm2/m128.} */
             
             ERASM_DECODER_DO_ACTION (2,
                                      Movaps,
                                      Just<OpXMM_M128>,
                                      Just<EncModrm_rm>,
                                      Just<OpXMM>,
                                      Just<EncModrm_reg>,
                                      Nothing,
                                      Nothing);
         }
      case (0x2a):
      if (prefix.repne)
         {
             /* EncodedInstructionDefinition {{[REPNE]
                                           ;0F 2A 
                                           ;Just Modrm
                                           ;Just RMBoth
                                           ;Nothing
                                           ;[]
                                           ;Nothing
                                           ;Nothing}
                                          ;Prototype {protoMnemonic = "CVTSI2SD", protoOperands = [OpXMM,OpRM32]}
                                          ;[(EncModrm_reg
                                            ,OperandReadWrite)
                                           ,(EncModrm_rm,OperandReadOnly)]
                                          ;64bit: True
                                          ;legacy: True
                                          ;Convert one signed doubleword integer from r/m32 to one double- precision floating-point value in xmm.} */
             
             ERASM_DECODER_DO_ACTION (2,
                                      Cvtsi2sd,
                                      Just<OpXMM>,
                                      Just<EncModrm_reg>,
                                      Just<OpRM32>,
                                      Just<EncModrm_rm>,
                                      Nothing,
                                      Nothing);
         }
      else
         if (prefix.rep)
            {
                /* EncodedInstructionDefinition {{[REP]
                                              ;0F 2A 
                                              ;Just Modrm
                                              ;Just RMBoth
                                              ;Nothing
                                              ;[]
                                              ;Nothing
                                              ;Nothing}
                                             ;Prototype {protoMnemonic = "CVTSI2SS", protoOperands = [OpXMM,OpRM32]}
                                             ;[(EncModrm_reg
                                               ,OperandReadWrite)
                                              ,(EncModrm_rm,OperandReadOnly)]
                                             ;64bit: True
                                             ;legacy: True
                                             ;Convert one signed doubleword integer from r/m32 to one single- precision floating-point value in xmm.} */
                
                ERASM_DECODER_DO_ACTION (2,
                                         Cvtsi2ss,
                                         Just<OpXMM>,
                                         Just<EncModrm_reg>,
                                         Just<OpRM32>,
                                         Just<EncModrm_rm>,
                                         Nothing,
                                         Nothing);
            }
         else
            if (prefix.operand_size)
               {
                   /* EncodedInstructionDefinition {{[OPERAND_SIZE]
                                                 ;0F 2A 
                                                 ;Just Modrm
                                                 ;Just RMBoth
                                                 ;Nothing
                                                 ;[]
                                                 ;Nothing
                                                 ;Nothing}
                                                ;Prototype {protoMnemonic = "CVTPI2PD", protoOperands = [OpXMM,OpMM_M64]}
                                                ;[(EncModrm_reg
                                                  ,OperandReadWrite)
                                                 ,(EncModrm_rm,OperandReadOnly)]
                                                ;64bit: True
                                                ;legacy: True
                                                ;Convert two packed signed doubleword integers from mm/mem64 to two packed double-precision floating- point values in xmm.} */
                   
                   ERASM_DECODER_DO_ACTION (2,
                                            Cvtpi2pd,
                                            Just<OpXMM>,
                                            Just<EncModrm_reg>,
                                            Just<OpMM_M64>,
                                            Just<EncModrm_rm>,
                                            Nothing,
                                            Nothing);
               }
            else
               {
                   /* EncodedInstructionDefinition {{[]
                                                 ;0F 2A 
                                                 ;Just Modrm
                                                 ;Just RMBoth
                                                 ;Nothing
                                                 ;[]
                                                 ;Nothing
                                                 ;Nothing}
                                                ;Prototype {protoMnemonic = "CVTPI2PS", protoOperands = [OpXMM,OpMM_M64]}
                                                ;[(EncModrm_reg
                                                  ,OperandReadWrite)
                                                 ,(EncModrm_rm,OperandReadOnly)]
                                                ;64bit: True
                                                ;legacy: True
                                                ;Convert two signed doubleword integers from mm/m64 to two single- precision floating-point values in xmm.} */
                   
                   ERASM_DECODER_DO_ACTION (2,
                                            Cvtpi2ps,
                                            Just<OpXMM>,
                                            Just<EncModrm_reg>,
                                            Just<OpMM_M64>,
                                            Just<EncModrm_rm>,
                                            Nothing,
                                            Nothing);
               }
      case (0x2b):
      if (!modrm_mod3 (p))
         if (prefix.operand_size)
            {
                /* EncodedInstructionDefinition {{[OPERAND_SIZE]
                                              ;0F 2B 
                                              ;Just Modrm
                                              ;Just RMMemOnly
                                              ;Nothing
                                              ;[]
                                              ;Nothing
                                              ;Nothing}
                                             ;Prototype {protoMnemonic = "MOVNTPD", protoOperands = [OpM128Xmm,OpXMM]}
                                             ;[(EncModrm_rm,OperandReadWrite)
                                              ,(EncModrm_reg,OperandReadOnly)]
                                             ;64bit: True
                                             ;legacy: True
                                             ;Move packed double- precision floating-point values from xmm to m128 using non-temporal hint.} */
                
                ERASM_DECODER_DO_ACTION (2,
                                         Movntpd,
                                         Just<OpM128Xmm>,
                                         Just<EncModrm_rm_mem>,
                                         Just<OpXMM>,
                                         Just<EncModrm_reg>,
                                         Nothing,
                                         Nothing);
            }
         else
            {
                /* EncodedInstructionDefinition {{[]
                                              ;0F 2B 
                                              ;Just Modrm
                                              ;Just RMMemOnly
                                              ;Nothing
                                              ;[]
                                              ;Nothing
                                              ;Nothing}
                                             ;Prototype {protoMnemonic = "MOVNTPS", protoOperands = [OpM128Xmm,OpXMM]}
                                             ;[(EncModrm_rm,OperandReadWrite)
                                              ,(EncModrm_reg,OperandReadOnly)]
                                             ;64bit: True
                                             ;legacy: True
                                             ;Move packed single- precision floating-point values from xmm to m128 using non-temporal hint.} */
                
                ERASM_DECODER_DO_ACTION (2,
                                         Movntps,
                                         Just<OpM128Xmm>,
                                         Just<EncModrm_rm_mem>,
                                         Just<OpXMM>,
                                         Just<EncModrm_reg>,
                                         Nothing,
                                         Nothing);
            }
      else
         goto decode_error;
      case (0x2c):
      if (prefix.repne)
         {
             /* EncodedInstructionDefinition {{[REPNE]
                                           ;0F 2C 
                                           ;Just Modrm
                                           ;Just RMBoth
                                           ;Nothing
                                           ;[]
                                           ;Nothing
                                           ;Nothing}
                                          ;Prototype {protoMnemonic = "CVTTSD2SI", protoOperands = [OpR32,OpXMM_M64]}
                                          ;[(EncModrm_reg
                                            ,OperandReadWrite)
                                           ,(EncModrm_rm,OperandReadOnly)]
                                          ;64bit: True
                                          ;legacy: True
                                          ;Convert one double- precision floating-point value from xmm/m64 to one signed doubleword integer in r32 using truncation.} */
             
             ERASM_DECODER_DO_ACTION (2,
                                      Cvttsd2si,
                                      Just<OpR32>,
                                      Just<EncModrm_reg>,
                                      Just<OpXMM_M64>,
                                      Just<EncModrm_rm>,
                                      Nothing,
                                      Nothing);
         }
      else
         if (prefix.rep)
            {
                /* EncodedInstructionDefinition {{[REP]
                                              ;0F 2C 
                                              ;Just Modrm
                                              ;Just RMBoth
                                              ;Nothing
                                              ;[]
                                              ;Nothing
                                              ;Nothing}
                                             ;Prototype {protoMnemonic = "CVTTSS2SI", protoOperands = [OpR32,OpXMM_M32]}
                                             ;[(EncModrm_reg
                                               ,OperandReadWrite)
                                              ,(EncModrm_rm,OperandReadOnly)]
                                             ;64bit: True
                                             ;legacy: True
                                             ;Convert one single-precision floating-point value from xmm/m32 to one signed doubleword integer in r32 using truncation.} */
                
                ERASM_DECODER_DO_ACTION (2,
                                         Cvttss2si,
                                         Just<OpR32>,
                                         Just<EncModrm_reg>,
                                         Just<OpXMM_M32>,
                                         Just<EncModrm_rm>,
                                         Nothing,
                                         Nothing);
            }
         else
            if (prefix.operand_size)
               {
                   /* EncodedInstructionDefinition {{[OPERAND_SIZE]
                                                 ;0F 2C 
                                                 ;Just Modrm
                                                 ;Just RMBoth
                                                 ;Nothing
                                                 ;[]
                                                 ;Nothing
                                                 ;Nothing}
                                                ;Prototype {protoMnemonic = "CVTTPD2PI", protoOperands = [OpMM,OpXMM_M128]}
                                                ;[(EncModrm_reg
                                                  ,OperandReadWrite)
                                                 ,(EncModrm_rm,OperandReadOnly)]
                                                ;64bit: True
                                                ;legacy: True
                                                ;Convert two packer double- precision floating-point values from xmm/m128 to two packed signed doubleword integers in mm using truncation.} */
                   
                   ERASM_DECODER_DO_ACTION (2,
                                            Cvttpd2pi,
                                            Just<OpMM>,
                                            Just<EncModrm_reg>,
                                            Just<OpXMM_M128>,
                                            Just<EncModrm_rm>,
                                            Nothing,
                                            Nothing);
               }
            else
               {
                   /* EncodedInstructionDefinition {{[]
                                                 ;0F 2C 
                                                 ;Just Modrm
                                                 ;Just RMBoth
                                                 ;Nothing
                                                 ;[]
                                                 ;Nothing
                                                 ;Nothing}
                                                ;Prototype {protoMnemonic = "CVTTPS2PI", protoOperands = [OpMM,OpXMM_M64]}
                                                ;[(EncModrm_reg
                                                  ,OperandReadWrite)
                                                 ,(EncModrm_rm,OperandReadOnly)]
                                                ;64bit: True
                                                ;legacy: True
                                                ;Convert two single- precision floating-point values from xmm/m64 to two signed doubleword signed integers in mm using truncation.} */
                   
                   ERASM_DECODER_DO_ACTION (2,
                                            Cvttps2pi,
                                            Just<OpMM>,
                                            Just<EncModrm_reg>,
                                            Just<OpXMM_M64>,
                                            Just<EncModrm_rm>,
                                            Nothing,
                                            Nothing);
               }
      case (0x2d):
      if (prefix.repne)
         {
             /* EncodedInstructionDefinition {{[REPNE]
                                           ;0F 2D 
                                           ;Just Modrm
                                           ;Just RMBoth
                                           ;Nothing
                                           ;[]
                                           ;Nothing
                                           ;Nothing}
                                          ;Prototype {protoMnemonic = "CVTSD2SI", protoOperands = [OpR32,OpXMM_M64]}
                                          ;[(EncModrm_reg
                                            ,OperandReadWrite)
                                           ,(EncModrm_rm,OperandReadOnly)]
                                          ;64bit: True
                                          ;legacy: True
                                          ;Convert one double- precision floating-point value from xmm/m64 to one signed doubleword integer r32.} */
             
             ERASM_DECODER_DO_ACTION (2,
                                      Cvtsd2si,
                                      Just<OpR32>,
                                      Just<EncModrm_reg>,
                                      Just<OpXMM_M64>,
                                      Just<EncModrm_rm>,
                                      Nothing,
                                      Nothing);
         }
      else
         if (prefix.rep)
            {
                /* EncodedInstructionDefinition {{[REP]
                                              ;0F 2D 
                                              ;Just Modrm
                                              ;Just RMBoth
                                              ;Nothing
                                              ;[]
                                              ;Nothing
                                              ;Nothing}
                                             ;Prototype {protoMnemonic = "CVTSS2SI", protoOperands = [OpR32,OpXMM_M32]}
                                             ;[(EncModrm_reg
                                               ,OperandReadWrite)
                                              ,(EncModrm_rm,OperandReadOnly)]
                                             ;64bit: True
                                             ;legacy: True
                                             ;Convert one single-precision floating-point value from xmm/m32 to one signed doubleword integer in r32.} */
                
                ERASM_DECODER_DO_ACTION (2,
                                         Cvtss2si,
                                         Just<OpR32>,
                                         Just<EncModrm_reg>,
                                         Just<OpXMM_M32>,
                                         Just<EncModrm_rm>,
                                         Nothing,
                                         Nothing);
            }
         else
            if (prefix.operand_size)
               {
                   /* EncodedInstructionDefinition {{[OPERAND_SIZE]
                                                 ;0F 2D 
                                                 ;Just Modrm
                                                 ;Just RMBoth
                                                 ;Nothing
                                                 ;[]
                                                 ;Nothing
                                                 ;Nothing}
                                                ;Prototype {protoMnemonic = "CVTPD2PI", protoOperands = [OpMM,OpXMM_M128]}
                                                ;[(EncModrm_reg
                                                  ,OperandReadWrite)
                                                 ,(EncModrm_rm,OperandReadOnly)]
                                                ;64bit: True
                                                ;legacy: True
                                                ;Convert two packed double- precision floating-point values from xmm/m128 to two packed signed doubleword integers in mm.} */
                   
                   ERASM_DECODER_DO_ACTION (2,
                                            Cvtpd2pi,
                                            Just<OpMM>,
                                            Just<EncModrm_reg>,
                                            Just<OpXMM_M128>,
                                            Just<EncModrm_rm>,
                                            Nothing,
                                            Nothing);
               }
            else
               {
                   /* EncodedInstructionDefinition {{[]
                                                 ;0F 2D 
                                                 ;Just Modrm
                                                 ;Just RMBoth
                                                 ;Nothing
                                                 ;[]
                                                 ;Nothing
                                                 ;Nothing}
                                                ;Prototype {protoMnemonic = "CVTPS2PI", protoOperands = [OpMM,OpXMM_M64]}
                                                ;[(EncModrm_reg
                                                  ,OperandReadWrite)
                                                 ,(EncModrm_rm,OperandReadOnly)]
                                                ;64bit: True
                                                ;legacy: True
                                                ;Convert two packed single- precision floating-point values from xmm/m64 to two packed signed doubleword integers in mm.} */
                   
                   ERASM_DECODER_DO_ACTION (2,
                                            Cvtps2pi,
                                            Just<OpMM>,
                                            Just<EncModrm_reg>,
                                            Just<OpXMM_M64>,
                                            Just<EncModrm_rm>,
                                            Nothing,
                                            Nothing);
               }
      case (0x2e):
      if (prefix.operand_size)
         {
             /* EncodedInstructionDefinition {{[OPERAND_SIZE]
                                           ;0F 2E 
                                           ;Just Modrm
                                           ;Just RMBoth
                                           ;Nothing
                                           ;[]
                                           ;Nothing
                                           ;Nothing}
                                          ;Prototype {protoMnemonic = "UCOMISD", protoOperands = [OpXMM,OpXMM_M64]}
                                          ;[(EncModrm_reg,OperandReadOnly)
                                           ,(EncModrm_rm,OperandReadOnly)]
                                          ;64bit: True
                                          ;legacy: True
                                          ;Compares (unordered) the low double-precision floating-point values in xmm1 and xmm2/m64 and set the EFLAGS accordingly.} */
             
             ERASM_DECODER_DO_ACTION (2,
                                      Ucomisd,
                                      Just<OpXMM>,
                                      Just<EncModrm_reg>,
                                      Just<OpXMM_M64>,
                                      Just<EncModrm_rm>,
                                      Nothing,
                                      Nothing);
         }
      else
         {
             /* EncodedInstructionDefinition {{[]
                                           ;0F 2E 
                                           ;Just Modrm
                                           ;Just RMBoth
                                           ;Nothing
                                           ;[]
                                           ;Nothing
                                           ;Nothing}
                                          ;Prototype {protoMnemonic = "UCOMISS", protoOperands = [OpXMM,OpXMM_M32]}
                                          ;[(EncModrm_reg,OperandReadOnly)
                                           ,(EncModrm_rm,OperandReadOnly)]
                                          ;64bit: True
                                          ;legacy: True
                                          ;Compare lower single- precision floating-point value in xmm1 register with lower single-precision floating-point value in xmm2/mem and set the status flags accordingly.} */
             
             ERASM_DECODER_DO_ACTION (2,
                                      Ucomiss,
                                      Just<OpXMM>,
                                      Just<EncModrm_reg>,
                                      Just<OpXMM_M32>,
                                      Just<EncModrm_rm>,
                                      Nothing,
                                      Nothing);
         }
      case (0x2f):
      if (prefix.operand_size)
         {
             /* EncodedInstructionDefinition {{[OPERAND_SIZE]
                                           ;0F 2F 
                                           ;Just Modrm
                                           ;Just RMBoth
                                           ;Nothing
                                           ;[]
                                           ;Nothing
                                           ;Nothing}
                                          ;Prototype {protoMnemonic = "COMISD", protoOperands = [OpXMM,OpXMM_M64]}
                                          ;[(EncModrm_reg,OperandReadOnly)
                                           ,(EncModrm_rm,OperandReadOnly)]
                                          ;64bit: True
                                          ;legacy: True
                                          ;Compare low double- precision floating-point values in xmm1 and xmm2/mem64 and set the EFLAGS flags accordingly.} */
             
             ERASM_DECODER_DO_ACTION (2,
                                      Comisd,
                                      Just<OpXMM>,
                                      Just<EncModrm_reg>,
                                      Just<OpXMM_M64>,
                                      Just<EncModrm_rm>,
                                      Nothing,
                                      Nothing);
         }
      else
         {
             /* EncodedInstructionDefinition {{[]
                                           ;0F 2F 
                                           ;Just Modrm
                                           ;Just RMBoth
                                           ;Nothing
                                           ;[]
                                           ;Nothing
                                           ;Nothing}
                                          ;Prototype {protoMnemonic = "COMISS", protoOperands = [OpXMM,OpXMM_M32]}
                                          ;[(EncModrm_reg,OperandReadOnly)
                                           ,(EncModrm_rm,OperandReadOnly)]
                                          ;64bit: True
                                          ;legacy: True
                                          ;Compare low single- precision floating-point values in xmm1 and xmm2/mem32 and set the EFLAGS flags accordingly.} */
             
             ERASM_DECODER_DO_ACTION (2,
                                      Comiss,
                                      Just<OpXMM>,
                                      Just<EncModrm_reg>,
                                      Just<OpXMM_M32>,
                                      Just<EncModrm_rm>,
                                      Nothing,
                                      Nothing);
         }
      case (0x30):
      {
          /* EncodedInstructionDefinition {{[]
                                        ;0F 30 
                                        ;Nothing
                                        ;Nothing
                                        ;Nothing
                                        ;[]
                                        ;Nothing
                                        ;Nothing}
                                       ;Prototype {protoMnemonic = "WRMSR", protoOperands = []}
                                       ;[]
                                       ;64bit: True
                                       ;legacy: True
                                       ;Write the value in EDX:EAX to MSR specified by ECX.} */
          
          ERASM_DECODER_DO_ACTION (2,
                                   Wrmsr,
                                   Nothing,
                                   Nothing,
                                   Nothing,
                                   Nothing,
                                   Nothing,
                                   Nothing);
      }
      case (0x31):
      {
          /* EncodedInstructionDefinition {{[]
                                        ;0F 31 
                                        ;Nothing
                                        ;Nothing
                                        ;Nothing
                                        ;[]
                                        ;Nothing
                                        ;Nothing}
                                       ;Prototype {protoMnemonic = "RDTSC", protoOperands = []}
                                       ;[]
                                       ;64bit: True
                                       ;legacy: True
                                       ;Read time-stamp counter into EDX:EAX.} */
          
          ERASM_DECODER_DO_ACTION (2,
                                   Rdtsc,
                                   Nothing,
                                   Nothing,
                                   Nothing,
                                   Nothing,
                                   Nothing,
                                   Nothing);
      }
      case (0x32):
      {
          /* EncodedInstructionDefinition {{[]
                                        ;0F 32 
                                        ;Nothing
                                        ;Nothing
                                        ;Nothing
                                        ;[]
                                        ;Nothing
                                        ;Nothing}
                                       ;Prototype {protoMnemonic = "RDMSR", protoOperands = []}
                                       ;[]
                                       ;64bit: True
                                       ;legacy: True
                                       ;Read MSR specified by ECX into EDX:EAX.} */
          
          ERASM_DECODER_DO_ACTION (2,
                                   Rdmsr,
                                   Nothing,
                                   Nothing,
                                   Nothing,
                                   Nothing,
                                   Nothing,
                                   Nothing);
      }
      case (0x33):
      {
          /* EncodedInstructionDefinition {{[]
                                        ;0F 33 
                                        ;Nothing
                                        ;Nothing
                                        ;Nothing
                                        ;[]
                                        ;Nothing
                                        ;Nothing}
                                       ;Prototype {protoMnemonic = "RDPMC", protoOperands = []}
                                       ;[]
                                       ;64bit: True
                                       ;legacy: True
                                       ;Read performance- monitoring counter specified by ECX into EDX:EAX.} */
          
          ERASM_DECODER_DO_ACTION (2,
                                   Rdpmc,
                                   Nothing,
                                   Nothing,
                                   Nothing,
                                   Nothing,
                                   Nothing,
                                   Nothing);
      }
      case (0x34):
      {
          /* EncodedInstructionDefinition {{[]
                                        ;0F 34 
                                        ;Nothing
                                        ;Nothing
                                        ;Nothing
                                        ;[]
                                        ;Nothing
                                        ;Nothing}
                                       ;Prototype {protoMnemonic = "SYSENTER", protoOperands = []}
                                       ;[]
                                       ;64bit: True
                                       ;legacy: True
                                       ;Fast call to privilege level 0 system procedures.} */
          
          ERASM_DECODER_DO_ACTION (2,
                                   Sysenter,
                                   Nothing,
                                   Nothing,
                                   Nothing,
                                   Nothing,
                                   Nothing,
                                   Nothing);
      }
      case (0x35):
      {
          /* EncodedInstructionDefinition {{[]
                                        ;0F 35 
                                        ;Nothing
                                        ;Nothing
                                        ;Nothing
                                        ;[]
                                        ;Nothing
                                        ;Nothing}
                                       ;Prototype {protoMnemonic = "SYSEXIT", protoOperands = []}
                                       ;[]
                                       ;64bit: True
                                       ;legacy: True
                                       ;Fast return to privilege level 3 user code.} */
          
          ERASM_DECODER_DO_ACTION (2,
                                   Sysexit,
                                   Nothing,
                                   Nothing,
                                   Nothing,
                                   Nothing,
                                   Nothing,
                                   Nothing);
      }
      case (0x37):
      {
          /* EncodedInstructionDefinition {{[]
                                        ;0F 37 
                                        ;Nothing
                                        ;Nothing
                                        ;Nothing
                                        ;[]
                                        ;Nothing
                                        ;Nothing}
                                       ;Prototype {protoMnemonic = "GETSEC", protoOperands = []}
                                       ;[]
                                       ;64bit: True
                                       ;legacy: True
                                       ;See Intel Instruction Set Reference, Chapter 6 for details.} */
          
          ERASM_DECODER_DO_ACTION (2,
                                   Getsec,
                                   Nothing,
                                   Nothing,
                                   Nothing,
                                   Nothing,
                                   Nothing,
                                   Nothing);
      }
      case (0x38):
      switch (*p++) {
         case (0x0):
         if (prefix.operand_size)
            {
                /* EncodedInstructionDefinition {{[OPERAND_SIZE]
                                              ;0F 38 00 
                                              ;Just Modrm
                                              ;Just RMBoth
                                              ;Nothing
                                              ;[]
                                              ;Nothing
                                              ;Nothing}
                                             ;Prototype {protoMnemonic = "PSHUFB", protoOperands = [OpXMM,OpXMM_M128]}
                                             ;[(EncModrm_reg
                                               ,OperandReadWrite)
                                              ,(EncModrm_rm,OperandReadOnly)]
                                             ;64bit: True
                                             ;legacy: True
                                             ;Shuffle bytes in xmm1 according to contents of xmm2/m128.} */
                
                ERASM_DECODER_DO_ACTION (3,
                                         Pshufb,
                                         Just<OpXMM>,
                                         Just<EncModrm_reg>,
                                         Just<OpXMM_M128>,
                                         Just<EncModrm_rm>,
                                         Nothing,
                                         Nothing);
            }
         else
            {
                /* EncodedInstructionDefinition {{[]
                                              ;0F 38 00 
                                              ;Just Modrm
                                              ;Just RMBoth
                                              ;Nothing
                                              ;[]
                                              ;Nothing
                                              ;Nothing}
                                             ;Prototype {protoMnemonic = "PSHUFB", protoOperands = [OpMM,OpMM_M64]}
                                             ;[(EncModrm_reg
                                               ,OperandReadWrite)
                                              ,(EncModrm_rm,OperandReadOnly)]
                                             ;64bit: True
                                             ;legacy: True
                                             ;Shuffle bytes in mm1 according to contents of mm2/m64.} */
                
                ERASM_DECODER_DO_ACTION (3,
                                         Pshufb,
                                         Just<OpMM>,
                                         Just<EncModrm_reg>,
                                         Just<OpMM_M64>,
                                         Just<EncModrm_rm>,
                                         Nothing,
                                         Nothing);
            }
         case (0x1):
         if (prefix.operand_size)
            {
                /* EncodedInstructionDefinition {{[OPERAND_SIZE]
                                              ;0F 38 01 
                                              ;Just Modrm
                                              ;Just RMBoth
                                              ;Nothing
                                              ;[]
                                              ;Nothing
                                              ;Nothing}
                                             ;Prototype {protoMnemonic = "PHADDW", protoOperands = [OpXMM,OpXMM_M128]}
                                             ;[(EncModrm_reg
                                               ,OperandReadWrite)
                                              ,(EncModrm_rm,OperandReadOnly)]
                                             ;64bit: True
                                             ;legacy: True
                                             ;Add 16-bit signed integers horizontally, pack to XMM1.} */
                
                ERASM_DECODER_DO_ACTION (3,
                                         Phaddw,
                                         Just<OpXMM>,
                                         Just<EncModrm_reg>,
                                         Just<OpXMM_M128>,
                                         Just<EncModrm_rm>,
                                         Nothing,
                                         Nothing);
            }
         else
            {
                /* EncodedInstructionDefinition {{[]
                                              ;0F 38 01 
                                              ;Just Modrm
                                              ;Just RMBoth
                                              ;Nothing
                                              ;[]
                                              ;Nothing
                                              ;Nothing}
                                             ;Prototype {protoMnemonic = "PHADDW", protoOperands = [OpMM,OpMM_M64]}
                                             ;[(EncModrm_reg
                                               ,OperandReadWrite)
                                              ,(EncModrm_rm,OperandReadOnly)]
                                             ;64bit: True
                                             ;legacy: True
                                             ;Add 16-bit signed integers horizontally, pack to MM1.} */
                
                ERASM_DECODER_DO_ACTION (3,
                                         Phaddw,
                                         Just<OpMM>,
                                         Just<EncModrm_reg>,
                                         Just<OpMM_M64>,
                                         Just<EncModrm_rm>,
                                         Nothing,
                                         Nothing);
            }
         case (0x2):
         if (prefix.operand_size)
            {
                /* EncodedInstructionDefinition {{[OPERAND_SIZE]
                                              ;0F 38 02 
                                              ;Just Modrm
                                              ;Just RMBoth
                                              ;Nothing
                                              ;[]
                                              ;Nothing
                                              ;Nothing}
                                             ;Prototype {protoMnemonic = "PHADDD", protoOperands = [OpXMM,OpXMM_M128]}
                                             ;[(EncModrm_reg
                                               ,OperandReadWrite)
                                              ,(EncModrm_rm,OperandReadOnly)]
                                             ;64bit: True
                                             ;legacy: True
                                             ;Add 32-bit signed integers horizontally, pack to XMM1.} */
                
                ERASM_DECODER_DO_ACTION (3,
                                         Phaddd,
                                         Just<OpXMM>,
                                         Just<EncModrm_reg>,
                                         Just<OpXMM_M128>,
                                         Just<EncModrm_rm>,
                                         Nothing,
                                         Nothing);
            }
         else
            {
                /* EncodedInstructionDefinition {{[]
                                              ;0F 38 02 
                                              ;Just Modrm
                                              ;Just RMBoth
                                              ;Nothing
                                              ;[]
                                              ;Nothing
                                              ;Nothing}
                                             ;Prototype {protoMnemonic = "PHADDD", protoOperands = [OpMM,OpMM_M64]}
                                             ;[(EncModrm_reg
                                               ,OperandReadWrite)
                                              ,(EncModrm_rm,OperandReadOnly)]
                                             ;64bit: True
                                             ;legacy: True
                                             ;Add 32-bit signed integers horizontally, pack to MM1.} */
                
                ERASM_DECODER_DO_ACTION (3,
                                         Phaddd,
                                         Just<OpMM>,
                                         Just<EncModrm_reg>,
                                         Just<OpMM_M64>,
                                         Just<EncModrm_rm>,
                                         Nothing,
                                         Nothing);
            }
         case (0x3):
         if (prefix.operand_size)
            {
                /* EncodedInstructionDefinition {{[OPERAND_SIZE]
                                              ;0F 38 03 
                                              ;Just Modrm
                                              ;Just RMBoth
                                              ;Nothing
                                              ;[]
                                              ;Nothing
                                              ;Nothing}
                                             ;Prototype {protoMnemonic = "PHADDSW", protoOperands = [OpXMM,OpXMM_M128]}
                                             ;[(EncModrm_reg
                                               ,OperandReadWrite)
                                              ,(EncModrm_rm,OperandReadOnly)]
                                             ;64bit: True
                                             ;legacy: True
                                             ;Add 16-bit signed integers horizontally, pack saturated integers to XMM1.} */
                
                ERASM_DECODER_DO_ACTION (3,
                                         Phaddsw,
                                         Just<OpXMM>,
                                         Just<EncModrm_reg>,
                                         Just<OpXMM_M128>,
                                         Just<EncModrm_rm>,
                                         Nothing,
                                         Nothing);
            }
         else
            {
                /* EncodedInstructionDefinition {{[]
                                              ;0F 38 03 
                                              ;Just Modrm
                                              ;Just RMBoth
                                              ;Nothing
                                              ;[]
                                              ;Nothing
                                              ;Nothing}
                                             ;Prototype {protoMnemonic = "PHADDSW", protoOperands = [OpMM,OpMM_M64]}
                                             ;[(EncModrm_reg
                                               ,OperandReadWrite)
                                              ,(EncModrm_rm,OperandReadOnly)]
                                             ;64bit: True
                                             ;legacy: True
                                             ;Add 16-bit signed integers horizontally, pack saturated integers to MM1.} */
                
                ERASM_DECODER_DO_ACTION (3,
                                         Phaddsw,
                                         Just<OpMM>,
                                         Just<EncModrm_reg>,
                                         Just<OpMM_M64>,
                                         Just<EncModrm_rm>,
                                         Nothing,
                                         Nothing);
            }
         case (0x4):
         if (prefix.operand_size)
            {
                /* EncodedInstructionDefinition {{[OPERAND_SIZE]
                                              ;0F 38 04 
                                              ;Just Modrm
                                              ;Just RMBoth
                                              ;Nothing
                                              ;[]
                                              ;Nothing
                                              ;Nothing}
                                             ;Prototype {protoMnemonic = "PMADDUBSW", protoOperands = [OpXMM,OpXMM_M128]}
                                             ;[(EncModrm_reg
                                               ,OperandReadWrite)
                                              ,(EncModrm_rm,OperandReadOnly)]
                                             ;64bit: True
                                             ;legacy: True
                                             ;Multiply signed and unsigned bytes, add horizontal pair of signed words, pack saturated signed-words to XMM1.} */
                
                ERASM_DECODER_DO_ACTION (3,
                                         Pmaddubsw,
                                         Just<OpXMM>,
                                         Just<EncModrm_reg>,
                                         Just<OpXMM_M128>,
                                         Just<EncModrm_rm>,
                                         Nothing,
                                         Nothing);
            }
         else
            {
                /* EncodedInstructionDefinition {{[]
                                              ;0F 38 04 
                                              ;Just Modrm
                                              ;Just RMBoth
                                              ;Nothing
                                              ;[]
                                              ;Nothing
                                              ;Nothing}
                                             ;Prototype {protoMnemonic = "PMADDUBSW", protoOperands = [OpMM,OpMM_M64]}
                                             ;[(EncModrm_reg
                                               ,OperandReadWrite)
                                              ,(EncModrm_rm,OperandReadOnly)]
                                             ;64bit: True
                                             ;legacy: True
                                             ;Multiply signed and unsigned bytes, add horizontal pair of signed words, pack saturated signed-words to MM1.} */
                
                ERASM_DECODER_DO_ACTION (3,
                                         Pmaddubsw,
                                         Just<OpMM>,
                                         Just<EncModrm_reg>,
                                         Just<OpMM_M64>,
                                         Just<EncModrm_rm>,
                                         Nothing,
                                         Nothing);
            }
         case (0x5):
         if (prefix.operand_size)
            {
                /* EncodedInstructionDefinition {{[OPERAND_SIZE]
                                              ;0F 38 05 
                                              ;Just Modrm
                                              ;Just RMBoth
                                              ;Nothing
                                              ;[]
                                              ;Nothing
                                              ;Nothing}
                                             ;Prototype {protoMnemonic = "PHSUBW", protoOperands = [OpXMM,OpXMM_M128]}
                                             ;[(EncModrm_reg
                                               ,OperandReadWrite)
                                              ,(EncModrm_rm,OperandReadOnly)]
                                             ;64bit: True
                                             ;legacy: True
                                             ;Subtract 16-bit signed integers horizontally, pack to XMM1.} */
                
                ERASM_DECODER_DO_ACTION (3,
                                         Phsubw,
                                         Just<OpXMM>,
                                         Just<EncModrm_reg>,
                                         Just<OpXMM_M128>,
                                         Just<EncModrm_rm>,
                                         Nothing,
                                         Nothing);
            }
         else
            {
                /* EncodedInstructionDefinition {{[]
                                              ;0F 38 05 
                                              ;Just Modrm
                                              ;Just RMBoth
                                              ;Nothing
                                              ;[]
                                              ;Nothing
                                              ;Nothing}
                                             ;Prototype {protoMnemonic = "PHSUBW", protoOperands = [OpMM,OpMM_M64]}
                                             ;[(EncModrm_reg
                                               ,OperandReadWrite)
                                              ,(EncModrm_rm,OperandReadOnly)]
                                             ;64bit: True
                                             ;legacy: True
                                             ;Subtract 16-bit signed integers horizontally, pack to MM1.} */
                
                ERASM_DECODER_DO_ACTION (3,
                                         Phsubw,
                                         Just<OpMM>,
                                         Just<EncModrm_reg>,
                                         Just<OpMM_M64>,
                                         Just<EncModrm_rm>,
                                         Nothing,
                                         Nothing);
            }
         case (0x6):
         if (prefix.operand_size)
            {
                /* EncodedInstructionDefinition {{[OPERAND_SIZE]
                                              ;0F 38 06 
                                              ;Just Modrm
                                              ;Just RMBoth
                                              ;Nothing
                                              ;[]
                                              ;Nothing
                                              ;Nothing}
                                             ;Prototype {protoMnemonic = "PHSUBD", protoOperands = [OpXMM,OpXMM_M128]}
                                             ;[(EncModrm_reg
                                               ,OperandReadWrite)
                                              ,(EncModrm_rm,OperandReadOnly)]
                                             ;64bit: True
                                             ;legacy: True
                                             ;Subtract 32-bit signed integers horizontally, pack to XMM1.} */
                
                ERASM_DECODER_DO_ACTION (3,
                                         Phsubd,
                                         Just<OpXMM>,
                                         Just<EncModrm_reg>,
                                         Just<OpXMM_M128>,
                                         Just<EncModrm_rm>,
                                         Nothing,
                                         Nothing);
            }
         else
            {
                /* EncodedInstructionDefinition {{[]
                                              ;0F 38 06 
                                              ;Just Modrm
                                              ;Just RMBoth
                                              ;Nothing
                                              ;[]
                                              ;Nothing
                                              ;Nothing}
                                             ;Prototype {protoMnemonic = "PHSUBD", protoOperands = [OpMM,OpMM_M64]}
                                             ;[(EncModrm_reg
                                               ,OperandReadWrite)
                                              ,(EncModrm_rm,OperandReadOnly)]
                                             ;64bit: True
                                             ;legacy: True
                                             ;Subtract 32-bit signed integers horizontally, pack to MM1.} */
                
                ERASM_DECODER_DO_ACTION (3,
                                         Phsubd,
                                         Just<OpMM>,
                                         Just<EncModrm_reg>,
                                         Just<OpMM_M64>,
                                         Just<EncModrm_rm>,
                                         Nothing,
                                         Nothing);
            }
         case (0x7):
         if (prefix.operand_size)
            {
                /* EncodedInstructionDefinition {{[OPERAND_SIZE]
                                              ;0F 38 07 
                                              ;Just Modrm
                                              ;Just RMBoth
                                              ;Nothing
                                              ;[]
                                              ;Nothing
                                              ;Nothing}
                                             ;Prototype {protoMnemonic = "PHSUBSW", protoOperands = [OpXMM,OpXMM_M128]}
                                             ;[(EncModrm_reg
                                               ,OperandReadWrite)
                                              ,(EncModrm_rm,OperandReadOnly)]
                                             ;64bit: True
                                             ;legacy: True
                                             ;Subtract 16-bit signed integer horizontally, pack saturated integers to XMM1} */
                
                ERASM_DECODER_DO_ACTION (3,
                                         Phsubsw,
                                         Just<OpXMM>,
                                         Just<EncModrm_reg>,
                                         Just<OpXMM_M128>,
                                         Just<EncModrm_rm>,
                                         Nothing,
                                         Nothing);
            }
         else
            {
                /* EncodedInstructionDefinition {{[]
                                              ;0F 38 07 
                                              ;Just Modrm
                                              ;Just RMBoth
                                              ;Nothing
                                              ;[]
                                              ;Nothing
                                              ;Nothing}
                                             ;Prototype {protoMnemonic = "PHSUBSW", protoOperands = [OpMM,OpMM_M64]}
                                             ;[(EncModrm_reg
                                               ,OperandReadWrite)
                                              ,(EncModrm_rm,OperandReadOnly)]
                                             ;64bit: True
                                             ;legacy: True
                                             ;Subtract 16-bit signed integer horizontally, pack saturated integers to MM1.} */
                
                ERASM_DECODER_DO_ACTION (3,
                                         Phsubsw,
                                         Just<OpMM>,
                                         Just<EncModrm_reg>,
                                         Just<OpMM_M64>,
                                         Just<EncModrm_rm>,
                                         Nothing,
                                         Nothing);
            }
         case (0x8):
         if (prefix.operand_size)
            {
                /* EncodedInstructionDefinition {{[OPERAND_SIZE]
                                              ;0F 38 08 
                                              ;Just Modrm
                                              ;Just RMBoth
                                              ;Nothing
                                              ;[]
                                              ;Nothing
                                              ;Nothing}
                                             ;Prototype {protoMnemonic = "PSIGNB", protoOperands = [OpXMM,OpXMM_M128]}
                                             ;[(EncModrm_reg
                                               ,OperandReadWrite)
                                              ,(EncModrm_rm,OperandReadOnly)]
                                             ;64bit: True
                                             ;legacy: True
                                             ;Negate/zero/preserve packed byte integers in xmm1 depending on the corresponding sign in xmm2/m128.} */
                
                ERASM_DECODER_DO_ACTION (3,
                                         Psignb,
                                         Just<OpXMM>,
                                         Just<EncModrm_reg>,
                                         Just<OpXMM_M128>,
                                         Just<EncModrm_rm>,
                                         Nothing,
                                         Nothing);
            }
         else
            {
                /* EncodedInstructionDefinition {{[]
                                              ;0F 38 08 
                                              ;Just Modrm
                                              ;Just RMBoth
                                              ;Nothing
                                              ;[]
                                              ;Nothing
                                              ;Nothing}
                                             ;Prototype {protoMnemonic = "PSIGNB", protoOperands = [OpMM,OpMM_M64]}
                                             ;[(EncModrm_reg
                                               ,OperandReadWrite)
                                              ,(EncModrm_rm,OperandReadOnly)]
                                             ;64bit: True
                                             ;legacy: True
                                             ;Negate/zero/preserve packed byte integers in mm1 depending on the corresponding sign in mm2/m64} */
                
                ERASM_DECODER_DO_ACTION (3,
                                         Psignb,
                                         Just<OpMM>,
                                         Just<EncModrm_reg>,
                                         Just<OpMM_M64>,
                                         Just<EncModrm_rm>,
                                         Nothing,
                                         Nothing);
            }
         case (0x9):
         if (prefix.operand_size)
            {
                /* EncodedInstructionDefinition {{[OPERAND_SIZE]
                                              ;0F 38 09 
                                              ;Just Modrm
                                              ;Just RMBoth
                                              ;Nothing
                                              ;[]
                                              ;Nothing
                                              ;Nothing}
                                             ;Prototype {protoMnemonic = "PSIGNW", protoOperands = [OpXMM,OpXMM_M128]}
                                             ;[(EncModrm_reg
                                               ,OperandReadWrite)
                                              ,(EncModrm_rm,OperandReadOnly)]
                                             ;64bit: True
                                             ;legacy: True
                                             ;Negate/zero/preserve packed word integers in xmm1 depending on the corresponding sign in xmm2/m128.} */
                
                ERASM_DECODER_DO_ACTION (3,
                                         Psignw,
                                         Just<OpXMM>,
                                         Just<EncModrm_reg>,
                                         Just<OpXMM_M128>,
                                         Just<EncModrm_rm>,
                                         Nothing,
                                         Nothing);
            }
         else
            {
                /* EncodedInstructionDefinition {{[]
                                              ;0F 38 09 
                                              ;Just Modrm
                                              ;Just RMBoth
                                              ;Nothing
                                              ;[]
                                              ;Nothing
                                              ;Nothing}
                                             ;Prototype {protoMnemonic = "PSIGNW", protoOperands = [OpMM,OpMM_M64]}
                                             ;[(EncModrm_reg
                                               ,OperandReadWrite)
                                              ,(EncModrm_rm,OperandReadOnly)]
                                             ;64bit: True
                                             ;legacy: True
                                             ;Negate/zero/preserve packed word integers in mm1 depending on the corresponding sign in mm2/m128.} */
                
                ERASM_DECODER_DO_ACTION (3,
                                         Psignw,
                                         Just<OpMM>,
                                         Just<EncModrm_reg>,
                                         Just<OpMM_M64>,
                                         Just<EncModrm_rm>,
                                         Nothing,
                                         Nothing);
            }
         case (0xa):
         if (prefix.operand_size)
            {
                /* EncodedInstructionDefinition {{[OPERAND_SIZE]
                                              ;0F 38 0A 
                                              ;Just Modrm
                                              ;Just RMBoth
                                              ;Nothing
                                              ;[]
                                              ;Nothing
                                              ;Nothing}
                                             ;Prototype {protoMnemonic = "PSIGND", protoOperands = [OpXMM,OpXMM_M128]}
                                             ;[(EncModrm_reg
                                               ,OperandReadWrite)
                                              ,(EncModrm_rm,OperandReadOnly)]
                                             ;64bit: True
                                             ;legacy: True
                                             ;Negate/zero/preserve packed doubleword integers in xmm1 depending on the corresponding sign in xmm2/m128.} */
                
                ERASM_DECODER_DO_ACTION (3,
                                         Psignd,
                                         Just<OpXMM>,
                                         Just<EncModrm_reg>,
                                         Just<OpXMM_M128>,
                                         Just<EncModrm_rm>,
                                         Nothing,
                                         Nothing);
            }
         else
            {
                /* EncodedInstructionDefinition {{[]
                                              ;0F 38 0A 
                                              ;Just Modrm
                                              ;Just RMBoth
                                              ;Nothing
                                              ;[]
                                              ;Nothing
                                              ;Nothing}
                                             ;Prototype {protoMnemonic = "PSIGND", protoOperands = [OpMM,OpMM_M64]}
                                             ;[(EncModrm_reg
                                               ,OperandReadWrite)
                                              ,(EncModrm_rm,OperandReadOnly)]
                                             ;64bit: True
                                             ;legacy: True
                                             ;Negate/zero/preserve packed doubleword integers in mm1 depending on the corresponding sign in mm2/m128.} */
                
                ERASM_DECODER_DO_ACTION (3,
                                         Psignd,
                                         Just<OpMM>,
                                         Just<EncModrm_reg>,
                                         Just<OpMM_M64>,
                                         Just<EncModrm_rm>,
                                         Nothing,
                                         Nothing);
            }
         case (0xb):
         if (prefix.operand_size)
            {
                /* EncodedInstructionDefinition {{[OPERAND_SIZE]
                                              ;0F 38 0B 
                                              ;Just Modrm
                                              ;Just RMBoth
                                              ;Nothing
                                              ;[]
                                              ;Nothing
                                              ;Nothing}
                                             ;Prototype {protoMnemonic = "PMULHRSW", protoOperands = [OpXMM,OpXMM_M128]}
                                             ;[(EncModrm_reg
                                               ,OperandReadWrite)
                                              ,(EncModrm_rm,OperandReadOnly)]
                                             ;64bit: True
                                             ;legacy: True
                                             ;Multiply 16-bit signed words, scale and round signed doublewords, pack high 16 bits to XMM1.} */
                
                ERASM_DECODER_DO_ACTION (3,
                                         Pmulhrsw,
                                         Just<OpXMM>,
                                         Just<EncModrm_reg>,
                                         Just<OpXMM_M128>,
                                         Just<EncModrm_rm>,
                                         Nothing,
                                         Nothing);
            }
         else
            {
                /* EncodedInstructionDefinition {{[]
                                              ;0F 38 0B 
                                              ;Just Modrm
                                              ;Just RMBoth
                                              ;Nothing
                                              ;[]
                                              ;Nothing
                                              ;Nothing}
                                             ;Prototype {protoMnemonic = "PMULHRSW", protoOperands = [OpMM,OpMM_M64]}
                                             ;[(EncModrm_reg
                                               ,OperandReadWrite)
                                              ,(EncModrm_rm,OperandReadOnly)]
                                             ;64bit: True
                                             ;legacy: True
                                             ;Multiply 16-bit signed words, scale and round signed doublewords, pack high 16 bits to MM1.} */
                
                ERASM_DECODER_DO_ACTION (3,
                                         Pmulhrsw,
                                         Just<OpMM>,
                                         Just<EncModrm_reg>,
                                         Just<OpMM_M64>,
                                         Just<EncModrm_rm>,
                                         Nothing,
                                         Nothing);
            }
         case (0x10):
         if (prefix.operand_size)
            {
                /* EncodedInstructionDefinition {{[OPERAND_SIZE]
                                              ;0F 38 10 
                                              ;Just Modrm
                                              ;Just RMBoth
                                              ;Nothing
                                              ;[]
                                              ;Nothing
                                              ;Nothing}
                                             ;Prototype {protoMnemonic = "PBLENDVB", protoOperands = [OpXMM,OpXMM_M128,OpXMM0]}
                                             ;[(EncModrm_reg
                                               ,OperandReadWrite)
                                              ,(EncModrm_rm,OperandReadOnly)
                                              ,(EncImplicit,OperandReadWrite)]
                                             ;64bit: True
                                             ;legacy: True
                                             ;Select byte values from xmm1 and xmm2/m128 from mask specified in the high bit of each byte in XMM0 and store the values into xmm1.} */
                
                ERASM_DECODER_DO_ACTION (3,
                                         Pblendvb,
                                         Just<OpXMM>,
                                         Just<EncModrm_reg>,
                                         Just<OpXMM_M128>,
                                         Just<EncModrm_rm>,
                                         Just<OpXMM0>,
                                         Just<EncImplicit>);
            }
         else
            goto decode_error;
         case (0x14):
         if (prefix.operand_size)
            {
                /* EncodedInstructionDefinition {{[OPERAND_SIZE]
                                              ;0F 38 14 
                                              ;Just Modrm
                                              ;Just RMBoth
                                              ;Nothing
                                              ;[]
                                              ;Nothing
                                              ;Nothing}
                                             ;Prototype {protoMnemonic = "BLENDVPS", protoOperands = [OpXMM,OpXMM_M128,OpXMM0]}
                                             ;[(EncModrm_reg
                                               ,OperandReadWrite)
                                              ,(EncModrm_rm,OperandReadOnly)
                                              ,(EncImplicit,OperandReadWrite)]
                                             ;64bit: True
                                             ;legacy: True
                                             ;Select packed single precision floating-point values from xmm1 and xmm2/m128 from mask specified in XMM0 and store the values into xmm1.} */
                
                ERASM_DECODER_DO_ACTION (3,
                                         Blendvps,
                                         Just<OpXMM>,
                                         Just<EncModrm_reg>,
                                         Just<OpXMM_M128>,
                                         Just<EncModrm_rm>,
                                         Just<OpXMM0>,
                                         Just<EncImplicit>);
            }
         else
            goto decode_error;
         case (0x15):
         if (prefix.operand_size)
            {
                /* EncodedInstructionDefinition {{[OPERAND_SIZE]
                                              ;0F 38 15 
                                              ;Just Modrm
                                              ;Just RMBoth
                                              ;Nothing
                                              ;[]
                                              ;Nothing
                                              ;Nothing}
                                             ;Prototype {protoMnemonic = "BLENDVPD", protoOperands = [OpXMM,OpXMM_M128,OpXMM0]}
                                             ;[(EncModrm_reg
                                               ,OperandReadWrite)
                                              ,(EncModrm_rm,OperandReadOnly)
                                              ,(EncImplicit,OperandReadWrite)]
                                             ;64bit: True
                                             ;legacy: True
                                             ;Select packed DP FP values from xmm1 and xmm2 from mask specified in XMM0 and store the values in xmm1.} */
                
                ERASM_DECODER_DO_ACTION (3,
                                         Blendvpd,
                                         Just<OpXMM>,
                                         Just<EncModrm_reg>,
                                         Just<OpXMM_M128>,
                                         Just<EncModrm_rm>,
                                         Just<OpXMM0>,
                                         Just<EncImplicit>);
            }
         else
            goto decode_error;
         case (0x17):
         if (prefix.operand_size)
            {
                /* EncodedInstructionDefinition {{[OPERAND_SIZE]
                                              ;0F 38 17 
                                              ;Just Modrm
                                              ;Just RMBoth
                                              ;Nothing
                                              ;[]
                                              ;Nothing
                                              ;Nothing}
                                             ;Prototype {protoMnemonic = "PTEST", protoOperands = [OpXMM,OpXMM_M128]}
                                             ;[(EncModrm_reg,OperandReadOnly)
                                              ,(EncModrm_rm,OperandReadOnly)]
                                             ;64bit: True
                                             ;legacy: True
                                             ;Set ZF if xmm2/m128 AND xmm1 result is all 0s. Set CF if xmm2/m128 AND NOT xmm1 result is all 0s.} */
                
                ERASM_DECODER_DO_ACTION (3,
                                         Ptest,
                                         Just<OpXMM>,
                                         Just<EncModrm_reg>,
                                         Just<OpXMM_M128>,
                                         Just<EncModrm_rm>,
                                         Nothing,
                                         Nothing);
            }
         else
            goto decode_error;
         case (0x1c):
         if (prefix.operand_size)
            {
                /* EncodedInstructionDefinition {{[OPERAND_SIZE]
                                              ;0F 38 1C 
                                              ;Just Modrm
                                              ;Just RMBoth
                                              ;Nothing
                                              ;[]
                                              ;Nothing
                                              ;Nothing}
                                             ;Prototype {protoMnemonic = "PABSB", protoOperands = [OpXMM,OpXMM_M128]}
                                             ;[(EncModrm_reg
                                               ,OperandReadWrite)
                                              ,(EncModrm_rm,OperandReadOnly)]
                                             ;64bit: True
                                             ;legacy: True
                                             ;Compute the absolute value of bytes in xmm2/m128 and store UNSIGNED result in xmm1.} */
                
                ERASM_DECODER_DO_ACTION (3,
                                         Pabsb,
                                         Just<OpXMM>,
                                         Just<EncModrm_reg>,
                                         Just<OpXMM_M128>,
                                         Just<EncModrm_rm>,
                                         Nothing,
                                         Nothing);
            }
         else
            {
                /* EncodedInstructionDefinition {{[]
                                              ;0F 38 1C 
                                              ;Just Modrm
                                              ;Just RMBoth
                                              ;Nothing
                                              ;[]
                                              ;Nothing
                                              ;Nothing}
                                             ;Prototype {protoMnemonic = "PABSB", protoOperands = [OpMM,OpMM_M64]}
                                             ;[(EncModrm_reg
                                               ,OperandReadWrite)
                                              ,(EncModrm_rm,OperandReadOnly)]
                                             ;64bit: True
                                             ;legacy: True
                                             ;Compute the absolute value of bytes in mm2/m64 and store UNSIGNED result in mm1.} */
                
                ERASM_DECODER_DO_ACTION (3,
                                         Pabsb,
                                         Just<OpMM>,
                                         Just<EncModrm_reg>,
                                         Just<OpMM_M64>,
                                         Just<EncModrm_rm>,
                                         Nothing,
                                         Nothing);
            }
         case (0x1d):
         if (prefix.operand_size)
            {
                /* EncodedInstructionDefinition {{[OPERAND_SIZE]
                                              ;0F 38 1D 
                                              ;Just Modrm
                                              ;Just RMBoth
                                              ;Nothing
                                              ;[]
                                              ;Nothing
                                              ;Nothing}
                                             ;Prototype {protoMnemonic = "PABSW", protoOperands = [OpXMM,OpXMM_M128]}
                                             ;[(EncModrm_reg
                                               ,OperandReadWrite)
                                              ,(EncModrm_rm,OperandReadOnly)]
                                             ;64bit: True
                                             ;legacy: True
                                             ;Compute the absolute value of 16-bit integers in xmm2/m128 and store UNSIGNED result in xmm1.} */
                
                ERASM_DECODER_DO_ACTION (3,
                                         Pabsw,
                                         Just<OpXMM>,
                                         Just<EncModrm_reg>,
                                         Just<OpXMM_M128>,
                                         Just<EncModrm_rm>,
                                         Nothing,
                                         Nothing);
            }
         else
            {
                /* EncodedInstructionDefinition {{[]
                                              ;0F 38 1D 
                                              ;Just Modrm
                                              ;Just RMBoth
                                              ;Nothing
                                              ;[]
                                              ;Nothing
                                              ;Nothing}
                                             ;Prototype {protoMnemonic = "PABSW", protoOperands = [OpMM,OpMM_M64]}
                                             ;[(EncModrm_reg
                                               ,OperandReadWrite)
                                              ,(EncModrm_rm,OperandReadOnly)]
                                             ;64bit: True
                                             ;legacy: True
                                             ;Compute the absolute value of 16-bit integers in mm2/m64 and store UNSIGNED result in mm1.} */
                
                ERASM_DECODER_DO_ACTION (3,
                                         Pabsw,
                                         Just<OpMM>,
                                         Just<EncModrm_reg>,
                                         Just<OpMM_M64>,
                                         Just<EncModrm_rm>,
                                         Nothing,
                                         Nothing);
            }
         case (0x1e):
         if (prefix.operand_size)
            {
                /* EncodedInstructionDefinition {{[OPERAND_SIZE]
                                              ;0F 38 1E 
                                              ;Just Modrm
                                              ;Just RMBoth
                                              ;Nothing
                                              ;[]
                                              ;Nothing
                                              ;Nothing}
                                             ;Prototype {protoMnemonic = "PABSD", protoOperands = [OpXMM,OpXMM_M128]}
                                             ;[(EncModrm_reg
                                               ,OperandReadWrite)
                                              ,(EncModrm_rm,OperandReadOnly)]
                                             ;64bit: True
                                             ;legacy: True
                                             ;Compute the absolute value of 32-bit integers in xmm2/m128 and store UNSIGNED result in xmm1.} */
                
                ERASM_DECODER_DO_ACTION (3,
                                         Pabsd,
                                         Just<OpXMM>,
                                         Just<EncModrm_reg>,
                                         Just<OpXMM_M128>,
                                         Just<EncModrm_rm>,
                                         Nothing,
                                         Nothing);
            }
         else
            {
                /* EncodedInstructionDefinition {{[]
                                              ;0F 38 1E 
                                              ;Just Modrm
                                              ;Just RMBoth
                                              ;Nothing
                                              ;[]
                                              ;Nothing
                                              ;Nothing}
                                             ;Prototype {protoMnemonic = "PABSD", protoOperands = [OpMM,OpMM_M64]}
                                             ;[(EncModrm_reg
                                               ,OperandReadWrite)
                                              ,(EncModrm_rm,OperandReadOnly)]
                                             ;64bit: True
                                             ;legacy: True
                                             ;Compute the absolute value of 32-bit integers in mm2/m64 and store UNSIGNED result in mm1.} */
                
                ERASM_DECODER_DO_ACTION (3,
                                         Pabsd,
                                         Just<OpMM>,
                                         Just<EncModrm_reg>,
                                         Just<OpMM_M64>,
                                         Just<EncModrm_rm>,
                                         Nothing,
                                         Nothing);
            }
         case (0x20):
         if (prefix.operand_size)
            {
                /* EncodedInstructionDefinition {{[OPERAND_SIZE]
                                              ;0F 38 20 
                                              ;Just Modrm
                                              ;Just RMBoth
                                              ;Nothing
                                              ;[]
                                              ;Nothing
                                              ;Nothing}
                                             ;Prototype {protoMnemonic = "PMOVSXBW", protoOperands = [OpXMM,OpXMM_M64]}
                                             ;[(EncModrm_reg
                                               ,OperandReadWrite)
                                              ,(EncModrm_rm,OperandReadOnly)]
                                             ;64bit: True
                                             ;legacy: True
                                             ;Sign extend 8 packed signed 8-bit integers in the low 8 bytes of xmm2/m64 to 8 packed signed 16-bit integers in xmm1.} */
                
                ERASM_DECODER_DO_ACTION (3,
                                         Pmovsxbw,
                                         Just<OpXMM>,
                                         Just<EncModrm_reg>,
                                         Just<OpXMM_M64>,
                                         Just<EncModrm_rm>,
                                         Nothing,
                                         Nothing);
            }
         else
            goto decode_error;
         case (0x21):
         if (prefix.operand_size)
            {
                /* EncodedInstructionDefinition {{[OPERAND_SIZE]
                                              ;0F 38 21 
                                              ;Just Modrm
                                              ;Just RMBoth
                                              ;Nothing
                                              ;[]
                                              ;Nothing
                                              ;Nothing}
                                             ;Prototype {protoMnemonic = "PMOVSXBD", protoOperands = [OpXMM,OpXMM_M32]}
                                             ;[(EncModrm_reg
                                               ,OperandReadWrite)
                                              ,(EncModrm_rm,OperandReadOnly)]
                                             ;64bit: True
                                             ;legacy: True
                                             ;Sign extend 4 packed signed 8-bit integers in the low 4 bytes of xmm2/m32 to 4 packed signed 32-bit integers in xmm1.} */
                
                ERASM_DECODER_DO_ACTION (3,
                                         Pmovsxbd,
                                         Just<OpXMM>,
                                         Just<EncModrm_reg>,
                                         Just<OpXMM_M32>,
                                         Just<EncModrm_rm>,
                                         Nothing,
                                         Nothing);
            }
         else
            goto decode_error;
         case (0x22):
         if (prefix.operand_size)
            {
                /* EncodedInstructionDefinition {{[OPERAND_SIZE]
                                              ;0F 38 22 
                                              ;Just Modrm
                                              ;Just RMBoth
                                              ;Nothing
                                              ;[]
                                              ;Nothing
                                              ;Nothing}
                                             ;Prototype {protoMnemonic = "PMOVSXBQ", protoOperands = [OpXMM,OpXMM_M16]}
                                             ;[(EncModrm_reg
                                               ,OperandReadWrite)
                                              ,(EncModrm_rm,OperandReadOnly)]
                                             ;64bit: True
                                             ;legacy: True
                                             ;Sign extend 2 packed signed 8-bit integers in the low 2 bytes of xmm2/m16 to 2 packed signed 64-bit integers in xmm1.} */
                
                ERASM_DECODER_DO_ACTION (3,
                                         Pmovsxbq,
                                         Just<OpXMM>,
                                         Just<EncModrm_reg>,
                                         Just<OpXMM_M16>,
                                         Just<EncModrm_rm>,
                                         Nothing,
                                         Nothing);
            }
         else
            goto decode_error;
         case (0x23):
         if (prefix.operand_size)
            {
                /* EncodedInstructionDefinition {{[OPERAND_SIZE]
                                              ;0F 38 23 
                                              ;Just Modrm
                                              ;Just RMBoth
                                              ;Nothing
                                              ;[]
                                              ;Nothing
                                              ;Nothing}
                                             ;Prototype {protoMnemonic = "PMOVSXWD", protoOperands = [OpXMM,OpXMM_M64]}
                                             ;[(EncModrm_reg
                                               ,OperandReadWrite)
                                              ,(EncModrm_rm,OperandReadOnly)]
                                             ;64bit: True
                                             ;legacy: True
                                             ;Sign extend 4 packed signed 16-bit integers in the low 8 bytes of xmm2/m64 to 4 packed signed 32-bit integers in xmm1.} */
                
                ERASM_DECODER_DO_ACTION (3,
                                         Pmovsxwd,
                                         Just<OpXMM>,
                                         Just<EncModrm_reg>,
                                         Just<OpXMM_M64>,
                                         Just<EncModrm_rm>,
                                         Nothing,
                                         Nothing);
            }
         else
            goto decode_error;
         case (0x24):
         if (prefix.operand_size)
            {
                /* EncodedInstructionDefinition {{[OPERAND_SIZE]
                                              ;0F 38 24 
                                              ;Just Modrm
                                              ;Just RMBoth
                                              ;Nothing
                                              ;[]
                                              ;Nothing
                                              ;Nothing}
                                             ;Prototype {protoMnemonic = "PMOVSXWQ", protoOperands = [OpXMM,OpXMM_M32]}
                                             ;[(EncModrm_reg
                                               ,OperandReadWrite)
                                              ,(EncModrm_rm,OperandReadOnly)]
                                             ;64bit: True
                                             ;legacy: True
                                             ;Sign extend 2 packed signed 16-bit integers in the low 4 bytes of xmm2/m32 to 2 packed signed 64-bit integers in xmm1.} */
                
                ERASM_DECODER_DO_ACTION (3,
                                         Pmovsxwq,
                                         Just<OpXMM>,
                                         Just<EncModrm_reg>,
                                         Just<OpXMM_M32>,
                                         Just<EncModrm_rm>,
                                         Nothing,
                                         Nothing);
            }
         else
            goto decode_error;
         case (0x25):
         if (prefix.operand_size)
            {
                /* EncodedInstructionDefinition {{[OPERAND_SIZE]
                                              ;0F 38 25 
                                              ;Just Modrm
                                              ;Just RMBoth
                                              ;Nothing
                                              ;[]
                                              ;Nothing
                                              ;Nothing}
                                             ;Prototype {protoMnemonic = "PMOVSXDQ", protoOperands = [OpXMM,OpXMM_M64]}
                                             ;[(EncModrm_reg
                                               ,OperandReadWrite)
                                              ,(EncModrm_rm,OperandReadOnly)]
                                             ;64bit: True
                                             ;legacy: True
                                             ;Sign extend 2 packed signed 32-bit integers in the low 8 bytes of xmm2/m64 to 2 packed signed 64-bit integers in xmm1.} */
                
                ERASM_DECODER_DO_ACTION (3,
                                         Pmovsxdq,
                                         Just<OpXMM>,
                                         Just<EncModrm_reg>,
                                         Just<OpXMM_M64>,
                                         Just<EncModrm_rm>,
                                         Nothing,
                                         Nothing);
            }
         else
            goto decode_error;
         case (0x28):
         if (prefix.operand_size)
            {
                /* EncodedInstructionDefinition {{[OPERAND_SIZE]
                                              ;0F 38 28 
                                              ;Just Modrm
                                              ;Just RMBoth
                                              ;Nothing
                                              ;[]
                                              ;Nothing
                                              ;Nothing}
                                             ;Prototype {protoMnemonic = "PMULDQ", protoOperands = [OpXMM,OpXMM_M128]}
                                             ;[(EncModrm_reg
                                               ,OperandReadWrite)
                                              ,(EncModrm_rm,OperandReadOnly)]
                                             ;64bit: True
                                             ;legacy: True
                                             ;Multiply the packed signed dword integers in xmm1 and xmm2/m128 and store the quadword product in xmm1.} */
                
                ERASM_DECODER_DO_ACTION (3,
                                         Pmuldq,
                                         Just<OpXMM>,
                                         Just<EncModrm_reg>,
                                         Just<OpXMM_M128>,
                                         Just<EncModrm_rm>,
                                         Nothing,
                                         Nothing);
            }
         else
            goto decode_error;
         case (0x29):
         if (prefix.operand_size)
            {
                /* EncodedInstructionDefinition {{[OPERAND_SIZE]
                                              ;0F 38 29 
                                              ;Just Modrm
                                              ;Just RMBoth
                                              ;Nothing
                                              ;[]
                                              ;Nothing
                                              ;Nothing}
                                             ;Prototype {protoMnemonic = "PCMPEQQ", protoOperands = [OpXMM,OpXMM_M128]}
                                             ;[(EncModrm_reg
                                               ,OperandReadWrite)
                                              ,(EncModrm_rm,OperandReadOnly)]
                                             ;64bit: True
                                             ;legacy: True
                                             ;Compare packed qwords in xmm2/m128 and xmm1 for equality.} */
                
                ERASM_DECODER_DO_ACTION (3,
                                         Pcmpeqq,
                                         Just<OpXMM>,
                                         Just<EncModrm_reg>,
                                         Just<OpXMM_M128>,
                                         Just<EncModrm_rm>,
                                         Nothing,
                                         Nothing);
            }
         else
            goto decode_error;
         case (0x2a):
         if (!modrm_mod3 (p))
            if (prefix.operand_size)
               {
                   /* EncodedInstructionDefinition {{[OPERAND_SIZE]
                                                 ;0F 38 2A 
                                                 ;Just Modrm
                                                 ;Just RMMemOnly
                                                 ;Nothing
                                                 ;[]
                                                 ;Nothing
                                                 ;Nothing}
                                                ;Prototype {protoMnemonic = "MOVNTDQA", protoOperands = [OpXMM,OpM128Xmm]}
                                                ;[(EncModrm_reg
                                                  ,OperandReadWrite)
                                                 ,(EncModrm_rm,OperandReadOnly)]
                                                ;64bit: True
                                                ;legacy: True
                                                ;Move double quadword from m128 to xmm using non-temporal hint if WC memory type.} */
                   
                   ERASM_DECODER_DO_ACTION (3,
                                            Movntdqa,
                                            Just<OpXMM>,
                                            Just<EncModrm_reg>,
                                            Just<OpM128Xmm>,
                                            Just<EncModrm_rm_mem>,
                                            Nothing,
                                            Nothing);
               }
            else
               goto decode_error;
         else
            goto decode_error;
         case (0x2b):
         if (prefix.operand_size)
            {
                /* EncodedInstructionDefinition {{[OPERAND_SIZE]
                                              ;0F 38 2B 
                                              ;Just Modrm
                                              ;Just RMBoth
                                              ;Nothing
                                              ;[]
                                              ;Nothing
                                              ;Nothing}
                                             ;Prototype {protoMnemonic = "PACKUSDW", protoOperands = [OpXMM,OpXMM_M128]}
                                             ;[(EncModrm_reg
                                               ,OperandReadWrite)
                                              ,(EncModrm_rm,OperandReadOnly)]
                                             ;64bit: True
                                             ;legacy: True
                                             ;Convert 4 packed signed doubleword integers from xmm1 and 4 packed signed doubleword integers from xmm2/m128 into 8 packed unsigned word integers in xmm1 using unsigned saturation.} */
                
                ERASM_DECODER_DO_ACTION (3,
                                         Packusdw,
                                         Just<OpXMM>,
                                         Just<EncModrm_reg>,
                                         Just<OpXMM_M128>,
                                         Just<EncModrm_rm>,
                                         Nothing,
                                         Nothing);
            }
         else
            goto decode_error;
         case (0x30):
         if (prefix.operand_size)
            {
                /* EncodedInstructionDefinition {{[OPERAND_SIZE]
                                              ;0F 38 30 
                                              ;Just Modrm
                                              ;Just RMBoth
                                              ;Nothing
                                              ;[]
                                              ;Nothing
                                              ;Nothing}
                                             ;Prototype {protoMnemonic = "PMOVZXBW", protoOperands = [OpXMM,OpXMM_M64]}
                                             ;[(EncModrm_reg
                                               ,OperandReadWrite)
                                              ,(EncModrm_rm,OperandReadOnly)]
                                             ;64bit: True
                                             ;legacy: True
                                             ;Zero extend 8 packed 8-bit integers in the low 8 bytes of xmm2/m64 to 8 packed 16-bit integers in xmm1.} */
                
                ERASM_DECODER_DO_ACTION (3,
                                         Pmovzxbw,
                                         Just<OpXMM>,
                                         Just<EncModrm_reg>,
                                         Just<OpXMM_M64>,
                                         Just<EncModrm_rm>,
                                         Nothing,
                                         Nothing);
            }
         else
            goto decode_error;
         case (0x31):
         if (prefix.operand_size)
            {
                /* EncodedInstructionDefinition {{[OPERAND_SIZE]
                                              ;0F 38 31 
                                              ;Just Modrm
                                              ;Just RMBoth
                                              ;Nothing
                                              ;[]
                                              ;Nothing
                                              ;Nothing}
                                             ;Prototype {protoMnemonic = "PMOVZXBD", protoOperands = [OpXMM,OpXMM_M32]}
                                             ;[(EncModrm_reg
                                               ,OperandReadWrite)
                                              ,(EncModrm_rm,OperandReadOnly)]
                                             ;64bit: True
                                             ;legacy: True
                                             ;Zero extend 4 packed 8-bit integers in the low 4 bytes of xmm2/m32 to 4 packed 32-bit integers in xmm1.} */
                
                ERASM_DECODER_DO_ACTION (3,
                                         Pmovzxbd,
                                         Just<OpXMM>,
                                         Just<EncModrm_reg>,
                                         Just<OpXMM_M32>,
                                         Just<EncModrm_rm>,
                                         Nothing,
                                         Nothing);
            }
         else
            goto decode_error;
         case (0x32):
         if (prefix.operand_size)
            {
                /* EncodedInstructionDefinition {{[OPERAND_SIZE]
                                              ;0F 38 32 
                                              ;Just Modrm
                                              ;Just RMBoth
                                              ;Nothing
                                              ;[]
                                              ;Nothing
                                              ;Nothing}
                                             ;Prototype {protoMnemonic = "PMOVZXBQ", protoOperands = [OpXMM,OpXMM_M16]}
                                             ;[(EncModrm_reg
                                               ,OperandReadWrite)
                                              ,(EncModrm_rm,OperandReadOnly)]
                                             ;64bit: True
                                             ;legacy: True
                                             ;Zero extend 2 packed 8-bit integers in the low 2 bytes of xmm2/m16 to 2 packed 64-bit integers in xmm1.} */
                
                ERASM_DECODER_DO_ACTION (3,
                                         Pmovzxbq,
                                         Just<OpXMM>,
                                         Just<EncModrm_reg>,
                                         Just<OpXMM_M16>,
                                         Just<EncModrm_rm>,
                                         Nothing,
                                         Nothing);
            }
         else
            goto decode_error;
         case (0x33):
         if (prefix.operand_size)
            {
                /* EncodedInstructionDefinition {{[OPERAND_SIZE]
                                              ;0F 38 33 
                                              ;Just Modrm
                                              ;Just RMBoth
                                              ;Nothing
                                              ;[]
                                              ;Nothing
                                              ;Nothing}
                                             ;Prototype {protoMnemonic = "PMOVZXWD", protoOperands = [OpXMM,OpXMM_M64]}
                                             ;[(EncModrm_reg
                                               ,OperandReadWrite)
                                              ,(EncModrm_rm,OperandReadOnly)]
                                             ;64bit: True
                                             ;legacy: True
                                             ;Zero extend 4 packed 16-bit integers in the low 8 bytes of xmm2/m64 to 4 packed 32-bit integers in xmm1.} */
                
                ERASM_DECODER_DO_ACTION (3,
                                         Pmovzxwd,
                                         Just<OpXMM>,
                                         Just<EncModrm_reg>,
                                         Just<OpXMM_M64>,
                                         Just<EncModrm_rm>,
                                         Nothing,
                                         Nothing);
            }
         else
            goto decode_error;
         case (0x34):
         if (prefix.operand_size)
            {
                /* EncodedInstructionDefinition {{[OPERAND_SIZE]
                                              ;0F 38 34 
                                              ;Just Modrm
                                              ;Just RMBoth
                                              ;Nothing
                                              ;[]
                                              ;Nothing
                                              ;Nothing}
                                             ;Prototype {protoMnemonic = "PMOVZXWQ", protoOperands = [OpXMM,OpXMM_M32]}
                                             ;[(EncModrm_reg
                                               ,OperandReadWrite)
                                              ,(EncModrm_rm,OperandReadOnly)]
                                             ;64bit: True
                                             ;legacy: True
                                             ;Zero extend 2 packed 16-bit integers in the low 4 bytes of xmm2/m32 to 2 packed 64-bit integers in xmm1.} */
                
                ERASM_DECODER_DO_ACTION (3,
                                         Pmovzxwq,
                                         Just<OpXMM>,
                                         Just<EncModrm_reg>,
                                         Just<OpXMM_M32>,
                                         Just<EncModrm_rm>,
                                         Nothing,
                                         Nothing);
            }
         else
            goto decode_error;
         case (0x35):
         if (prefix.operand_size)
            {
                /* EncodedInstructionDefinition {{[OPERAND_SIZE]
                                              ;0F 38 35 
                                              ;Just Modrm
                                              ;Just RMBoth
                                              ;Nothing
                                              ;[]
                                              ;Nothing
                                              ;Nothing}
                                             ;Prototype {protoMnemonic = "PMOVZXDQ", protoOperands = [OpXMM,OpXMM_M64]}
                                             ;[(EncModrm_reg
                                               ,OperandReadWrite)
                                              ,(EncModrm_rm,OperandReadOnly)]
                                             ;64bit: True
                                             ;legacy: True
                                             ;Zero extend 2 packed 32-bit integers in the low 8 bytes of xmm2/m64 to 2 packed 64-bit integers in xmm1.} */
                
                ERASM_DECODER_DO_ACTION (3,
                                         Pmovzxdq,
                                         Just<OpXMM>,
                                         Just<EncModrm_reg>,
                                         Just<OpXMM_M64>,
                                         Just<EncModrm_rm>,
                                         Nothing,
                                         Nothing);
            }
         else
            goto decode_error;
         case (0x37):
         if (prefix.operand_size)
            {
                /* EncodedInstructionDefinition {{[OPERAND_SIZE]
                                              ;0F 38 37 
                                              ;Just Modrm
                                              ;Just RMBoth
                                              ;Nothing
                                              ;[]
                                              ;Nothing
                                              ;Nothing}
                                             ;Prototype {protoMnemonic = "PCMPGTQ", protoOperands = [OpXMM,OpXMM_M128]}
                                             ;[(EncModrm_reg
                                               ,OperandReadWrite)
                                              ,(EncModrm_rm,OperandReadOnly)]
                                             ;64bit: True
                                             ;legacy: True
                                             ;Compare packed qwords in xmm2/m128 and xmm1 for greater than.} */
                
                ERASM_DECODER_DO_ACTION (3,
                                         Pcmpgtq,
                                         Just<OpXMM>,
                                         Just<EncModrm_reg>,
                                         Just<OpXMM_M128>,
                                         Just<EncModrm_rm>,
                                         Nothing,
                                         Nothing);
            }
         else
            goto decode_error;
         case (0x38):
         if (prefix.operand_size)
            {
                /* EncodedInstructionDefinition {{[OPERAND_SIZE]
                                              ;0F 38 38 
                                              ;Just Modrm
                                              ;Just RMBoth
                                              ;Nothing
                                              ;[]
                                              ;Nothing
                                              ;Nothing}
                                             ;Prototype {protoMnemonic = "PMINSB", protoOperands = [OpXMM,OpXMM_M128]}
                                             ;[(EncModrm_reg
                                               ,OperandReadWrite)
                                              ,(EncModrm_rm,OperandReadOnly)]
                                             ;64bit: True
                                             ;legacy: True
                                             ;Compare packed signed byte integers in xmm1 and xmm2/m128 and store packed minimum values in xmm1.} */
                
                ERASM_DECODER_DO_ACTION (3,
                                         Pminsb,
                                         Just<OpXMM>,
                                         Just<EncModrm_reg>,
                                         Just<OpXMM_M128>,
                                         Just<EncModrm_rm>,
                                         Nothing,
                                         Nothing);
            }
         else
            goto decode_error;
         case (0x39):
         if (prefix.operand_size)
            {
                /* EncodedInstructionDefinition {{[OPERAND_SIZE]
                                              ;0F 38 39 
                                              ;Just Modrm
                                              ;Just RMBoth
                                              ;Nothing
                                              ;[]
                                              ;Nothing
                                              ;Nothing}
                                             ;Prototype {protoMnemonic = "PMINSD", protoOperands = [OpXMM,OpXMM_M128]}
                                             ;[(EncModrm_reg
                                               ,OperandReadWrite)
                                              ,(EncModrm_rm,OperandReadOnly)]
                                             ;64bit: True
                                             ;legacy: True
                                             ;Compare packed signed dword integers in xmm1 and xmm2/m128 and store packed minimum values in xmm1.} */
                
                ERASM_DECODER_DO_ACTION (3,
                                         Pminsd,
                                         Just<OpXMM>,
                                         Just<EncModrm_reg>,
                                         Just<OpXMM_M128>,
                                         Just<EncModrm_rm>,
                                         Nothing,
                                         Nothing);
            }
         else
            goto decode_error;
         case (0x3a):
         if (prefix.operand_size)
            {
                /* EncodedInstructionDefinition {{[OPERAND_SIZE]
                                              ;0F 38 3A 
                                              ;Just Modrm
                                              ;Just RMBoth
                                              ;Nothing
                                              ;[]
                                              ;Nothing
                                              ;Nothing}
                                             ;Prototype {protoMnemonic = "PMINUW", protoOperands = [OpXMM,OpXMM_M128]}
                                             ;[(EncModrm_reg
                                               ,OperandReadWrite)
                                              ,(EncModrm_rm,OperandReadOnly)]
                                             ;64bit: True
                                             ;legacy: True
                                             ;Compare packed unsigned word integers in xmm1 and xmm2/m128 and store packed minimum values in xmm1.} */
                
                ERASM_DECODER_DO_ACTION (3,
                                         Pminuw,
                                         Just<OpXMM>,
                                         Just<EncModrm_reg>,
                                         Just<OpXMM_M128>,
                                         Just<EncModrm_rm>,
                                         Nothing,
                                         Nothing);
            }
         else
            goto decode_error;
         case (0x3b):
         if (prefix.operand_size)
            {
                /* EncodedInstructionDefinition {{[OPERAND_SIZE]
                                              ;0F 38 3B 
                                              ;Just Modrm
                                              ;Just RMBoth
                                              ;Nothing
                                              ;[]
                                              ;Nothing
                                              ;Nothing}
                                             ;Prototype {protoMnemonic = "PMINUD", protoOperands = [OpXMM,OpXMM_M128]}
                                             ;[(EncModrm_reg
                                               ,OperandReadWrite)
                                              ,(EncModrm_rm,OperandReadOnly)]
                                             ;64bit: True
                                             ;legacy: True
                                             ;Compare packed unsigned dword integers in xmm1 and xmm2/m128 and store packed minimum values in xmm1.} */
                
                ERASM_DECODER_DO_ACTION (3,
                                         Pminud,
                                         Just<OpXMM>,
                                         Just<EncModrm_reg>,
                                         Just<OpXMM_M128>,
                                         Just<EncModrm_rm>,
                                         Nothing,
                                         Nothing);
            }
         else
            goto decode_error;
         case (0x3c):
         if (prefix.operand_size)
            {
                /* EncodedInstructionDefinition {{[OPERAND_SIZE]
                                              ;0F 38 3C 
                                              ;Just Modrm
                                              ;Just RMBoth
                                              ;Nothing
                                              ;[]
                                              ;Nothing
                                              ;Nothing}
                                             ;Prototype {protoMnemonic = "PMAXSB", protoOperands = [OpXMM,OpXMM_M128]}
                                             ;[(EncModrm_reg
                                               ,OperandReadWrite)
                                              ,(EncModrm_rm,OperandReadOnly)]
                                             ;64bit: True
                                             ;legacy: True
                                             ;Compare packed signed byte integers in xmm1 and xmm2/m128 and store packed maximum values in xmm1.} */
                
                ERASM_DECODER_DO_ACTION (3,
                                         Pmaxsb,
                                         Just<OpXMM>,
                                         Just<EncModrm_reg>,
                                         Just<OpXMM_M128>,
                                         Just<EncModrm_rm>,
                                         Nothing,
                                         Nothing);
            }
         else
            goto decode_error;
         case (0x3d):
         if (prefix.operand_size)
            {
                /* EncodedInstructionDefinition {{[OPERAND_SIZE]
                                              ;0F 38 3D 
                                              ;Just Modrm
                                              ;Just RMBoth
                                              ;Nothing
                                              ;[]
                                              ;Nothing
                                              ;Nothing}
                                             ;Prototype {protoMnemonic = "PMAXSD", protoOperands = [OpXMM,OpXMM_M128]}
                                             ;[(EncModrm_reg
                                               ,OperandReadWrite)
                                              ,(EncModrm_rm,OperandReadOnly)]
                                             ;64bit: True
                                             ;legacy: True
                                             ;Compare packed signed dword integers in xmm1 and xmm2/m128 and store packed maximum values in xmm1.} */
                
                ERASM_DECODER_DO_ACTION (3,
                                         Pmaxsd,
                                         Just<OpXMM>,
                                         Just<EncModrm_reg>,
                                         Just<OpXMM_M128>,
                                         Just<EncModrm_rm>,
                                         Nothing,
                                         Nothing);
            }
         else
            goto decode_error;
         case (0x3e):
         if (prefix.operand_size)
            {
                /* EncodedInstructionDefinition {{[OPERAND_SIZE]
                                              ;0F 38 3E 
                                              ;Just Modrm
                                              ;Just RMBoth
                                              ;Nothing
                                              ;[]
                                              ;Nothing
                                              ;Nothing}
                                             ;Prototype {protoMnemonic = "PMAXUW", protoOperands = [OpXMM,OpXMM_M128]}
                                             ;[(EncModrm_reg
                                               ,OperandReadWrite)
                                              ,(EncModrm_rm,OperandReadOnly)]
                                             ;64bit: True
                                             ;legacy: True
                                             ;Compare packed unsigned word integers in xmm1 and xmm2/m128 and store packed maximum values in xmm1.} */
                
                ERASM_DECODER_DO_ACTION (3,
                                         Pmaxuw,
                                         Just<OpXMM>,
                                         Just<EncModrm_reg>,
                                         Just<OpXMM_M128>,
                                         Just<EncModrm_rm>,
                                         Nothing,
                                         Nothing);
            }
         else
            goto decode_error;
         case (0x3f):
         if (prefix.operand_size)
            {
                /* EncodedInstructionDefinition {{[OPERAND_SIZE]
                                              ;0F 38 3F 
                                              ;Just Modrm
                                              ;Just RMBoth
                                              ;Nothing
                                              ;[]
                                              ;Nothing
                                              ;Nothing}
                                             ;Prototype {protoMnemonic = "PMAXUD", protoOperands = [OpXMM,OpXMM_M128]}
                                             ;[(EncModrm_reg
                                               ,OperandReadWrite)
                                              ,(EncModrm_rm,OperandReadOnly)]
                                             ;64bit: True
                                             ;legacy: True
                                             ;Compare packed unsigned dword integers in xmm1 and xmm2/m128 and store packed maximum values in xmm1.} */
                
                ERASM_DECODER_DO_ACTION (3,
                                         Pmaxud,
                                         Just<OpXMM>,
                                         Just<EncModrm_reg>,
                                         Just<OpXMM_M128>,
                                         Just<EncModrm_rm>,
                                         Nothing,
                                         Nothing);
            }
         else
            goto decode_error;
         case (0x40):
         if (prefix.operand_size)
            {
                /* EncodedInstructionDefinition {{[OPERAND_SIZE]
                                              ;0F 38 40 
                                              ;Just Modrm
                                              ;Just RMBoth
                                              ;Nothing
                                              ;[]
                                              ;Nothing
                                              ;Nothing}
                                             ;Prototype {protoMnemonic = "PMULLD", protoOperands = [OpXMM,OpXMM_M128]}
                                             ;[(EncModrm_reg
                                               ,OperandReadWrite)
                                              ,(EncModrm_rm,OperandReadOnly)]
                                             ;64bit: True
                                             ;legacy: True
                                             ;Multiply the packed dword signed integers in xmm1 and xmm2/m128 and store the low 32 bits of each product in xmm1.} */
                
                ERASM_DECODER_DO_ACTION (3,
                                         Pmulld,
                                         Just<OpXMM>,
                                         Just<EncModrm_reg>,
                                         Just<OpXMM_M128>,
                                         Just<EncModrm_rm>,
                                         Nothing,
                                         Nothing);
            }
         else
            goto decode_error;
         case (0x41):
         if (prefix.operand_size)
            {
                /* EncodedInstructionDefinition {{[OPERAND_SIZE]
                                              ;0F 38 41 
                                              ;Just Modrm
                                              ;Just RMBoth
                                              ;Nothing
                                              ;[]
                                              ;Nothing
                                              ;Nothing}
                                             ;Prototype {protoMnemonic = "PHMINPOSUW", protoOperands = [OpXMM,OpXMM_M128]}
                                             ;[(EncModrm_reg
                                               ,OperandReadWrite)
                                              ,(EncModrm_rm,OperandReadOnly)]
                                             ;64bit: True
                                             ;legacy: True
                                             ;Find the minimum unsigned word in xmm2/m128 and place its value in the low word of xmm1 and its index in the second-lowest word of xmm1.} */
                
                ERASM_DECODER_DO_ACTION (3,
                                         Phminposuw,
                                         Just<OpXMM>,
                                         Just<EncModrm_reg>,
                                         Just<OpXMM_M128>,
                                         Just<EncModrm_rm>,
                                         Nothing,
                                         Nothing);
            }
         else
            goto decode_error;
         case (0x80):
         if (!modrm_mod3 (p))
            if (prefix.operand_size)
               {
                   /* EncodedInstructionDefinition {{[OPERAND_SIZE]
                                                 ;0F 38 80 
                                                 ;Just Modrm
                                                 ;Just RMMemOnly
                                                 ;Nothing
                                                 ;[]
                                                 ;Nothing
                                                 ;Nothing}
                                                ;Prototype {protoMnemonic = "INVEPT", protoOperands = [OpR32,OpM128]}
                                                ;[(EncModrm_reg
                                                  ,OperandReadWrite)
                                                 ,(EncModrm_rm,OperandReadWrite)]
                                                ;64bit: False
                                                ;legacy: True
                                                ;Invalidates EPT-derived entries in the TLBs and paging-structure caches (outside 64-bit mode)} */
                   
                   ERASM_DECODER_DO_ACTION (3,
                                            Invept,
                                            Just<OpR32>,
                                            Just<EncModrm_reg>,
                                            Just<OpM128>,
                                            Just<EncModrm_rm_mem>,
                                            Nothing,
                                            Nothing);
               }
            else
               goto decode_error;
         else
            goto decode_error;
         case (0x81):
         if (!modrm_mod3 (p))
            if (prefix.operand_size)
               {
                   /* EncodedInstructionDefinition {{[OPERAND_SIZE]
                                                 ;0F 38 81 
                                                 ;Just Modrm
                                                 ;Just RMMemOnly
                                                 ;Nothing
                                                 ;[]
                                                 ;Nothing
                                                 ;Nothing}
                                                ;Prototype {protoMnemonic = "INVVPID", protoOperands = [OpR32,OpM128]}
                                                ;[(EncModrm_reg
                                                  ,OperandReadWrite)
                                                 ,(EncModrm_rm,OperandReadWrite)]
                                                ;64bit: False
                                                ;legacy: True
                                                ;Invalidates entries in the TLBs and paging-structure caches based on VPID (outside 64-bit mode)} */
                   
                   ERASM_DECODER_DO_ACTION (3,
                                            Invvpid,
                                            Just<OpR32>,
                                            Just<EncModrm_reg>,
                                            Just<OpM128>,
                                            Just<EncModrm_rm_mem>,
                                            Nothing,
                                            Nothing);
               }
            else
               goto decode_error;
         else
            goto decode_error;
         case (0xdb):
         if (prefix.operand_size)
            {
                /* EncodedInstructionDefinition {{[OPERAND_SIZE]
                                              ;0F 38 DB 
                                              ;Just Modrm
                                              ;Just RMBoth
                                              ;Nothing
                                              ;[]
                                              ;Nothing
                                              ;Nothing}
                                             ;Prototype {protoMnemonic = "AESIMC", protoOperands = [OpXMM,OpXMM_M128]}
                                             ;[(EncModrm_reg
                                               ,OperandReadWrite)
                                              ,(EncModrm_rm,OperandReadOnly)]
                                             ;64bit: True
                                             ;legacy: True
                                             ;Perform the InvMixColumn transformation on a 128-bit round key from xmm2/m128 and store the result in xmm1.} */
                
                ERASM_DECODER_DO_ACTION (3,
                                         Aesimc,
                                         Just<OpXMM>,
                                         Just<EncModrm_reg>,
                                         Just<OpXMM_M128>,
                                         Just<EncModrm_rm>,
                                         Nothing,
                                         Nothing);
            }
         else
            goto decode_error;
         case (0xdc):
         if (prefix.operand_size)
            {
                /* EncodedInstructionDefinition {{[OPERAND_SIZE]
                                              ;0F 38 DC 
                                              ;Just Modrm
                                              ;Just RMBoth
                                              ;Nothing
                                              ;[]
                                              ;Nothing
                                              ;Nothing}
                                             ;Prototype {protoMnemonic = "AESENC", protoOperands = [OpXMM,OpXMM_M128]}
                                             ;[(EncModrm_reg
                                               ,OperandReadWrite)
                                              ,(EncModrm_rm,OperandReadOnly)]
                                             ;64bit: True
                                             ;legacy: True
                                             ;Perform one round of an AES encryption flow, operat- ing on a 128-bit data (state) from xmm1 with a 128-bit round key from xmm2/m128.} */
                
                ERASM_DECODER_DO_ACTION (3,
                                         Aesenc,
                                         Just<OpXMM>,
                                         Just<EncModrm_reg>,
                                         Just<OpXMM_M128>,
                                         Just<EncModrm_rm>,
                                         Nothing,
                                         Nothing);
            }
         else
            goto decode_error;
         case (0xdd):
         if (prefix.operand_size)
            {
                /* EncodedInstructionDefinition {{[OPERAND_SIZE]
                                              ;0F 38 DD 
                                              ;Just Modrm
                                              ;Just RMBoth
                                              ;Nothing
                                              ;[]
                                              ;Nothing
                                              ;Nothing}
                                             ;Prototype {protoMnemonic = "AESENCLAST", protoOperands = [OpXMM,OpXMM_M128]}
                                             ;[(EncModrm_reg
                                               ,OperandReadWrite)
                                              ,(EncModrm_rm,OperandReadOnly)]
                                             ;64bit: True
                                             ;legacy: True
                                             ;Perform the last round of an AES encryption flow, operat- ing on a 128-bit data (state) from xmm1 with a 128-bit round key from xmm2/m128.} */
                
                ERASM_DECODER_DO_ACTION (3,
                                         Aesenclast,
                                         Just<OpXMM>,
                                         Just<EncModrm_reg>,
                                         Just<OpXMM_M128>,
                                         Just<EncModrm_rm>,
                                         Nothing,
                                         Nothing);
            }
         else
            goto decode_error;
         case (0xde):
         if (prefix.operand_size)
            {
                /* EncodedInstructionDefinition {{[OPERAND_SIZE]
                                              ;0F 38 DE 
                                              ;Just Modrm
                                              ;Just RMBoth
                                              ;Nothing
                                              ;[]
                                              ;Nothing
                                              ;Nothing}
                                             ;Prototype {protoMnemonic = "AESDEC", protoOperands = [OpXMM,OpXMM_M128]}
                                             ;[(EncModrm_reg
                                               ,OperandReadWrite)
                                              ,(EncModrm_rm,OperandReadOnly)]
                                             ;64bit: True
                                             ;legacy: True
                                             ;Perform one round of an AES decryption flow, using the Equivalent Inverse Cipher, operating on a 128- bit data (state) from xmm1 with a 128-bit round key from xmm2/m128.} */
                
                ERASM_DECODER_DO_ACTION (3,
                                         Aesdec,
                                         Just<OpXMM>,
                                         Just<EncModrm_reg>,
                                         Just<OpXMM_M128>,
                                         Just<EncModrm_rm>,
                                         Nothing,
                                         Nothing);
            }
         else
            goto decode_error;
         case (0xdf):
         if (prefix.operand_size)
            {
                /* EncodedInstructionDefinition {{[OPERAND_SIZE]
                                              ;0F 38 DF 
                                              ;Just Modrm
                                              ;Just RMBoth
                                              ;Nothing
                                              ;[]
                                              ;Nothing
                                              ;Nothing}
                                             ;Prototype {protoMnemonic = "AESDECLAST", protoOperands = [OpXMM,OpXMM_M128]}
                                             ;[(EncModrm_reg
                                               ,OperandReadWrite)
                                              ,(EncModrm_rm,OperandReadOnly)]
                                             ;64bit: True
                                             ;legacy: True
                                             ;Perform the last round of an AES decryption flow, using the Equivalent Inverse Cipher, operating on a 128- bit data (state) from xmm1 with a 128-bit round key from xmm2/m128.} */
                
                ERASM_DECODER_DO_ACTION (3,
                                         Aesdeclast,
                                         Just<OpXMM>,
                                         Just<EncModrm_reg>,
                                         Just<OpXMM_M128>,
                                         Just<EncModrm_rm>,
                                         Nothing,
                                         Nothing);
            }
         else
            goto decode_error;
         case (0xf0):
         if (modrm_mod3 (p))
            if (prefix.repne)
               {
                   /* EncodedInstructionDefinition {{[REPNE]
                                                 ;0F 38 F0 
                                                 ;Just Modrm
                                                 ;Just RMBoth
                                                 ;Nothing
                                                 ;[]
                                                 ;Nothing
                                                 ;Nothing}
                                                ;Prototype {protoMnemonic = "CRC32", protoOperands = [OpR32,OpRM8]}
                                                ;[(EncModrm_reg
                                                  ,OperandReadWrite)
                                                 ,(EncModrm_rm,OperandReadOnly)]
                                                ;64bit: True
                                                ;legacy: True
                                                ;Accumulate CRC32 on r/m8.} */
                   
                   ERASM_DECODER_DO_ACTION (3,
                                            Crc32,
                                            Just<OpR32>,
                                            Just<EncModrm_reg>,
                                            Just<OpRM8>,
                                            Just<EncModrm_rm>,
                                            Nothing,
                                            Nothing);
               }
            else
               goto decode_error;
         else
            if (prefix.repne)
               {
                   /* EncodedInstructionDefinition {{[REPNE]
                                                 ;0F 38 F0 
                                                 ;Just Modrm
                                                 ;Just RMBoth
                                                 ;Nothing
                                                 ;[]
                                                 ;Nothing
                                                 ;Nothing}
                                                ;Prototype {protoMnemonic = "CRC32", protoOperands = [OpR32,OpRM8]}
                                                ;[(EncModrm_reg
                                                  ,OperandReadWrite)
                                                 ,(EncModrm_rm,OperandReadOnly)]
                                                ;64bit: True
                                                ;legacy: True
                                                ;Accumulate CRC32 on r/m8.} */
                   
                   ERASM_DECODER_DO_ACTION (3,
                                            Crc32,
                                            Just<OpR32>,
                                            Just<EncModrm_reg>,
                                            Just<OpRM8>,
                                            Just<EncModrm_rm>,
                                            Nothing,
                                            Nothing);
               }
            else
               if (is_data16)
                  {
                      /* EncodedInstructionDefinition {{[]
                                                    ;0F 38 F0 
                                                    ;Just Modrm
                                                    ;Just RMMemOnly
                                                    ;Nothing
                                                    ;[]
                                                    ;Just Op16
                                                    ;Nothing}
                                                   ;Prototype {protoMnemonic = "MOVBE", protoOperands = [OpR16,OpM16]}
                                                   ;[(EncModrm_reg
                                                     ,OperandReadWrite)
                                                    ,(EncModrm_rm,OperandReadOnly)]
                                                   ;64bit: True
                                                   ;legacy: True
                                                   ;Reverse byte order in m16 and move to r16} */
                      
                      ERASM_DECODER_DO_ACTION (3,
                                               Movbe,
                                               Just<OpR16>,
                                               Just<EncModrm_reg>,
                                               Just<OpM16>,
                                               Just<EncModrm_rm_mem>,
                                               Nothing,
                                               Nothing);
                  }
               else
                  {
                      /* EncodedInstructionDefinition {{[]
                                                    ;0F 38 F0 
                                                    ;Just Modrm
                                                    ;Just RMMemOnly
                                                    ;Nothing
                                                    ;[]
                                                    ;Just Op32
                                                    ;Nothing}
                                                   ;Prototype {protoMnemonic = "MOVBE", protoOperands = [OpR32,OpM32]}
                                                   ;[(EncModrm_reg
                                                     ,OperandReadWrite)
                                                    ,(EncModrm_rm,OperandReadOnly)]
                                                   ;64bit: True
                                                   ;legacy: True
                                                   ;Reverse byte order in m32 and move to r32} */
                      
                      ERASM_DECODER_DO_ACTION (3,
                                               Movbe,
                                               Just<OpR32>,
                                               Just<EncModrm_reg>,
                                               Just<OpM32>,
                                               Just<EncModrm_rm_mem>,
                                               Nothing,
                                               Nothing);
                  }
         case (0xf1):
         if (modrm_mod3 (p))
            if (prefix.repne)
               if (is_data16)
                  {
                      /* EncodedInstructionDefinition {{[REPNE]
                                                    ;0F 38 F1 
                                                    ;Just Modrm
                                                    ;Just RMBoth
                                                    ;Nothing
                                                    ;[]
                                                    ;Just Op16
                                                    ;Nothing}
                                                   ;Prototype {protoMnemonic = "CRC32", protoOperands = [OpR32,OpRM16]}
                                                   ;[(EncModrm_reg
                                                     ,OperandReadWrite)
                                                    ,(EncModrm_rm,OperandReadOnly)]
                                                   ;64bit: True
                                                   ;legacy: True
                                                   ;Accumulate CRC32 on r/m16.} */
                      
                      ERASM_DECODER_DO_ACTION (3,
                                               Crc32,
                                               Just<OpR32>,
                                               Just<EncModrm_reg>,
                                               Just<OpRM16>,
                                               Just<EncModrm_rm>,
                                               Nothing,
                                               Nothing);
                  }
               else
                  {
                      /* EncodedInstructionDefinition {{[REPNE]
                                                    ;0F 38 F1 
                                                    ;Just Modrm
                                                    ;Just RMBoth
                                                    ;Nothing
                                                    ;[]
                                                    ;Just Op32
                                                    ;Nothing}
                                                   ;Prototype {protoMnemonic = "CRC32", protoOperands = [OpR32,OpRM32]}
                                                   ;[(EncModrm_reg
                                                     ,OperandReadWrite)
                                                    ,(EncModrm_rm,OperandReadOnly)]
                                                   ;64bit: True
                                                   ;legacy: True
                                                   ;Accumulate CRC32 on r/m32.} */
                      
                      ERASM_DECODER_DO_ACTION (3,
                                               Crc32,
                                               Just<OpR32>,
                                               Just<EncModrm_reg>,
                                               Just<OpRM32>,
                                               Just<EncModrm_rm>,
                                               Nothing,
                                               Nothing);
                  }
            else
               goto decode_error;
         else
            if (prefix.repne)
               if (is_data16)
                  {
                      /* EncodedInstructionDefinition {{[REPNE]
                                                    ;0F 38 F1 
                                                    ;Just Modrm
                                                    ;Just RMBoth
                                                    ;Nothing
                                                    ;[]
                                                    ;Just Op16
                                                    ;Nothing}
                                                   ;Prototype {protoMnemonic = "CRC32", protoOperands = [OpR32,OpRM16]}
                                                   ;[(EncModrm_reg
                                                     ,OperandReadWrite)
                                                    ,(EncModrm_rm,OperandReadOnly)]
                                                   ;64bit: True
                                                   ;legacy: True
                                                   ;Accumulate CRC32 on r/m16.} */
                      
                      ERASM_DECODER_DO_ACTION (3,
                                               Crc32,
                                               Just<OpR32>,
                                               Just<EncModrm_reg>,
                                               Just<OpRM16>,
                                               Just<EncModrm_rm>,
                                               Nothing,
                                               Nothing);
                  }
               else
                  {
                      /* EncodedInstructionDefinition {{[REPNE]
                                                    ;0F 38 F1 
                                                    ;Just Modrm
                                                    ;Just RMBoth
                                                    ;Nothing
                                                    ;[]
                                                    ;Just Op32
                                                    ;Nothing}
                                                   ;Prototype {protoMnemonic = "CRC32", protoOperands = [OpR32,OpRM32]}
                                                   ;[(EncModrm_reg
                                                     ,OperandReadWrite)
                                                    ,(EncModrm_rm,OperandReadOnly)]
                                                   ;64bit: True
                                                   ;legacy: True
                                                   ;Accumulate CRC32 on r/m32.} */
                      
                      ERASM_DECODER_DO_ACTION (3,
                                               Crc32,
                                               Just<OpR32>,
                                               Just<EncModrm_reg>,
                                               Just<OpRM32>,
                                               Just<EncModrm_rm>,
                                               Nothing,
                                               Nothing);
                  }
            else
               if (is_data16)
                  {
                      /* EncodedInstructionDefinition {{[]
                                                    ;0F 38 F1 
                                                    ;Just Modrm
                                                    ;Just RMMemOnly
                                                    ;Nothing
                                                    ;[]
                                                    ;Just Op16
                                                    ;Nothing}
                                                   ;Prototype {protoMnemonic = "MOVBE", protoOperands = [OpM16,OpR16]}
                                                   ;[(EncModrm_rm,OperandReadWrite)
                                                    ,(EncModrm_reg,OperandReadOnly)]
                                                   ;64bit: True
                                                   ;legacy: True
                                                   ;Reverse byte order in r16 and move to m16} */
                      
                      ERASM_DECODER_DO_ACTION (3,
                                               Movbe,
                                               Just<OpM16>,
                                               Just<EncModrm_rm_mem>,
                                               Just<OpR16>,
                                               Just<EncModrm_reg>,
                                               Nothing,
                                               Nothing);
                  }
               else
                  {
                      /* EncodedInstructionDefinition {{[]
                                                    ;0F 38 F1 
                                                    ;Just Modrm
                                                    ;Just RMMemOnly
                                                    ;Nothing
                                                    ;[]
                                                    ;Just Op32
                                                    ;Nothing}
                                                   ;Prototype {protoMnemonic = "MOVBE", protoOperands = [OpM32,OpR32]}
                                                   ;[(EncModrm_rm,OperandReadWrite)
                                                    ,(EncModrm_reg,OperandReadOnly)]
                                                   ;64bit: True
                                                   ;legacy: True
                                                   ;Reverse byte order in r32 and move to m32} */
                      
                      ERASM_DECODER_DO_ACTION (3,
                                               Movbe,
                                               Just<OpM32>,
                                               Just<EncModrm_rm_mem>,
                                               Just<OpR32>,
                                               Just<EncModrm_reg>,
                                               Nothing,
                                               Nothing);
                  }
         
      }
      case (0x3a):
      switch (*p++) {
         case (0x8):
         if (prefix.operand_size)
            {
                /* EncodedInstructionDefinition {{[OPERAND_SIZE]
                                              ;0F 3A 08 
                                              ;Just Modrm
                                              ;Just RMBoth
                                              ;Nothing
                                              ;[IMM_IB]
                                              ;Nothing
                                              ;Nothing}
                                             ;Prototype {protoMnemonic = "ROUNDPS", protoOperands = [OpXMM,OpXMM_M128,OpIMM8]}
                                             ;[(EncModrm_reg
                                               ,OperandReadWrite)
                                              ,(EncModrm_rm,OperandReadOnly)
                                              ,(EncIMM,OperandReadWrite)]
                                             ;64bit: True
                                             ;legacy: True
                                             ;Round packed single precision floating-point values in xmm2/m128 and place the result in xmm1. The rounding mode is determined by imm8.} */
                
                ERASM_DECODER_DO_ACTION (3,
                                         Roundps,
                                         Just<OpXMM>,
                                         Just<EncModrm_reg>,
                                         Just<OpXMM_M128>,
                                         Just<EncModrm_rm>,
                                         Just<OpIMM8>,
                                         Just<EncIMM>);
            }
         else
            goto decode_error;
         case (0x9):
         if (prefix.operand_size)
            {
                /* EncodedInstructionDefinition {{[OPERAND_SIZE]
                                              ;0F 3A 09 
                                              ;Just Modrm
                                              ;Just RMBoth
                                              ;Nothing
                                              ;[IMM_IB]
                                              ;Nothing
                                              ;Nothing}
                                             ;Prototype {protoMnemonic = "ROUNDPD", protoOperands = [OpXMM,OpXMM_M128,OpIMM8]}
                                             ;[(EncModrm_reg
                                               ,OperandReadWrite)
                                              ,(EncModrm_rm,OperandReadOnly)
                                              ,(EncIMM,OperandReadWrite)]
                                             ;64bit: True
                                             ;legacy: True
                                             ;Round packed double precision floating-point values in xmm2/m128 and place the result in xmm1. The rounding mode is determined by imm8.} */
                
                ERASM_DECODER_DO_ACTION (3,
                                         Roundpd,
                                         Just<OpXMM>,
                                         Just<EncModrm_reg>,
                                         Just<OpXMM_M128>,
                                         Just<EncModrm_rm>,
                                         Just<OpIMM8>,
                                         Just<EncIMM>);
            }
         else
            goto decode_error;
         case (0xa):
         if (prefix.operand_size)
            {
                /* EncodedInstructionDefinition {{[OPERAND_SIZE]
                                              ;0F 3A 0A 
                                              ;Just Modrm
                                              ;Just RMBoth
                                              ;Nothing
                                              ;[IMM_IB]
                                              ;Nothing
                                              ;Nothing}
                                             ;Prototype {protoMnemonic = "ROUNDSS", protoOperands = [OpXMM,OpXMM_M32,OpIMM8]}
                                             ;[(EncModrm_reg
                                               ,OperandReadWrite)
                                              ,(EncModrm_rm,OperandReadOnly)
                                              ,(EncIMM,OperandReadWrite)]
                                             ;64bit: True
                                             ;legacy: True
                                             ;Round the low packed single precision floating-point value in xmm2/m32 and place the result in xmm1. The rounding mode is determined by imm8.} */
                
                ERASM_DECODER_DO_ACTION (3,
                                         Roundss,
                                         Just<OpXMM>,
                                         Just<EncModrm_reg>,
                                         Just<OpXMM_M32>,
                                         Just<EncModrm_rm>,
                                         Just<OpIMM8>,
                                         Just<EncIMM>);
            }
         else
            goto decode_error;
         case (0xb):
         if (prefix.operand_size)
            {
                /* EncodedInstructionDefinition {{[OPERAND_SIZE]
                                              ;0F 3A 0B 
                                              ;Just Modrm
                                              ;Just RMBoth
                                              ;Nothing
                                              ;[IMM_IB]
                                              ;Nothing
                                              ;Nothing}
                                             ;Prototype {protoMnemonic = "ROUNDSD", protoOperands = [OpXMM,OpXMM_M64,OpIMM8]}
                                             ;[(EncModrm_reg
                                               ,OperandReadWrite)
                                              ,(EncModrm_rm,OperandReadOnly)
                                              ,(EncIMM,OperandReadWrite)]
                                             ;64bit: True
                                             ;legacy: True
                                             ;Round the low packed double precision floating- point value in xmm2/m64 and place the result in xmm1. The rounding mode is determined by imm8.} */
                
                ERASM_DECODER_DO_ACTION (3,
                                         Roundsd,
                                         Just<OpXMM>,
                                         Just<EncModrm_reg>,
                                         Just<OpXMM_M64>,
                                         Just<EncModrm_rm>,
                                         Just<OpIMM8>,
                                         Just<EncIMM>);
            }
         else
            goto decode_error;
         case (0xc):
         if (prefix.operand_size)
            {
                /* EncodedInstructionDefinition {{[OPERAND_SIZE]
                                              ;0F 3A 0C 
                                              ;Just Modrm
                                              ;Just RMBoth
                                              ;Nothing
                                              ;[IMM_IB]
                                              ;Nothing
                                              ;Nothing}
                                             ;Prototype {protoMnemonic = "BLENDPS", protoOperands = [OpXMM,OpXMM_M128,OpIMM8]}
                                             ;[(EncModrm_reg
                                               ,OperandReadWrite)
                                              ,(EncModrm_rm,OperandReadOnly)
                                              ,(EncIMM,OperandReadWrite)]
                                             ;64bit: True
                                             ;legacy: True
                                             ;Select packed single precision floating-point values from xmm1 and xmm2/m128 from mask specified in imm8 and store the values into xmm1.} */
                
                ERASM_DECODER_DO_ACTION (3,
                                         Blendps,
                                         Just<OpXMM>,
                                         Just<EncModrm_reg>,
                                         Just<OpXMM_M128>,
                                         Just<EncModrm_rm>,
                                         Just<OpIMM8>,
                                         Just<EncIMM>);
            }
         else
            goto decode_error;
         case (0xd):
         if (prefix.operand_size)
            {
                /* EncodedInstructionDefinition {{[OPERAND_SIZE]
                                              ;0F 3A 0D 
                                              ;Just Modrm
                                              ;Just RMBoth
                                              ;Nothing
                                              ;[IMM_IB]
                                              ;Nothing
                                              ;Nothing}
                                             ;Prototype {protoMnemonic = "BLENDPD", protoOperands = [OpXMM,OpXMM_M128,OpIMM8]}
                                             ;[(EncModrm_reg
                                               ,OperandReadWrite)
                                              ,(EncModrm_rm,OperandReadOnly)
                                              ,(EncIMM,OperandReadWrite)]
                                             ;64bit: True
                                             ;legacy: True
                                             ;Select packed DP-FP values from xmm1 and xmm2/m128 from mask specified in imm8 and store the values into xmm1.} */
                
                ERASM_DECODER_DO_ACTION (3,
                                         Blendpd,
                                         Just<OpXMM>,
                                         Just<EncModrm_reg>,
                                         Just<OpXMM_M128>,
                                         Just<EncModrm_rm>,
                                         Just<OpIMM8>,
                                         Just<EncIMM>);
            }
         else
            goto decode_error;
         case (0xe):
         if (prefix.operand_size)
            {
                /* EncodedInstructionDefinition {{[OPERAND_SIZE]
                                              ;0F 3A 0E 
                                              ;Just Modrm
                                              ;Just RMBoth
                                              ;Nothing
                                              ;[IMM_IB]
                                              ;Nothing
                                              ;Nothing}
                                             ;Prototype {protoMnemonic = "PBLENDW", protoOperands = [OpXMM,OpXMM_M128,OpIMM8]}
                                             ;[(EncModrm_reg
                                               ,OperandReadWrite)
                                              ,(EncModrm_rm,OperandReadOnly)
                                              ,(EncIMM,OperandReadWrite)]
                                             ;64bit: True
                                             ;legacy: True
                                             ;Select words from xmm1 and xmm2/m128 from mask specified in imm8 and store the values into xmm1.} */
                
                ERASM_DECODER_DO_ACTION (3,
                                         Pblendw,
                                         Just<OpXMM>,
                                         Just<EncModrm_reg>,
                                         Just<OpXMM_M128>,
                                         Just<EncModrm_rm>,
                                         Just<OpIMM8>,
                                         Just<EncIMM>);
            }
         else
            goto decode_error;
         case (0xf):
         if (prefix.operand_size)
            {
                /* EncodedInstructionDefinition {{[OPERAND_SIZE]
                                              ;0F 3A 0F 
                                              ;Just Modrm
                                              ;Just RMBoth
                                              ;Nothing
                                              ;[IMM_IB]
                                              ;Nothing
                                              ;Nothing}
                                             ;Prototype {protoMnemonic = "PALIGNR", protoOperands = [OpXMM,OpXMM_M128,OpIMM8]}
                                             ;[(EncModrm_reg
                                               ,OperandReadWrite)
                                              ,(EncModrm_rm,OperandReadOnly)
                                              ,(EncIMM,OperandReadWrite)]
                                             ;64bit: True
                                             ;legacy: True
                                             ;Concatenate destination and source operands, extract byte-aligned result shifted to the right by constant value in imm8 into xmm1} */
                
                ERASM_DECODER_DO_ACTION (3,
                                         Palignr,
                                         Just<OpXMM>,
                                         Just<EncModrm_reg>,
                                         Just<OpXMM_M128>,
                                         Just<EncModrm_rm>,
                                         Just<OpIMM8>,
                                         Just<EncIMM>);
            }
         else
            {
                /* EncodedInstructionDefinition {{[]
                                              ;0F 3A 0F 
                                              ;Just Modrm
                                              ;Just RMBoth
                                              ;Nothing
                                              ;[IMM_IB]
                                              ;Nothing
                                              ;Nothing}
                                             ;Prototype {protoMnemonic = "PALIGNR", protoOperands = [OpMM,OpMM_M64,OpIMM8]}
                                             ;[(EncModrm_reg
                                               ,OperandReadWrite)
                                              ,(EncModrm_rm,OperandReadOnly)
                                              ,(EncIMM,OperandReadWrite)]
                                             ;64bit: True
                                             ;legacy: True
                                             ;Concatenate destination and source operands, extract byte-aligned result shifted to the right by constant value in imm8 into mm1.} */
                
                ERASM_DECODER_DO_ACTION (3,
                                         Palignr,
                                         Just<OpMM>,
                                         Just<EncModrm_reg>,
                                         Just<OpMM_M64>,
                                         Just<EncModrm_rm>,
                                         Just<OpIMM8>,
                                         Just<EncIMM>);
            }
         case (0x14):
         if (prefix.operand_size)
            {
                /* EncodedInstructionDefinition {{[OPERAND_SIZE]
                                              ;0F 3A 14 
                                              ;Just Modrm
                                              ;Just RMBoth
                                              ;Nothing
                                              ;[IMM_IB]
                                              ;Nothing
                                              ;Nothing}
                                             ;Prototype {protoMnemonic = "PEXTRB", protoOperands = [OpRDefault_M8,OpXMM,OpIMM8]}
                                             ;[(EncModrm_rm,OperandReadWrite)
                                              ,(EncModrm_reg,OperandReadOnly)
                                              ,(EncIMM,OperandReadWrite)]
                                             ;64bit: True
                                             ;legacy: True
                                             ;Extract a byte integer value from xmm2 at the source byte offset specified by imm8 into rreg or m8. The upper bits of r32 or r64 are zeroed.} */
                
                ERASM_DECODER_DO_ACTION (3,
                                         Pextrb,
                                         Just<OpRDefault_M8>,
                                         Just<EncModrm_rm>,
                                         Just<OpXMM>,
                                         Just<EncModrm_reg>,
                                         Just<OpIMM8>,
                                         Just<EncIMM>);
            }
         else
            goto decode_error;
         case (0x15):
         if (prefix.operand_size)
            {
                /* EncodedInstructionDefinition {{[OPERAND_SIZE]
                                              ;0F 3A 15 
                                              ;Just Modrm
                                              ;Just RMBoth
                                              ;Nothing
                                              ;[IMM_IB]
                                              ;Nothing
                                              ;Nothing}
                                             ;Prototype {protoMnemonic = "PEXTRW", protoOperands = [OpRDefault_M16,OpXMM,OpIMM8]}
                                             ;[(EncModrm_rm,OperandReadWrite)
                                              ,(EncModrm_reg,OperandReadOnly)
                                              ,(EncIMM,OperandReadWrite)]
                                             ;64bit: True
                                             ;legacy: True
                                             ;Extract the word specified by imm8 from xmm and copy it to lowest 16 bits of reg or m16. Zero-extend the result in the destination, r32 or r64.} */
                
                ERASM_DECODER_DO_ACTION (3,
                                         Pextrw,
                                         Just<OpRDefault_M16>,
                                         Just<EncModrm_rm>,
                                         Just<OpXMM>,
                                         Just<EncModrm_reg>,
                                         Just<OpIMM8>,
                                         Just<EncIMM>);
            }
         else
            goto decode_error;
         case (0x16):
         if (prefix.operand_size)
            {
                /* EncodedInstructionDefinition {{[OPERAND_SIZE]
                                              ;0F 3A 16 
                                              ;Just Modrm
                                              ;Just RMBoth
                                              ;Nothing
                                              ;[IMM_IB]
                                              ;Nothing
                                              ;Nothing}
                                             ;Prototype {protoMnemonic = "PEXTRD", protoOperands = [OpRM32,OpXMM,OpIMM8]}
                                             ;[(EncModrm_rm,OperandReadWrite)
                                              ,(EncModrm_reg,OperandReadOnly)
                                              ,(EncIMM,OperandReadWrite)]
                                             ;64bit: True
                                             ;legacy: True
                                             ;Extract a dword integer value from xmm2 at the source dword offset specified by imm8 into r/m32.} */
                
                ERASM_DECODER_DO_ACTION (3,
                                         Pextrd,
                                         Just<OpRM32>,
                                         Just<EncModrm_rm>,
                                         Just<OpXMM>,
                                         Just<EncModrm_reg>,
                                         Just<OpIMM8>,
                                         Just<EncIMM>);
            }
         else
            goto decode_error;
         case (0x17):
         if (prefix.operand_size)
            {
                /* EncodedInstructionDefinition {{[OPERAND_SIZE]
                                              ;0F 3A 17 
                                              ;Just Modrm
                                              ;Just RMBoth
                                              ;Nothing
                                              ;[IMM_IB]
                                              ;Nothing
                                              ;Nothing}
                                             ;Prototype {protoMnemonic = "EXTRACTPS", protoOperands = [OpRDefault_M32,OpXMM,OpIMM8]}
                                             ;[(EncModrm_rm,OperandReadWrite)
                                              ,(EncModrm_reg,OperandReadOnly)
                                              ,(EncIMM,OperandReadWrite)]
                                             ;64bit: True
                                             ;legacy: True
                                             ;Extract a single-precision floating-point value from xmm2 at the source offset specified by imm8 and store the result to reg or m32. The upper 32 bits of r64 is zeroed if reg is r64.} */
                
                ERASM_DECODER_DO_ACTION (3,
                                         Extractps,
                                         Just<OpRDefault_M32>,
                                         Just<EncModrm_rm>,
                                         Just<OpXMM>,
                                         Just<EncModrm_reg>,
                                         Just<OpIMM8>,
                                         Just<EncIMM>);
            }
         else
            goto decode_error;
         case (0x20):
         if (prefix.operand_size)
            {
                /* EncodedInstructionDefinition {{[OPERAND_SIZE]
                                              ;0F 3A 20 
                                              ;Just Modrm
                                              ;Just RMBoth
                                              ;Nothing
                                              ;[IMM_IB]
                                              ;Nothing
                                              ;Nothing}
                                             ;Prototype {protoMnemonic = "PINSRB", protoOperands = [OpXMM,OpR32_M8,OpIMM8]}
                                             ;[(EncModrm_reg
                                               ,OperandReadWrite)
                                              ,(EncModrm_rm,OperandReadOnly)
                                              ,(EncIMM,OperandReadWrite)]
                                             ;64bit: True
                                             ;legacy: True
                                             ;Insert a byte integer value from r32/m8 into xmm1 at the destination element in xmm1 specified by imm8.} */
                
                ERASM_DECODER_DO_ACTION (3,
                                         Pinsrb,
                                         Just<OpXMM>,
                                         Just<EncModrm_reg>,
                                         Just<OpR32_M8>,
                                         Just<EncModrm_rm>,
                                         Just<OpIMM8>,
                                         Just<EncIMM>);
            }
         else
            goto decode_error;
         case (0x21):
         if (prefix.operand_size)
            {
                /* EncodedInstructionDefinition {{[OPERAND_SIZE]
                                              ;0F 3A 21 
                                              ;Just Modrm
                                              ;Just RMBoth
                                              ;Nothing
                                              ;[IMM_IB]
                                              ;Nothing
                                              ;Nothing}
                                             ;Prototype {protoMnemonic = "INSERTPS", protoOperands = [OpXMM,OpXMM_M32,OpIMM8]}
                                             ;[(EncModrm_reg
                                               ,OperandReadWrite)
                                              ,(EncModrm_rm,OperandReadOnly)
                                              ,(EncIMM,OperandReadWrite)]
                                             ;64bit: True
                                             ;legacy: True
                                             ;Insert a single precision floating-point value selected by imm8 from xmm2/m32 into xmm1 at the specified destination element specified by imm8 and zero out destination elements in xmm1 as indicated in imm8.} */
                
                ERASM_DECODER_DO_ACTION (3,
                                         Insertps,
                                         Just<OpXMM>,
                                         Just<EncModrm_reg>,
                                         Just<OpXMM_M32>,
                                         Just<EncModrm_rm>,
                                         Just<OpIMM8>,
                                         Just<EncIMM>);
            }
         else
            goto decode_error;
         case (0x22):
         if (prefix.operand_size)
            {
                /* EncodedInstructionDefinition {{[OPERAND_SIZE]
                                              ;0F 3A 22 
                                              ;Just Modrm
                                              ;Just RMBoth
                                              ;Nothing
                                              ;[IMM_IB]
                                              ;Nothing
                                              ;Nothing}
                                             ;Prototype {protoMnemonic = "PINSRD", protoOperands = [OpXMM,OpRM32,OpIMM8]}
                                             ;[(EncModrm_reg
                                               ,OperandReadWrite)
                                              ,(EncModrm_rm,OperandReadOnly)
                                              ,(EncIMM,OperandReadWrite)]
                                             ;64bit: True
                                             ;legacy: True
                                             ;Insert a dword integer value from r/m32 into the xmm1 at the destination element specified by imm8.} */
                
                ERASM_DECODER_DO_ACTION (3,
                                         Pinsrd,
                                         Just<OpXMM>,
                                         Just<EncModrm_reg>,
                                         Just<OpRM32>,
                                         Just<EncModrm_rm>,
                                         Just<OpIMM8>,
                                         Just<EncIMM>);
            }
         else
            goto decode_error;
         case (0x40):
         if (prefix.operand_size)
            {
                /* EncodedInstructionDefinition {{[OPERAND_SIZE]
                                              ;0F 3A 40 
                                              ;Just Modrm
                                              ;Just RMBoth
                                              ;Nothing
                                              ;[IMM_IB]
                                              ;Nothing
                                              ;Nothing}
                                             ;Prototype {protoMnemonic = "DPPS", protoOperands = [OpXMM,OpXMM_M128,OpIMM8]}
                                             ;[(EncModrm_reg
                                               ,OperandReadWrite)
                                              ,(EncModrm_rm,OperandReadOnly)
                                              ,(EncIMM,OperandReadWrite)]
                                             ;64bit: True
                                             ;legacy: True
                                             ;Selectively multiply packed SP floating-point values from xmm1 with packed SP floating-point values from xmm2, add and selectively store the packed SP floating-point values or zero values to xmm1.} */
                
                ERASM_DECODER_DO_ACTION (3,
                                         Dpps,
                                         Just<OpXMM>,
                                         Just<EncModrm_reg>,
                                         Just<OpXMM_M128>,
                                         Just<EncModrm_rm>,
                                         Just<OpIMM8>,
                                         Just<EncIMM>);
            }
         else
            goto decode_error;
         case (0x41):
         if (prefix.operand_size)
            {
                /* EncodedInstructionDefinition {{[OPERAND_SIZE]
                                              ;0F 3A 41 
                                              ;Just Modrm
                                              ;Just RMBoth
                                              ;Nothing
                                              ;[IMM_IB]
                                              ;Nothing
                                              ;Nothing}
                                             ;Prototype {protoMnemonic = "DPPD", protoOperands = [OpXMM,OpXMM_M128,OpIMM8]}
                                             ;[(EncModrm_reg
                                               ,OperandReadWrite)
                                              ,(EncModrm_rm,OperandReadOnly)
                                              ,(EncIMM,OperandReadWrite)]
                                             ;64bit: True
                                             ;legacy: True
                                             ;Selectively multiply packed DP floating-point values from xmm1 with packed DP floating-point values from xmm2, add and selectively store the packed DP floating-point values to xmm1.} */
                
                ERASM_DECODER_DO_ACTION (3,
                                         Dppd,
                                         Just<OpXMM>,
                                         Just<EncModrm_reg>,
                                         Just<OpXMM_M128>,
                                         Just<EncModrm_rm>,
                                         Just<OpIMM8>,
                                         Just<EncIMM>);
            }
         else
            goto decode_error;
         case (0x42):
         if (prefix.operand_size)
            {
                /* EncodedInstructionDefinition {{[OPERAND_SIZE]
                                              ;0F 3A 42 
                                              ;Just Modrm
                                              ;Just RMBoth
                                              ;Nothing
                                              ;[IMM_IB]
                                              ;Nothing
                                              ;Nothing}
                                             ;Prototype {protoMnemonic = "MPSADBW", protoOperands = [OpXMM,OpXMM_M128,OpIMM8]}
                                             ;[(EncModrm_reg
                                               ,OperandReadWrite)
                                              ,(EncModrm_rm,OperandReadOnly)
                                              ,(EncIMM,OperandReadWrite)]
                                             ;64bit: True
                                             ;legacy: True
                                             ;Sums absolute 8-bit integer difference of adjacent groups of 4 byte integers in xmm1 and xmm2/m128 and writes the results in xmm1. Starting offsets within xmm1 and xmm2/m128 are determined by imm8.} */
                
                ERASM_DECODER_DO_ACTION (3,
                                         Mpsadbw,
                                         Just<OpXMM>,
                                         Just<EncModrm_reg>,
                                         Just<OpXMM_M128>,
                                         Just<EncModrm_rm>,
                                         Just<OpIMM8>,
                                         Just<EncIMM>);
            }
         else
            goto decode_error;
         case (0x44):
         if (prefix.operand_size)
            switch (imm (p,is_addr32)) {
               case (0):
               {
                   /* EncodedInstructionDefinition {{[OPERAND_SIZE]
                                                 ;0F 3A 44 
                                                 ;Just Modrm
                                                 ;Just RMBoth
                                                 ;Nothing
                                                 ;[IMM_IB_Const 0]
                                                 ;Nothing
                                                 ;Nothing}
                                                ;Prototype {protoMnemonic = "PCLMULLQLQDQ", protoOperands = [OpXMM,OpXMM_M128]}
                                                ;[(EncModrm_reg
                                                  ,OperandReadWrite)
                                                 ,(EncModrm_rm,OperandReadWrite)
                                                 ,(EncIMM,OperandReadWrite)]
                                                ;64bit: True
                                                ;legacy: True
                                                ;alias for PCLMULQDQ} */
                   
                   ERASM_DECODER_DO_ACTION (3,
                                            Pclmullqlqdq,
                                            Just<OpXMM>,
                                            Just<EncModrm_reg>,
                                            Just<OpXMM_M128>,
                                            Just<EncModrm_rm>,
                                            Nothing,
                                            Just<EncIMM>);
               }
               case (1):
               {
                   /* EncodedInstructionDefinition {{[OPERAND_SIZE]
                                                 ;0F 3A 44 
                                                 ;Just Modrm
                                                 ;Just RMBoth
                                                 ;Nothing
                                                 ;[IMM_IB_Const 1]
                                                 ;Nothing
                                                 ;Nothing}
                                                ;Prototype {protoMnemonic = "PCLMULHQLQDQ", protoOperands = [OpXMM,OpXMM_M128]}
                                                ;[(EncModrm_reg
                                                  ,OperandReadWrite)
                                                 ,(EncModrm_rm,OperandReadWrite)
                                                 ,(EncIMM,OperandReadWrite)]
                                                ;64bit: True
                                                ;legacy: True
                                                ;alias for PCLMULQDQ} */
                   
                   ERASM_DECODER_DO_ACTION (3,
                                            Pclmulhqlqdq,
                                            Just<OpXMM>,
                                            Just<EncModrm_reg>,
                                            Just<OpXMM_M128>,
                                            Just<EncModrm_rm>,
                                            Nothing,
                                            Just<EncIMM>);
               }
               case (16):
               {
                   /* EncodedInstructionDefinition {{[OPERAND_SIZE]
                                                 ;0F 3A 44 
                                                 ;Just Modrm
                                                 ;Just RMBoth
                                                 ;Nothing
                                                 ;[IMM_IB_Const 16]
                                                 ;Nothing
                                                 ;Nothing}
                                                ;Prototype {protoMnemonic = "PCLMULLQHDQ", protoOperands = [OpXMM,OpXMM_M128]}
                                                ;[(EncModrm_reg
                                                  ,OperandReadWrite)
                                                 ,(EncModrm_rm,OperandReadWrite)
                                                 ,(EncIMM,OperandReadWrite)]
                                                ;64bit: True
                                                ;legacy: True
                                                ;alias for PCLMULQDQ} */
                   
                   ERASM_DECODER_DO_ACTION (3,
                                            Pclmullqhdq,
                                            Just<OpXMM>,
                                            Just<EncModrm_reg>,
                                            Just<OpXMM_M128>,
                                            Just<EncModrm_rm>,
                                            Nothing,
                                            Just<EncIMM>);
               }
               case (17):
               {
                   /* EncodedInstructionDefinition {{[OPERAND_SIZE]
                                                 ;0F 3A 44 
                                                 ;Just Modrm
                                                 ;Just RMBoth
                                                 ;Nothing
                                                 ;[IMM_IB_Const 17]
                                                 ;Nothing
                                                 ;Nothing}
                                                ;Prototype {protoMnemonic = "PCLMULHQHDQ", protoOperands = [OpXMM,OpXMM_M128]}
                                                ;[(EncModrm_reg
                                                  ,OperandReadWrite)
                                                 ,(EncModrm_rm,OperandReadWrite)
                                                 ,(EncIMM,OperandReadWrite)]
                                                ;64bit: True
                                                ;legacy: True
                                                ;alias for PCLMULQDQ} */
                   
                   ERASM_DECODER_DO_ACTION (3,
                                            Pclmulhqhdq,
                                            Just<OpXMM>,
                                            Just<EncModrm_reg>,
                                            Just<OpXMM_M128>,
                                            Just<EncModrm_rm>,
                                            Nothing,
                                            Just<EncIMM>);
               }
               default:
               {
                   /* EncodedInstructionDefinition {{[OPERAND_SIZE]
                                                 ;0F 3A 44 
                                                 ;Just Modrm
                                                 ;Just RMBoth
                                                 ;Nothing
                                                 ;[IMM_IB]
                                                 ;Nothing
                                                 ;Nothing}
                                                ;Prototype {protoMnemonic = "PCLMULQDQ", protoOperands = [OpXMM,OpXMM_M128,OpIMM8]}
                                                ;[(EncModrm_reg
                                                  ,OperandReadWrite)
                                                 ,(EncModrm_rm,OperandReadOnly)
                                                 ,(EncIMM,OperandReadOnly)]
                                                ;64bit: True
                                                ;legacy: True
                                                ;Carry-less multiplication of one quadword of xmm1 by one quadword of xmm2/m128, stores the 128-bit result in xmm1. The immediate is used to deter- mine which quadwords of xmm1 and xmm2/m128 should be used.} */
                   
                   ERASM_DECODER_DO_ACTION (3,
                                            Pclmulqdq,
                                            Just<OpXMM>,
                                            Just<EncModrm_reg>,
                                            Just<OpXMM_M128>,
                                            Just<EncModrm_rm>,
                                            Just<OpIMM8>,
                                            Just<EncIMM>);
               }
            }
         else
            goto decode_error;
         case (0x60):
         if (prefix.operand_size)
            {
                /* EncodedInstructionDefinition {{[OPERAND_SIZE]
                                              ;0F 3A 60 
                                              ;Just Modrm
                                              ;Just RMBoth
                                              ;Nothing
                                              ;[IMM_IB]
                                              ;Nothing
                                              ;Nothing}
                                             ;Prototype {protoMnemonic = "PCMPESTRM", protoOperands = [OpXMM,OpXMM_M128,OpIMM8]}
                                             ;[(EncModrm_reg,OperandReadOnly)
                                              ,(EncModrm_rm,OperandReadOnly)
                                              ,(EncIMM,OperandReadWrite)]
                                             ;64bit: True
                                             ;legacy: True
                                             ;Perform a packed comparison of string data with explicit lengths, generating a mask, and storing the result in XMM0} */
                
                ERASM_DECODER_DO_ACTION (3,
                                         Pcmpestrm,
                                         Just<OpXMM>,
                                         Just<EncModrm_reg>,
                                         Just<OpXMM_M128>,
                                         Just<EncModrm_rm>,
                                         Just<OpIMM8>,
                                         Just<EncIMM>);
            }
         else
            goto decode_error;
         case (0x61):
         if (prefix.operand_size)
            {
                /* EncodedInstructionDefinition {{[OPERAND_SIZE]
                                              ;0F 3A 61 
                                              ;Just Modrm
                                              ;Just RMBoth
                                              ;Nothing
                                              ;[IMM_IB]
                                              ;Nothing
                                              ;Nothing}
                                             ;Prototype {protoMnemonic = "PCMPESTRI", protoOperands = [OpXMM,OpXMM_M128,OpIMM8]}
                                             ;[(EncModrm_reg,OperandReadOnly)
                                              ,(EncModrm_rm,OperandReadOnly)
                                              ,(EncIMM,OperandReadWrite)]
                                             ;64bit: True
                                             ;legacy: True
                                             ;Perform a packed comparison of string data with explicit lengths, generating an index, and storing the result in ECX.} */
                
                ERASM_DECODER_DO_ACTION (3,
                                         Pcmpestri,
                                         Just<OpXMM>,
                                         Just<EncModrm_reg>,
                                         Just<OpXMM_M128>,
                                         Just<EncModrm_rm>,
                                         Just<OpIMM8>,
                                         Just<EncIMM>);
            }
         else
            goto decode_error;
         case (0x62):
         if (prefix.operand_size)
            {
                /* EncodedInstructionDefinition {{[OPERAND_SIZE]
                                              ;0F 3A 62 
                                              ;Just Modrm
                                              ;Just RMBoth
                                              ;Nothing
                                              ;[IMM_IB]
                                              ;Nothing
                                              ;Nothing}
                                             ;Prototype {protoMnemonic = "PCMPISTRM", protoOperands = [OpXMM,OpXMM_M128,OpIMM8]}
                                             ;[(EncModrm_reg,OperandReadOnly)
                                              ,(EncModrm_rm,OperandReadOnly)
                                              ,(EncIMM,OperandReadWrite)]
                                             ;64bit: True
                                             ;legacy: True
                                             ;Perform a packed comparison of string data with implicit lengths, generating a mask, and storing the result in XMM0.} */
                
                ERASM_DECODER_DO_ACTION (3,
                                         Pcmpistrm,
                                         Just<OpXMM>,
                                         Just<EncModrm_reg>,
                                         Just<OpXMM_M128>,
                                         Just<EncModrm_rm>,
                                         Just<OpIMM8>,
                                         Just<EncIMM>);
            }
         else
            goto decode_error;
         case (0x63):
         if (prefix.operand_size)
            {
                /* EncodedInstructionDefinition {{[OPERAND_SIZE]
                                              ;0F 3A 63 
                                              ;Just Modrm
                                              ;Just RMBoth
                                              ;Nothing
                                              ;[IMM_IB]
                                              ;Nothing
                                              ;Nothing}
                                             ;Prototype {protoMnemonic = "PCMPISTRI", protoOperands = [OpXMM,OpXMM_M128,OpIMM8]}
                                             ;[(EncModrm_reg,OperandReadOnly)
                                              ,(EncModrm_rm,OperandReadOnly)
                                              ,(EncIMM,OperandReadWrite)]
                                             ;64bit: True
                                             ;legacy: True
                                             ;Perform a packed comparison of string data with implicit lengths, generating an index, and storing the result in ECX.} */
                
                ERASM_DECODER_DO_ACTION (3,
                                         Pcmpistri,
                                         Just<OpXMM>,
                                         Just<EncModrm_reg>,
                                         Just<OpXMM_M128>,
                                         Just<EncModrm_rm>,
                                         Just<OpIMM8>,
                                         Just<EncIMM>);
            }
         else
            goto decode_error;
         case (0xdf):
         if (prefix.operand_size)
            {
                /* EncodedInstructionDefinition {{[OPERAND_SIZE]
                                              ;0F 3A DF 
                                              ;Just Modrm
                                              ;Just RMBoth
                                              ;Nothing
                                              ;[IMM_IB]
                                              ;Nothing
                                              ;Nothing}
                                             ;Prototype {protoMnemonic = "AESKEYGENASSIST", protoOperands = [OpXMM,OpXMM_M128,OpIMM8]}
                                             ;[(EncModrm_reg
                                               ,OperandReadWrite)
                                              ,(EncModrm_rm,OperandReadOnly)
                                              ,(EncIMM,OperandReadWrite)]
                                             ;64bit: True
                                             ;legacy: True
                                             ;Assist in AES round key gen- eration using an 8 bits Round Constant (RCON) specified in the immediate byte, operating on 128 bits of data specified in xmm2/m128 and stores the result in xmm1.} */
                
                ERASM_DECODER_DO_ACTION (3,
                                         Aeskeygenassist,
                                         Just<OpXMM>,
                                         Just<EncModrm_reg>,
                                         Just<OpXMM_M128>,
                                         Just<EncModrm_rm>,
                                         Just<OpIMM8>,
                                         Just<EncIMM>);
            }
         else
            goto decode_error;
         
      }
      case (0x40):
      if (is_data16)
         {
             /* EncodedInstructionDefinition {{[]
                                           ;0F 40 
                                           ;Just Modrm
                                           ;Just RMBoth
                                           ;Nothing
                                           ;[]
                                           ;Just Op16
                                           ;Nothing}
                                          ;Prototype {protoMnemonic = "CMOVO", protoOperands = [OpR16,OpRM16]}
                                          ;[(EncModrm_reg
                                            ,OperandReadWrite)
                                           ,(EncModrm_rm,OperandReadOnly)]
                                          ;64bit: True
                                          ;legacy: True
                                          ;Move if overflow (OF=0).} */
             
             ERASM_DECODER_DO_ACTION (2,
                                      Cmovo,
                                      Just<OpR16>,
                                      Just<EncModrm_reg>,
                                      Just<OpRM16>,
                                      Just<EncModrm_rm>,
                                      Nothing,
                                      Nothing);
         }
      else
         {
             /* EncodedInstructionDefinition {{[]
                                           ;0F 40 
                                           ;Just Modrm
                                           ;Just RMBoth
                                           ;Nothing
                                           ;[]
                                           ;Just Op32
                                           ;Nothing}
                                          ;Prototype {protoMnemonic = "CMOVO", protoOperands = [OpR32,OpRM32]}
                                          ;[(EncModrm_reg
                                            ,OperandReadWrite)
                                           ,(EncModrm_rm,OperandReadOnly)]
                                          ;64bit: True
                                          ;legacy: True
                                          ;Move if overflow (OF=0).} */
             
             ERASM_DECODER_DO_ACTION (2,
                                      Cmovo,
                                      Just<OpR32>,
                                      Just<EncModrm_reg>,
                                      Just<OpRM32>,
                                      Just<EncModrm_rm>,
                                      Nothing,
                                      Nothing);
         }
      case (0x41):
      if (is_data16)
         {
             /* EncodedInstructionDefinition {{[]
                                           ;0F 41 
                                           ;Just Modrm
                                           ;Just RMBoth
                                           ;Nothing
                                           ;[]
                                           ;Just Op16
                                           ;Nothing}
                                          ;Prototype {protoMnemonic = "CMOVNO", protoOperands = [OpR16,OpRM16]}
                                          ;[(EncModrm_reg
                                            ,OperandReadWrite)
                                           ,(EncModrm_rm,OperandReadOnly)]
                                          ;64bit: True
                                          ;legacy: True
                                          ;Move if not overflow (OF=0).} */
             
             ERASM_DECODER_DO_ACTION (2,
                                      Cmovno,
                                      Just<OpR16>,
                                      Just<EncModrm_reg>,
                                      Just<OpRM16>,
                                      Just<EncModrm_rm>,
                                      Nothing,
                                      Nothing);
         }
      else
         {
             /* EncodedInstructionDefinition {{[]
                                           ;0F 41 
                                           ;Just Modrm
                                           ;Just RMBoth
                                           ;Nothing
                                           ;[]
                                           ;Just Op32
                                           ;Nothing}
                                          ;Prototype {protoMnemonic = "CMOVNO", protoOperands = [OpR32,OpRM32]}
                                          ;[(EncModrm_reg
                                            ,OperandReadWrite)
                                           ,(EncModrm_rm,OperandReadOnly)]
                                          ;64bit: True
                                          ;legacy: True
                                          ;Move if not overflow (OF=0).} */
             
             ERASM_DECODER_DO_ACTION (2,
                                      Cmovno,
                                      Just<OpR32>,
                                      Just<EncModrm_reg>,
                                      Just<OpRM32>,
                                      Just<EncModrm_rm>,
                                      Nothing,
                                      Nothing);
         }
      case (0x42):
      if (is_data16)
         {
             /* EncodedInstructionDefinition {{[]
                                           ;0F 42 
                                           ;Just Modrm
                                           ;Just RMBoth
                                           ;Nothing
                                           ;[]
                                           ;Just Op16
                                           ;Nothing}
                                          ;Prototype {protoMnemonic = "CMOVB", protoOperands = [OpR16,OpRM16]}
                                          ;[(EncModrm_reg
                                            ,OperandReadWrite)
                                           ,(EncModrm_rm,OperandReadOnly)]
                                          ;64bit: True
                                          ;legacy: True
                                          ;Move if below (CF=1).} */
             
             ERASM_DECODER_DO_ACTION (2,
                                      Cmovb,
                                      Just<OpR16>,
                                      Just<EncModrm_reg>,
                                      Just<OpRM16>,
                                      Just<EncModrm_rm>,
                                      Nothing,
                                      Nothing);
         }
      else
         {
             /* EncodedInstructionDefinition {{[]
                                           ;0F 42 
                                           ;Just Modrm
                                           ;Just RMBoth
                                           ;Nothing
                                           ;[]
                                           ;Just Op32
                                           ;Nothing}
                                          ;Prototype {protoMnemonic = "CMOVB", protoOperands = [OpR32,OpRM32]}
                                          ;[(EncModrm_reg
                                            ,OperandReadWrite)
                                           ,(EncModrm_rm,OperandReadOnly)]
                                          ;64bit: True
                                          ;legacy: True
                                          ;Move if below (CF=1).} */
             
             ERASM_DECODER_DO_ACTION (2,
                                      Cmovb,
                                      Just<OpR32>,
                                      Just<EncModrm_reg>,
                                      Just<OpRM32>,
                                      Just<EncModrm_rm>,
                                      Nothing,
                                      Nothing);
         }
      case (0x43):
      if (is_data16)
         {
             /* EncodedInstructionDefinition {{[]
                                           ;0F 43 
                                           ;Just Modrm
                                           ;Just RMBoth
                                           ;Nothing
                                           ;[]
                                           ;Just Op16
                                           ;Nothing}
                                          ;Prototype {protoMnemonic = "CMOVAE", protoOperands = [OpR16,OpRM16]}
                                          ;[(EncModrm_reg
                                            ,OperandReadWrite)
                                           ,(EncModrm_rm,OperandReadOnly)]
                                          ;64bit: True
                                          ;legacy: True
                                          ;Move if above or equal (CF=0).} */
             
             ERASM_DECODER_DO_ACTION (2,
                                      Cmovae,
                                      Just<OpR16>,
                                      Just<EncModrm_reg>,
                                      Just<OpRM16>,
                                      Just<EncModrm_rm>,
                                      Nothing,
                                      Nothing);
         }
      else
         {
             /* EncodedInstructionDefinition {{[]
                                           ;0F 43 
                                           ;Just Modrm
                                           ;Just RMBoth
                                           ;Nothing
                                           ;[]
                                           ;Just Op32
                                           ;Nothing}
                                          ;Prototype {protoMnemonic = "CMOVAE", protoOperands = [OpR32,OpRM32]}
                                          ;[(EncModrm_reg
                                            ,OperandReadWrite)
                                           ,(EncModrm_rm,OperandReadOnly)]
                                          ;64bit: True
                                          ;legacy: True
                                          ;Move if above or equal (CF=0).} */
             
             ERASM_DECODER_DO_ACTION (2,
                                      Cmovae,
                                      Just<OpR32>,
                                      Just<EncModrm_reg>,
                                      Just<OpRM32>,
                                      Just<EncModrm_rm>,
                                      Nothing,
                                      Nothing);
         }
      case (0x44):
      if (is_data16)
         {
             /* EncodedInstructionDefinition {{[]
                                           ;0F 44 
                                           ;Just Modrm
                                           ;Just RMBoth
                                           ;Nothing
                                           ;[]
                                           ;Just Op16
                                           ;Nothing}
                                          ;Prototype {protoMnemonic = "CMOVE", protoOperands = [OpR16,OpRM16]}
                                          ;[(EncModrm_reg
                                            ,OperandReadWrite)
                                           ,(EncModrm_rm,OperandReadOnly)]
                                          ;64bit: True
                                          ;legacy: True
                                          ;Move if equal (ZF=1).} */
             
             ERASM_DECODER_DO_ACTION (2,
                                      Cmove,
                                      Just<OpR16>,
                                      Just<EncModrm_reg>,
                                      Just<OpRM16>,
                                      Just<EncModrm_rm>,
                                      Nothing,
                                      Nothing);
         }
      else
         {
             /* EncodedInstructionDefinition {{[]
                                           ;0F 44 
                                           ;Just Modrm
                                           ;Just RMBoth
                                           ;Nothing
                                           ;[]
                                           ;Just Op32
                                           ;Nothing}
                                          ;Prototype {protoMnemonic = "CMOVE", protoOperands = [OpR32,OpRM32]}
                                          ;[(EncModrm_reg
                                            ,OperandReadWrite)
                                           ,(EncModrm_rm,OperandReadOnly)]
                                          ;64bit: True
                                          ;legacy: True
                                          ;Move if equal (ZF=1).} */
             
             ERASM_DECODER_DO_ACTION (2,
                                      Cmove,
                                      Just<OpR32>,
                                      Just<EncModrm_reg>,
                                      Just<OpRM32>,
                                      Just<EncModrm_rm>,
                                      Nothing,
                                      Nothing);
         }
      case (0x45):
      if (is_data16)
         {
             /* EncodedInstructionDefinition {{[]
                                           ;0F 45 
                                           ;Just Modrm
                                           ;Just RMBoth
                                           ;Nothing
                                           ;[]
                                           ;Just Op16
                                           ;Nothing}
                                          ;Prototype {protoMnemonic = "CMOVNE", protoOperands = [OpR16,OpRM16]}
                                          ;[(EncModrm_reg
                                            ,OperandReadWrite)
                                           ,(EncModrm_rm,OperandReadOnly)]
                                          ;64bit: True
                                          ;legacy: True
                                          ;Move if not equal (ZF=0).} */
             
             ERASM_DECODER_DO_ACTION (2,
                                      Cmovne,
                                      Just<OpR16>,
                                      Just<EncModrm_reg>,
                                      Just<OpRM16>,
                                      Just<EncModrm_rm>,
                                      Nothing,
                                      Nothing);
         }
      else
         {
             /* EncodedInstructionDefinition {{[]
                                           ;0F 45 
                                           ;Just Modrm
                                           ;Just RMBoth
                                           ;Nothing
                                           ;[]
                                           ;Just Op32
                                           ;Nothing}
                                          ;Prototype {protoMnemonic = "CMOVNE", protoOperands = [OpR32,OpRM32]}
                                          ;[(EncModrm_reg
                                            ,OperandReadWrite)
                                           ,(EncModrm_rm,OperandReadOnly)]
                                          ;64bit: True
                                          ;legacy: True
                                          ;Move if not equal (ZF=0).} */
             
             ERASM_DECODER_DO_ACTION (2,
                                      Cmovne,
                                      Just<OpR32>,
                                      Just<EncModrm_reg>,
                                      Just<OpRM32>,
                                      Just<EncModrm_rm>,
                                      Nothing,
                                      Nothing);
         }
      case (0x46):
      if (is_data16)
         {
             /* EncodedInstructionDefinition {{[]
                                           ;0F 46 
                                           ;Just Modrm
                                           ;Just RMBoth
                                           ;Nothing
                                           ;[]
                                           ;Just Op16
                                           ;Nothing}
                                          ;Prototype {protoMnemonic = "CMOVBE", protoOperands = [OpR16,OpRM16]}
                                          ;[(EncModrm_reg
                                            ,OperandReadWrite)
                                           ,(EncModrm_rm,OperandReadOnly)]
                                          ;64bit: True
                                          ;legacy: True
                                          ;Move if below or equal (CF=1 or ZF=1).} */
             
             ERASM_DECODER_DO_ACTION (2,
                                      Cmovbe,
                                      Just<OpR16>,
                                      Just<EncModrm_reg>,
                                      Just<OpRM16>,
                                      Just<EncModrm_rm>,
                                      Nothing,
                                      Nothing);
         }
      else
         {
             /* EncodedInstructionDefinition {{[]
                                           ;0F 46 
                                           ;Just Modrm
                                           ;Just RMBoth
                                           ;Nothing
                                           ;[]
                                           ;Just Op32
                                           ;Nothing}
                                          ;Prototype {protoMnemonic = "CMOVBE", protoOperands = [OpR32,OpRM32]}
                                          ;[(EncModrm_reg
                                            ,OperandReadWrite)
                                           ,(EncModrm_rm,OperandReadOnly)]
                                          ;64bit: True
                                          ;legacy: True
                                          ;Move if below or equal (CF=1 or ZF=1).} */
             
             ERASM_DECODER_DO_ACTION (2,
                                      Cmovbe,
                                      Just<OpR32>,
                                      Just<EncModrm_reg>,
                                      Just<OpRM32>,
                                      Just<EncModrm_rm>,
                                      Nothing,
                                      Nothing);
         }
      case (0x47):
      if (is_data16)
         {
             /* EncodedInstructionDefinition {{[]
                                           ;0F 47 
                                           ;Just Modrm
                                           ;Just RMBoth
                                           ;Nothing
                                           ;[]
                                           ;Just Op16
                                           ;Nothing}
                                          ;Prototype {protoMnemonic = "CMOVA", protoOperands = [OpR16,OpRM16]}
                                          ;[(EncModrm_reg
                                            ,OperandReadWrite)
                                           ,(EncModrm_rm,OperandReadOnly)]
                                          ;64bit: True
                                          ;legacy: True
                                          ;Move if above (CF=0 and ZF=0).} */
             
             ERASM_DECODER_DO_ACTION (2,
                                      Cmova,
                                      Just<OpR16>,
                                      Just<EncModrm_reg>,
                                      Just<OpRM16>,
                                      Just<EncModrm_rm>,
                                      Nothing,
                                      Nothing);
         }
      else
         {
             /* EncodedInstructionDefinition {{[]
                                           ;0F 47 
                                           ;Just Modrm
                                           ;Just RMBoth
                                           ;Nothing
                                           ;[]
                                           ;Just Op32
                                           ;Nothing}
                                          ;Prototype {protoMnemonic = "CMOVA", protoOperands = [OpR32,OpRM32]}
                                          ;[(EncModrm_reg
                                            ,OperandReadWrite)
                                           ,(EncModrm_rm,OperandReadOnly)]
                                          ;64bit: True
                                          ;legacy: True
                                          ;Move if above (CF=0 and ZF=0).} */
             
             ERASM_DECODER_DO_ACTION (2,
                                      Cmova,
                                      Just<OpR32>,
                                      Just<EncModrm_reg>,
                                      Just<OpRM32>,
                                      Just<EncModrm_rm>,
                                      Nothing,
                                      Nothing);
         }
      case (0x48):
      if (is_data16)
         {
             /* EncodedInstructionDefinition {{[]
                                           ;0F 48 
                                           ;Just Modrm
                                           ;Just RMBoth
                                           ;Nothing
                                           ;[]
                                           ;Just Op16
                                           ;Nothing}
                                          ;Prototype {protoMnemonic = "CMOVS", protoOperands = [OpR16,OpRM16]}
                                          ;[(EncModrm_reg
                                            ,OperandReadWrite)
                                           ,(EncModrm_rm,OperandReadOnly)]
                                          ;64bit: True
                                          ;legacy: True
                                          ;Move if sign (SF=1).} */
             
             ERASM_DECODER_DO_ACTION (2,
                                      Cmovs,
                                      Just<OpR16>,
                                      Just<EncModrm_reg>,
                                      Just<OpRM16>,
                                      Just<EncModrm_rm>,
                                      Nothing,
                                      Nothing);
         }
      else
         {
             /* EncodedInstructionDefinition {{[]
                                           ;0F 48 
                                           ;Just Modrm
                                           ;Just RMBoth
                                           ;Nothing
                                           ;[]
                                           ;Just Op32
                                           ;Nothing}
                                          ;Prototype {protoMnemonic = "CMOVS", protoOperands = [OpR32,OpRM32]}
                                          ;[(EncModrm_reg
                                            ,OperandReadWrite)
                                           ,(EncModrm_rm,OperandReadOnly)]
                                          ;64bit: True
                                          ;legacy: True
                                          ;Move if sign (SF=1).} */
             
             ERASM_DECODER_DO_ACTION (2,
                                      Cmovs,
                                      Just<OpR32>,
                                      Just<EncModrm_reg>,
                                      Just<OpRM32>,
                                      Just<EncModrm_rm>,
                                      Nothing,
                                      Nothing);
         }
      case (0x49):
      if (is_data16)
         {
             /* EncodedInstructionDefinition {{[]
                                           ;0F 49 
                                           ;Just Modrm
                                           ;Just RMBoth
                                           ;Nothing
                                           ;[]
                                           ;Just Op16
                                           ;Nothing}
                                          ;Prototype {protoMnemonic = "CMOVNS", protoOperands = [OpR16,OpRM16]}
                                          ;[(EncModrm_reg
                                            ,OperandReadWrite)
                                           ,(EncModrm_rm,OperandReadOnly)]
                                          ;64bit: True
                                          ;legacy: True
                                          ;Move if not sign (SF=0).} */
             
             ERASM_DECODER_DO_ACTION (2,
                                      Cmovns,
                                      Just<OpR16>,
                                      Just<EncModrm_reg>,
                                      Just<OpRM16>,
                                      Just<EncModrm_rm>,
                                      Nothing,
                                      Nothing);
         }
      else
         {
             /* EncodedInstructionDefinition {{[]
                                           ;0F 49 
                                           ;Just Modrm
                                           ;Just RMBoth
                                           ;Nothing
                                           ;[]
                                           ;Just Op32
                                           ;Nothing}
                                          ;Prototype {protoMnemonic = "CMOVNS", protoOperands = [OpR32,OpRM32]}
                                          ;[(EncModrm_reg
                                            ,OperandReadWrite)
                                           ,(EncModrm_rm,OperandReadOnly)]
                                          ;64bit: True
                                          ;legacy: True
                                          ;Move if not sign (SF=0).} */
             
             ERASM_DECODER_DO_ACTION (2,
                                      Cmovns,
                                      Just<OpR32>,
                                      Just<EncModrm_reg>,
                                      Just<OpRM32>,
                                      Just<EncModrm_rm>,
                                      Nothing,
                                      Nothing);
         }
      case (0x4a):
      if (is_data16)
         {
             /* EncodedInstructionDefinition {{[]
                                           ;0F 4A 
                                           ;Just Modrm
                                           ;Just RMBoth
                                           ;Nothing
                                           ;[]
                                           ;Just Op16
                                           ;Nothing}
                                          ;Prototype {protoMnemonic = "CMOVP", protoOperands = [OpR16,OpRM16]}
                                          ;[(EncModrm_reg
                                            ,OperandReadWrite)
                                           ,(EncModrm_rm,OperandReadOnly)]
                                          ;64bit: True
                                          ;legacy: True
                                          ;Move if parity (PF=1).} */
             
             ERASM_DECODER_DO_ACTION (2,
                                      Cmovp,
                                      Just<OpR16>,
                                      Just<EncModrm_reg>,
                                      Just<OpRM16>,
                                      Just<EncModrm_rm>,
                                      Nothing,
                                      Nothing);
         }
      else
         {
             /* EncodedInstructionDefinition {{[]
                                           ;0F 4A 
                                           ;Just Modrm
                                           ;Just RMBoth
                                           ;Nothing
                                           ;[]
                                           ;Just Op32
                                           ;Nothing}
                                          ;Prototype {protoMnemonic = "CMOVP", protoOperands = [OpR32,OpRM32]}
                                          ;[(EncModrm_reg
                                            ,OperandReadWrite)
                                           ,(EncModrm_rm,OperandReadOnly)]
                                          ;64bit: True
                                          ;legacy: True
                                          ;Move if parity (PF=1).} */
             
             ERASM_DECODER_DO_ACTION (2,
                                      Cmovp,
                                      Just<OpR32>,
                                      Just<EncModrm_reg>,
                                      Just<OpRM32>,
                                      Just<EncModrm_rm>,
                                      Nothing,
                                      Nothing);
         }
      case (0x4b):
      if (is_data16)
         {
             /* EncodedInstructionDefinition {{[]
                                           ;0F 4B 
                                           ;Just Modrm
                                           ;Just RMBoth
                                           ;Nothing
                                           ;[]
                                           ;Just Op16
                                           ;Nothing}
                                          ;Prototype {protoMnemonic = "CMOVNP", protoOperands = [OpR16,OpRM16]}
                                          ;[(EncModrm_reg
                                            ,OperandReadWrite)
                                           ,(EncModrm_rm,OperandReadOnly)]
                                          ;64bit: True
                                          ;legacy: True
                                          ;Move if not parity (PF=0).} */
             
             ERASM_DECODER_DO_ACTION (2,
                                      Cmovnp,
                                      Just<OpR16>,
                                      Just<EncModrm_reg>,
                                      Just<OpRM16>,
                                      Just<EncModrm_rm>,
                                      Nothing,
                                      Nothing);
         }
      else
         {
             /* EncodedInstructionDefinition {{[]
                                           ;0F 4B 
                                           ;Just Modrm
                                           ;Just RMBoth
                                           ;Nothing
                                           ;[]
                                           ;Just Op32
                                           ;Nothing}
                                          ;Prototype {protoMnemonic = "CMOVNP", protoOperands = [OpR32,OpRM32]}
                                          ;[(EncModrm_reg
                                            ,OperandReadWrite)
                                           ,(EncModrm_rm,OperandReadOnly)]
                                          ;64bit: True
                                          ;legacy: True
                                          ;Move if not parity (PF=0).} */
             
             ERASM_DECODER_DO_ACTION (2,
                                      Cmovnp,
                                      Just<OpR32>,
                                      Just<EncModrm_reg>,
                                      Just<OpRM32>,
                                      Just<EncModrm_rm>,
                                      Nothing,
                                      Nothing);
         }
      case (0x4c):
      if (is_data16)
         {
             /* EncodedInstructionDefinition {{[]
                                           ;0F 4C 
                                           ;Just Modrm
                                           ;Just RMBoth
                                           ;Nothing
                                           ;[]
                                           ;Just Op16
                                           ;Nothing}
                                          ;Prototype {protoMnemonic = "CMOVL", protoOperands = [OpR16,OpRM16]}
                                          ;[(EncModrm_reg
                                            ,OperandReadWrite)
                                           ,(EncModrm_rm,OperandReadOnly)]
                                          ;64bit: True
                                          ;legacy: True
                                          ;Move if less (SF≠ OF).} */
             
             ERASM_DECODER_DO_ACTION (2,
                                      Cmovl,
                                      Just<OpR16>,
                                      Just<EncModrm_reg>,
                                      Just<OpRM16>,
                                      Just<EncModrm_rm>,
                                      Nothing,
                                      Nothing);
         }
      else
         {
             /* EncodedInstructionDefinition {{[]
                                           ;0F 4C 
                                           ;Just Modrm
                                           ;Just RMBoth
                                           ;Nothing
                                           ;[]
                                           ;Just Op32
                                           ;Nothing}
                                          ;Prototype {protoMnemonic = "CMOVL", protoOperands = [OpR32,OpRM32]}
                                          ;[(EncModrm_reg
                                            ,OperandReadWrite)
                                           ,(EncModrm_rm,OperandReadOnly)]
                                          ;64bit: True
                                          ;legacy: True
                                          ;Move if less (SF≠ OF).} */
             
             ERASM_DECODER_DO_ACTION (2,
                                      Cmovl,
                                      Just<OpR32>,
                                      Just<EncModrm_reg>,
                                      Just<OpRM32>,
                                      Just<EncModrm_rm>,
                                      Nothing,
                                      Nothing);
         }
      case (0x4d):
      if (is_data16)
         {
             /* EncodedInstructionDefinition {{[]
                                           ;0F 4D 
                                           ;Just Modrm
                                           ;Just RMBoth
                                           ;Nothing
                                           ;[]
                                           ;Just Op16
                                           ;Nothing}
                                          ;Prototype {protoMnemonic = "CMOVGE", protoOperands = [OpR16,OpRM16]}
                                          ;[(EncModrm_reg
                                            ,OperandReadWrite)
                                           ,(EncModrm_rm,OperandReadOnly)]
                                          ;64bit: True
                                          ;legacy: True
                                          ;Move if greater or equal (SF=OF).} */
             
             ERASM_DECODER_DO_ACTION (2,
                                      Cmovge,
                                      Just<OpR16>,
                                      Just<EncModrm_reg>,
                                      Just<OpRM16>,
                                      Just<EncModrm_rm>,
                                      Nothing,
                                      Nothing);
         }
      else
         {
             /* EncodedInstructionDefinition {{[]
                                           ;0F 4D 
                                           ;Just Modrm
                                           ;Just RMBoth
                                           ;Nothing
                                           ;[]
                                           ;Just Op32
                                           ;Nothing}
                                          ;Prototype {protoMnemonic = "CMOVGE", protoOperands = [OpR32,OpRM32]}
                                          ;[(EncModrm_reg
                                            ,OperandReadWrite)
                                           ,(EncModrm_rm,OperandReadOnly)]
                                          ;64bit: True
                                          ;legacy: True
                                          ;Move if greater or equal (SF=OF).} */
             
             ERASM_DECODER_DO_ACTION (2,
                                      Cmovge,
                                      Just<OpR32>,
                                      Just<EncModrm_reg>,
                                      Just<OpRM32>,
                                      Just<EncModrm_rm>,
                                      Nothing,
                                      Nothing);
         }
      case (0x4e):
      if (is_data16)
         {
             /* EncodedInstructionDefinition {{[]
                                           ;0F 4E 
                                           ;Just Modrm
                                           ;Just RMBoth
                                           ;Nothing
                                           ;[]
                                           ;Just Op16
                                           ;Nothing}
                                          ;Prototype {protoMnemonic = "CMOVLE", protoOperands = [OpR16,OpRM16]}
                                          ;[(EncModrm_reg
                                            ,OperandReadWrite)
                                           ,(EncModrm_rm,OperandReadOnly)]
                                          ;64bit: True
                                          ;legacy: True
                                          ;Move if less or equal (ZF=1 or SF≠ OF).} */
             
             ERASM_DECODER_DO_ACTION (2,
                                      Cmovle,
                                      Just<OpR16>,
                                      Just<EncModrm_reg>,
                                      Just<OpRM16>,
                                      Just<EncModrm_rm>,
                                      Nothing,
                                      Nothing);
         }
      else
         {
             /* EncodedInstructionDefinition {{[]
                                           ;0F 4E 
                                           ;Just Modrm
                                           ;Just RMBoth
                                           ;Nothing
                                           ;[]
                                           ;Just Op32
                                           ;Nothing}
                                          ;Prototype {protoMnemonic = "CMOVLE", protoOperands = [OpR32,OpRM32]}
                                          ;[(EncModrm_reg
                                            ,OperandReadWrite)
                                           ,(EncModrm_rm,OperandReadOnly)]
                                          ;64bit: True
                                          ;legacy: True
                                          ;Move if less or equal (ZF=1 or SF≠ OF).} */
             
             ERASM_DECODER_DO_ACTION (2,
                                      Cmovle,
                                      Just<OpR32>,
                                      Just<EncModrm_reg>,
                                      Just<OpRM32>,
                                      Just<EncModrm_rm>,
                                      Nothing,
                                      Nothing);
         }
      case (0x4f):
      if (is_data16)
         {
             /* EncodedInstructionDefinition {{[]
                                           ;0F 4F 
                                           ;Just Modrm
                                           ;Just RMBoth
                                           ;Nothing
                                           ;[]
                                           ;Just Op16
                                           ;Nothing}
                                          ;Prototype {protoMnemonic = "CMOVG", protoOperands = [OpR16,OpRM16]}
                                          ;[(EncModrm_reg
                                            ,OperandReadWrite)
                                           ,(EncModrm_rm,OperandReadOnly)]
                                          ;64bit: True
                                          ;legacy: True
                                          ;Move if greater (ZF=0 and SF=OF).} */
             
             ERASM_DECODER_DO_ACTION (2,
                                      Cmovg,
                                      Just<OpR16>,
                                      Just<EncModrm_reg>,
                                      Just<OpRM16>,
                                      Just<EncModrm_rm>,
                                      Nothing,
                                      Nothing);
         }
      else
         {
             /* EncodedInstructionDefinition {{[]
                                           ;0F 4F 
                                           ;Just Modrm
                                           ;Just RMBoth
                                           ;Nothing
                                           ;[]
                                           ;Just Op32
                                           ;Nothing}
                                          ;Prototype {protoMnemonic = "CMOVG", protoOperands = [OpR32,OpRM32]}
                                          ;[(EncModrm_reg
                                            ,OperandReadWrite)
                                           ,(EncModrm_rm,OperandReadOnly)]
                                          ;64bit: True
                                          ;legacy: True
                                          ;Move if greater (ZF=0 and SF=OF).} */
             
             ERASM_DECODER_DO_ACTION (2,
                                      Cmovg,
                                      Just<OpR32>,
                                      Just<EncModrm_reg>,
                                      Just<OpRM32>,
                                      Just<EncModrm_rm>,
                                      Nothing,
                                      Nothing);
         }
      case (0x50):
      if (modrm_mod3 (p))
         if (prefix.operand_size)
            {
                /* EncodedInstructionDefinition {{[OPERAND_SIZE]
                                              ;0F 50 
                                              ;Just Modrm
                                              ;Just RMRegOnly
                                              ;Nothing
                                              ;[]
                                              ;Nothing
                                              ;Nothing}
                                             ;Prototype {protoMnemonic = "MOVMSKPD", protoOperands = [OpRDefault,OpXMM]}
                                             ;[(EncModrm_reg
                                               ,OperandReadWrite)
                                              ,(EncModrm_rm,OperandReadOnly)]
                                             ;64bit: True
                                             ;legacy: True
                                             ;Extract 2-bit sign mask from xmm and store in reg. The upper bits of r32 or r64 are filled with zeros.} */
                
                ERASM_DECODER_DO_ACTION (2,
                                         Movmskpd,
                                         Just<OpRDefault>,
                                         Just<EncModrm_reg>,
                                         Just<OpXMM>,
                                         Just<EncModrm_rm_reg>,
                                         Nothing,
                                         Nothing);
            }
         else
            {
                /* EncodedInstructionDefinition {{[]
                                              ;0F 50 
                                              ;Just Modrm
                                              ;Just RMRegOnly
                                              ;Nothing
                                              ;[]
                                              ;Nothing
                                              ;Nothing}
                                             ;Prototype {protoMnemonic = "MOVMSKPS", protoOperands = [OpRDefault,OpXMM]}
                                             ;[(EncModrm_reg
                                               ,OperandReadWrite)
                                              ,(EncModrm_rm,OperandReadOnly)]
                                             ;64bit: True
                                             ;legacy: True
                                             ;Extract 4-bit sign mask from xmm and store in reg. The upper bits of r32 or r64 are filled with zeros.} */
                
                ERASM_DECODER_DO_ACTION (2,
                                         Movmskps,
                                         Just<OpRDefault>,
                                         Just<EncModrm_reg>,
                                         Just<OpXMM>,
                                         Just<EncModrm_rm_reg>,
                                         Nothing,
                                         Nothing);
            }
      else
         goto decode_error;
      case (0x51):
      if (prefix.repne)
         {
             /* EncodedInstructionDefinition {{[REPNE]
                                           ;0F 51 
                                           ;Just Modrm
                                           ;Just RMBoth
                                           ;Nothing
                                           ;[]
                                           ;Nothing
                                           ;Nothing}
                                          ;Prototype {protoMnemonic = "SQRTSD", protoOperands = [OpXMM,OpXMM_M64]}
                                          ;[(EncModrm_reg
                                            ,OperandReadWrite)
                                           ,(EncModrm_rm,OperandReadOnly)]
                                          ;64bit: True
                                          ;legacy: True
                                          ;Computes square root of the low double-precision floating-point value in xmm2/m64 and stores the results in xmm1.} */
             
             ERASM_DECODER_DO_ACTION (2,
                                      Sqrtsd,
                                      Just<OpXMM>,
                                      Just<EncModrm_reg>,
                                      Just<OpXMM_M64>,
                                      Just<EncModrm_rm>,
                                      Nothing,
                                      Nothing);
         }
      else
         if (prefix.rep)
            {
                /* EncodedInstructionDefinition {{[REP]
                                              ;0F 51 
                                              ;Just Modrm
                                              ;Just RMBoth
                                              ;Nothing
                                              ;[]
                                              ;Nothing
                                              ;Nothing}
                                             ;Prototype {protoMnemonic = "SQRTSS", protoOperands = [OpXMM,OpXMM_M32]}
                                             ;[(EncModrm_reg
                                               ,OperandReadWrite)
                                              ,(EncModrm_rm,OperandReadOnly)]
                                             ;64bit: True
                                             ;legacy: True
                                             ;Computes square root of the low single-precision floating-point value in xmm2/m32 and stores the results in xmm1.} */
                
                ERASM_DECODER_DO_ACTION (2,
                                         Sqrtss,
                                         Just<OpXMM>,
                                         Just<EncModrm_reg>,
                                         Just<OpXMM_M32>,
                                         Just<EncModrm_rm>,
                                         Nothing,
                                         Nothing);
            }
         else
            if (prefix.operand_size)
               {
                   /* EncodedInstructionDefinition {{[OPERAND_SIZE]
                                                 ;0F 51 
                                                 ;Just Modrm
                                                 ;Just RMBoth
                                                 ;Nothing
                                                 ;[]
                                                 ;Nothing
                                                 ;Nothing}
                                                ;Prototype {protoMnemonic = "SQRTPD", protoOperands = [OpXMM,OpXMM_M128]}
                                                ;[(EncModrm_reg
                                                  ,OperandReadWrite)
                                                 ,(EncModrm_rm,OperandReadOnly)]
                                                ;64bit: True
                                                ;legacy: True
                                                ;Computes square roots of the packed double-precision floating-point values in xmm2/m128 and stores the results in xmm1.} */
                   
                   ERASM_DECODER_DO_ACTION (2,
                                            Sqrtpd,
                                            Just<OpXMM>,
                                            Just<EncModrm_reg>,
                                            Just<OpXMM_M128>,
                                            Just<EncModrm_rm>,
                                            Nothing,
                                            Nothing);
               }
            else
               {
                   /* EncodedInstructionDefinition {{[]
                                                 ;0F 51 
                                                 ;Just Modrm
                                                 ;Just RMBoth
                                                 ;Nothing
                                                 ;[]
                                                 ;Nothing
                                                 ;Nothing}
                                                ;Prototype {protoMnemonic = "SQRTPS", protoOperands = [OpXMM,OpXMM_M128]}
                                                ;[(EncModrm_reg
                                                  ,OperandReadWrite)
                                                 ,(EncModrm_rm,OperandReadOnly)]
                                                ;64bit: True
                                                ;legacy: True
                                                ;Computes square roots of the packed single-precision floating-point values in xmm2/m128 and stores the results in xmm1.} */
                   
                   ERASM_DECODER_DO_ACTION (2,
                                            Sqrtps,
                                            Just<OpXMM>,
                                            Just<EncModrm_reg>,
                                            Just<OpXMM_M128>,
                                            Just<EncModrm_rm>,
                                            Nothing,
                                            Nothing);
               }
      case (0x52):
      if (prefix.rep)
         {
             /* EncodedInstructionDefinition {{[REP]
                                           ;0F 52 
                                           ;Just Modrm
                                           ;Just RMBoth
                                           ;Nothing
                                           ;[]
                                           ;Nothing
                                           ;Nothing}
                                          ;Prototype {protoMnemonic = "RSQRTSS", protoOperands = [OpXMM,OpXMM_M32]}
                                          ;[(EncModrm_reg
                                            ,OperandReadWrite)
                                           ,(EncModrm_rm,OperandReadOnly)]
                                          ;64bit: True
                                          ;legacy: True
                                          ;Computes the approximate reciprocal of the square root of the low single-precision floating-point value in xmm2/m32 and stores the results in xmm1.} */
             
             ERASM_DECODER_DO_ACTION (2,
                                      Rsqrtss,
                                      Just<OpXMM>,
                                      Just<EncModrm_reg>,
                                      Just<OpXMM_M32>,
                                      Just<EncModrm_rm>,
                                      Nothing,
                                      Nothing);
         }
      else
         {
             /* EncodedInstructionDefinition {{[]
                                           ;0F 52 
                                           ;Just Modrm
                                           ;Just RMBoth
                                           ;Nothing
                                           ;[]
                                           ;Nothing
                                           ;Nothing}
                                          ;Prototype {protoMnemonic = "RSQRTPS", protoOperands = [OpXMM,OpXMM_M128]}
                                          ;[(EncModrm_reg
                                            ,OperandReadWrite)
                                           ,(EncModrm_rm,OperandReadOnly)]
                                          ;64bit: True
                                          ;legacy: True
                                          ;Computes the approximate reciprocals of the square roots of the packed single- precision floating-point values in xmm2/m128 and stores the results in xmm1.} */
             
             ERASM_DECODER_DO_ACTION (2,
                                      Rsqrtps,
                                      Just<OpXMM>,
                                      Just<EncModrm_reg>,
                                      Just<OpXMM_M128>,
                                      Just<EncModrm_rm>,
                                      Nothing,
                                      Nothing);
         }
      case (0x53):
      if (prefix.rep)
         {
             /* EncodedInstructionDefinition {{[REP]
                                           ;0F 53 
                                           ;Just Modrm
                                           ;Just RMBoth
                                           ;Nothing
                                           ;[]
                                           ;Nothing
                                           ;Nothing}
                                          ;Prototype {protoMnemonic = "RCPSS", protoOperands = [OpXMM,OpXMM_M32]}
                                          ;[(EncModrm_reg
                                            ,OperandReadWrite)
                                           ,(EncModrm_rm,OperandReadOnly)]
                                          ;64bit: True
                                          ;legacy: True
                                          ;Computes the approximate reciprocal of the scalar single-precision floating- point value in xmm2/m32 and stores the result in xmm1.} */
             
             ERASM_DECODER_DO_ACTION (2,
                                      Rcpss,
                                      Just<OpXMM>,
                                      Just<EncModrm_reg>,
                                      Just<OpXMM_M32>,
                                      Just<EncModrm_rm>,
                                      Nothing,
                                      Nothing);
         }
      else
         {
             /* EncodedInstructionDefinition {{[]
                                           ;0F 53 
                                           ;Just Modrm
                                           ;Just RMBoth
                                           ;Nothing
                                           ;[]
                                           ;Nothing
                                           ;Nothing}
                                          ;Prototype {protoMnemonic = "RCPPS", protoOperands = [OpXMM,OpXMM_M128]}
                                          ;[(EncModrm_reg
                                            ,OperandReadWrite)
                                           ,(EncModrm_rm,OperandReadOnly)]
                                          ;64bit: True
                                          ;legacy: True
                                          ;Computes the approximate reciprocals of the packed single-precision floating- point values in xmm2/m128 and stores the results in xmm1.} */
             
             ERASM_DECODER_DO_ACTION (2,
                                      Rcpps,
                                      Just<OpXMM>,
                                      Just<EncModrm_reg>,
                                      Just<OpXMM_M128>,
                                      Just<EncModrm_rm>,
                                      Nothing,
                                      Nothing);
         }
      case (0x54):
      if (prefix.operand_size)
         {
             /* EncodedInstructionDefinition {{[OPERAND_SIZE]
                                           ;0F 54 
                                           ;Just Modrm
                                           ;Just RMBoth
                                           ;Nothing
                                           ;[]
                                           ;Nothing
                                           ;Nothing}
                                          ;Prototype {protoMnemonic = "ANDPD", protoOperands = [OpXMM,OpXMM_M128]}
                                          ;[(EncModrm_reg
                                            ,OperandReadWrite)
                                           ,(EncModrm_rm,OperandReadOnly)]
                                          ;64bit: True
                                          ;legacy: True
                                          ;Bitwise logical AND of xmm2/m128 and xmm1.} */
             
             ERASM_DECODER_DO_ACTION (2,
                                      Andpd,
                                      Just<OpXMM>,
                                      Just<EncModrm_reg>,
                                      Just<OpXMM_M128>,
                                      Just<EncModrm_rm>,
                                      Nothing,
                                      Nothing);
         }
      else
         {
             /* EncodedInstructionDefinition {{[]
                                           ;0F 54 
                                           ;Just Modrm
                                           ;Just RMBoth
                                           ;Nothing
                                           ;[]
                                           ;Nothing
                                           ;Nothing}
                                          ;Prototype {protoMnemonic = "ANDPS", protoOperands = [OpXMM,OpXMM_M128]}
                                          ;[(EncModrm_reg
                                            ,OperandReadWrite)
                                           ,(EncModrm_rm,OperandReadOnly)]
                                          ;64bit: True
                                          ;legacy: True
                                          ;Bitwise logical AND of xmm2/m128 and xmm1.} */
             
             ERASM_DECODER_DO_ACTION (2,
                                      Andps,
                                      Just<OpXMM>,
                                      Just<EncModrm_reg>,
                                      Just<OpXMM_M128>,
                                      Just<EncModrm_rm>,
                                      Nothing,
                                      Nothing);
         }
      case (0x55):
      if (prefix.operand_size)
         {
             /* EncodedInstructionDefinition {{[OPERAND_SIZE]
                                           ;0F 55 
                                           ;Just Modrm
                                           ;Just RMBoth
                                           ;Nothing
                                           ;[]
                                           ;Nothing
                                           ;Nothing}
                                          ;Prototype {protoMnemonic = "ANDNPD", protoOperands = [OpXMM,OpXMM_M128]}
                                          ;[(EncModrm_reg
                                            ,OperandReadWrite)
                                           ,(EncModrm_rm,OperandReadOnly)]
                                          ;64bit: True
                                          ;legacy: True
                                          ;Bitwise logical AND NOT of xmm2/m128 and xmm1.} */
             
             ERASM_DECODER_DO_ACTION (2,
                                      Andnpd,
                                      Just<OpXMM>,
                                      Just<EncModrm_reg>,
                                      Just<OpXMM_M128>,
                                      Just<EncModrm_rm>,
                                      Nothing,
                                      Nothing);
         }
      else
         {
             /* EncodedInstructionDefinition {{[]
                                           ;0F 55 
                                           ;Just Modrm
                                           ;Just RMBoth
                                           ;Nothing
                                           ;[]
                                           ;Nothing
                                           ;Nothing}
                                          ;Prototype {protoMnemonic = "ANDNPS", protoOperands = [OpXMM,OpXMM_M128]}
                                          ;[(EncModrm_reg
                                            ,OperandReadWrite)
                                           ,(EncModrm_rm,OperandReadOnly)]
                                          ;64bit: True
                                          ;legacy: True
                                          ;Bitwise logical AND NOT of xmm2/m128 and xmm1.} */
             
             ERASM_DECODER_DO_ACTION (2,
                                      Andnps,
                                      Just<OpXMM>,
                                      Just<EncModrm_reg>,
                                      Just<OpXMM_M128>,
                                      Just<EncModrm_rm>,
                                      Nothing,
                                      Nothing);
         }
      case (0x56):
      if (prefix.operand_size)
         {
             /* EncodedInstructionDefinition {{[OPERAND_SIZE]
                                           ;0F 56 
                                           ;Just Modrm
                                           ;Just RMBoth
                                           ;Nothing
                                           ;[]
                                           ;Nothing
                                           ;Nothing}
                                          ;Prototype {protoMnemonic = "ORPD", protoOperands = [OpXMM,OpXMM_M128]}
                                          ;[(EncModrm_reg
                                            ,OperandReadWrite)
                                           ,(EncModrm_rm,OperandReadOnly)]
                                          ;64bit: True
                                          ;legacy: True
                                          ;Bitwise OR of xmm2/m128 and xmm1.} */
             
             ERASM_DECODER_DO_ACTION (2,
                                      Orpd,
                                      Just<OpXMM>,
                                      Just<EncModrm_reg>,
                                      Just<OpXMM_M128>,
                                      Just<EncModrm_rm>,
                                      Nothing,
                                      Nothing);
         }
      else
         {
             /* EncodedInstructionDefinition {{[]
                                           ;0F 56 
                                           ;Just Modrm
                                           ;Just RMBoth
                                           ;Nothing
                                           ;[]
                                           ;Nothing
                                           ;Nothing}
                                          ;Prototype {protoMnemonic = "ORPS", protoOperands = [OpXMM,OpXMM_M128]}
                                          ;[(EncModrm_reg
                                            ,OperandReadWrite)
                                           ,(EncModrm_rm,OperandReadOnly)]
                                          ;64bit: True
                                          ;legacy: True
                                          ;Bitwise OR of xmm2/m128 and xmm1.} */
             
             ERASM_DECODER_DO_ACTION (2,
                                      Orps,
                                      Just<OpXMM>,
                                      Just<EncModrm_reg>,
                                      Just<OpXMM_M128>,
                                      Just<EncModrm_rm>,
                                      Nothing,
                                      Nothing);
         }
      case (0x57):
      if (prefix.operand_size)
         {
             /* EncodedInstructionDefinition {{[OPERAND_SIZE]
                                           ;0F 57 
                                           ;Just Modrm
                                           ;Just RMBoth
                                           ;Nothing
                                           ;[]
                                           ;Nothing
                                           ;Nothing}
                                          ;Prototype {protoMnemonic = "XORPD", protoOperands = [OpXMM,OpXMM_M128]}
                                          ;[(EncModrm_reg
                                            ,OperandReadWrite)
                                           ,(EncModrm_rm,OperandReadOnly)]
                                          ;64bit: True
                                          ;legacy: True
                                          ;Bitwise exclusive-OR of xmm2/m128 and xmm1.} */
             
             ERASM_DECODER_DO_ACTION (2,
                                      Xorpd,
                                      Just<OpXMM>,
                                      Just<EncModrm_reg>,
                                      Just<OpXMM_M128>,
                                      Just<EncModrm_rm>,
                                      Nothing,
                                      Nothing);
         }
      else
         {
             /* EncodedInstructionDefinition {{[]
                                           ;0F 57 
                                           ;Just Modrm
                                           ;Just RMBoth
                                           ;Nothing
                                           ;[]
                                           ;Nothing
                                           ;Nothing}
                                          ;Prototype {protoMnemonic = "XORPS", protoOperands = [OpXMM,OpXMM_M128]}
                                          ;[(EncModrm_reg
                                            ,OperandReadWrite)
                                           ,(EncModrm_rm,OperandReadOnly)]
                                          ;64bit: True
                                          ;legacy: True
                                          ;Bitwise exclusive-OR of xmm2/m128 and xmm1.} */
             
             ERASM_DECODER_DO_ACTION (2,
                                      Xorps,
                                      Just<OpXMM>,
                                      Just<EncModrm_reg>,
                                      Just<OpXMM_M128>,
                                      Just<EncModrm_rm>,
                                      Nothing,
                                      Nothing);
         }
      case (0x58):
      if (prefix.repne)
         {
             /* EncodedInstructionDefinition {{[REPNE]
                                           ;0F 58 
                                           ;Just Modrm
                                           ;Just RMBoth
                                           ;Nothing
                                           ;[]
                                           ;Nothing
                                           ;Nothing}
                                          ;Prototype {protoMnemonic = "ADDSD", protoOperands = [OpXMM,OpXMM_M64]}
                                          ;[(EncModrm_reg
                                            ,OperandReadWrite)
                                           ,(EncModrm_rm,OperandReadOnly)]
                                          ;64bit: True
                                          ;legacy: True
                                          ;Add the low double- precision floating-point value from xmm2/m64 to xmm1.} */
             
             ERASM_DECODER_DO_ACTION (2,
                                      Addsd,
                                      Just<OpXMM>,
                                      Just<EncModrm_reg>,
                                      Just<OpXMM_M64>,
                                      Just<EncModrm_rm>,
                                      Nothing,
                                      Nothing);
         }
      else
         if (prefix.rep)
            {
                /* EncodedInstructionDefinition {{[REP]
                                              ;0F 58 
                                              ;Just Modrm
                                              ;Just RMBoth
                                              ;Nothing
                                              ;[]
                                              ;Nothing
                                              ;Nothing}
                                             ;Prototype {protoMnemonic = "ADDSS", protoOperands = [OpXMM,OpXMM_M32]}
                                             ;[(EncModrm_reg
                                               ,OperandReadWrite)
                                              ,(EncModrm_rm,OperandReadOnly)]
                                             ;64bit: True
                                             ;legacy: True
                                             ;Add the low single-precision floating-point value from xmm2/m32 to xmm1.} */
                
                ERASM_DECODER_DO_ACTION (2,
                                         Addss,
                                         Just<OpXMM>,
                                         Just<EncModrm_reg>,
                                         Just<OpXMM_M32>,
                                         Just<EncModrm_rm>,
                                         Nothing,
                                         Nothing);
            }
         else
            if (prefix.operand_size)
               {
                   /* EncodedInstructionDefinition {{[OPERAND_SIZE]
                                                 ;0F 58 
                                                 ;Just Modrm
                                                 ;Just RMBoth
                                                 ;Nothing
                                                 ;[]
                                                 ;Nothing
                                                 ;Nothing}
                                                ;Prototype {protoMnemonic = "ADDPD", protoOperands = [OpXMM,OpXMM_M128]}
                                                ;[(EncModrm_reg
                                                  ,OperandReadWrite)
                                                 ,(EncModrm_rm,OperandReadOnly)]
                                                ;64bit: True
                                                ;legacy: True
                                                ;Add packed double-precision floating-point values from xmm2/m128 to xmm1.} */
                   
                   ERASM_DECODER_DO_ACTION (2,
                                            Addpd,
                                            Just<OpXMM>,
                                            Just<EncModrm_reg>,
                                            Just<OpXMM_M128>,
                                            Just<EncModrm_rm>,
                                            Nothing,
                                            Nothing);
               }
            else
               {
                   /* EncodedInstructionDefinition {{[]
                                                 ;0F 58 
                                                 ;Just Modrm
                                                 ;Just RMBoth
                                                 ;Nothing
                                                 ;[]
                                                 ;Nothing
                                                 ;Nothing}
                                                ;Prototype {protoMnemonic = "ADDPS", protoOperands = [OpXMM,OpXMM_M128]}
                                                ;[(EncModrm_reg
                                                  ,OperandReadWrite)
                                                 ,(EncModrm_rm,OperandReadOnly)]
                                                ;64bit: True
                                                ;legacy: True
                                                ;Add packed single-precision floating-point values from xmm2/m128 to xmm1.} */
                   
                   ERASM_DECODER_DO_ACTION (2,
                                            Addps,
                                            Just<OpXMM>,
                                            Just<EncModrm_reg>,
                                            Just<OpXMM_M128>,
                                            Just<EncModrm_rm>,
                                            Nothing,
                                            Nothing);
               }
      case (0x59):
      if (prefix.repne)
         {
             /* EncodedInstructionDefinition {{[REPNE]
                                           ;0F 59 
                                           ;Just Modrm
                                           ;Just RMBoth
                                           ;Nothing
                                           ;[]
                                           ;Nothing
                                           ;Nothing}
                                          ;Prototype {protoMnemonic = "MULSD", protoOperands = [OpXMM,OpXMM_M64]}
                                          ;[(EncModrm_reg
                                            ,OperandReadWrite)
                                           ,(EncModrm_rm,OperandReadOnly)]
                                          ;64bit: True
                                          ;legacy: True
                                          ;Multiply the low double- precision floating-point value in xmm2/mem64 by low double-precision floating-point value in xmm1.} */
             
             ERASM_DECODER_DO_ACTION (2,
                                      Mulsd,
                                      Just<OpXMM>,
                                      Just<EncModrm_reg>,
                                      Just<OpXMM_M64>,
                                      Just<EncModrm_rm>,
                                      Nothing,
                                      Nothing);
         }
      else
         if (prefix.rep)
            {
                /* EncodedInstructionDefinition {{[REP]
                                              ;0F 59 
                                              ;Just Modrm
                                              ;Just RMBoth
                                              ;Nothing
                                              ;[]
                                              ;Nothing
                                              ;Nothing}
                                             ;Prototype {protoMnemonic = "MULSS", protoOperands = [OpXMM,OpXMM_M32]}
                                             ;[(EncModrm_reg
                                               ,OperandReadWrite)
                                              ,(EncModrm_rm,OperandReadOnly)]
                                             ;64bit: True
                                             ;legacy: True
                                             ;Multiply the low single- precision floating-point value in xmm2/mem by the low single-precision floating-point value in xmm1.} */
                
                ERASM_DECODER_DO_ACTION (2,
                                         Mulss,
                                         Just<OpXMM>,
                                         Just<EncModrm_reg>,
                                         Just<OpXMM_M32>,
                                         Just<EncModrm_rm>,
                                         Nothing,
                                         Nothing);
            }
         else
            if (prefix.operand_size)
               {
                   /* EncodedInstructionDefinition {{[OPERAND_SIZE]
                                                 ;0F 59 
                                                 ;Just Modrm
                                                 ;Just RMBoth
                                                 ;Nothing
                                                 ;[]
                                                 ;Nothing
                                                 ;Nothing}
                                                ;Prototype {protoMnemonic = "MULPD", protoOperands = [OpXMM,OpXMM_M128]}
                                                ;[(EncModrm_reg
                                                  ,OperandReadWrite)
                                                 ,(EncModrm_rm,OperandReadOnly)]
                                                ;64bit: True
                                                ;legacy: True
                                                ;Multiply packed double- precision floating-point values in xmm2/m128 by xmm1.} */
                   
                   ERASM_DECODER_DO_ACTION (2,
                                            Mulpd,
                                            Just<OpXMM>,
                                            Just<EncModrm_reg>,
                                            Just<OpXMM_M128>,
                                            Just<EncModrm_rm>,
                                            Nothing,
                                            Nothing);
               }
            else
               {
                   /* EncodedInstructionDefinition {{[]
                                                 ;0F 59 
                                                 ;Just Modrm
                                                 ;Just RMBoth
                                                 ;Nothing
                                                 ;[]
                                                 ;Nothing
                                                 ;Nothing}
                                                ;Prototype {protoMnemonic = "MULPS", protoOperands = [OpXMM,OpXMM_M128]}
                                                ;[(EncModrm_reg
                                                  ,OperandReadWrite)
                                                 ,(EncModrm_rm,OperandReadOnly)]
                                                ;64bit: True
                                                ;legacy: True
                                                ;Multiply packed single- precision floating-point values in xmm2/mem by xmm1.} */
                   
                   ERASM_DECODER_DO_ACTION (2,
                                            Mulps,
                                            Just<OpXMM>,
                                            Just<EncModrm_reg>,
                                            Just<OpXMM_M128>,
                                            Just<EncModrm_rm>,
                                            Nothing,
                                            Nothing);
               }
      case (0x5a):
      if (prefix.repne)
         {
             /* EncodedInstructionDefinition {{[REPNE]
                                           ;0F 5A 
                                           ;Just Modrm
                                           ;Just RMBoth
                                           ;Nothing
                                           ;[]
                                           ;Nothing
                                           ;Nothing}
                                          ;Prototype {protoMnemonic = "CVTSD2SS", protoOperands = [OpXMM,OpXMM_M64]}
                                          ;[(EncModrm_reg
                                            ,OperandReadWrite)
                                           ,(EncModrm_rm,OperandReadOnly)]
                                          ;64bit: True
                                          ;legacy: True
                                          ;Convert one double- precision floating-point value in xmm2/m64 to one single-precision floating- point value in xmm1.} */
             
             ERASM_DECODER_DO_ACTION (2,
                                      Cvtsd2ss,
                                      Just<OpXMM>,
                                      Just<EncModrm_reg>,
                                      Just<OpXMM_M64>,
                                      Just<EncModrm_rm>,
                                      Nothing,
                                      Nothing);
         }
      else
         if (prefix.rep)
            {
                /* EncodedInstructionDefinition {{[REP]
                                              ;0F 5A 
                                              ;Just Modrm
                                              ;Just RMBoth
                                              ;Nothing
                                              ;[]
                                              ;Nothing
                                              ;Nothing}
                                             ;Prototype {protoMnemonic = "CVTSS2SD", protoOperands = [OpXMM,OpXMM_M32]}
                                             ;[(EncModrm_reg
                                               ,OperandReadWrite)
                                              ,(EncModrm_rm,OperandReadOnly)]
                                             ;64bit: True
                                             ;legacy: True
                                             ;Convert one single-precision floating-point value in xmm2/m32 to one double- precision floating-point value in xmm1.} */
                
                ERASM_DECODER_DO_ACTION (2,
                                         Cvtss2sd,
                                         Just<OpXMM>,
                                         Just<EncModrm_reg>,
                                         Just<OpXMM_M32>,
                                         Just<EncModrm_rm>,
                                         Nothing,
                                         Nothing);
            }
         else
            if (prefix.operand_size)
               {
                   /* EncodedInstructionDefinition {{[OPERAND_SIZE]
                                                 ;0F 5A 
                                                 ;Just Modrm
                                                 ;Just RMBoth
                                                 ;Nothing
                                                 ;[]
                                                 ;Nothing
                                                 ;Nothing}
                                                ;Prototype {protoMnemonic = "CVTPD2PS", protoOperands = [OpXMM,OpXMM_M128]}
                                                ;[(EncModrm_reg
                                                  ,OperandReadWrite)
                                                 ,(EncModrm_rm,OperandReadOnly)]
                                                ;64bit: True
                                                ;legacy: True
                                                ;Convert two packed double- precision floating-point values in xmm2/m128 to two packed single-precision floating-point values in xmm1.} */
                   
                   ERASM_DECODER_DO_ACTION (2,
                                            Cvtpd2ps,
                                            Just<OpXMM>,
                                            Just<EncModrm_reg>,
                                            Just<OpXMM_M128>,
                                            Just<EncModrm_rm>,
                                            Nothing,
                                            Nothing);
               }
            else
               {
                   /* EncodedInstructionDefinition {{[]
                                                 ;0F 5A 
                                                 ;Just Modrm
                                                 ;Just RMBoth
                                                 ;Nothing
                                                 ;[]
                                                 ;Nothing
                                                 ;Nothing}
                                                ;Prototype {protoMnemonic = "CVTPS2PD", protoOperands = [OpXMM,OpXMM_M64]}
                                                ;[(EncModrm_reg
                                                  ,OperandReadWrite)
                                                 ,(EncModrm_rm,OperandReadOnly)]
                                                ;64bit: True
                                                ;legacy: True
                                                ;Convert two packed single- precision floating-point values in xmm2/m64 to two packed double-precision floating-point values in xmm1.} */
                   
                   ERASM_DECODER_DO_ACTION (2,
                                            Cvtps2pd,
                                            Just<OpXMM>,
                                            Just<EncModrm_reg>,
                                            Just<OpXMM_M64>,
                                            Just<EncModrm_rm>,
                                            Nothing,
                                            Nothing);
               }
      case (0x5b):
      if (prefix.rep)
         {
             /* EncodedInstructionDefinition {{[REP]
                                           ;0F 5B 
                                           ;Just Modrm
                                           ;Just RMBoth
                                           ;Nothing
                                           ;[]
                                           ;Nothing
                                           ;Nothing}
                                          ;Prototype {protoMnemonic = "CVTTPS2DQ", protoOperands = [OpXMM,OpXMM_M128]}
                                          ;[(EncModrm_reg
                                            ,OperandReadWrite)
                                           ,(EncModrm_rm,OperandReadOnly)]
                                          ;64bit: True
                                          ;legacy: True
                                          ;Convert four single- precision floating-point values from xmm2/m128 to four signed doubleword integers in xmm1 using truncation.} */
             
             ERASM_DECODER_DO_ACTION (2,
                                      Cvttps2dq,
                                      Just<OpXMM>,
                                      Just<EncModrm_reg>,
                                      Just<OpXMM_M128>,
                                      Just<EncModrm_rm>,
                                      Nothing,
                                      Nothing);
         }
      else
         if (prefix.operand_size)
            {
                /* EncodedInstructionDefinition {{[OPERAND_SIZE]
                                              ;0F 5B 
                                              ;Just Modrm
                                              ;Just RMBoth
                                              ;Nothing
                                              ;[]
                                              ;Nothing
                                              ;Nothing}
                                             ;Prototype {protoMnemonic = "CVTPS2DQ", protoOperands = [OpXMM,OpXMM_M128]}
                                             ;[(EncModrm_reg
                                               ,OperandReadWrite)
                                              ,(EncModrm_rm,OperandReadOnly)]
                                             ;64bit: True
                                             ;legacy: True
                                             ;Convert four packed single- precision floating-point values from xmm2/m128 to four packed signed doubleword integers in xmm1.} */
                
                ERASM_DECODER_DO_ACTION (2,
                                         Cvtps2dq,
                                         Just<OpXMM>,
                                         Just<EncModrm_reg>,
                                         Just<OpXMM_M128>,
                                         Just<EncModrm_rm>,
                                         Nothing,
                                         Nothing);
            }
         else
            {
                /* EncodedInstructionDefinition {{[]
                                              ;0F 5B 
                                              ;Just Modrm
                                              ;Just RMBoth
                                              ;Nothing
                                              ;[]
                                              ;Nothing
                                              ;Nothing}
                                             ;Prototype {protoMnemonic = "CVTDQ2PS", protoOperands = [OpXMM,OpXMM_M128]}
                                             ;[(EncModrm_reg
                                               ,OperandReadWrite)
                                              ,(EncModrm_rm,OperandReadOnly)]
                                             ;64bit: True
                                             ;legacy: True
                                             ;Convert four packed signed doubleword integers from xmm2/m128 to four packed single-precision floating- point values in xmm1.} */
                
                ERASM_DECODER_DO_ACTION (2,
                                         Cvtdq2ps,
                                         Just<OpXMM>,
                                         Just<EncModrm_reg>,
                                         Just<OpXMM_M128>,
                                         Just<EncModrm_rm>,
                                         Nothing,
                                         Nothing);
            }
      case (0x5c):
      if (prefix.repne)
         {
             /* EncodedInstructionDefinition {{[REPNE]
                                           ;0F 5C 
                                           ;Just Modrm
                                           ;Just RMBoth
                                           ;Nothing
                                           ;[]
                                           ;Nothing
                                           ;Nothing}
                                          ;Prototype {protoMnemonic = "SUBSD", protoOperands = [OpXMM,OpXMM_M64]}
                                          ;[(EncModrm_reg
                                            ,OperandReadWrite)
                                           ,(EncModrm_rm,OperandReadOnly)]
                                          ;64bit: True
                                          ;legacy: True
                                          ;Subtracts the low double- precision floating-point values in xmm2/mem64 from xmm1.} */
             
             ERASM_DECODER_DO_ACTION (2,
                                      Subsd,
                                      Just<OpXMM>,
                                      Just<EncModrm_reg>,
                                      Just<OpXMM_M64>,
                                      Just<EncModrm_rm>,
                                      Nothing,
                                      Nothing);
         }
      else
         if (prefix.rep)
            {
                /* EncodedInstructionDefinition {{[REP]
                                              ;0F 5C 
                                              ;Just Modrm
                                              ;Just RMBoth
                                              ;Nothing
                                              ;[]
                                              ;Nothing
                                              ;Nothing}
                                             ;Prototype {protoMnemonic = "SUBSS", protoOperands = [OpXMM,OpXMM_M32]}
                                             ;[(EncModrm_reg
                                               ,OperandReadWrite)
                                              ,(EncModrm_rm,OperandReadOnly)]
                                             ;64bit: True
                                             ;legacy: True
                                             ;Subtract the lower single- precision floating-point values in xmm2/m32 from xmm1.} */
                
                ERASM_DECODER_DO_ACTION (2,
                                         Subss,
                                         Just<OpXMM>,
                                         Just<EncModrm_reg>,
                                         Just<OpXMM_M32>,
                                         Just<EncModrm_rm>,
                                         Nothing,
                                         Nothing);
            }
         else
            if (prefix.operand_size)
               {
                   /* EncodedInstructionDefinition {{[OPERAND_SIZE]
                                                 ;0F 5C 
                                                 ;Just Modrm
                                                 ;Just RMBoth
                                                 ;Nothing
                                                 ;[]
                                                 ;Nothing
                                                 ;Nothing}
                                                ;Prototype {protoMnemonic = "SUBPD", protoOperands = [OpXMM,OpXMM_M128]}
                                                ;[(EncModrm_reg
                                                  ,OperandReadWrite)
                                                 ,(EncModrm_rm,OperandReadOnly)]
                                                ;64bit: True
                                                ;legacy: True
                                                ;Subtract packed double- precision floating-point values in xmm2/m128 from xmm1.} */
                   
                   ERASM_DECODER_DO_ACTION (2,
                                            Subpd,
                                            Just<OpXMM>,
                                            Just<EncModrm_reg>,
                                            Just<OpXMM_M128>,
                                            Just<EncModrm_rm>,
                                            Nothing,
                                            Nothing);
               }
            else
               {
                   /* EncodedInstructionDefinition {{[]
                                                 ;0F 5C 
                                                 ;Just Modrm
                                                 ;Just RMBoth
                                                 ;Nothing
                                                 ;[]
                                                 ;Nothing
                                                 ;Nothing}
                                                ;Prototype {protoMnemonic = "SUBPS", protoOperands = [OpXMM,OpXMM_M128]}
                                                ;[(EncModrm_reg
                                                  ,OperandReadWrite)
                                                 ,(EncModrm_rm,OperandReadOnly)]
                                                ;64bit: True
                                                ;legacy: True
                                                ;Subtract packed single- precision floating-point values in xmm2/mem from xmm1.} */
                   
                   ERASM_DECODER_DO_ACTION (2,
                                            Subps,
                                            Just<OpXMM>,
                                            Just<EncModrm_reg>,
                                            Just<OpXMM_M128>,
                                            Just<EncModrm_rm>,
                                            Nothing,
                                            Nothing);
               }
      case (0x5d):
      if (prefix.repne)
         {
             /* EncodedInstructionDefinition {{[REPNE]
                                           ;0F 5D 
                                           ;Just Modrm
                                           ;Just RMBoth
                                           ;Nothing
                                           ;[]
                                           ;Nothing
                                           ;Nothing}
                                          ;Prototype {protoMnemonic = "MINSD", protoOperands = [OpXMM,OpXMM_M64]}
                                          ;[(EncModrm_reg
                                            ,OperandReadWrite)
                                           ,(EncModrm_rm,OperandReadOnly)]
                                          ;64bit: True
                                          ;legacy: True
                                          ;Return the minimum scalar double-precision floating- point value between xmm2/mem64 and xmm1.} */
             
             ERASM_DECODER_DO_ACTION (2,
                                      Minsd,
                                      Just<OpXMM>,
                                      Just<EncModrm_reg>,
                                      Just<OpXMM_M64>,
                                      Just<EncModrm_rm>,
                                      Nothing,
                                      Nothing);
         }
      else
         if (prefix.rep)
            {
                /* EncodedInstructionDefinition {{[REP]
                                              ;0F 5D 
                                              ;Just Modrm
                                              ;Just RMBoth
                                              ;Nothing
                                              ;[]
                                              ;Nothing
                                              ;Nothing}
                                             ;Prototype {protoMnemonic = "MINSS", protoOperands = [OpXMM,OpXMM_M32]}
                                             ;[(EncModrm_reg
                                               ,OperandReadWrite)
                                              ,(EncModrm_rm,OperandReadOnly)]
                                             ;64bit: True
                                             ;legacy: True
                                             ;Return the minimum scalar single-precision floating- point value between xmm2/mem32 and xmm1.} */
                
                ERASM_DECODER_DO_ACTION (2,
                                         Minss,
                                         Just<OpXMM>,
                                         Just<EncModrm_reg>,
                                         Just<OpXMM_M32>,
                                         Just<EncModrm_rm>,
                                         Nothing,
                                         Nothing);
            }
         else
            if (prefix.operand_size)
               {
                   /* EncodedInstructionDefinition {{[OPERAND_SIZE]
                                                 ;0F 5D 
                                                 ;Just Modrm
                                                 ;Just RMBoth
                                                 ;Nothing
                                                 ;[]
                                                 ;Nothing
                                                 ;Nothing}
                                                ;Prototype {protoMnemonic = "MINPD", protoOperands = [OpXMM,OpXMM_M128]}
                                                ;[(EncModrm_reg
                                                  ,OperandReadWrite)
                                                 ,(EncModrm_rm,OperandReadOnly)]
                                                ;64bit: True
                                                ;legacy: True
                                                ;Return the minimum double- precision floating-point values between xmm2/m128 and xmm1.} */
                   
                   ERASM_DECODER_DO_ACTION (2,
                                            Minpd,
                                            Just<OpXMM>,
                                            Just<EncModrm_reg>,
                                            Just<OpXMM_M128>,
                                            Just<EncModrm_rm>,
                                            Nothing,
                                            Nothing);
               }
            else
               {
                   /* EncodedInstructionDefinition {{[]
                                                 ;0F 5D 
                                                 ;Just Modrm
                                                 ;Just RMBoth
                                                 ;Nothing
                                                 ;[]
                                                 ;Nothing
                                                 ;Nothing}
                                                ;Prototype {protoMnemonic = "MINPS", protoOperands = [OpXMM,OpXMM_M128]}
                                                ;[(EncModrm_reg
                                                  ,OperandReadWrite)
                                                 ,(EncModrm_rm,OperandReadOnly)]
                                                ;64bit: True
                                                ;legacy: True
                                                ;Return the minimum single- precision floating-point values between xmm2/m128 and xmm1.} */
                   
                   ERASM_DECODER_DO_ACTION (2,
                                            Minps,
                                            Just<OpXMM>,
                                            Just<EncModrm_reg>,
                                            Just<OpXMM_M128>,
                                            Just<EncModrm_rm>,
                                            Nothing,
                                            Nothing);
               }
      case (0x5e):
      if (prefix.repne)
         {
             /* EncodedInstructionDefinition {{[REPNE]
                                           ;0F 5E 
                                           ;Just Modrm
                                           ;Just RMBoth
                                           ;Nothing
                                           ;[]
                                           ;Nothing
                                           ;Nothing}
                                          ;Prototype {protoMnemonic = "DIVSD", protoOperands = [OpXMM,OpXMM_M64]}
                                          ;[(EncModrm_reg
                                            ,OperandReadWrite)
                                           ,(EncModrm_rm,OperandReadOnly)]
                                          ;64bit: True
                                          ;legacy: True
                                          ;Divide low double-precision floating-point value n xmm1 by low double-precision floating-point value in xmm2/mem64.} */
             
             ERASM_DECODER_DO_ACTION (2,
                                      Divsd,
                                      Just<OpXMM>,
                                      Just<EncModrm_reg>,
                                      Just<OpXMM_M64>,
                                      Just<EncModrm_rm>,
                                      Nothing,
                                      Nothing);
         }
      else
         if (prefix.rep)
            {
                /* EncodedInstructionDefinition {{[REP]
                                              ;0F 5E 
                                              ;Just Modrm
                                              ;Just RMBoth
                                              ;Nothing
                                              ;[]
                                              ;Nothing
                                              ;Nothing}
                                             ;Prototype {protoMnemonic = "DIVSS", protoOperands = [OpXMM,OpXMM_M32]}
                                             ;[(EncModrm_reg
                                               ,OperandReadWrite)
                                              ,(EncModrm_rm,OperandReadOnly)]
                                             ;64bit: True
                                             ;legacy: True
                                             ;Divide low single-precision floating-point value in xmm1 by low single- precision floating-point value in xmm2/m32.} */
                
                ERASM_DECODER_DO_ACTION (2,
                                         Divss,
                                         Just<OpXMM>,
                                         Just<EncModrm_reg>,
                                         Just<OpXMM_M32>,
                                         Just<EncModrm_rm>,
                                         Nothing,
                                         Nothing);
            }
         else
            if (prefix.operand_size)
               {
                   /* EncodedInstructionDefinition {{[OPERAND_SIZE]
                                                 ;0F 5E 
                                                 ;Just Modrm
                                                 ;Just RMBoth
                                                 ;Nothing
                                                 ;[]
                                                 ;Nothing
                                                 ;Nothing}
                                                ;Prototype {protoMnemonic = "DIVPD", protoOperands = [OpXMM,OpXMM_M128]}
                                                ;[(EncModrm_reg
                                                  ,OperandReadWrite)
                                                 ,(EncModrm_rm,OperandReadOnly)]
                                                ;64bit: True
                                                ;legacy: True
                                                ;Divide packed double- precision floating-point values in xmm1 by packed double-precision floating- point values xmm2/m128.} */
                   
                   ERASM_DECODER_DO_ACTION (2,
                                            Divpd,
                                            Just<OpXMM>,
                                            Just<EncModrm_reg>,
                                            Just<OpXMM_M128>,
                                            Just<EncModrm_rm>,
                                            Nothing,
                                            Nothing);
               }
            else
               {
                   /* EncodedInstructionDefinition {{[]
                                                 ;0F 5E 
                                                 ;Just Modrm
                                                 ;Just RMBoth
                                                 ;Nothing
                                                 ;[]
                                                 ;Nothing
                                                 ;Nothing}
                                                ;Prototype {protoMnemonic = "DIVPS", protoOperands = [OpXMM,OpXMM_M128]}
                                                ;[(EncModrm_reg
                                                  ,OperandReadWrite)
                                                 ,(EncModrm_rm,OperandReadOnly)]
                                                ;64bit: True
                                                ;legacy: True
                                                ;Divide packed single- precision floating-point values in xmm1 by packed single-precision floating- point values xmm2/m128.} */
                   
                   ERASM_DECODER_DO_ACTION (2,
                                            Divps,
                                            Just<OpXMM>,
                                            Just<EncModrm_reg>,
                                            Just<OpXMM_M128>,
                                            Just<EncModrm_rm>,
                                            Nothing,
                                            Nothing);
               }
      case (0x5f):
      if (prefix.repne)
         {
             /* EncodedInstructionDefinition {{[REPNE]
                                           ;0F 5F 
                                           ;Just Modrm
                                           ;Just RMBoth
                                           ;Nothing
                                           ;[]
                                           ;Nothing
                                           ;Nothing}
                                          ;Prototype {protoMnemonic = "MAXSD", protoOperands = [OpXMM,OpXMM_M64]}
                                          ;[(EncModrm_reg
                                            ,OperandReadWrite)
                                           ,(EncModrm_rm,OperandReadOnly)]
                                          ;64bit: True
                                          ;legacy: True
                                          ;Return the maximum scalar double-precision floating- point value between xmm2/mem64 and xmm1.} */
             
             ERASM_DECODER_DO_ACTION (2,
                                      Maxsd,
                                      Just<OpXMM>,
                                      Just<EncModrm_reg>,
                                      Just<OpXMM_M64>,
                                      Just<EncModrm_rm>,
                                      Nothing,
                                      Nothing);
         }
      else
         if (prefix.rep)
            {
                /* EncodedInstructionDefinition {{[REP]
                                              ;0F 5F 
                                              ;Just Modrm
                                              ;Just RMBoth
                                              ;Nothing
                                              ;[]
                                              ;Nothing
                                              ;Nothing}
                                             ;Prototype {protoMnemonic = "MAXSS", protoOperands = [OpXMM,OpXMM_M32]}
                                             ;[(EncModrm_reg
                                               ,OperandReadWrite)
                                              ,(EncModrm_rm,OperandReadOnly)]
                                             ;64bit: True
                                             ;legacy: True
                                             ;Return the maximum scalar single-precision floating- point value between xmm2/mem32 and xmm1.} */
                
                ERASM_DECODER_DO_ACTION (2,
                                         Maxss,
                                         Just<OpXMM>,
                                         Just<EncModrm_reg>,
                                         Just<OpXMM_M32>,
                                         Just<EncModrm_rm>,
                                         Nothing,
                                         Nothing);
            }
         else
            if (prefix.operand_size)
               {
                   /* EncodedInstructionDefinition {{[OPERAND_SIZE]
                                                 ;0F 5F 
                                                 ;Just Modrm
                                                 ;Just RMBoth
                                                 ;Nothing
                                                 ;[]
                                                 ;Nothing
                                                 ;Nothing}
                                                ;Prototype {protoMnemonic = "MAXPD", protoOperands = [OpXMM,OpXMM_M128]}
                                                ;[(EncModrm_reg
                                                  ,OperandReadWrite)
                                                 ,(EncModrm_rm,OperandReadOnly)]
                                                ;64bit: True
                                                ;legacy: True
                                                ;Return the maximum double-precision floating- point values between xmm2/m128 and xmm1.} */
                   
                   ERASM_DECODER_DO_ACTION (2,
                                            Maxpd,
                                            Just<OpXMM>,
                                            Just<EncModrm_reg>,
                                            Just<OpXMM_M128>,
                                            Just<EncModrm_rm>,
                                            Nothing,
                                            Nothing);
               }
            else
               {
                   /* EncodedInstructionDefinition {{[]
                                                 ;0F 5F 
                                                 ;Just Modrm
                                                 ;Just RMBoth
                                                 ;Nothing
                                                 ;[]
                                                 ;Nothing
                                                 ;Nothing}
                                                ;Prototype {protoMnemonic = "MAXPS", protoOperands = [OpXMM,OpXMM_M128]}
                                                ;[(EncModrm_reg
                                                  ,OperandReadWrite)
                                                 ,(EncModrm_rm,OperandReadOnly)]
                                                ;64bit: True
                                                ;legacy: True
                                                ;Return the maximum single- precision floating-point values between xmm2/m128 and xmm1.} */
                   
                   ERASM_DECODER_DO_ACTION (2,
                                            Maxps,
                                            Just<OpXMM>,
                                            Just<EncModrm_reg>,
                                            Just<OpXMM_M128>,
                                            Just<EncModrm_rm>,
                                            Nothing,
                                            Nothing);
               }
      case (0x60):
      if (prefix.operand_size)
         {
             /* EncodedInstructionDefinition {{[OPERAND_SIZE]
                                           ;0F 60 
                                           ;Just Modrm
                                           ;Just RMBoth
                                           ;Nothing
                                           ;[]
                                           ;Nothing
                                           ;Nothing}
                                          ;Prototype {protoMnemonic = "PUNPCKLBW", protoOperands = [OpXMM,OpXMM_M128]}
                                          ;[(EncModrm_reg
                                            ,OperandReadWrite)
                                           ,(EncModrm_rm,OperandReadOnly)]
                                          ;64bit: True
                                          ;legacy: True
                                          ;Interleave low-order bytes from xmm1 and xmm2/m128 into xmm1.} */
             
             ERASM_DECODER_DO_ACTION (2,
                                      Punpcklbw,
                                      Just<OpXMM>,
                                      Just<EncModrm_reg>,
                                      Just<OpXMM_M128>,
                                      Just<EncModrm_rm>,
                                      Nothing,
                                      Nothing);
         }
      else
         {
             /* EncodedInstructionDefinition {{[]
                                           ;0F 60 
                                           ;Just Modrm
                                           ;Just RMBoth
                                           ;Nothing
                                           ;[]
                                           ;Nothing
                                           ;Nothing}
                                          ;Prototype {protoMnemonic = "PUNPCKLBW", protoOperands = [OpMM,OpMM_M32]}
                                          ;[(EncModrm_reg
                                            ,OperandReadWrite)
                                           ,(EncModrm_rm,OperandReadOnly)]
                                          ;64bit: True
                                          ;legacy: True
                                          ;Interleave low-order bytes from mm and mm/m32 into mm.} */
             
             ERASM_DECODER_DO_ACTION (2,
                                      Punpcklbw,
                                      Just<OpMM>,
                                      Just<EncModrm_reg>,
                                      Just<OpMM_M32>,
                                      Just<EncModrm_rm>,
                                      Nothing,
                                      Nothing);
         }
      case (0x61):
      if (prefix.operand_size)
         {
             /* EncodedInstructionDefinition {{[OPERAND_SIZE]
                                           ;0F 61 
                                           ;Just Modrm
                                           ;Just RMBoth
                                           ;Nothing
                                           ;[]
                                           ;Nothing
                                           ;Nothing}
                                          ;Prototype {protoMnemonic = "PUNPCKLWD", protoOperands = [OpXMM,OpXMM_M128]}
                                          ;[(EncModrm_reg
                                            ,OperandReadWrite)
                                           ,(EncModrm_rm,OperandReadOnly)]
                                          ;64bit: True
                                          ;legacy: True
                                          ;Interleave low-order words from xmm1 and xmm2/m128 into xmm1.} */
             
             ERASM_DECODER_DO_ACTION (2,
                                      Punpcklwd,
                                      Just<OpXMM>,
                                      Just<EncModrm_reg>,
                                      Just<OpXMM_M128>,
                                      Just<EncModrm_rm>,
                                      Nothing,
                                      Nothing);
         }
      else
         {
             /* EncodedInstructionDefinition {{[]
                                           ;0F 61 
                                           ;Just Modrm
                                           ;Just RMBoth
                                           ;Nothing
                                           ;[]
                                           ;Nothing
                                           ;Nothing}
                                          ;Prototype {protoMnemonic = "PUNPCKLWD", protoOperands = [OpMM,OpMM_M32]}
                                          ;[(EncModrm_reg
                                            ,OperandReadWrite)
                                           ,(EncModrm_rm,OperandReadOnly)]
                                          ;64bit: True
                                          ;legacy: True
                                          ;Interleave low-order words from mm and mm/m32 into mm.} */
             
             ERASM_DECODER_DO_ACTION (2,
                                      Punpcklwd,
                                      Just<OpMM>,
                                      Just<EncModrm_reg>,
                                      Just<OpMM_M32>,
                                      Just<EncModrm_rm>,
                                      Nothing,
                                      Nothing);
         }
      case (0x62):
      if (prefix.operand_size)
         {
             /* EncodedInstructionDefinition {{[OPERAND_SIZE]
                                           ;0F 62 
                                           ;Just Modrm
                                           ;Just RMBoth
                                           ;Nothing
                                           ;[]
                                           ;Nothing
                                           ;Nothing}
                                          ;Prototype {protoMnemonic = "PUNPCKLDQ", protoOperands = [OpXMM,OpXMM_M128]}
                                          ;[(EncModrm_reg
                                            ,OperandReadWrite)
                                           ,(EncModrm_rm,OperandReadOnly)]
                                          ;64bit: True
                                          ;legacy: True
                                          ;Interleave low-order doublewords from xmm1 and xmm2/m128 into xmm1.} */
             
             ERASM_DECODER_DO_ACTION (2,
                                      Punpckldq,
                                      Just<OpXMM>,
                                      Just<EncModrm_reg>,
                                      Just<OpXMM_M128>,
                                      Just<EncModrm_rm>,
                                      Nothing,
                                      Nothing);
         }
      else
         {
             /* EncodedInstructionDefinition {{[]
                                           ;0F 62 
                                           ;Just Modrm
                                           ;Just RMBoth
                                           ;Nothing
                                           ;[]
                                           ;Nothing
                                           ;Nothing}
                                          ;Prototype {protoMnemonic = "PUNPCKLDQ", protoOperands = [OpMM,OpMM_M32]}
                                          ;[(EncModrm_reg
                                            ,OperandReadWrite)
                                           ,(EncModrm_rm,OperandReadOnly)]
                                          ;64bit: True
                                          ;legacy: True
                                          ;Interleave low-order doublewords from mm and mm/m32 into mm.} */
             
             ERASM_DECODER_DO_ACTION (2,
                                      Punpckldq,
                                      Just<OpMM>,
                                      Just<EncModrm_reg>,
                                      Just<OpMM_M32>,
                                      Just<EncModrm_rm>,
                                      Nothing,
                                      Nothing);
         }
      case (0x63):
      if (prefix.operand_size)
         {
             /* EncodedInstructionDefinition {{[OPERAND_SIZE]
                                           ;0F 63 
                                           ;Just Modrm
                                           ;Just RMBoth
                                           ;Nothing
                                           ;[]
                                           ;Nothing
                                           ;Nothing}
                                          ;Prototype {protoMnemonic = "PACKSSWB", protoOperands = [OpXMM,OpXMM_M128]}
                                          ;[(EncModrm_reg
                                            ,OperandReadWrite)
                                           ,(EncModrm_rm,OperandReadOnly)]
                                          ;64bit: True
                                          ;legacy: True
                                          ;Converts 8 packed signed word integers from xmm1 and from xxm2/m128 into 16 packed signed byte integers in xxm1 using signed saturation.} */
             
             ERASM_DECODER_DO_ACTION (2,
                                      Packsswb,
                                      Just<OpXMM>,
                                      Just<EncModrm_reg>,
                                      Just<OpXMM_M128>,
                                      Just<EncModrm_rm>,
                                      Nothing,
                                      Nothing);
         }
      else
         {
             /* EncodedInstructionDefinition {{[]
                                           ;0F 63 
                                           ;Just Modrm
                                           ;Just RMBoth
                                           ;Nothing
                                           ;[]
                                           ;Nothing
                                           ;Nothing}
                                          ;Prototype {protoMnemonic = "PACKSSWB", protoOperands = [OpMM,OpMM_M64]}
                                          ;[(EncModrm_reg
                                            ,OperandReadWrite)
                                           ,(EncModrm_rm,OperandReadOnly)]
                                          ;64bit: True
                                          ;legacy: True
                                          ;Converts 4 packed signed word integers from mm1 and from mm2/m64 into 8 packed signed byte integers in mm1 using signed saturation.} */
             
             ERASM_DECODER_DO_ACTION (2,
                                      Packsswb,
                                      Just<OpMM>,
                                      Just<EncModrm_reg>,
                                      Just<OpMM_M64>,
                                      Just<EncModrm_rm>,
                                      Nothing,
                                      Nothing);
         }
      case (0x64):
      if (prefix.operand_size)
         {
             /* EncodedInstructionDefinition {{[OPERAND_SIZE]
                                           ;0F 64 
                                           ;Just Modrm
                                           ;Just RMBoth
                                           ;Nothing
                                           ;[]
                                           ;Nothing
                                           ;Nothing}
                                          ;Prototype {protoMnemonic = "PCMPGTB", protoOperands = [OpXMM,OpXMM_M128]}
                                          ;[(EncModrm_reg
                                            ,OperandReadWrite)
                                           ,(EncModrm_rm,OperandReadOnly)]
                                          ;64bit: True
                                          ;legacy: True
                                          ;Compare packed signed byte integers in xmm1 and xmm2/m128 for greater than.} */
             
             ERASM_DECODER_DO_ACTION (2,
                                      Pcmpgtb,
                                      Just<OpXMM>,
                                      Just<EncModrm_reg>,
                                      Just<OpXMM_M128>,
                                      Just<EncModrm_rm>,
                                      Nothing,
                                      Nothing);
         }
      else
         {
             /* EncodedInstructionDefinition {{[]
                                           ;0F 64 
                                           ;Just Modrm
                                           ;Just RMBoth
                                           ;Nothing
                                           ;[]
                                           ;Nothing
                                           ;Nothing}
                                          ;Prototype {protoMnemonic = "PCMPGTB", protoOperands = [OpMM,OpMM_M64]}
                                          ;[(EncModrm_reg
                                            ,OperandReadWrite)
                                           ,(EncModrm_rm,OperandReadOnly)]
                                          ;64bit: True
                                          ;legacy: True
                                          ;Compare packed signed byte integers in mm and mm/m64 for greater than.} */
             
             ERASM_DECODER_DO_ACTION (2,
                                      Pcmpgtb,
                                      Just<OpMM>,
                                      Just<EncModrm_reg>,
                                      Just<OpMM_M64>,
                                      Just<EncModrm_rm>,
                                      Nothing,
                                      Nothing);
         }
      case (0x65):
      if (prefix.operand_size)
         {
             /* EncodedInstructionDefinition {{[OPERAND_SIZE]
                                           ;0F 65 
                                           ;Just Modrm
                                           ;Just RMBoth
                                           ;Nothing
                                           ;[]
                                           ;Nothing
                                           ;Nothing}
                                          ;Prototype {protoMnemonic = "PCMPGTW", protoOperands = [OpXMM,OpXMM_M128]}
                                          ;[(EncModrm_reg
                                            ,OperandReadWrite)
                                           ,(EncModrm_rm,OperandReadOnly)]
                                          ;64bit: True
                                          ;legacy: True
                                          ;Compare packed signed word integers in xmm1 and xmm2/m128 for greater than.} */
             
             ERASM_DECODER_DO_ACTION (2,
                                      Pcmpgtw,
                                      Just<OpXMM>,
                                      Just<EncModrm_reg>,
                                      Just<OpXMM_M128>,
                                      Just<EncModrm_rm>,
                                      Nothing,
                                      Nothing);
         }
      else
         {
             /* EncodedInstructionDefinition {{[]
                                           ;0F 65 
                                           ;Just Modrm
                                           ;Just RMBoth
                                           ;Nothing
                                           ;[]
                                           ;Nothing
                                           ;Nothing}
                                          ;Prototype {protoMnemonic = "PCMPGTW", protoOperands = [OpMM,OpMM_M64]}
                                          ;[(EncModrm_reg
                                            ,OperandReadWrite)
                                           ,(EncModrm_rm,OperandReadOnly)]
                                          ;64bit: True
                                          ;legacy: True
                                          ;Compare packed signed word integers in mm and mm/m64 for greater than.} */
             
             ERASM_DECODER_DO_ACTION (2,
                                      Pcmpgtw,
                                      Just<OpMM>,
                                      Just<EncModrm_reg>,
                                      Just<OpMM_M64>,
                                      Just<EncModrm_rm>,
                                      Nothing,
                                      Nothing);
         }
      case (0x66):
      if (prefix.operand_size)
         {
             /* EncodedInstructionDefinition {{[OPERAND_SIZE]
                                           ;0F 66 
                                           ;Just Modrm
                                           ;Just RMBoth
                                           ;Nothing
                                           ;[]
                                           ;Nothing
                                           ;Nothing}
                                          ;Prototype {protoMnemonic = "PCMPGTD", protoOperands = [OpXMM,OpXMM_M128]}
                                          ;[(EncModrm_reg
                                            ,OperandReadWrite)
                                           ,(EncModrm_rm,OperandReadOnly)]
                                          ;64bit: True
                                          ;legacy: True
                                          ;Compare packed signed doubleword integers in xmm1 and xmm2/m128 for greater than.} */
             
             ERASM_DECODER_DO_ACTION (2,
                                      Pcmpgtd,
                                      Just<OpXMM>,
                                      Just<EncModrm_reg>,
                                      Just<OpXMM_M128>,
                                      Just<EncModrm_rm>,
                                      Nothing,
                                      Nothing);
         }
      else
         {
             /* EncodedInstructionDefinition {{[]
                                           ;0F 66 
                                           ;Just Modrm
                                           ;Just RMBoth
                                           ;Nothing
                                           ;[]
                                           ;Nothing
                                           ;Nothing}
                                          ;Prototype {protoMnemonic = "PCMPGTD", protoOperands = [OpMM,OpMM_M64]}
                                          ;[(EncModrm_reg
                                            ,OperandReadWrite)
                                           ,(EncModrm_rm,OperandReadOnly)]
                                          ;64bit: True
                                          ;legacy: True
                                          ;Compare packed signed doubleword integers in mm and mm/m64 for greater than.} */
             
             ERASM_DECODER_DO_ACTION (2,
                                      Pcmpgtd,
                                      Just<OpMM>,
                                      Just<EncModrm_reg>,
                                      Just<OpMM_M64>,
                                      Just<EncModrm_rm>,
                                      Nothing,
                                      Nothing);
         }
      case (0x67):
      if (prefix.operand_size)
         {
             /* EncodedInstructionDefinition {{[OPERAND_SIZE]
                                           ;0F 67 
                                           ;Just Modrm
                                           ;Just RMBoth
                                           ;Nothing
                                           ;[]
                                           ;Nothing
                                           ;Nothing}
                                          ;Prototype {protoMnemonic = "PACKUSWB", protoOperands = [OpXMM,OpXMM_M128]}
                                          ;[(EncModrm_reg
                                            ,OperandReadWrite)
                                           ,(EncModrm_rm,OperandReadOnly)]
                                          ;64bit: True
                                          ;legacy: True
                                          ;Converts 8 signed word integers from xmm1 and 8 signed word integers from xmm2/m128 into 16 unsigned byte integers in xmm1 using unsigned saturation.} */
             
             ERASM_DECODER_DO_ACTION (2,
                                      Packuswb,
                                      Just<OpXMM>,
                                      Just<EncModrm_reg>,
                                      Just<OpXMM_M128>,
                                      Just<EncModrm_rm>,
                                      Nothing,
                                      Nothing);
         }
      else
         {
             /* EncodedInstructionDefinition {{[]
                                           ;0F 67 
                                           ;Just Modrm
                                           ;Just RMBoth
                                           ;Nothing
                                           ;[]
                                           ;Nothing
                                           ;Nothing}
                                          ;Prototype {protoMnemonic = "PACKUSWB", protoOperands = [OpMM,OpMM_M64]}
                                          ;[(EncModrm_reg
                                            ,OperandReadWrite)
                                           ,(EncModrm_rm,OperandReadOnly)]
                                          ;64bit: True
                                          ;legacy: True
                                          ;Converts 4 signed word integers from mm and 4 signed word integers from mm/m64 into 8 unsigned byte integers in mm using unsigned saturation.} */
             
             ERASM_DECODER_DO_ACTION (2,
                                      Packuswb,
                                      Just<OpMM>,
                                      Just<EncModrm_reg>,
                                      Just<OpMM_M64>,
                                      Just<EncModrm_rm>,
                                      Nothing,
                                      Nothing);
         }
      case (0x68):
      if (prefix.operand_size)
         {
             /* EncodedInstructionDefinition {{[OPERAND_SIZE]
                                           ;0F 68 
                                           ;Just Modrm
                                           ;Just RMBoth
                                           ;Nothing
                                           ;[]
                                           ;Nothing
                                           ;Nothing}
                                          ;Prototype {protoMnemonic = "PUNPCKHBW", protoOperands = [OpXMM,OpXMM_M128]}
                                          ;[(EncModrm_reg
                                            ,OperandReadWrite)
                                           ,(EncModrm_rm,OperandReadOnly)]
                                          ;64bit: True
                                          ;legacy: True
                                          ;Unpack and interleave high- order bytes from xmm1 and xmm2/m128 into xmm1.} */
             
             ERASM_DECODER_DO_ACTION (2,
                                      Punpckhbw,
                                      Just<OpXMM>,
                                      Just<EncModrm_reg>,
                                      Just<OpXMM_M128>,
                                      Just<EncModrm_rm>,
                                      Nothing,
                                      Nothing);
         }
      else
         {
             /* EncodedInstructionDefinition {{[]
                                           ;0F 68 
                                           ;Just Modrm
                                           ;Just RMBoth
                                           ;Nothing
                                           ;[]
                                           ;Nothing
                                           ;Nothing}
                                          ;Prototype {protoMnemonic = "PUNPCKHBW", protoOperands = [OpMM,OpMM_M64]}
                                          ;[(EncModrm_reg
                                            ,OperandReadWrite)
                                           ,(EncModrm_rm,OperandReadOnly)]
                                          ;64bit: True
                                          ;legacy: True
                                          ;Unpack and interleave high- order bytes from mm and mm/m64 into mm.} */
             
             ERASM_DECODER_DO_ACTION (2,
                                      Punpckhbw,
                                      Just<OpMM>,
                                      Just<EncModrm_reg>,
                                      Just<OpMM_M64>,
                                      Just<EncModrm_rm>,
                                      Nothing,
                                      Nothing);
         }
      case (0x69):
      if (prefix.operand_size)
         {
             /* EncodedInstructionDefinition {{[OPERAND_SIZE]
                                           ;0F 69 
                                           ;Just Modrm
                                           ;Just RMBoth
                                           ;Nothing
                                           ;[]
                                           ;Nothing
                                           ;Nothing}
                                          ;Prototype {protoMnemonic = "PUNPCKHWD", protoOperands = [OpXMM,OpXMM_M128]}
                                          ;[(EncModrm_reg
                                            ,OperandReadWrite)
                                           ,(EncModrm_rm,OperandReadOnly)]
                                          ;64bit: True
                                          ;legacy: True
                                          ;Unpack and interleave high- order words from xmm1 and xmm2/m128 into xmm1.} */
             
             ERASM_DECODER_DO_ACTION (2,
                                      Punpckhwd,
                                      Just<OpXMM>,
                                      Just<EncModrm_reg>,
                                      Just<OpXMM_M128>,
                                      Just<EncModrm_rm>,
                                      Nothing,
                                      Nothing);
         }
      else
         {
             /* EncodedInstructionDefinition {{[]
                                           ;0F 69 
                                           ;Just Modrm
                                           ;Just RMBoth
                                           ;Nothing
                                           ;[]
                                           ;Nothing
                                           ;Nothing}
                                          ;Prototype {protoMnemonic = "PUNPCKHWD", protoOperands = [OpMM,OpMM_M64]}
                                          ;[(EncModrm_reg
                                            ,OperandReadWrite)
                                           ,(EncModrm_rm,OperandReadOnly)]
                                          ;64bit: True
                                          ;legacy: True
                                          ;Unpack and interleave high- order words from mm and mm/m64 into mm.} */
             
             ERASM_DECODER_DO_ACTION (2,
                                      Punpckhwd,
                                      Just<OpMM>,
                                      Just<EncModrm_reg>,
                                      Just<OpMM_M64>,
                                      Just<EncModrm_rm>,
                                      Nothing,
                                      Nothing);
         }
      case (0x6a):
      if (prefix.operand_size)
         {
             /* EncodedInstructionDefinition {{[OPERAND_SIZE]
                                           ;0F 6A 
                                           ;Just Modrm
                                           ;Just RMBoth
                                           ;Nothing
                                           ;[]
                                           ;Nothing
                                           ;Nothing}
                                          ;Prototype {protoMnemonic = "PUNPCKHDQ", protoOperands = [OpXMM,OpXMM_M128]}
                                          ;[(EncModrm_reg
                                            ,OperandReadWrite)
                                           ,(EncModrm_rm,OperandReadOnly)]
                                          ;64bit: True
                                          ;legacy: True
                                          ;Unpack and interleave high- order doublewords from xmm1 and xmm2/m128 into xmm1.} */
             
             ERASM_DECODER_DO_ACTION (2,
                                      Punpckhdq,
                                      Just<OpXMM>,
                                      Just<EncModrm_reg>,
                                      Just<OpXMM_M128>,
                                      Just<EncModrm_rm>,
                                      Nothing,
                                      Nothing);
         }
      else
         {
             /* EncodedInstructionDefinition {{[]
                                           ;0F 6A 
                                           ;Just Modrm
                                           ;Just RMBoth
                                           ;Nothing
                                           ;[]
                                           ;Nothing
                                           ;Nothing}
                                          ;Prototype {protoMnemonic = "PUNPCKHDQ", protoOperands = [OpMM,OpMM_M64]}
                                          ;[(EncModrm_reg
                                            ,OperandReadWrite)
                                           ,(EncModrm_rm,OperandReadOnly)]
                                          ;64bit: True
                                          ;legacy: True
                                          ;Unpack and interleave high- order doublewords from mm and mm/m64 into mm.} */
             
             ERASM_DECODER_DO_ACTION (2,
                                      Punpckhdq,
                                      Just<OpMM>,
                                      Just<EncModrm_reg>,
                                      Just<OpMM_M64>,
                                      Just<EncModrm_rm>,
                                      Nothing,
                                      Nothing);
         }
      case (0x6b):
      if (prefix.operand_size)
         {
             /* EncodedInstructionDefinition {{[OPERAND_SIZE]
                                           ;0F 6B 
                                           ;Just Modrm
                                           ;Just RMBoth
                                           ;Nothing
                                           ;[]
                                           ;Nothing
                                           ;Nothing}
                                          ;Prototype {protoMnemonic = "PACKSSDW", protoOperands = [OpXMM,OpXMM_M128]}
                                          ;[(EncModrm_reg
                                            ,OperandReadWrite)
                                           ,(EncModrm_rm,OperandReadOnly)]
                                          ;64bit: True
                                          ;legacy: True
                                          ;Converts 4 packed signed doubleword integers from xmm1 and from xxm2/m128 into 8 packed signed word integers in xxm1 using signed saturation.} */
             
             ERASM_DECODER_DO_ACTION (2,
                                      Packssdw,
                                      Just<OpXMM>,
                                      Just<EncModrm_reg>,
                                      Just<OpXMM_M128>,
                                      Just<EncModrm_rm>,
                                      Nothing,
                                      Nothing);
         }
      else
         {
             /* EncodedInstructionDefinition {{[]
                                           ;0F 6B 
                                           ;Just Modrm
                                           ;Just RMBoth
                                           ;Nothing
                                           ;[]
                                           ;Nothing
                                           ;Nothing}
                                          ;Prototype {protoMnemonic = "PACKSSDW", protoOperands = [OpMM,OpMM_M64]}
                                          ;[(EncModrm_reg
                                            ,OperandReadWrite)
                                           ,(EncModrm_rm,OperandReadOnly)]
                                          ;64bit: True
                                          ;legacy: True
                                          ;Converts 2 packed signed doubleword integers from mm1 and from mm2/m64 into 4 packed signed word integers in mm1 using signed saturation.} */
             
             ERASM_DECODER_DO_ACTION (2,
                                      Packssdw,
                                      Just<OpMM>,
                                      Just<EncModrm_reg>,
                                      Just<OpMM_M64>,
                                      Just<EncModrm_rm>,
                                      Nothing,
                                      Nothing);
         }
      case (0x6c):
      if (prefix.operand_size)
         {
             /* EncodedInstructionDefinition {{[OPERAND_SIZE]
                                           ;0F 6C 
                                           ;Just Modrm
                                           ;Just RMBoth
                                           ;Nothing
                                           ;[]
                                           ;Nothing
                                           ;Nothing}
                                          ;Prototype {protoMnemonic = "PUNPCKLQDQ", protoOperands = [OpXMM,OpXMM_M128]}
                                          ;[(EncModrm_reg
                                            ,OperandReadWrite)
                                           ,(EncModrm_rm,OperandReadOnly)]
                                          ;64bit: True
                                          ;legacy: True
                                          ;Interleave low-order quadword from xmm1 and xmm2/m128 into xmm1 register.} */
             
             ERASM_DECODER_DO_ACTION (2,
                                      Punpcklqdq,
                                      Just<OpXMM>,
                                      Just<EncModrm_reg>,
                                      Just<OpXMM_M128>,
                                      Just<EncModrm_rm>,
                                      Nothing,
                                      Nothing);
         }
      else
         goto decode_error;
      case (0x6d):
      if (prefix.operand_size)
         {
             /* EncodedInstructionDefinition {{[OPERAND_SIZE]
                                           ;0F 6D 
                                           ;Just Modrm
                                           ;Just RMBoth
                                           ;Nothing
                                           ;[]
                                           ;Nothing
                                           ;Nothing}
                                          ;Prototype {protoMnemonic = "PUNPCKHQDQ", protoOperands = [OpXMM,OpXMM_M128]}
                                          ;[(EncModrm_reg
                                            ,OperandReadWrite)
                                           ,(EncModrm_rm,OperandReadOnly)]
                                          ;64bit: True
                                          ;legacy: True
                                          ;Unpack and interleave high- order quadwords from xmm1 and xmm2/m128 into xmm1.} */
             
             ERASM_DECODER_DO_ACTION (2,
                                      Punpckhqdq,
                                      Just<OpXMM>,
                                      Just<EncModrm_reg>,
                                      Just<OpXMM_M128>,
                                      Just<EncModrm_rm>,
                                      Nothing,
                                      Nothing);
         }
      else
         goto decode_error;
      case (0x6e):
      if (prefix.operand_size)
         {
             /* EncodedInstructionDefinition {{[OPERAND_SIZE]
                                           ;0F 6E 
                                           ;Just Modrm
                                           ;Just RMBoth
                                           ;Nothing
                                           ;[]
                                           ;Nothing
                                           ;Nothing}
                                          ;Prototype {protoMnemonic = "MOVD", protoOperands = [OpXMM,OpRM32]}
                                          ;[(EncModrm_reg
                                            ,OperandReadWrite)
                                           ,(EncModrm_rm,OperandReadOnly)]
                                          ;64bit: True
                                          ;legacy: True
                                          ;Move doubleword from r/m32 to xmm.} */
             
             ERASM_DECODER_DO_ACTION (2,
                                      Movd,
                                      Just<OpXMM>,
                                      Just<EncModrm_reg>,
                                      Just<OpRM32>,
                                      Just<EncModrm_rm>,
                                      Nothing,
                                      Nothing);
         }
      else
         {
             /* EncodedInstructionDefinition {{[]
                                           ;0F 6E 
                                           ;Just Modrm
                                           ;Just RMBoth
                                           ;Nothing
                                           ;[]
                                           ;Nothing
                                           ;Nothing}
                                          ;Prototype {protoMnemonic = "MOVD", protoOperands = [OpMM,OpRM32]}
                                          ;[(EncModrm_reg
                                            ,OperandReadWrite)
                                           ,(EncModrm_rm,OperandReadOnly)]
                                          ;64bit: True
                                          ;legacy: True
                                          ;Move doubleword from r/m32 to mm.} */
             
             ERASM_DECODER_DO_ACTION (2,
                                      Movd,
                                      Just<OpMM>,
                                      Just<EncModrm_reg>,
                                      Just<OpRM32>,
                                      Just<EncModrm_rm>,
                                      Nothing,
                                      Nothing);
         }
      case (0x6f):
      if (prefix.rep)
         {
             /* EncodedInstructionDefinition {{[REP]
                                           ;0F 6F 
                                           ;Just Modrm
                                           ;Just RMBoth
                                           ;Nothing
                                           ;[]
                                           ;Nothing
                                           ;Nothing}
                                          ;Prototype {protoMnemonic = "MOVDQU", protoOperands = [OpXMM,OpXMM_M128]}
                                          ;[(EncModrm_reg
                                            ,OperandReadWrite)
                                           ,(EncModrm_rm,OperandReadOnly)]
                                          ;64bit: True
                                          ;legacy: True
                                          ;Move unaligned double quadword from xmm2/m128 to xmm1.} */
             
             ERASM_DECODER_DO_ACTION (2,
                                      Movdqu,
                                      Just<OpXMM>,
                                      Just<EncModrm_reg>,
                                      Just<OpXMM_M128>,
                                      Just<EncModrm_rm>,
                                      Nothing,
                                      Nothing);
         }
      else
         if (prefix.operand_size)
            {
                /* EncodedInstructionDefinition {{[OPERAND_SIZE]
                                              ;0F 6F 
                                              ;Just Modrm
                                              ;Just RMBoth
                                              ;Nothing
                                              ;[]
                                              ;Nothing
                                              ;Nothing}
                                             ;Prototype {protoMnemonic = "MOVDQA", protoOperands = [OpXMM,OpXMM_M128]}
                                             ;[(EncModrm_reg
                                               ,OperandReadWrite)
                                              ,(EncModrm_rm,OperandReadOnly)]
                                             ;64bit: True
                                             ;legacy: True
                                             ;Move aligned double quadword from xmm2/m128 to xmm1.} */
                
                ERASM_DECODER_DO_ACTION (2,
                                         Movdqa,
                                         Just<OpXMM>,
                                         Just<EncModrm_reg>,
                                         Just<OpXMM_M128>,
                                         Just<EncModrm_rm>,
                                         Nothing,
                                         Nothing);
            }
         else
            {
                /* EncodedInstructionDefinition {{[]
                                              ;0F 6F 
                                              ;Just Modrm
                                              ;Just RMBoth
                                              ;Nothing
                                              ;[]
                                              ;Nothing
                                              ;Nothing}
                                             ;Prototype {protoMnemonic = "MOVQ", protoOperands = [OpMM,OpMM_M64]}
                                             ;[(EncModrm_reg
                                               ,OperandReadWrite)
                                              ,(EncModrm_rm,OperandReadOnly)]
                                             ;64bit: True
                                             ;legacy: True
                                             ;Move quadword from mm/m64 to mm.} */
                
                ERASM_DECODER_DO_ACTION (2,
                                         Movq,
                                         Just<OpMM>,
                                         Just<EncModrm_reg>,
                                         Just<OpMM_M64>,
                                         Just<EncModrm_rm>,
                                         Nothing,
                                         Nothing);
            }
      case (0x70):
      if (prefix.repne)
         {
             /* EncodedInstructionDefinition {{[REPNE]
                                           ;0F 70 
                                           ;Just Modrm
                                           ;Just RMBoth
                                           ;Nothing
                                           ;[IMM_IB]
                                           ;Nothing
                                           ;Nothing}
                                          ;Prototype {protoMnemonic = "PSHUFLW", protoOperands = [OpXMM,OpXMM_M128,OpIMM8]}
                                          ;[(EncModrm_reg
                                            ,OperandReadWrite)
                                           ,(EncModrm_rm,OperandReadOnly)
                                           ,(EncIMM,OperandReadWrite)]
                                          ;64bit: True
                                          ;legacy: True
                                          ;Shuffle the low words in xmm2/m128 based on the encoding in imm8 and store the result in xmm1.} */
             
             ERASM_DECODER_DO_ACTION (2,
                                      Pshuflw,
                                      Just<OpXMM>,
                                      Just<EncModrm_reg>,
                                      Just<OpXMM_M128>,
                                      Just<EncModrm_rm>,
                                      Just<OpIMM8>,
                                      Just<EncIMM>);
         }
      else
         if (prefix.rep)
            {
                /* EncodedInstructionDefinition {{[REP]
                                              ;0F 70 
                                              ;Just Modrm
                                              ;Just RMBoth
                                              ;Nothing
                                              ;[IMM_IB]
                                              ;Nothing
                                              ;Nothing}
                                             ;Prototype {protoMnemonic = "PSHUFHW", protoOperands = [OpXMM,OpXMM_M128,OpIMM8]}
                                             ;[(EncModrm_reg
                                               ,OperandReadWrite)
                                              ,(EncModrm_rm,OperandReadOnly)
                                              ,(EncIMM,OperandReadWrite)]
                                             ;64bit: True
                                             ;legacy: True
                                             ;Shuffle the high words in xmm2/m128 based on the encoding in imm8 and store the result in xmm1.} */
                
                ERASM_DECODER_DO_ACTION (2,
                                         Pshufhw,
                                         Just<OpXMM>,
                                         Just<EncModrm_reg>,
                                         Just<OpXMM_M128>,
                                         Just<EncModrm_rm>,
                                         Just<OpIMM8>,
                                         Just<EncIMM>);
            }
         else
            if (prefix.operand_size)
               {
                   /* EncodedInstructionDefinition {{[OPERAND_SIZE]
                                                 ;0F 70 
                                                 ;Just Modrm
                                                 ;Just RMBoth
                                                 ;Nothing
                                                 ;[IMM_IB]
                                                 ;Nothing
                                                 ;Nothing}
                                                ;Prototype {protoMnemonic = "PSHUFD", protoOperands = [OpXMM,OpXMM_M128,OpIMM8]}
                                                ;[(EncModrm_reg
                                                  ,OperandReadWrite)
                                                 ,(EncModrm_rm,OperandReadOnly)
                                                 ,(EncIMM,OperandReadWrite)]
                                                ;64bit: True
                                                ;legacy: True
                                                ;Shuffle the doublewords in xmm2/m128 based on the encoding in imm8 and store the result in xmm1.} */
                   
                   ERASM_DECODER_DO_ACTION (2,
                                            Pshufd,
                                            Just<OpXMM>,
                                            Just<EncModrm_reg>,
                                            Just<OpXMM_M128>,
                                            Just<EncModrm_rm>,
                                            Just<OpIMM8>,
                                            Just<EncIMM>);
               }
            else
               {
                   /* EncodedInstructionDefinition {{[]
                                                 ;0F 70 
                                                 ;Just Modrm
                                                 ;Just RMBoth
                                                 ;Nothing
                                                 ;[IMM_IB]
                                                 ;Nothing
                                                 ;Nothing}
                                                ;Prototype {protoMnemonic = "PSHUFW", protoOperands = [OpMM,OpMM_M64,OpIMM8]}
                                                ;[(EncModrm_reg
                                                  ,OperandReadWrite)
                                                 ,(EncModrm_rm,OperandReadOnly)
                                                 ,(EncIMM,OperandReadWrite)]
                                                ;64bit: True
                                                ;legacy: True
                                                ;Shuffle the words in mm2/m64 based on the encoding in imm8 and store the result in mm1.} */
                   
                   ERASM_DECODER_DO_ACTION (2,
                                            Pshufw,
                                            Just<OpMM>,
                                            Just<EncModrm_reg>,
                                            Just<OpMM_M64>,
                                            Just<EncModrm_rm>,
                                            Just<OpIMM8>,
                                            Just<EncIMM>);
               }
      case (0x71):
      if (modrm_mod3 (p))
         switch (modrm_reg_op (p)) {
            case (2):
            if (prefix.operand_size)
               {
                   /* EncodedInstructionDefinition {{[OPERAND_SIZE]
                                                 ;0F 71 
                                                 ;Just (ModrmDigit 2)
                                                 ;Just RMRegOnly
                                                 ;Nothing
                                                 ;[IMM_IB]
                                                 ;Nothing
                                                 ;Nothing}
                                                ;Prototype {protoMnemonic = "PSRLW", protoOperands = [OpXMM,OpIMM8]}
                                                ;[(EncModrm_rm,OperandReadWrite)
                                                 ,(EncIMM,OperandReadWrite)]
                                                ;64bit: True
                                                ;legacy: True
                                                ;Shift words in xmm1 right by imm8 while shifting in 0s.} */
                   
                   ERASM_DECODER_DO_ACTION (2,
                                            Psrlw,
                                            Just<OpXMM>,
                                            Just<EncModrm_rm_reg>,
                                            Just<OpIMM8>,
                                            Just<EncIMM>,
                                            Nothing,
                                            Nothing);
               }
            else
               {
                   /* EncodedInstructionDefinition {{[]
                                                 ;0F 71 
                                                 ;Just (ModrmDigit 2)
                                                 ;Just RMRegOnly
                                                 ;Nothing
                                                 ;[IMM_IB]
                                                 ;Nothing
                                                 ;Nothing}
                                                ;Prototype {protoMnemonic = "PSRLW", protoOperands = [OpMM,OpIMM8]}
                                                ;[(EncModrm_rm,OperandReadWrite)
                                                 ,(EncIMM,OperandReadWrite)]
                                                ;64bit: True
                                                ;legacy: True
                                                ;Shift words in mm right by imm8 while shifting in 0s.} */
                   
                   ERASM_DECODER_DO_ACTION (2,
                                            Psrlw,
                                            Just<OpMM>,
                                            Just<EncModrm_rm_reg>,
                                            Just<OpIMM8>,
                                            Just<EncIMM>,
                                            Nothing,
                                            Nothing);
               }
            case (4):
            if (prefix.operand_size)
               {
                   /* EncodedInstructionDefinition {{[OPERAND_SIZE]
                                                 ;0F 71 
                                                 ;Just (ModrmDigit 4)
                                                 ;Just RMRegOnly
                                                 ;Nothing
                                                 ;[IMM_IB]
                                                 ;Nothing
                                                 ;Nothing}
                                                ;Prototype {protoMnemonic = "PSRAW", protoOperands = [OpXMM,OpIMM8]}
                                                ;[(EncModrm_rm,OperandReadWrite)
                                                 ,(EncIMM,OperandReadWrite)]
                                                ;64bit: True
                                                ;legacy: True
                                                ;Shift words in xmm1 right by imm8 while shifting in sign bits} */
                   
                   ERASM_DECODER_DO_ACTION (2,
                                            Psraw,
                                            Just<OpXMM>,
                                            Just<EncModrm_rm_reg>,
                                            Just<OpIMM8>,
                                            Just<EncIMM>,
                                            Nothing,
                                            Nothing);
               }
            else
               {
                   /* EncodedInstructionDefinition {{[]
                                                 ;0F 71 
                                                 ;Just (ModrmDigit 4)
                                                 ;Just RMRegOnly
                                                 ;Nothing
                                                 ;[IMM_IB]
                                                 ;Nothing
                                                 ;Nothing}
                                                ;Prototype {protoMnemonic = "PSRAW", protoOperands = [OpMM,OpIMM8]}
                                                ;[(EncModrm_rm,OperandReadWrite)
                                                 ,(EncIMM,OperandReadWrite)]
                                                ;64bit: True
                                                ;legacy: True
                                                ;Shift words in mm right by imm8 while shifting in sign bits} */
                   
                   ERASM_DECODER_DO_ACTION (2,
                                            Psraw,
                                            Just<OpMM>,
                                            Just<EncModrm_rm_reg>,
                                            Just<OpIMM8>,
                                            Just<EncIMM>,
                                            Nothing,
                                            Nothing);
               }
            case (6):
            if (prefix.operand_size)
               {
                   /* EncodedInstructionDefinition {{[OPERAND_SIZE]
                                                 ;0F 71 
                                                 ;Just (ModrmDigit 6)
                                                 ;Just RMRegOnly
                                                 ;Nothing
                                                 ;[IMM_IB]
                                                 ;Nothing
                                                 ;Nothing}
                                                ;Prototype {protoMnemonic = "PSLLW", protoOperands = [OpXMM,OpIMM8]}
                                                ;[(EncModrm_rm,OperandReadWrite)
                                                 ,(EncIMM,OperandReadWrite)]
                                                ;64bit: True
                                                ;legacy: True
                                                ;Shift words in xmm1 left by imm8 while shifting in 0s.} */
                   
                   ERASM_DECODER_DO_ACTION (2,
                                            Psllw,
                                            Just<OpXMM>,
                                            Just<EncModrm_rm_reg>,
                                            Just<OpIMM8>,
                                            Just<EncIMM>,
                                            Nothing,
                                            Nothing);
               }
            else
               {
                   /* EncodedInstructionDefinition {{[]
                                                 ;0F 71 
                                                 ;Just (ModrmDigit 6)
                                                 ;Just RMRegOnly
                                                 ;Nothing
                                                 ;[IMM_IB]
                                                 ;Nothing
                                                 ;Nothing}
                                                ;Prototype {protoMnemonic = "PSLLW", protoOperands = [OpMM,OpIMM8]}
                                                ;[(EncModrm_rm,OperandReadWrite)
                                                 ,(EncIMM,OperandReadWrite)]
                                                ;64bit: True
                                                ;legacy: True
                                                ;Shift words in mm left by imm8 while shifting in 0s.} */
                   
                   ERASM_DECODER_DO_ACTION (2,
                                            Psllw,
                                            Just<OpMM>,
                                            Just<EncModrm_rm_reg>,
                                            Just<OpIMM8>,
                                            Just<EncIMM>,
                                            Nothing,
                                            Nothing);
               }
            
         }
      else
         goto decode_error;
      case (0x72):
      if (modrm_mod3 (p))
         switch (modrm_reg_op (p)) {
            case (2):
            if (prefix.operand_size)
               {
                   /* EncodedInstructionDefinition {{[OPERAND_SIZE]
                                                 ;0F 72 
                                                 ;Just (ModrmDigit 2)
                                                 ;Just RMRegOnly
                                                 ;Nothing
                                                 ;[IMM_IB]
                                                 ;Nothing
                                                 ;Nothing}
                                                ;Prototype {protoMnemonic = "PSRLD", protoOperands = [OpXMM,OpIMM8]}
                                                ;[(EncModrm_rm,OperandReadWrite)
                                                 ,(EncIMM,OperandReadWrite)]
                                                ;64bit: True
                                                ;legacy: True
                                                ;Shift doublewords in xmm1 right by imm8 while shifting in 0s.} */
                   
                   ERASM_DECODER_DO_ACTION (2,
                                            Psrld,
                                            Just<OpXMM>,
                                            Just<EncModrm_rm_reg>,
                                            Just<OpIMM8>,
                                            Just<EncIMM>,
                                            Nothing,
                                            Nothing);
               }
            else
               {
                   /* EncodedInstructionDefinition {{[]
                                                 ;0F 72 
                                                 ;Just (ModrmDigit 2)
                                                 ;Just RMRegOnly
                                                 ;Nothing
                                                 ;[IMM_IB]
                                                 ;Nothing
                                                 ;Nothing}
                                                ;Prototype {protoMnemonic = "PSRLD", protoOperands = [OpMM,OpIMM8]}
                                                ;[(EncModrm_rm,OperandReadWrite)
                                                 ,(EncIMM,OperandReadWrite)]
                                                ;64bit: True
                                                ;legacy: True
                                                ;Shift doublewords in mm right by imm8 while shifting in 0s.} */
                   
                   ERASM_DECODER_DO_ACTION (2,
                                            Psrld,
                                            Just<OpMM>,
                                            Just<EncModrm_rm_reg>,
                                            Just<OpIMM8>,
                                            Just<EncIMM>,
                                            Nothing,
                                            Nothing);
               }
            case (4):
            if (prefix.operand_size)
               {
                   /* EncodedInstructionDefinition {{[OPERAND_SIZE]
                                                 ;0F 72 
                                                 ;Just (ModrmDigit 4)
                                                 ;Just RMRegOnly
                                                 ;Nothing
                                                 ;[IMM_IB]
                                                 ;Nothing
                                                 ;Nothing}
                                                ;Prototype {protoMnemonic = "PSRAD", protoOperands = [OpXMM,OpIMM8]}
                                                ;[(EncModrm_rm,OperandReadWrite)
                                                 ,(EncIMM,OperandReadWrite)]
                                                ;64bit: True
                                                ;legacy: True
                                                ;Shift doublewords in xmm1 right by imm8 while shifting in sign bits.} */
                   
                   ERASM_DECODER_DO_ACTION (2,
                                            Psrad,
                                            Just<OpXMM>,
                                            Just<EncModrm_rm_reg>,
                                            Just<OpIMM8>,
                                            Just<EncIMM>,
                                            Nothing,
                                            Nothing);
               }
            else
               {
                   /* EncodedInstructionDefinition {{[]
                                                 ;0F 72 
                                                 ;Just (ModrmDigit 4)
                                                 ;Just RMRegOnly
                                                 ;Nothing
                                                 ;[IMM_IB]
                                                 ;Nothing
                                                 ;Nothing}
                                                ;Prototype {protoMnemonic = "PSRAD", protoOperands = [OpMM,OpIMM8]}
                                                ;[(EncModrm_rm,OperandReadWrite)
                                                 ,(EncIMM,OperandReadWrite)]
                                                ;64bit: True
                                                ;legacy: True
                                                ;Shift doublewords in mm right by imm8 while shifting in sign bits.} */
                   
                   ERASM_DECODER_DO_ACTION (2,
                                            Psrad,
                                            Just<OpMM>,
                                            Just<EncModrm_rm_reg>,
                                            Just<OpIMM8>,
                                            Just<EncIMM>,
                                            Nothing,
                                            Nothing);
               }
            case (6):
            if (prefix.operand_size)
               {
                   /* EncodedInstructionDefinition {{[OPERAND_SIZE]
                                                 ;0F 72 
                                                 ;Just (ModrmDigit 6)
                                                 ;Just RMRegOnly
                                                 ;Nothing
                                                 ;[IMM_IB]
                                                 ;Nothing
                                                 ;Nothing}
                                                ;Prototype {protoMnemonic = "PSLLD", protoOperands = [OpXMM,OpIMM8]}
                                                ;[(EncModrm_rm,OperandReadWrite)
                                                 ,(EncIMM,OperandReadWrite)]
                                                ;64bit: True
                                                ;legacy: True
                                                ;Shift doublewords in xmm1 left by imm8 while shifting in 0s.} */
                   
                   ERASM_DECODER_DO_ACTION (2,
                                            Pslld,
                                            Just<OpXMM>,
                                            Just<EncModrm_rm_reg>,
                                            Just<OpIMM8>,
                                            Just<EncIMM>,
                                            Nothing,
                                            Nothing);
               }
            else
               {
                   /* EncodedInstructionDefinition {{[]
                                                 ;0F 72 
                                                 ;Just (ModrmDigit 6)
                                                 ;Just RMRegOnly
                                                 ;Nothing
                                                 ;[IMM_IB]
                                                 ;Nothing
                                                 ;Nothing}
                                                ;Prototype {protoMnemonic = "PSLLD", protoOperands = [OpMM,OpIMM8]}
                                                ;[(EncModrm_rm,OperandReadWrite)
                                                 ,(EncIMM,OperandReadWrite)]
                                                ;64bit: True
                                                ;legacy: True
                                                ;Shift doublewords in mm left by imm8 while shifting in 0s.} */
                   
                   ERASM_DECODER_DO_ACTION (2,
                                            Pslld,
                                            Just<OpMM>,
                                            Just<EncModrm_rm_reg>,
                                            Just<OpIMM8>,
                                            Just<EncIMM>,
                                            Nothing,
                                            Nothing);
               }
            
         }
      else
         goto decode_error;
      case (0x73):
      if (modrm_mod3 (p))
         switch (modrm_reg_op (p)) {
            case (2):
            if (prefix.operand_size)
               {
                   /* EncodedInstructionDefinition {{[OPERAND_SIZE]
                                                 ;0F 73 
                                                 ;Just (ModrmDigit 2)
                                                 ;Just RMRegOnly
                                                 ;Nothing
                                                 ;[IMM_IB]
                                                 ;Nothing
                                                 ;Nothing}
                                                ;Prototype {protoMnemonic = "PSRLQ", protoOperands = [OpXMM,OpIMM8]}
                                                ;[(EncModrm_rm,OperandReadWrite)
                                                 ,(EncIMM,OperandReadWrite)]
                                                ;64bit: True
                                                ;legacy: True
                                                ;Shift quadwords in xmm1 right by imm8 while shifting in 0s.} */
                   
                   ERASM_DECODER_DO_ACTION (2,
                                            Psrlq,
                                            Just<OpXMM>,
                                            Just<EncModrm_rm_reg>,
                                            Just<OpIMM8>,
                                            Just<EncIMM>,
                                            Nothing,
                                            Nothing);
               }
            else
               {
                   /* EncodedInstructionDefinition {{[]
                                                 ;0F 73 
                                                 ;Just (ModrmDigit 2)
                                                 ;Just RMRegOnly
                                                 ;Nothing
                                                 ;[IMM_IB]
                                                 ;Nothing
                                                 ;Nothing}
                                                ;Prototype {protoMnemonic = "PSRLQ", protoOperands = [OpMM,OpIMM8]}
                                                ;[(EncModrm_rm,OperandReadWrite)
                                                 ,(EncIMM,OperandReadWrite)]
                                                ;64bit: True
                                                ;legacy: True
                                                ;Shift mm right by imm8 while shifting in 0s.} */
                   
                   ERASM_DECODER_DO_ACTION (2,
                                            Psrlq,
                                            Just<OpMM>,
                                            Just<EncModrm_rm_reg>,
                                            Just<OpIMM8>,
                                            Just<EncIMM>,
                                            Nothing,
                                            Nothing);
               }
            case (3):
            if (prefix.operand_size)
               {
                   /* EncodedInstructionDefinition {{[OPERAND_SIZE]
                                                 ;0F 73 
                                                 ;Just (ModrmDigit 3)
                                                 ;Just RMRegOnly
                                                 ;Nothing
                                                 ;[IMM_IB]
                                                 ;Nothing
                                                 ;Nothing}
                                                ;Prototype {protoMnemonic = "PSRLDQ", protoOperands = [OpXMM,OpIMM8]}
                                                ;[(EncModrm_rm,OperandReadWrite)
                                                 ,(EncIMM,OperandReadWrite)]
                                                ;64bit: True
                                                ;legacy: True
                                                ;Shift xmm1 right by imm8 while shifting in 0s.} */
                   
                   ERASM_DECODER_DO_ACTION (2,
                                            Psrldq,
                                            Just<OpXMM>,
                                            Just<EncModrm_rm_reg>,
                                            Just<OpIMM8>,
                                            Just<EncIMM>,
                                            Nothing,
                                            Nothing);
               }
            else
               goto decode_error;
            case (6):
            if (prefix.operand_size)
               {
                   /* EncodedInstructionDefinition {{[OPERAND_SIZE]
                                                 ;0F 73 
                                                 ;Just (ModrmDigit 6)
                                                 ;Just RMRegOnly
                                                 ;Nothing
                                                 ;[IMM_IB]
                                                 ;Nothing
                                                 ;Nothing}
                                                ;Prototype {protoMnemonic = "PSLLQ", protoOperands = [OpXMM,OpIMM8]}
                                                ;[(EncModrm_rm,OperandReadWrite)
                                                 ,(EncIMM,OperandReadWrite)]
                                                ;64bit: True
                                                ;legacy: True
                                                ;Shift quadwords in xmm1 left by imm8 while shifting in 0s.} */
                   
                   ERASM_DECODER_DO_ACTION (2,
                                            Psllq,
                                            Just<OpXMM>,
                                            Just<EncModrm_rm_reg>,
                                            Just<OpIMM8>,
                                            Just<EncIMM>,
                                            Nothing,
                                            Nothing);
               }
            else
               {
                   /* EncodedInstructionDefinition {{[]
                                                 ;0F 73 
                                                 ;Just (ModrmDigit 6)
                                                 ;Just RMRegOnly
                                                 ;Nothing
                                                 ;[IMM_IB]
                                                 ;Nothing
                                                 ;Nothing}
                                                ;Prototype {protoMnemonic = "PSLLQ", protoOperands = [OpMM,OpIMM8]}
                                                ;[(EncModrm_rm,OperandReadWrite)
                                                 ,(EncIMM,OperandReadWrite)]
                                                ;64bit: True
                                                ;legacy: True
                                                ;Shift quadword in mm left by imm8 while shifting in 0s.} */
                   
                   ERASM_DECODER_DO_ACTION (2,
                                            Psllq,
                                            Just<OpMM>,
                                            Just<EncModrm_rm_reg>,
                                            Just<OpIMM8>,
                                            Just<EncIMM>,
                                            Nothing,
                                            Nothing);
               }
            case (7):
            if (prefix.operand_size)
               {
                   /* EncodedInstructionDefinition {{[OPERAND_SIZE]
                                                 ;0F 73 
                                                 ;Just (ModrmDigit 7)
                                                 ;Just RMRegOnly
                                                 ;Nothing
                                                 ;[IMM_IB]
                                                 ;Nothing
                                                 ;Nothing}
                                                ;Prototype {protoMnemonic = "PSLLDQ", protoOperands = [OpXMM,OpIMM8]}
                                                ;[(EncModrm_rm,OperandReadWrite)
                                                 ,(EncIMM,OperandReadWrite)]
                                                ;64bit: True
                                                ;legacy: True
                                                ;Shift xmm1 left by imm8 bytes while shifting in 0s.} */
                   
                   ERASM_DECODER_DO_ACTION (2,
                                            Pslldq,
                                            Just<OpXMM>,
                                            Just<EncModrm_rm_reg>,
                                            Just<OpIMM8>,
                                            Just<EncIMM>,
                                            Nothing,
                                            Nothing);
               }
            else
               goto decode_error;
            
         }
      else
         goto decode_error;
      case (0x74):
      if (prefix.operand_size)
         {
             /* EncodedInstructionDefinition {{[OPERAND_SIZE]
                                           ;0F 74 
                                           ;Just Modrm
                                           ;Just RMBoth
                                           ;Nothing
                                           ;[]
                                           ;Nothing
                                           ;Nothing}
                                          ;Prototype {protoMnemonic = "PCMPEQB", protoOperands = [OpXMM,OpXMM_M128]}
                                          ;[(EncModrm_reg
                                            ,OperandReadWrite)
                                           ,(EncModrm_rm,OperandReadOnly)]
                                          ;64bit: True
                                          ;legacy: True
                                          ;Compare packed bytes in xmm2/m128 and xmm1 for equality.} */
             
             ERASM_DECODER_DO_ACTION (2,
                                      Pcmpeqb,
                                      Just<OpXMM>,
                                      Just<EncModrm_reg>,
                                      Just<OpXMM_M128>,
                                      Just<EncModrm_rm>,
                                      Nothing,
                                      Nothing);
         }
      else
         {
             /* EncodedInstructionDefinition {{[]
                                           ;0F 74 
                                           ;Just Modrm
                                           ;Just RMBoth
                                           ;Nothing
                                           ;[]
                                           ;Nothing
                                           ;Nothing}
                                          ;Prototype {protoMnemonic = "PCMPEQB", protoOperands = [OpMM,OpMM_M64]}
                                          ;[(EncModrm_reg
                                            ,OperandReadWrite)
                                           ,(EncModrm_rm,OperandReadOnly)]
                                          ;64bit: True
                                          ;legacy: True
                                          ;Compare packed bytes in mm/m64 and mm for equality.} */
             
             ERASM_DECODER_DO_ACTION (2,
                                      Pcmpeqb,
                                      Just<OpMM>,
                                      Just<EncModrm_reg>,
                                      Just<OpMM_M64>,
                                      Just<EncModrm_rm>,
                                      Nothing,
                                      Nothing);
         }
      case (0x75):
      if (prefix.operand_size)
         {
             /* EncodedInstructionDefinition {{[OPERAND_SIZE]
                                           ;0F 75 
                                           ;Just Modrm
                                           ;Just RMBoth
                                           ;Nothing
                                           ;[]
                                           ;Nothing
                                           ;Nothing}
                                          ;Prototype {protoMnemonic = "PCMPEQW", protoOperands = [OpXMM,OpXMM_M128]}
                                          ;[(EncModrm_reg
                                            ,OperandReadWrite)
                                           ,(EncModrm_rm,OperandReadOnly)]
                                          ;64bit: True
                                          ;legacy: True
                                          ;Compare packed words in xmm2/m128 and xmm1 for equality.} */
             
             ERASM_DECODER_DO_ACTION (2,
                                      Pcmpeqw,
                                      Just<OpXMM>,
                                      Just<EncModrm_reg>,
                                      Just<OpXMM_M128>,
                                      Just<EncModrm_rm>,
                                      Nothing,
                                      Nothing);
         }
      else
         {
             /* EncodedInstructionDefinition {{[]
                                           ;0F 75 
                                           ;Just Modrm
                                           ;Just RMBoth
                                           ;Nothing
                                           ;[]
                                           ;Nothing
                                           ;Nothing}
                                          ;Prototype {protoMnemonic = "PCMPEQW", protoOperands = [OpMM,OpMM_M64]}
                                          ;[(EncModrm_reg
                                            ,OperandReadWrite)
                                           ,(EncModrm_rm,OperandReadOnly)]
                                          ;64bit: True
                                          ;legacy: True
                                          ;Compare packed words in mm/m64 and mm for equality.} */
             
             ERASM_DECODER_DO_ACTION (2,
                                      Pcmpeqw,
                                      Just<OpMM>,
                                      Just<EncModrm_reg>,
                                      Just<OpMM_M64>,
                                      Just<EncModrm_rm>,
                                      Nothing,
                                      Nothing);
         }
      case (0x76):
      if (prefix.operand_size)
         {
             /* EncodedInstructionDefinition {{[OPERAND_SIZE]
                                           ;0F 76 
                                           ;Just Modrm
                                           ;Just RMBoth
                                           ;Nothing
                                           ;[]
                                           ;Nothing
                                           ;Nothing}
                                          ;Prototype {protoMnemonic = "PCMPEQD", protoOperands = [OpXMM,OpXMM_M128]}
                                          ;[(EncModrm_reg
                                            ,OperandReadWrite)
                                           ,(EncModrm_rm,OperandReadOnly)]
                                          ;64bit: True
                                          ;legacy: True
                                          ;Compare packed doublewords in xmm2/m128 and xmm1 for equality.} */
             
             ERASM_DECODER_DO_ACTION (2,
                                      Pcmpeqd,
                                      Just<OpXMM>,
                                      Just<EncModrm_reg>,
                                      Just<OpXMM_M128>,
                                      Just<EncModrm_rm>,
                                      Nothing,
                                      Nothing);
         }
      else
         {
             /* EncodedInstructionDefinition {{[]
                                           ;0F 76 
                                           ;Just Modrm
                                           ;Just RMBoth
                                           ;Nothing
                                           ;[]
                                           ;Nothing
                                           ;Nothing}
                                          ;Prototype {protoMnemonic = "PCMPEQD", protoOperands = [OpMM,OpMM_M64]}
                                          ;[(EncModrm_reg
                                            ,OperandReadWrite)
                                           ,(EncModrm_rm,OperandReadOnly)]
                                          ;64bit: True
                                          ;legacy: True
                                          ;Compare packed doublewords in mm/m64 and mm for equality.} */
             
             ERASM_DECODER_DO_ACTION (2,
                                      Pcmpeqd,
                                      Just<OpMM>,
                                      Just<EncModrm_reg>,
                                      Just<OpMM_M64>,
                                      Just<EncModrm_rm>,
                                      Nothing,
                                      Nothing);
         }
      case (0x77):
      {
          /* EncodedInstructionDefinition {{[]
                                        ;0F 77 
                                        ;Nothing
                                        ;Nothing
                                        ;Nothing
                                        ;[]
                                        ;Nothing
                                        ;Nothing}
                                       ;Prototype {protoMnemonic = "EMMS", protoOperands = []}
                                       ;[]
                                       ;64bit: True
                                       ;legacy: True
                                       ;Set the x87 FPU tag word to empty.} */
          
          ERASM_DECODER_DO_ACTION (2,
                                   Emms,
                                   Nothing,
                                   Nothing,
                                   Nothing,
                                   Nothing,
                                   Nothing,
                                   Nothing);
      }
      case (0x78):
      {
          /* EncodedInstructionDefinition {{[]
                                        ;0F 78 
                                        ;Just Modrm
                                        ;Just RMBoth
                                        ;Nothing
                                        ;[]
                                        ;Nothing
                                        ;Nothing}
                                       ;Prototype {protoMnemonic = "VMREAD", protoOperands = [OpRM32,OpR32]}
                                       ;[(EncModrm_rm,OperandReadWrite)
                                        ,(EncModrm_reg
                                         ,OperandReadWrite)]
                                       ;64bit: False
                                       ;legacy: True
                                       ;Reads a specified VMCS field (outside 64-bit mode).} */
          
          ERASM_DECODER_DO_ACTION (2,
                                   Vmread,
                                   Just<OpRM32>,
                                   Just<EncModrm_rm>,
                                   Just<OpR32>,
                                   Just<EncModrm_reg>,
                                   Nothing,
                                   Nothing);
      }
      case (0x79):
      {
          /* EncodedInstructionDefinition {{[]
                                        ;0F 79 
                                        ;Just Modrm
                                        ;Just RMBoth
                                        ;Nothing
                                        ;[]
                                        ;Nothing
                                        ;Nothing}
                                       ;Prototype {protoMnemonic = "VMWRITE", protoOperands = [OpR32,OpRM32]}
                                       ;[(EncModrm_reg
                                         ,OperandReadWrite)
                                        ,(EncModrm_rm,OperandReadWrite)]
                                       ;64bit: False
                                       ;legacy: True
                                       ;Writes a specified VMCS field (outside 64-bit mode)} */
          
          ERASM_DECODER_DO_ACTION (2,
                                   Vmwrite,
                                   Just<OpR32>,
                                   Just<EncModrm_reg>,
                                   Just<OpRM32>,
                                   Just<EncModrm_rm>,
                                   Nothing,
                                   Nothing);
      }
      case (0x7c):
      if (prefix.repne)
         {
             /* EncodedInstructionDefinition {{[REPNE]
                                           ;0F 7C 
                                           ;Just Modrm
                                           ;Just RMBoth
                                           ;Nothing
                                           ;[]
                                           ;Nothing
                                           ;Nothing}
                                          ;Prototype {protoMnemonic = "HADDPS", protoOperands = [OpXMM,OpXMM_M128]}
                                          ;[(EncModrm_reg
                                            ,OperandReadWrite)
                                           ,(EncModrm_rm,OperandReadOnly)]
                                          ;64bit: True
                                          ;legacy: True
                                          ;Horizontal add packed single-precision floating- point values from xmm2/m128 to xmm1.} */
             
             ERASM_DECODER_DO_ACTION (2,
                                      Haddps,
                                      Just<OpXMM>,
                                      Just<EncModrm_reg>,
                                      Just<OpXMM_M128>,
                                      Just<EncModrm_rm>,
                                      Nothing,
                                      Nothing);
         }
      else
         if (prefix.operand_size)
            {
                /* EncodedInstructionDefinition {{[OPERAND_SIZE]
                                              ;0F 7C 
                                              ;Just Modrm
                                              ;Just RMBoth
                                              ;Nothing
                                              ;[]
                                              ;Nothing
                                              ;Nothing}
                                             ;Prototype {protoMnemonic = "HADDPD", protoOperands = [OpXMM,OpXMM_M128]}
                                             ;[(EncModrm_reg
                                               ,OperandReadWrite)
                                              ,(EncModrm_rm,OperandReadOnly)]
                                             ;64bit: True
                                             ;legacy: True
                                             ;Horizontal add packed double-precision floating- point values from xmm2/m128 to xmm1.} */
                
                ERASM_DECODER_DO_ACTION (2,
                                         Haddpd,
                                         Just<OpXMM>,
                                         Just<EncModrm_reg>,
                                         Just<OpXMM_M128>,
                                         Just<EncModrm_rm>,
                                         Nothing,
                                         Nothing);
            }
         else
            goto decode_error;
      case (0x7d):
      if (prefix.repne)
         {
             /* EncodedInstructionDefinition {{[REPNE]
                                           ;0F 7D 
                                           ;Just Modrm
                                           ;Just RMBoth
                                           ;Nothing
                                           ;[]
                                           ;Nothing
                                           ;Nothing}
                                          ;Prototype {protoMnemonic = "HSUBPS", protoOperands = [OpXMM,OpXMM_M128]}
                                          ;[(EncModrm_reg
                                            ,OperandReadWrite)
                                           ,(EncModrm_rm,OperandReadOnly)]
                                          ;64bit: True
                                          ;legacy: True
                                          ;Horizontal subtract packed single-precision floating- point values from xmm2/m128 to xmm1.} */
             
             ERASM_DECODER_DO_ACTION (2,
                                      Hsubps,
                                      Just<OpXMM>,
                                      Just<EncModrm_reg>,
                                      Just<OpXMM_M128>,
                                      Just<EncModrm_rm>,
                                      Nothing,
                                      Nothing);
         }
      else
         if (prefix.operand_size)
            {
                /* EncodedInstructionDefinition {{[OPERAND_SIZE]
                                              ;0F 7D 
                                              ;Just Modrm
                                              ;Just RMBoth
                                              ;Nothing
                                              ;[]
                                              ;Nothing
                                              ;Nothing}
                                             ;Prototype {protoMnemonic = "HSUBPD", protoOperands = [OpXMM,OpXMM_M128]}
                                             ;[(EncModrm_reg
                                               ,OperandReadWrite)
                                              ,(EncModrm_rm,OperandReadOnly)]
                                             ;64bit: True
                                             ;legacy: True
                                             ;Horizontal subtract packed double-precision floating- point values from xmm2/m128 to xmm1.} */
                
                ERASM_DECODER_DO_ACTION (2,
                                         Hsubpd,
                                         Just<OpXMM>,
                                         Just<EncModrm_reg>,
                                         Just<OpXMM_M128>,
                                         Just<EncModrm_rm>,
                                         Nothing,
                                         Nothing);
            }
         else
            goto decode_error;
      case (0x7e):
      if (prefix.rep)
         {
             /* EncodedInstructionDefinition {{[REP]
                                           ;0F 7E 
                                           ;Just Modrm
                                           ;Just RMBoth
                                           ;Nothing
                                           ;[]
                                           ;Nothing
                                           ;Nothing}
                                          ;Prototype {protoMnemonic = "MOVQ", protoOperands = [OpXMM,OpXMM_M64]}
                                          ;[(EncModrm_reg
                                            ,OperandReadWrite)
                                           ,(EncModrm_rm,OperandReadOnly)]
                                          ;64bit: True
                                          ;legacy: True
                                          ;Move quadword from xmm2/mem64 to xmm1.} */
             
             ERASM_DECODER_DO_ACTION (2,
                                      Movq,
                                      Just<OpXMM>,
                                      Just<EncModrm_reg>,
                                      Just<OpXMM_M64>,
                                      Just<EncModrm_rm>,
                                      Nothing,
                                      Nothing);
         }
      else
         if (prefix.operand_size)
            {
                /* EncodedInstructionDefinition {{[OPERAND_SIZE]
                                              ;0F 7E 
                                              ;Just Modrm
                                              ;Just RMBoth
                                              ;Nothing
                                              ;[]
                                              ;Nothing
                                              ;Nothing}
                                             ;Prototype {protoMnemonic = "MOVD", protoOperands = [OpRM32,OpXMM]}
                                             ;[(EncModrm_rm,OperandReadWrite)
                                              ,(EncModrm_reg,OperandReadOnly)]
                                             ;64bit: True
                                             ;legacy: True
                                             ;Move doubleword from xmm register to r/m32.} */
                
                ERASM_DECODER_DO_ACTION (2,
                                         Movd,
                                         Just<OpRM32>,
                                         Just<EncModrm_rm>,
                                         Just<OpXMM>,
                                         Just<EncModrm_reg>,
                                         Nothing,
                                         Nothing);
            }
         else
            {
                /* EncodedInstructionDefinition {{[]
                                              ;0F 7E 
                                              ;Just Modrm
                                              ;Just RMBoth
                                              ;Nothing
                                              ;[]
                                              ;Nothing
                                              ;Nothing}
                                             ;Prototype {protoMnemonic = "MOVD", protoOperands = [OpRM32,OpMM]}
                                             ;[(EncModrm_rm,OperandReadWrite)
                                              ,(EncModrm_reg,OperandReadOnly)]
                                             ;64bit: True
                                             ;legacy: True
                                             ;Move doubleword from mm to r/m32.} */
                
                ERASM_DECODER_DO_ACTION (2,
                                         Movd,
                                         Just<OpRM32>,
                                         Just<EncModrm_rm>,
                                         Just<OpMM>,
                                         Just<EncModrm_reg>,
                                         Nothing,
                                         Nothing);
            }
      case (0x7f):
      if (prefix.rep)
         {
             /* EncodedInstructionDefinition {{[REP]
                                           ;0F 7F 
                                           ;Just Modrm
                                           ;Just RMBoth
                                           ;Nothing
                                           ;[]
                                           ;Nothing
                                           ;Nothing}
                                          ;Prototype {protoMnemonic = "MOVDQU", protoOperands = [OpXMM_M128,OpXMM]}
                                          ;[(EncModrm_rm,OperandReadWrite)
                                           ,(EncModrm_reg,OperandReadOnly)]
                                          ;64bit: True
                                          ;legacy: True
                                          ;Move unaligned double quadword from xmm1 to xmm2/m128.} */
             
             ERASM_DECODER_DO_ACTION (2,
                                      Movdqu,
                                      Just<OpXMM_M128>,
                                      Just<EncModrm_rm>,
                                      Just<OpXMM>,
                                      Just<EncModrm_reg>,
                                      Nothing,
                                      Nothing);
         }
      else
         if (prefix.operand_size)
            {
                /* EncodedInstructionDefinition {{[OPERAND_SIZE]
                                              ;0F 7F 
                                              ;Just Modrm
                                              ;Just RMBoth
                                              ;Nothing
                                              ;[]
                                              ;Nothing
                                              ;Nothing}
                                             ;Prototype {protoMnemonic = "MOVDQA", protoOperands = [OpXMM_M128,OpXMM]}
                                             ;[(EncModrm_rm,OperandReadWrite)
                                              ,(EncModrm_reg,OperandReadOnly)]
                                             ;64bit: True
                                             ;legacy: True
                                             ;Move aligned double quadword from xmm1 to xmm2/m128.} */
                
                ERASM_DECODER_DO_ACTION (2,
                                         Movdqa,
                                         Just<OpXMM_M128>,
                                         Just<EncModrm_rm>,
                                         Just<OpXMM>,
                                         Just<EncModrm_reg>,
                                         Nothing,
                                         Nothing);
            }
         else
            {
                /* EncodedInstructionDefinition {{[]
                                              ;0F 7F 
                                              ;Just Modrm
                                              ;Just RMBoth
                                              ;Nothing
                                              ;[]
                                              ;Nothing
                                              ;Nothing}
                                             ;Prototype {protoMnemonic = "MOVQ", protoOperands = [OpMM_M64,OpMM]}
                                             ;[(EncModrm_rm,OperandReadWrite)
                                              ,(EncModrm_reg,OperandReadOnly)]
                                             ;64bit: True
                                             ;legacy: True
                                             ;Move quadword from mm to mm/m64.} */
                
                ERASM_DECODER_DO_ACTION (2,
                                         Movq,
                                         Just<OpMM_M64>,
                                         Just<EncModrm_rm>,
                                         Just<OpMM>,
                                         Just<EncModrm_reg>,
                                         Nothing,
                                         Nothing);
            }
      case (0x80):
      if (is_data16)
         {
             /* EncodedInstructionDefinition {{[]
                                           ;0F 80 
                                           ;Nothing
                                           ;Nothing
                                           ;Nothing
                                           ;[IMM_CW]
                                           ;Just Op16
                                           ;Nothing}
                                          ;Prototype {protoMnemonic = "JO", protoOperands = [OpRel16]}
                                          ;[(EncOffset,OperandReadWrite)]
                                          ;64bit: False
                                          ;legacy: True
                                          ;Jump near if overflow (OF=1). Not supported in 64-bit mode.} */
             
             ERASM_DECODER_DO_ACTION (2,
                                      Jo,
                                      Just<OpRel16>,
                                      Just<EncOffset>,
                                      Nothing,
                                      Nothing,
                                      Nothing,
                                      Nothing);
         }
      else
         {
             /* EncodedInstructionDefinition {{[]
                                           ;0F 80 
                                           ;Nothing
                                           ;Nothing
                                           ;Nothing
                                           ;[IMM_CD]
                                           ;Just Op32
                                           ;Nothing}
                                          ;Prototype {protoMnemonic = "JO", protoOperands = [OpRel32]}
                                          ;[(EncOffset,OperandReadWrite)]
                                          ;64bit: True
                                          ;legacy: True
                                          ;Jump near if overflow (OF=1).} */
             
             ERASM_DECODER_DO_ACTION (2,
                                      Jo,
                                      Just<OpRel32>,
                                      Just<EncOffset>,
                                      Nothing,
                                      Nothing,
                                      Nothing,
                                      Nothing);
         }
      case (0x81):
      if (is_data16)
         {
             /* EncodedInstructionDefinition {{[]
                                           ;0F 81 
                                           ;Nothing
                                           ;Nothing
                                           ;Nothing
                                           ;[IMM_CW]
                                           ;Just Op16
                                           ;Nothing}
                                          ;Prototype {protoMnemonic = "JNO", protoOperands = [OpRel16]}
                                          ;[(EncOffset,OperandReadWrite)]
                                          ;64bit: False
                                          ;legacy: True
                                          ;Jump near if not overflow (OF=0). Not supported in 64-bit mode.} */
             
             ERASM_DECODER_DO_ACTION (2,
                                      Jno,
                                      Just<OpRel16>,
                                      Just<EncOffset>,
                                      Nothing,
                                      Nothing,
                                      Nothing,
                                      Nothing);
         }
      else
         {
             /* EncodedInstructionDefinition {{[]
                                           ;0F 81 
                                           ;Nothing
                                           ;Nothing
                                           ;Nothing
                                           ;[IMM_CD]
                                           ;Just Op32
                                           ;Nothing}
                                          ;Prototype {protoMnemonic = "JNO", protoOperands = [OpRel32]}
                                          ;[(EncOffset,OperandReadWrite)]
                                          ;64bit: True
                                          ;legacy: True
                                          ;Jump near if not overflow (OF=0).} */
             
             ERASM_DECODER_DO_ACTION (2,
                                      Jno,
                                      Just<OpRel32>,
                                      Just<EncOffset>,
                                      Nothing,
                                      Nothing,
                                      Nothing,
                                      Nothing);
         }
      case (0x82):
      if (is_data16)
         {
             /* EncodedInstructionDefinition {{[]
                                           ;0F 82 
                                           ;Nothing
                                           ;Nothing
                                           ;Nothing
                                           ;[IMM_CW]
                                           ;Just Op16
                                           ;Nothing}
                                          ;Prototype {protoMnemonic = "JB", protoOperands = [OpRel16]}
                                          ;[(EncOffset,OperandReadWrite)]
                                          ;64bit: False
                                          ;legacy: True
                                          ;Jump near if below (CF=1). Not supported in 64-bit mode.} */
             
             ERASM_DECODER_DO_ACTION (2,
                                      Jb,
                                      Just<OpRel16>,
                                      Just<EncOffset>,
                                      Nothing,
                                      Nothing,
                                      Nothing,
                                      Nothing);
         }
      else
         {
             /* EncodedInstructionDefinition {{[]
                                           ;0F 82 
                                           ;Nothing
                                           ;Nothing
                                           ;Nothing
                                           ;[IMM_CD]
                                           ;Just Op32
                                           ;Nothing}
                                          ;Prototype {protoMnemonic = "JB", protoOperands = [OpRel32]}
                                          ;[(EncOffset,OperandReadWrite)]
                                          ;64bit: True
                                          ;legacy: True
                                          ;Jump near if below (CF=1).} */
             
             ERASM_DECODER_DO_ACTION (2,
                                      Jb,
                                      Just<OpRel32>,
                                      Just<EncOffset>,
                                      Nothing,
                                      Nothing,
                                      Nothing,
                                      Nothing);
         }
      case (0x83):
      if (is_data16)
         {
             /* EncodedInstructionDefinition {{[]
                                           ;0F 83 
                                           ;Nothing
                                           ;Nothing
                                           ;Nothing
                                           ;[IMM_CW]
                                           ;Just Op16
                                           ;Nothing}
                                          ;Prototype {protoMnemonic = "JAE", protoOperands = [OpRel16]}
                                          ;[(EncOffset,OperandReadWrite)]
                                          ;64bit: False
                                          ;legacy: True
                                          ;Jump near if above or equal (CF=0). Not supported in 64- bit mode.} */
             
             ERASM_DECODER_DO_ACTION (2,
                                      Jae,
                                      Just<OpRel16>,
                                      Just<EncOffset>,
                                      Nothing,
                                      Nothing,
                                      Nothing,
                                      Nothing);
         }
      else
         {
             /* EncodedInstructionDefinition {{[]
                                           ;0F 83 
                                           ;Nothing
                                           ;Nothing
                                           ;Nothing
                                           ;[IMM_CD]
                                           ;Just Op32
                                           ;Nothing}
                                          ;Prototype {protoMnemonic = "JAE", protoOperands = [OpRel32]}
                                          ;[(EncOffset,OperandReadWrite)]
                                          ;64bit: True
                                          ;legacy: True
                                          ;Jump near if above or equal (CF=0).} */
             
             ERASM_DECODER_DO_ACTION (2,
                                      Jae,
                                      Just<OpRel32>,
                                      Just<EncOffset>,
                                      Nothing,
                                      Nothing,
                                      Nothing,
                                      Nothing);
         }
      case (0x84):
      if (is_data16)
         {
             /* EncodedInstructionDefinition {{[]
                                           ;0F 84 
                                           ;Nothing
                                           ;Nothing
                                           ;Nothing
                                           ;[IMM_CW]
                                           ;Just Op16
                                           ;Nothing}
                                          ;Prototype {protoMnemonic = "JE", protoOperands = [OpRel16]}
                                          ;[(EncOffset,OperandReadWrite)]
                                          ;64bit: False
                                          ;legacy: True
                                          ;Jump near if equal (ZF=1). Not supported in 64-bit mode.} */
             
             ERASM_DECODER_DO_ACTION (2,
                                      Je,
                                      Just<OpRel16>,
                                      Just<EncOffset>,
                                      Nothing,
                                      Nothing,
                                      Nothing,
                                      Nothing);
         }
      else
         {
             /* EncodedInstructionDefinition {{[]
                                           ;0F 84 
                                           ;Nothing
                                           ;Nothing
                                           ;Nothing
                                           ;[IMM_CD]
                                           ;Just Op32
                                           ;Nothing}
                                          ;Prototype {protoMnemonic = "JE", protoOperands = [OpRel32]}
                                          ;[(EncOffset,OperandReadWrite)]
                                          ;64bit: True
                                          ;legacy: True
                                          ;Jump near if equal (ZF=1).} */
             
             ERASM_DECODER_DO_ACTION (2,
                                      Je,
                                      Just<OpRel32>,
                                      Just<EncOffset>,
                                      Nothing,
                                      Nothing,
                                      Nothing,
                                      Nothing);
         }
      case (0x85):
      if (is_data16)
         {
             /* EncodedInstructionDefinition {{[]
                                           ;0F 85 
                                           ;Nothing
                                           ;Nothing
                                           ;Nothing
                                           ;[IMM_CW]
                                           ;Just Op16
                                           ;Nothing}
                                          ;Prototype {protoMnemonic = "JNE", protoOperands = [OpRel16]}
                                          ;[(EncOffset,OperandReadWrite)]
                                          ;64bit: False
                                          ;legacy: True
                                          ;Jump near if not equal (ZF=0). Not supported in 64-bit mode.} */
             
             ERASM_DECODER_DO_ACTION (2,
                                      Jne,
                                      Just<OpRel16>,
                                      Just<EncOffset>,
                                      Nothing,
                                      Nothing,
                                      Nothing,
                                      Nothing);
         }
      else
         {
             /* EncodedInstructionDefinition {{[]
                                           ;0F 85 
                                           ;Nothing
                                           ;Nothing
                                           ;Nothing
                                           ;[IMM_CD]
                                           ;Just Op32
                                           ;Nothing}
                                          ;Prototype {protoMnemonic = "JNE", protoOperands = [OpRel32]}
                                          ;[(EncOffset,OperandReadWrite)]
                                          ;64bit: True
                                          ;legacy: True
                                          ;Jump near if not equal (ZF=0).} */
             
             ERASM_DECODER_DO_ACTION (2,
                                      Jne,
                                      Just<OpRel32>,
                                      Just<EncOffset>,
                                      Nothing,
                                      Nothing,
                                      Nothing,
                                      Nothing);
         }
      case (0x86):
      if (is_data16)
         {
             /* EncodedInstructionDefinition {{[]
                                           ;0F 86 
                                           ;Nothing
                                           ;Nothing
                                           ;Nothing
                                           ;[IMM_CW]
                                           ;Just Op16
                                           ;Nothing}
                                          ;Prototype {protoMnemonic = "JBE", protoOperands = [OpRel16]}
                                          ;[(EncOffset,OperandReadWrite)]
                                          ;64bit: False
                                          ;legacy: True
                                          ;Jump near if below or equal (CF=1 or ZF=1). Not supported in 64-bit mode.} */
             
             ERASM_DECODER_DO_ACTION (2,
                                      Jbe,
                                      Just<OpRel16>,
                                      Just<EncOffset>,
                                      Nothing,
                                      Nothing,
                                      Nothing,
                                      Nothing);
         }
      else
         {
             /* EncodedInstructionDefinition {{[]
                                           ;0F 86 
                                           ;Nothing
                                           ;Nothing
                                           ;Nothing
                                           ;[IMM_CD]
                                           ;Just Op32
                                           ;Nothing}
                                          ;Prototype {protoMnemonic = "JBE", protoOperands = [OpRel32]}
                                          ;[(EncOffset,OperandReadWrite)]
                                          ;64bit: True
                                          ;legacy: True
                                          ;Jump near if below or equal (CF=1 or ZF=1).} */
             
             ERASM_DECODER_DO_ACTION (2,
                                      Jbe,
                                      Just<OpRel32>,
                                      Just<EncOffset>,
                                      Nothing,
                                      Nothing,
                                      Nothing,
                                      Nothing);
         }
      case (0x87):
      if (is_data16)
         {
             /* EncodedInstructionDefinition {{[]
                                           ;0F 87 
                                           ;Nothing
                                           ;Nothing
                                           ;Nothing
                                           ;[IMM_CW]
                                           ;Just Op16
                                           ;Nothing}
                                          ;Prototype {protoMnemonic = "JA", protoOperands = [OpRel16]}
                                          ;[(EncOffset,OperandReadWrite)]
                                          ;64bit: False
                                          ;legacy: True
                                          ;Jump near if above (CF=0 and ZF=0). Not supported in 64-bit mode.} */
             
             ERASM_DECODER_DO_ACTION (2,
                                      Ja,
                                      Just<OpRel16>,
                                      Just<EncOffset>,
                                      Nothing,
                                      Nothing,
                                      Nothing,
                                      Nothing);
         }
      else
         {
             /* EncodedInstructionDefinition {{[]
                                           ;0F 87 
                                           ;Nothing
                                           ;Nothing
                                           ;Nothing
                                           ;[IMM_CD]
                                           ;Just Op32
                                           ;Nothing}
                                          ;Prototype {protoMnemonic = "JA", protoOperands = [OpRel32]}
                                          ;[(EncOffset,OperandReadWrite)]
                                          ;64bit: True
                                          ;legacy: True
                                          ;Jump near if above (CF=0 and ZF=0).} */
             
             ERASM_DECODER_DO_ACTION (2,
                                      Ja,
                                      Just<OpRel32>,
                                      Just<EncOffset>,
                                      Nothing,
                                      Nothing,
                                      Nothing,
                                      Nothing);
         }
      case (0x88):
      if (is_data16)
         {
             /* EncodedInstructionDefinition {{[]
                                           ;0F 88 
                                           ;Nothing
                                           ;Nothing
                                           ;Nothing
                                           ;[IMM_CW]
                                           ;Just Op16
                                           ;Nothing}
                                          ;Prototype {protoMnemonic = "JS", protoOperands = [OpRel16]}
                                          ;[(EncOffset,OperandReadWrite)]
                                          ;64bit: False
                                          ;legacy: True
                                          ;Jump near if sign (SF=1). Not supported in 64-bit mode.} */
             
             ERASM_DECODER_DO_ACTION (2,
                                      Js,
                                      Just<OpRel16>,
                                      Just<EncOffset>,
                                      Nothing,
                                      Nothing,
                                      Nothing,
                                      Nothing);
         }
      else
         {
             /* EncodedInstructionDefinition {{[]
                                           ;0F 88 
                                           ;Nothing
                                           ;Nothing
                                           ;Nothing
                                           ;[IMM_CD]
                                           ;Just Op32
                                           ;Nothing}
                                          ;Prototype {protoMnemonic = "JS", protoOperands = [OpRel32]}
                                          ;[(EncOffset,OperandReadWrite)]
                                          ;64bit: True
                                          ;legacy: True
                                          ;Jump near if sign (SF=1).} */
             
             ERASM_DECODER_DO_ACTION (2,
                                      Js,
                                      Just<OpRel32>,
                                      Just<EncOffset>,
                                      Nothing,
                                      Nothing,
                                      Nothing,
                                      Nothing);
         }
      case (0x89):
      if (is_data16)
         {
             /* EncodedInstructionDefinition {{[]
                                           ;0F 89 
                                           ;Nothing
                                           ;Nothing
                                           ;Nothing
                                           ;[IMM_CW]
                                           ;Just Op16
                                           ;Nothing}
                                          ;Prototype {protoMnemonic = "JNS", protoOperands = [OpRel16]}
                                          ;[(EncOffset,OperandReadWrite)]
                                          ;64bit: False
                                          ;legacy: True
                                          ;Jump near if not sign (SF=0). Not supported in 64-bit mode.} */
             
             ERASM_DECODER_DO_ACTION (2,
                                      Jns,
                                      Just<OpRel16>,
                                      Just<EncOffset>,
                                      Nothing,
                                      Nothing,
                                      Nothing,
                                      Nothing);
         }
      else
         {
             /* EncodedInstructionDefinition {{[]
                                           ;0F 89 
                                           ;Nothing
                                           ;Nothing
                                           ;Nothing
                                           ;[IMM_CD]
                                           ;Just Op32
                                           ;Nothing}
                                          ;Prototype {protoMnemonic = "JNS", protoOperands = [OpRel32]}
                                          ;[(EncOffset,OperandReadWrite)]
                                          ;64bit: True
                                          ;legacy: True
                                          ;Jump near if not sign (SF=0).} */
             
             ERASM_DECODER_DO_ACTION (2,
                                      Jns,
                                      Just<OpRel32>,
                                      Just<EncOffset>,
                                      Nothing,
                                      Nothing,
                                      Nothing,
                                      Nothing);
         }
      case (0x8a):
      if (is_data16)
         {
             /* EncodedInstructionDefinition {{[]
                                           ;0F 8A 
                                           ;Nothing
                                           ;Nothing
                                           ;Nothing
                                           ;[IMM_CW]
                                           ;Just Op16
                                           ;Nothing}
                                          ;Prototype {protoMnemonic = "JP", protoOperands = [OpRel16]}
                                          ;[(EncOffset,OperandReadWrite)]
                                          ;64bit: False
                                          ;legacy: True
                                          ;Jump near if parity (PF=1). Not supported in 64-bit mode.} */
             
             ERASM_DECODER_DO_ACTION (2,
                                      Jp,
                                      Just<OpRel16>,
                                      Just<EncOffset>,
                                      Nothing,
                                      Nothing,
                                      Nothing,
                                      Nothing);
         }
      else
         {
             /* EncodedInstructionDefinition {{[]
                                           ;0F 8A 
                                           ;Nothing
                                           ;Nothing
                                           ;Nothing
                                           ;[IMM_CD]
                                           ;Just Op32
                                           ;Nothing}
                                          ;Prototype {protoMnemonic = "JP", protoOperands = [OpRel32]}
                                          ;[(EncOffset,OperandReadWrite)]
                                          ;64bit: True
                                          ;legacy: True
                                          ;Jump near if parity (PF=1).} */
             
             ERASM_DECODER_DO_ACTION (2,
                                      Jp,
                                      Just<OpRel32>,
                                      Just<EncOffset>,
                                      Nothing,
                                      Nothing,
                                      Nothing,
                                      Nothing);
         }
      case (0x8b):
      if (is_data16)
         {
             /* EncodedInstructionDefinition {{[]
                                           ;0F 8B 
                                           ;Nothing
                                           ;Nothing
                                           ;Nothing
                                           ;[IMM_CW]
                                           ;Just Op16
                                           ;Nothing}
                                          ;Prototype {protoMnemonic = "JNP", protoOperands = [OpRel16]}
                                          ;[(EncOffset,OperandReadWrite)]
                                          ;64bit: False
                                          ;legacy: True
                                          ;Jump near if not parity (PF=0). Not supported in 64- bit mode.} */
             
             ERASM_DECODER_DO_ACTION (2,
                                      Jnp,
                                      Just<OpRel16>,
                                      Just<EncOffset>,
                                      Nothing,
                                      Nothing,
                                      Nothing,
                                      Nothing);
         }
      else
         {
             /* EncodedInstructionDefinition {{[]
                                           ;0F 8B 
                                           ;Nothing
                                           ;Nothing
                                           ;Nothing
                                           ;[IMM_CD]
                                           ;Just Op32
                                           ;Nothing}
                                          ;Prototype {protoMnemonic = "JNP", protoOperands = [OpRel32]}
                                          ;[(EncOffset,OperandReadWrite)]
                                          ;64bit: True
                                          ;legacy: True
                                          ;Jump near if not parity (PF=0).} */
             
             ERASM_DECODER_DO_ACTION (2,
                                      Jnp,
                                      Just<OpRel32>,
                                      Just<EncOffset>,
                                      Nothing,
                                      Nothing,
                                      Nothing,
                                      Nothing);
         }
      case (0x8c):
      if (is_data16)
         {
             /* EncodedInstructionDefinition {{[]
                                           ;0F 8C 
                                           ;Nothing
                                           ;Nothing
                                           ;Nothing
                                           ;[IMM_CW]
                                           ;Just Op16
                                           ;Nothing}
                                          ;Prototype {protoMnemonic = "JL", protoOperands = [OpRel16]}
                                          ;[(EncOffset,OperandReadWrite)]
                                          ;64bit: False
                                          ;legacy: True
                                          ;Jump near if less (SF≠ OF). Not supported in 64-bit mode.} */
             
             ERASM_DECODER_DO_ACTION (2,
                                      Jl,
                                      Just<OpRel16>,
                                      Just<EncOffset>,
                                      Nothing,
                                      Nothing,
                                      Nothing,
                                      Nothing);
         }
      else
         {
             /* EncodedInstructionDefinition {{[]
                                           ;0F 8C 
                                           ;Nothing
                                           ;Nothing
                                           ;Nothing
                                           ;[IMM_CD]
                                           ;Just Op32
                                           ;Nothing}
                                          ;Prototype {protoMnemonic = "JL", protoOperands = [OpRel32]}
                                          ;[(EncOffset,OperandReadWrite)]
                                          ;64bit: True
                                          ;legacy: True
                                          ;Jump near if less (SF≠ OF).} */
             
             ERASM_DECODER_DO_ACTION (2,
                                      Jl,
                                      Just<OpRel32>,
                                      Just<EncOffset>,
                                      Nothing,
                                      Nothing,
                                      Nothing,
                                      Nothing);
         }
      case (0x8d):
      if (is_data16)
         {
             /* EncodedInstructionDefinition {{[]
                                           ;0F 8D 
                                           ;Nothing
                                           ;Nothing
                                           ;Nothing
                                           ;[IMM_CW]
                                           ;Just Op16
                                           ;Nothing}
                                          ;Prototype {protoMnemonic = "JGE", protoOperands = [OpRel16]}
                                          ;[(EncOffset,OperandReadWrite)]
                                          ;64bit: False
                                          ;legacy: True
                                          ;Jump near if greater or equal (SF=OF). Not supported in 64-bit mode.} */
             
             ERASM_DECODER_DO_ACTION (2,
                                      Jge,
                                      Just<OpRel16>,
                                      Just<EncOffset>,
                                      Nothing,
                                      Nothing,
                                      Nothing,
                                      Nothing);
         }
      else
         {
             /* EncodedInstructionDefinition {{[]
                                           ;0F 8D 
                                           ;Nothing
                                           ;Nothing
                                           ;Nothing
                                           ;[IMM_CD]
                                           ;Just Op32
                                           ;Nothing}
                                          ;Prototype {protoMnemonic = "JGE", protoOperands = [OpRel32]}
                                          ;[(EncOffset,OperandReadWrite)]
                                          ;64bit: True
                                          ;legacy: True
                                          ;Jump near if greater or equal (SF=OF).} */
             
             ERASM_DECODER_DO_ACTION (2,
                                      Jge,
                                      Just<OpRel32>,
                                      Just<EncOffset>,
                                      Nothing,
                                      Nothing,
                                      Nothing,
                                      Nothing);
         }
      case (0x8e):
      if (is_data16)
         {
             /* EncodedInstructionDefinition {{[]
                                           ;0F 8E 
                                           ;Nothing
                                           ;Nothing
                                           ;Nothing
                                           ;[IMM_CW]
                                           ;Just Op16
                                           ;Nothing}
                                          ;Prototype {protoMnemonic = "JLE", protoOperands = [OpRel16]}
                                          ;[(EncOffset,OperandReadWrite)]
                                          ;64bit: False
                                          ;legacy: True
                                          ;Jump near if less or equal (ZF=1 or SF≠ OF). Not supported in 64-bit mode.} */
             
             ERASM_DECODER_DO_ACTION (2,
                                      Jle,
                                      Just<OpRel16>,
                                      Just<EncOffset>,
                                      Nothing,
                                      Nothing,
                                      Nothing,
                                      Nothing);
         }
      else
         {
             /* EncodedInstructionDefinition {{[]
                                           ;0F 8E 
                                           ;Nothing
                                           ;Nothing
                                           ;Nothing
                                           ;[IMM_CD]
                                           ;Just Op32
                                           ;Nothing}
                                          ;Prototype {protoMnemonic = "JLE", protoOperands = [OpRel32]}
                                          ;[(EncOffset,OperandReadWrite)]
                                          ;64bit: True
                                          ;legacy: True
                                          ;Jump near if less or equal (ZF=1 or SF≠ OF).} */
             
             ERASM_DECODER_DO_ACTION (2,
                                      Jle,
                                      Just<OpRel32>,
                                      Just<EncOffset>,
                                      Nothing,
                                      Nothing,
                                      Nothing,
                                      Nothing);
         }
      case (0x8f):
      if (is_data16)
         {
             /* EncodedInstructionDefinition {{[]
                                           ;0F 8F 
                                           ;Nothing
                                           ;Nothing
                                           ;Nothing
                                           ;[IMM_CW]
                                           ;Just Op16
                                           ;Nothing}
                                          ;Prototype {protoMnemonic = "JG", protoOperands = [OpRel16]}
                                          ;[(EncOffset,OperandReadWrite)]
                                          ;64bit: False
                                          ;legacy: True
                                          ;Jump near if greater (ZF=0 and SF=OF). Not supported in 64-bit mode.} */
             
             ERASM_DECODER_DO_ACTION (2,
                                      Jg,
                                      Just<OpRel16>,
                                      Just<EncOffset>,
                                      Nothing,
                                      Nothing,
                                      Nothing,
                                      Nothing);
         }
      else
         {
             /* EncodedInstructionDefinition {{[]
                                           ;0F 8F 
                                           ;Nothing
                                           ;Nothing
                                           ;Nothing
                                           ;[IMM_CD]
                                           ;Just Op32
                                           ;Nothing}
                                          ;Prototype {protoMnemonic = "JG", protoOperands = [OpRel32]}
                                          ;[(EncOffset,OperandReadWrite)]
                                          ;64bit: True
                                          ;legacy: True
                                          ;Jump near if greater (ZF=0 and SF=OF).} */
             
             ERASM_DECODER_DO_ACTION (2,
                                      Jg,
                                      Just<OpRel32>,
                                      Just<EncOffset>,
                                      Nothing,
                                      Nothing,
                                      Nothing,
                                      Nothing);
         }
      case (0x90):
      {
          /* EncodedInstructionDefinition {{[]
                                        ;0F 90 
                                        ;Just Modrm
                                        ;Just RMBoth
                                        ;Nothing
                                        ;[]
                                        ;Nothing
                                        ;Nothing}
                                       ;Prototype {protoMnemonic = "SETO", protoOperands = [OpRM8,OpRUnused]}
                                       ;[(EncModrm_rm,OperandReadWrite)
                                        ,(EncModrm_reg
                                         ,OperandReadWrite)]
                                       ;64bit: True
                                       ;legacy: True
                                       ;Set byte if overflow (OF=1)} */
          
          ERASM_DECODER_DO_ACTION (2,
                                   Seto,
                                   Just<OpRM8>,
                                   Just<EncModrm_rm>,
                                   Just<OpRUnused>,
                                   Just<EncModrm_reg>,
                                   Nothing,
                                   Nothing);
      }
      case (0x91):
      {
          /* EncodedInstructionDefinition {{[]
                                        ;0F 91 
                                        ;Just Modrm
                                        ;Just RMBoth
                                        ;Nothing
                                        ;[]
                                        ;Nothing
                                        ;Nothing}
                                       ;Prototype {protoMnemonic = "SETNO", protoOperands = [OpRM8,OpRUnused]}
                                       ;[(EncModrm_rm,OperandReadWrite)
                                        ,(EncModrm_reg
                                         ,OperandReadWrite)]
                                       ;64bit: True
                                       ;legacy: True
                                       ;Set byte if not overflow (OF=0).} */
          
          ERASM_DECODER_DO_ACTION (2,
                                   Setno,
                                   Just<OpRM8>,
                                   Just<EncModrm_rm>,
                                   Just<OpRUnused>,
                                   Just<EncModrm_reg>,
                                   Nothing,
                                   Nothing);
      }
      case (0x92):
      {
          /* EncodedInstructionDefinition {{[]
                                        ;0F 92 
                                        ;Just Modrm
                                        ;Just RMBoth
                                        ;Nothing
                                        ;[]
                                        ;Nothing
                                        ;Nothing}
                                       ;Prototype {protoMnemonic = "SETB", protoOperands = [OpRM8,OpRUnused]}
                                       ;[(EncModrm_rm,OperandReadWrite)
                                        ,(EncModrm_reg
                                         ,OperandReadWrite)]
                                       ;64bit: True
                                       ;legacy: True
                                       ;Set byte if below (CF=1).} */
          
          ERASM_DECODER_DO_ACTION (2,
                                   Setb,
                                   Just<OpRM8>,
                                   Just<EncModrm_rm>,
                                   Just<OpRUnused>,
                                   Just<EncModrm_reg>,
                                   Nothing,
                                   Nothing);
      }
      case (0x93):
      {
          /* EncodedInstructionDefinition {{[]
                                        ;0F 93 
                                        ;Just Modrm
                                        ;Just RMBoth
                                        ;Nothing
                                        ;[]
                                        ;Nothing
                                        ;Nothing}
                                       ;Prototype {protoMnemonic = "SETAE", protoOperands = [OpRM8,OpRUnused]}
                                       ;[(EncModrm_rm,OperandReadWrite)
                                        ,(EncModrm_reg
                                         ,OperandReadWrite)]
                                       ;64bit: True
                                       ;legacy: True
                                       ;Set byte if above or equal (CF=0).} */
          
          ERASM_DECODER_DO_ACTION (2,
                                   Setae,
                                   Just<OpRM8>,
                                   Just<EncModrm_rm>,
                                   Just<OpRUnused>,
                                   Just<EncModrm_reg>,
                                   Nothing,
                                   Nothing);
      }
      case (0x94):
      {
          /* EncodedInstructionDefinition {{[]
                                        ;0F 94 
                                        ;Just Modrm
                                        ;Just RMBoth
                                        ;Nothing
                                        ;[]
                                        ;Nothing
                                        ;Nothing}
                                       ;Prototype {protoMnemonic = "SETE", protoOperands = [OpRM8,OpRUnused]}
                                       ;[(EncModrm_rm,OperandReadWrite)
                                        ,(EncModrm_reg
                                         ,OperandReadWrite)]
                                       ;64bit: True
                                       ;legacy: True
                                       ;Set byte if equal (ZF=1).} */
          
          ERASM_DECODER_DO_ACTION (2,
                                   Sete,
                                   Just<OpRM8>,
                                   Just<EncModrm_rm>,
                                   Just<OpRUnused>,
                                   Just<EncModrm_reg>,
                                   Nothing,
                                   Nothing);
      }
      case (0x95):
      {
          /* EncodedInstructionDefinition {{[]
                                        ;0F 95 
                                        ;Just Modrm
                                        ;Just RMBoth
                                        ;Nothing
                                        ;[]
                                        ;Nothing
                                        ;Nothing}
                                       ;Prototype {protoMnemonic = "SETNE", protoOperands = [OpRM8,OpRUnused]}
                                       ;[(EncModrm_rm,OperandReadWrite)
                                        ,(EncModrm_reg
                                         ,OperandReadWrite)]
                                       ;64bit: True
                                       ;legacy: True
                                       ;Set byte if not equal (ZF=0).} */
          
          ERASM_DECODER_DO_ACTION (2,
                                   Setne,
                                   Just<OpRM8>,
                                   Just<EncModrm_rm>,
                                   Just<OpRUnused>,
                                   Just<EncModrm_reg>,
                                   Nothing,
                                   Nothing);
      }
      case (0x96):
      {
          /* EncodedInstructionDefinition {{[]
                                        ;0F 96 
                                        ;Just Modrm
                                        ;Just RMBoth
                                        ;Nothing
                                        ;[]
                                        ;Nothing
                                        ;Nothing}
                                       ;Prototype {protoMnemonic = "SETBE", protoOperands = [OpRM8,OpRUnused]}
                                       ;[(EncModrm_rm,OperandReadWrite)
                                        ,(EncModrm_reg
                                         ,OperandReadWrite)]
                                       ;64bit: True
                                       ;legacy: True
                                       ;Set byte if below or equal (CF=1 or ZF=1).} */
          
          ERASM_DECODER_DO_ACTION (2,
                                   Setbe,
                                   Just<OpRM8>,
                                   Just<EncModrm_rm>,
                                   Just<OpRUnused>,
                                   Just<EncModrm_reg>,
                                   Nothing,
                                   Nothing);
      }
      case (0x97):
      {
          /* EncodedInstructionDefinition {{[]
                                        ;0F 97 
                                        ;Just Modrm
                                        ;Just RMBoth
                                        ;Nothing
                                        ;[]
                                        ;Nothing
                                        ;Nothing}
                                       ;Prototype {protoMnemonic = "SETA", protoOperands = [OpRM8,OpRUnused]}
                                       ;[(EncModrm_rm,OperandReadWrite)
                                        ,(EncModrm_reg
                                         ,OperandReadWrite)]
                                       ;64bit: True
                                       ;legacy: True
                                       ;Set byte if above (CF=0 and ZF=0).} */
          
          ERASM_DECODER_DO_ACTION (2,
                                   Seta,
                                   Just<OpRM8>,
                                   Just<EncModrm_rm>,
                                   Just<OpRUnused>,
                                   Just<EncModrm_reg>,
                                   Nothing,
                                   Nothing);
      }
      case (0x98):
      {
          /* EncodedInstructionDefinition {{[]
                                        ;0F 98 
                                        ;Just Modrm
                                        ;Just RMBoth
                                        ;Nothing
                                        ;[]
                                        ;Nothing
                                        ;Nothing}
                                       ;Prototype {protoMnemonic = "SETS", protoOperands = [OpRM8,OpRUnused]}
                                       ;[(EncModrm_rm,OperandReadWrite)
                                        ,(EncModrm_reg
                                         ,OperandReadWrite)]
                                       ;64bit: True
                                       ;legacy: True
                                       ;Set byte if sign (SF=1).} */
          
          ERASM_DECODER_DO_ACTION (2,
                                   Sets,
                                   Just<OpRM8>,
                                   Just<EncModrm_rm>,
                                   Just<OpRUnused>,
                                   Just<EncModrm_reg>,
                                   Nothing,
                                   Nothing);
      }
      case (0x99):
      {
          /* EncodedInstructionDefinition {{[]
                                        ;0F 99 
                                        ;Just Modrm
                                        ;Just RMBoth
                                        ;Nothing
                                        ;[]
                                        ;Nothing
                                        ;Nothing}
                                       ;Prototype {protoMnemonic = "SETNS", protoOperands = [OpRM8,OpRUnused]}
                                       ;[(EncModrm_rm,OperandReadWrite)
                                        ,(EncModrm_reg
                                         ,OperandReadWrite)]
                                       ;64bit: True
                                       ;legacy: True
                                       ;Set byte if not sign (SF=0).} */
          
          ERASM_DECODER_DO_ACTION (2,
                                   Setns,
                                   Just<OpRM8>,
                                   Just<EncModrm_rm>,
                                   Just<OpRUnused>,
                                   Just<EncModrm_reg>,
                                   Nothing,
                                   Nothing);
      }
      case (0x9a):
      {
          /* EncodedInstructionDefinition {{[]
                                        ;0F 9A 
                                        ;Just Modrm
                                        ;Just RMBoth
                                        ;Nothing
                                        ;[]
                                        ;Nothing
                                        ;Nothing}
                                       ;Prototype {protoMnemonic = "SETP", protoOperands = [OpRM8,OpRUnused]}
                                       ;[(EncModrm_rm,OperandReadWrite)
                                        ,(EncModrm_reg
                                         ,OperandReadWrite)]
                                       ;64bit: True
                                       ;legacy: True
                                       ;Set byte if parity (PF=1).} */
          
          ERASM_DECODER_DO_ACTION (2,
                                   Setp,
                                   Just<OpRM8>,
                                   Just<EncModrm_rm>,
                                   Just<OpRUnused>,
                                   Just<EncModrm_reg>,
                                   Nothing,
                                   Nothing);
      }
      case (0x9b):
      {
          /* EncodedInstructionDefinition {{[]
                                        ;0F 9B 
                                        ;Just Modrm
                                        ;Just RMBoth
                                        ;Nothing
                                        ;[]
                                        ;Nothing
                                        ;Nothing}
                                       ;Prototype {protoMnemonic = "SETNP", protoOperands = [OpRM8,OpRUnused]}
                                       ;[(EncModrm_rm,OperandReadWrite)
                                        ,(EncModrm_reg
                                         ,OperandReadWrite)]
                                       ;64bit: True
                                       ;legacy: True
                                       ;Set byte if not parity (PF=0).} */
          
          ERASM_DECODER_DO_ACTION (2,
                                   Setnp,
                                   Just<OpRM8>,
                                   Just<EncModrm_rm>,
                                   Just<OpRUnused>,
                                   Just<EncModrm_reg>,
                                   Nothing,
                                   Nothing);
      }
      case (0x9c):
      {
          /* EncodedInstructionDefinition {{[]
                                        ;0F 9C 
                                        ;Just Modrm
                                        ;Just RMBoth
                                        ;Nothing
                                        ;[]
                                        ;Nothing
                                        ;Nothing}
                                       ;Prototype {protoMnemonic = "SETL", protoOperands = [OpRM8,OpRUnused]}
                                       ;[(EncModrm_rm,OperandReadWrite)
                                        ,(EncModrm_reg
                                         ,OperandReadWrite)]
                                       ;64bit: True
                                       ;legacy: True
                                       ;Set byte if less (SF≠ OF).} */
          
          ERASM_DECODER_DO_ACTION (2,
                                   Setl,
                                   Just<OpRM8>,
                                   Just<EncModrm_rm>,
                                   Just<OpRUnused>,
                                   Just<EncModrm_reg>,
                                   Nothing,
                                   Nothing);
      }
      case (0x9d):
      {
          /* EncodedInstructionDefinition {{[]
                                        ;0F 9D 
                                        ;Just Modrm
                                        ;Just RMBoth
                                        ;Nothing
                                        ;[]
                                        ;Nothing
                                        ;Nothing}
                                       ;Prototype {protoMnemonic = "SETGE", protoOperands = [OpRM8,OpRUnused]}
                                       ;[(EncModrm_rm,OperandReadWrite)
                                        ,(EncModrm_reg
                                         ,OperandReadWrite)]
                                       ;64bit: True
                                       ;legacy: True
                                       ;Set byte if greater or equal (SF=OF).} */
          
          ERASM_DECODER_DO_ACTION (2,
                                   Setge,
                                   Just<OpRM8>,
                                   Just<EncModrm_rm>,
                                   Just<OpRUnused>,
                                   Just<EncModrm_reg>,
                                   Nothing,
                                   Nothing);
      }
      case (0x9e):
      {
          /* EncodedInstructionDefinition {{[]
                                        ;0F 9E 
                                        ;Just Modrm
                                        ;Just RMBoth
                                        ;Nothing
                                        ;[]
                                        ;Nothing
                                        ;Nothing}
                                       ;Prototype {protoMnemonic = "SETLE", protoOperands = [OpRM8,OpRUnused]}
                                       ;[(EncModrm_rm,OperandReadWrite)
                                        ,(EncModrm_reg
                                         ,OperandReadWrite)]
                                       ;64bit: True
                                       ;legacy: True
                                       ;Set byte if less or equal (ZF=1 or SF≠ OF).} */
          
          ERASM_DECODER_DO_ACTION (2,
                                   Setle,
                                   Just<OpRM8>,
                                   Just<EncModrm_rm>,
                                   Just<OpRUnused>,
                                   Just<EncModrm_reg>,
                                   Nothing,
                                   Nothing);
      }
      case (0x9f):
      {
          /* EncodedInstructionDefinition {{[]
                                        ;0F 9F 
                                        ;Just Modrm
                                        ;Just RMBoth
                                        ;Nothing
                                        ;[]
                                        ;Nothing
                                        ;Nothing}
                                       ;Prototype {protoMnemonic = "SETG", protoOperands = [OpRM8,OpRUnused]}
                                       ;[(EncModrm_rm,OperandReadWrite)
                                        ,(EncModrm_reg
                                         ,OperandReadWrite)]
                                       ;64bit: True
                                       ;legacy: True
                                       ;Set byte if greater (ZF=0 and SF=OF).} */
          
          ERASM_DECODER_DO_ACTION (2,
                                   Setg,
                                   Just<OpRM8>,
                                   Just<EncModrm_rm>,
                                   Just<OpRUnused>,
                                   Just<EncModrm_reg>,
                                   Nothing,
                                   Nothing);
      }
      case (0xa0):
      {
          /* EncodedInstructionDefinition {{[]
                                        ;0F A0 
                                        ;Nothing
                                        ;Nothing
                                        ;Nothing
                                        ;[]
                                        ;Nothing
                                        ;Nothing}
                                       ;Prototype {protoMnemonic = "PUSH", protoOperands = [OpFS]}
                                       ;[(EncImplicit
                                         ,OperandReadWrite)]
                                       ;64bit: True
                                       ;legacy: True
                                       ;Push FS and decrement stack pointer by 16 bits.} */
          
          ERASM_DECODER_DO_ACTION (2,
                                   Push,
                                   Just<OpFS>,
                                   Just<EncImplicit>,
                                   Nothing,
                                   Nothing,
                                   Nothing,
                                   Nothing);
      }
      case (0xa1):
      {
          /* EncodedInstructionDefinition {{[]
                                        ;0F A1 
                                        ;Nothing
                                        ;Nothing
                                        ;Nothing
                                        ;[]
                                        ;Nothing
                                        ;Nothing}
                                       ;Prototype {protoMnemonic = "POP", protoOperands = [OpFS]}
                                       ;[(EncImplicit
                                         ,OperandReadWrite)]
                                       ;64bit: True
                                       ;legacy: True
                                       ;Pop top of stack into FS; increment stack pointer by 16 bits.} */
          
          ERASM_DECODER_DO_ACTION (2,
                                   Pop,
                                   Just<OpFS>,
                                   Just<EncImplicit>,
                                   Nothing,
                                   Nothing,
                                   Nothing,
                                   Nothing);
      }
      case (0xa2):
      {
          /* EncodedInstructionDefinition {{[]
                                        ;0F A2 
                                        ;Nothing
                                        ;Nothing
                                        ;Nothing
                                        ;[]
                                        ;Nothing
                                        ;Nothing}
                                       ;Prototype {protoMnemonic = "CPUID", protoOperands = []}
                                       ;[]
                                       ;64bit: True
                                       ;legacy: True
                                       ;Returns processor identification and feature information to the EAX, EBX, ECX, and EDX registers, as determined by input entered in EAX (in some cases, ECX as well).} */
          
          ERASM_DECODER_DO_ACTION (2,
                                   Cpuid,
                                   Nothing,
                                   Nothing,
                                   Nothing,
                                   Nothing,
                                   Nothing,
                                   Nothing);
      }
      case (0xa3):
      if (is_data16)
         {
             /* EncodedInstructionDefinition {{[]
                                           ;0F A3 
                                           ;Just Modrm
                                           ;Just RMBoth
                                           ;Nothing
                                           ;[]
                                           ;Just Op16
                                           ;Nothing}
                                          ;Prototype {protoMnemonic = "BT", protoOperands = [OpRM16,OpR16]}
                                          ;[(EncModrm_rm,OperandReadOnly)
                                           ,(EncModrm_reg,OperandReadOnly)]
                                          ;64bit: True
                                          ;legacy: True
                                          ;Store selected bit in CF flag.} */
             
             ERASM_DECODER_DO_ACTION (2,
                                      Bt,
                                      Just<OpRM16>,
                                      Just<EncModrm_rm>,
                                      Just<OpR16>,
                                      Just<EncModrm_reg>,
                                      Nothing,
                                      Nothing);
         }
      else
         {
             /* EncodedInstructionDefinition {{[]
                                           ;0F A3 
                                           ;Just Modrm
                                           ;Just RMBoth
                                           ;Nothing
                                           ;[]
                                           ;Just Op32
                                           ;Nothing}
                                          ;Prototype {protoMnemonic = "BT", protoOperands = [OpRM32,OpR32]}
                                          ;[(EncModrm_rm,OperandReadOnly)
                                           ,(EncModrm_reg,OperandReadOnly)]
                                          ;64bit: True
                                          ;legacy: True
                                          ;Store selected bit in CF flag.} */
             
             ERASM_DECODER_DO_ACTION (2,
                                      Bt,
                                      Just<OpRM32>,
                                      Just<EncModrm_rm>,
                                      Just<OpR32>,
                                      Just<EncModrm_reg>,
                                      Nothing,
                                      Nothing);
         }
      case (0xa4):
      if (is_data16)
         {
             /* EncodedInstructionDefinition {{[]
                                           ;0F A4 
                                           ;Just Modrm
                                           ;Just RMBoth
                                           ;Nothing
                                           ;[IMM_IB]
                                           ;Just Op16
                                           ;Nothing}
                                          ;Prototype {protoMnemonic = "SHLD", protoOperands = [OpRM16,OpR16,OpIMM8]}
                                          ;[(EncModrm_rm,OperandReadWrite)
                                           ,(EncModrm_reg,OperandReadOnly)
                                           ,(EncIMM,OperandReadWrite)]
                                          ;64bit: True
                                          ;legacy: True
                                          ;Shift r/m16 to left imm8 places while shifting bits from r16 in from the right.} */
             
             ERASM_DECODER_DO_ACTION (2,
                                      Shld,
                                      Just<OpRM16>,
                                      Just<EncModrm_rm>,
                                      Just<OpR16>,
                                      Just<EncModrm_reg>,
                                      Just<OpIMM8>,
                                      Just<EncIMM>);
         }
      else
         {
             /* EncodedInstructionDefinition {{[]
                                           ;0F A4 
                                           ;Just Modrm
                                           ;Just RMBoth
                                           ;Nothing
                                           ;[IMM_IB]
                                           ;Just Op32
                                           ;Nothing}
                                          ;Prototype {protoMnemonic = "SHLD", protoOperands = [OpRM32,OpR32,OpIMM8]}
                                          ;[(EncModrm_rm,OperandReadWrite)
                                           ,(EncModrm_reg,OperandReadOnly)
                                           ,(EncIMM,OperandReadWrite)]
                                          ;64bit: True
                                          ;legacy: True
                                          ;Shift r/m32 to left imm8 places while shifting bits from r32 in from the right.} */
             
             ERASM_DECODER_DO_ACTION (2,
                                      Shld,
                                      Just<OpRM32>,
                                      Just<EncModrm_rm>,
                                      Just<OpR32>,
                                      Just<EncModrm_reg>,
                                      Just<OpIMM8>,
                                      Just<EncIMM>);
         }
      case (0xa5):
      if (is_data16)
         {
             /* EncodedInstructionDefinition {{[]
                                           ;0F A5 
                                           ;Just Modrm
                                           ;Just RMBoth
                                           ;Nothing
                                           ;[]
                                           ;Just Op16
                                           ;Nothing}
                                          ;Prototype {protoMnemonic = "SHLD", protoOperands = [OpRM16,OpR16,OpCL]}
                                          ;[(EncModrm_rm,OperandReadWrite)
                                           ,(EncModrm_reg,OperandReadOnly)
                                           ,(EncImplicit,OperandReadWrite)]
                                          ;64bit: True
                                          ;legacy: True
                                          ;Shift r/m16 to left CL places while shifting bits from r16 in from the right.} */
             
             ERASM_DECODER_DO_ACTION (2,
                                      Shld,
                                      Just<OpRM16>,
                                      Just<EncModrm_rm>,
                                      Just<OpR16>,
                                      Just<EncModrm_reg>,
                                      Just<OpCL>,
                                      Just<EncImplicit>);
         }
      else
         {
             /* EncodedInstructionDefinition {{[]
                                           ;0F A5 
                                           ;Just Modrm
                                           ;Just RMBoth
                                           ;Nothing
                                           ;[]
                                           ;Just Op32
                                           ;Nothing}
                                          ;Prototype {protoMnemonic = "SHLD", protoOperands = [OpRM32,OpR32,OpCL]}
                                          ;[(EncModrm_rm,OperandReadWrite)
                                           ,(EncModrm_reg,OperandReadOnly)
                                           ,(EncImplicit,OperandReadWrite)]
                                          ;64bit: True
                                          ;legacy: True
                                          ;Shift r/m32 to left CL places while shifting bits from r32 in from the right.} */
             
             ERASM_DECODER_DO_ACTION (2,
                                      Shld,
                                      Just<OpRM32>,
                                      Just<EncModrm_rm>,
                                      Just<OpR32>,
                                      Just<EncModrm_reg>,
                                      Just<OpCL>,
                                      Just<EncImplicit>);
         }
      case (0xa8):
      {
          /* EncodedInstructionDefinition {{[]
                                        ;0F A8 
                                        ;Nothing
                                        ;Nothing
                                        ;Nothing
                                        ;[]
                                        ;Nothing
                                        ;Nothing}
                                       ;Prototype {protoMnemonic = "PUSH", protoOperands = [OpGS]}
                                       ;[(EncImplicit
                                         ,OperandReadWrite)]
                                       ;64bit: True
                                       ;legacy: True
                                       ;Push GS and decrement stack pointer by 16 bits.} */
          
          ERASM_DECODER_DO_ACTION (2,
                                   Push,
                                   Just<OpGS>,
                                   Just<EncImplicit>,
                                   Nothing,
                                   Nothing,
                                   Nothing,
                                   Nothing);
      }
      case (0xa9):
      {
          /* EncodedInstructionDefinition {{[]
                                        ;0F A9 
                                        ;Nothing
                                        ;Nothing
                                        ;Nothing
                                        ;[]
                                        ;Nothing
                                        ;Nothing}
                                       ;Prototype {protoMnemonic = "POP", protoOperands = [OpGS]}
                                       ;[(EncImplicit
                                         ,OperandReadWrite)]
                                       ;64bit: True
                                       ;legacy: True
                                       ;Pop top of stack into GS; increment stack pointer by 16 bits.} */
          
          ERASM_DECODER_DO_ACTION (2,
                                   Pop,
                                   Just<OpGS>,
                                   Just<EncImplicit>,
                                   Nothing,
                                   Nothing,
                                   Nothing,
                                   Nothing);
      }
      case (0xaa):
      {
          /* EncodedInstructionDefinition {{[]
                                        ;0F AA 
                                        ;Nothing
                                        ;Nothing
                                        ;Nothing
                                        ;[]
                                        ;Nothing
                                        ;Nothing}
                                       ;Prototype {protoMnemonic = "RSM", protoOperands = []}
                                       ;[]
                                       ;64bit: False
                                       ;legacy: True
                                       ;Resume operation of interrupted program.} */
          
          ERASM_DECODER_DO_ACTION (2,
                                   Rsm,
                                   Nothing,
                                   Nothing,
                                   Nothing,
                                   Nothing,
                                   Nothing,
                                   Nothing);
      }
      case (0xab):
      if (is_data16)
         {
             /* EncodedInstructionDefinition {{[]
                                           ;0F AB 
                                           ;Just Modrm
                                           ;Just RMBoth
                                           ;Nothing
                                           ;[]
                                           ;Just Op16
                                           ;Nothing}
                                          ;Prototype {protoMnemonic = "BTS", protoOperands = [OpRM16,OpR16]}
                                          ;[(EncModrm_rm,OperandReadWrite)
                                           ,(EncModrm_reg,OperandReadOnly)]
                                          ;64bit: True
                                          ;legacy: True
                                          ;Store selected bit in CF flag and set.} */
             
             ERASM_DECODER_DO_ACTION (2,
                                      Bts,
                                      Just<OpRM16>,
                                      Just<EncModrm_rm>,
                                      Just<OpR16>,
                                      Just<EncModrm_reg>,
                                      Nothing,
                                      Nothing);
         }
      else
         {
             /* EncodedInstructionDefinition {{[]
                                           ;0F AB 
                                           ;Just Modrm
                                           ;Just RMBoth
                                           ;Nothing
                                           ;[]
                                           ;Just Op32
                                           ;Nothing}
                                          ;Prototype {protoMnemonic = "BTS", protoOperands = [OpRM32,OpR32]}
                                          ;[(EncModrm_rm,OperandReadWrite)
                                           ,(EncModrm_reg,OperandReadOnly)]
                                          ;64bit: True
                                          ;legacy: True
                                          ;Store selected bit in CF flag and set.} */
             
             ERASM_DECODER_DO_ACTION (2,
                                      Bts,
                                      Just<OpRM32>,
                                      Just<EncModrm_rm>,
                                      Just<OpR32>,
                                      Just<EncModrm_reg>,
                                      Nothing,
                                      Nothing);
         }
      case (0xac):
      if (is_data16)
         {
             /* EncodedInstructionDefinition {{[]
                                           ;0F AC 
                                           ;Just Modrm
                                           ;Just RMBoth
                                           ;Nothing
                                           ;[IMM_IB]
                                           ;Just Op16
                                           ;Nothing}
                                          ;Prototype {protoMnemonic = "SHRD", protoOperands = [OpRM16,OpR16,OpIMM8]}
                                          ;[(EncModrm_rm,OperandReadWrite)
                                           ,(EncModrm_reg,OperandReadOnly)
                                           ,(EncIMM,OperandReadWrite)]
                                          ;64bit: True
                                          ;legacy: True
                                          ;Shift r/m16 to right imm8 places while shifting bits from r16 in from the left.} */
             
             ERASM_DECODER_DO_ACTION (2,
                                      Shrd,
                                      Just<OpRM16>,
                                      Just<EncModrm_rm>,
                                      Just<OpR16>,
                                      Just<EncModrm_reg>,
                                      Just<OpIMM8>,
                                      Just<EncIMM>);
         }
      else
         {
             /* EncodedInstructionDefinition {{[]
                                           ;0F AC 
                                           ;Just Modrm
                                           ;Just RMBoth
                                           ;Nothing
                                           ;[IMM_IB]
                                           ;Just Op32
                                           ;Nothing}
                                          ;Prototype {protoMnemonic = "SHRD", protoOperands = [OpRM32,OpR32,OpIMM8]}
                                          ;[(EncModrm_rm,OperandReadWrite)
                                           ,(EncModrm_reg,OperandReadOnly)
                                           ,(EncIMM,OperandReadWrite)]
                                          ;64bit: True
                                          ;legacy: True
                                          ;Shift r/m32 to right imm8 places while shifting bits from r32 in from the left.} */
             
             ERASM_DECODER_DO_ACTION (2,
                                      Shrd,
                                      Just<OpRM32>,
                                      Just<EncModrm_rm>,
                                      Just<OpR32>,
                                      Just<EncModrm_reg>,
                                      Just<OpIMM8>,
                                      Just<EncIMM>);
         }
      case (0xad):
      if (is_data16)
         {
             /* EncodedInstructionDefinition {{[]
                                           ;0F AD 
                                           ;Just Modrm
                                           ;Just RMBoth
                                           ;Nothing
                                           ;[]
                                           ;Just Op16
                                           ;Nothing}
                                          ;Prototype {protoMnemonic = "SHRD", protoOperands = [OpRM16,OpR16,OpCL]}
                                          ;[(EncModrm_rm,OperandReadWrite)
                                           ,(EncModrm_reg,OperandReadOnly)
                                           ,(EncImplicit,OperandReadWrite)]
                                          ;64bit: True
                                          ;legacy: True
                                          ;Shift r/m16 to right CL places while shifting bits from r16 in from the left.} */
             
             ERASM_DECODER_DO_ACTION (2,
                                      Shrd,
                                      Just<OpRM16>,
                                      Just<EncModrm_rm>,
                                      Just<OpR16>,
                                      Just<EncModrm_reg>,
                                      Just<OpCL>,
                                      Just<EncImplicit>);
         }
      else
         {
             /* EncodedInstructionDefinition {{[]
                                           ;0F AD 
                                           ;Just Modrm
                                           ;Just RMBoth
                                           ;Nothing
                                           ;[]
                                           ;Just Op32
                                           ;Nothing}
                                          ;Prototype {protoMnemonic = "SHRD", protoOperands = [OpRM32,OpR32,OpCL]}
                                          ;[(EncModrm_rm,OperandReadWrite)
                                           ,(EncModrm_reg,OperandReadOnly)
                                           ,(EncImplicit,OperandReadWrite)]
                                          ;64bit: True
                                          ;legacy: True
                                          ;Shift r/m32 to right CL places while shifting bits from r32 in from the left.} */
             
             ERASM_DECODER_DO_ACTION (2,
                                      Shrd,
                                      Just<OpRM32>,
                                      Just<EncModrm_rm>,
                                      Just<OpR32>,
                                      Just<EncModrm_reg>,
                                      Just<OpCL>,
                                      Just<EncImplicit>);
         }
      case (0xae):
      if (modrm_mod3 (p))
         switch (modrm_reg_op (p)) {
            case (5):
            {
                /* EncodedInstructionDefinition {{[]
                                              ;0F AE 
                                              ;Just (ModrmDigit 5)
                                              ;Just RMRegOnly
                                              ;Nothing
                                              ;[]
                                              ;Nothing
                                              ;Nothing}
                                             ;Prototype {protoMnemonic = "LFENCE", protoOperands = [OpRUnused]}
                                             ;[(EncModrm_rm,OperandReadOnly)]
                                             ;64bit: True
                                             ;legacy: True
                                             ;Serializes load operations.} */
                
                ERASM_DECODER_DO_ACTION (2,
                                         Lfence,
                                         Just<OpRUnused>,
                                         Just<EncModrm_rm_reg>,
                                         Nothing,
                                         Nothing,
                                         Nothing,
                                         Nothing);
            }
            case (6):
            {
                /* EncodedInstructionDefinition {{[]
                                              ;0F AE 
                                              ;Just (ModrmDigit 6)
                                              ;Just RMRegOnly
                                              ;Nothing
                                              ;[]
                                              ;Nothing
                                              ;Nothing}
                                             ;Prototype {protoMnemonic = "MFENCE", protoOperands = [OpRUnused]}
                                             ;[(EncModrm_rm,OperandReadOnly)]
                                             ;64bit: True
                                             ;legacy: True
                                             ;Serializes load and store operations.} */
                
                ERASM_DECODER_DO_ACTION (2,
                                         Mfence,
                                         Just<OpRUnused>,
                                         Just<EncModrm_rm_reg>,
                                         Nothing,
                                         Nothing,
                                         Nothing,
                                         Nothing);
            }
            case (7):
            {
                /* EncodedInstructionDefinition {{[]
                                              ;0F AE 
                                              ;Just (ModrmDigit 7)
                                              ;Just RMRegOnly
                                              ;Nothing
                                              ;[]
                                              ;Nothing
                                              ;Nothing}
                                             ;Prototype {protoMnemonic = "SFENCE", protoOperands = [OpRUnused]}
                                             ;[(EncModrm_rm,OperandReadOnly)]
                                             ;64bit: True
                                             ;legacy: True
                                             ;Serializes store operations.} */
                
                ERASM_DECODER_DO_ACTION (2,
                                         Sfence,
                                         Just<OpRUnused>,
                                         Just<EncModrm_rm_reg>,
                                         Nothing,
                                         Nothing,
                                         Nothing,
                                         Nothing);
            }
            
         }
      else
         switch (modrm_reg_op (p)) {
            case (0):
            {
                /* EncodedInstructionDefinition {{[]
                                              ;0F AE 
                                              ;Just (ModrmDigit 0)
                                              ;Just RMMemOnly
                                              ;Nothing
                                              ;[]
                                              ;Nothing
                                              ;Nothing}
                                             ;Prototype {protoMnemonic = "FXSAVE", protoOperands = [OpM512byte]}
                                             ;[(EncModrm_rm
                                               ,OperandReadWrite)]
                                             ;64bit: True
                                             ;legacy: True
                                             ;Save the x87 FPU, MMX, XMM, and MXCSR register state to m512byte.} */
                
                ERASM_DECODER_DO_ACTION (2,
                                         Fxsave,
                                         Just<OpM512byte>,
                                         Just<EncModrm_rm_mem>,
                                         Nothing,
                                         Nothing,
                                         Nothing,
                                         Nothing);
            }
            case (1):
            {
                /* EncodedInstructionDefinition {{[]
                                              ;0F AE 
                                              ;Just (ModrmDigit 1)
                                              ;Just RMMemOnly
                                              ;Nothing
                                              ;[]
                                              ;Nothing
                                              ;Nothing}
                                             ;Prototype {protoMnemonic = "FXRSTOR", protoOperands = [OpM512byte]}
                                             ;[(EncModrm_rm,OperandReadOnly)]
                                             ;64bit: True
                                             ;legacy: True
                                             ;Restore the x87 FPU, MMX, XMM, and MXCSR register state from m512byte.} */
                
                ERASM_DECODER_DO_ACTION (2,
                                         Fxrstor,
                                         Just<OpM512byte>,
                                         Just<EncModrm_rm_mem>,
                                         Nothing,
                                         Nothing,
                                         Nothing,
                                         Nothing);
            }
            case (2):
            {
                /* EncodedInstructionDefinition {{[]
                                              ;0F AE 
                                              ;Just (ModrmDigit 2)
                                              ;Just RMMemOnly
                                              ;Nothing
                                              ;[]
                                              ;Nothing
                                              ;Nothing}
                                             ;Prototype {protoMnemonic = "LDMXCSR", protoOperands = [OpM32]}
                                             ;[(EncModrm_rm,OperandReadOnly)]
                                             ;64bit: True
                                             ;legacy: True
                                             ;Load MXCSR register from m32.} */
                
                ERASM_DECODER_DO_ACTION (2,
                                         Ldmxcsr,
                                         Just<OpM32>,
                                         Just<EncModrm_rm_mem>,
                                         Nothing,
                                         Nothing,
                                         Nothing,
                                         Nothing);
            }
            case (3):
            {
                /* EncodedInstructionDefinition {{[]
                                              ;0F AE 
                                              ;Just (ModrmDigit 3)
                                              ;Just RMMemOnly
                                              ;Nothing
                                              ;[]
                                              ;Nothing
                                              ;Nothing}
                                             ;Prototype {protoMnemonic = "STMXCSR", protoOperands = [OpM32]}
                                             ;[(EncModrm_rm
                                               ,OperandReadWrite)]
                                             ;64bit: True
                                             ;legacy: True
                                             ;Store contents of MXCSR register to m32.} */
                
                ERASM_DECODER_DO_ACTION (2,
                                         Stmxcsr,
                                         Just<OpM32>,
                                         Just<EncModrm_rm_mem>,
                                         Nothing,
                                         Nothing,
                                         Nothing,
                                         Nothing);
            }
            case (4):
            {
                /* EncodedInstructionDefinition {{[]
                                              ;0F AE 
                                              ;Just (ModrmDigit 4)
                                              ;Just RMMemOnly
                                              ;Nothing
                                              ;[]
                                              ;Nothing
                                              ;Nothing}
                                             ;Prototype {protoMnemonic = "XSAVE", protoOperands = [OpM]}
                                             ;[(EncModrm_rm
                                               ,OperandReadWrite)]
                                             ;64bit: True
                                             ;legacy: True
                                             ;Save processor extended states to memory. The states are specified by EDX:EAX} */
                
                ERASM_DECODER_DO_ACTION (2,
                                         Xsave,
                                         Just<OpM>,
                                         Just<EncModrm_rm_mem>,
                                         Nothing,
                                         Nothing,
                                         Nothing,
                                         Nothing);
            }
            case (5):
            {
                /* EncodedInstructionDefinition {{[]
                                              ;0F AE 
                                              ;Just (ModrmDigit 5)
                                              ;Just RMMemOnly
                                              ;Nothing
                                              ;[]
                                              ;Nothing
                                              ;Nothing}
                                             ;Prototype {protoMnemonic = "XRSTOR", protoOperands = [OpM]}
                                             ;[(EncModrm_rm,OperandReadOnly)]
                                             ;64bit: True
                                             ;legacy: True
                                             ;Restore processor extended states from memory. The states are specified by EDX:EAX} */
                
                ERASM_DECODER_DO_ACTION (2,
                                         Xrstor,
                                         Just<OpM>,
                                         Just<EncModrm_rm_mem>,
                                         Nothing,
                                         Nothing,
                                         Nothing,
                                         Nothing);
            }
            case (7):
            {
                /* EncodedInstructionDefinition {{[]
                                              ;0F AE 
                                              ;Just (ModrmDigit 7)
                                              ;Just RMMemOnly
                                              ;Nothing
                                              ;[]
                                              ;Nothing
                                              ;Nothing}
                                             ;Prototype {protoMnemonic = "CLFLUSH", protoOperands = [OpM8]}
                                             ;[(EncModrm_rm
                                               ,OperandReadWrite)]
                                             ;64bit: True
                                             ;legacy: True
                                             ;Flushes cache line containing m8.} */
                
                ERASM_DECODER_DO_ACTION (2,
                                         Clflush,
                                         Just<OpM8>,
                                         Just<EncModrm_rm_mem>,
                                         Nothing,
                                         Nothing,
                                         Nothing,
                                         Nothing);
            }
            
         }
      case (0xaf):
      if (is_data16)
         {
             /* EncodedInstructionDefinition {{[]
                                           ;0F AF 
                                           ;Just Modrm
                                           ;Just RMBoth
                                           ;Nothing
                                           ;[]
                                           ;Just Op16
                                           ;Nothing}
                                          ;Prototype {protoMnemonic = "IMUL", protoOperands = [OpR16,OpRM16]}
                                          ;[(EncModrm_reg
                                            ,OperandReadWrite)
                                           ,(EncModrm_rm,OperandReadOnly)]
                                          ;64bit: True
                                          ;legacy: True
                                          ;word register ← word register ∗ r/m16.} */
             
             ERASM_DECODER_DO_ACTION (2,
                                      Imul,
                                      Just<OpR16>,
                                      Just<EncModrm_reg>,
                                      Just<OpRM16>,
                                      Just<EncModrm_rm>,
                                      Nothing,
                                      Nothing);
         }
      else
         {
             /* EncodedInstructionDefinition {{[]
                                           ;0F AF 
                                           ;Just Modrm
                                           ;Just RMBoth
                                           ;Nothing
                                           ;[]
                                           ;Just Op32
                                           ;Nothing}
                                          ;Prototype {protoMnemonic = "IMUL", protoOperands = [OpR32,OpRM32]}
                                          ;[(EncModrm_reg
                                            ,OperandReadWrite)
                                           ,(EncModrm_rm,OperandReadOnly)]
                                          ;64bit: True
                                          ;legacy: True
                                          ;doubleword register ← doubleword register ∗ r/m32.} */
             
             ERASM_DECODER_DO_ACTION (2,
                                      Imul,
                                      Just<OpR32>,
                                      Just<EncModrm_reg>,
                                      Just<OpRM32>,
                                      Just<EncModrm_rm>,
                                      Nothing,
                                      Nothing);
         }
      case (0xb0):
      {
          /* EncodedInstructionDefinition {{[]
                                        ;0F B0 
                                        ;Just Modrm
                                        ;Just RMBoth
                                        ;Nothing
                                        ;[]
                                        ;Nothing
                                        ;Nothing}
                                       ;Prototype {protoMnemonic = "CMPXCHG", protoOperands = [OpRM8,OpR8]}
                                       ;[(EncModrm_rm,OperandReadWrite)
                                        ,(EncModrm_reg,OperandReadOnly)]
                                       ;64bit: True
                                       ;legacy: True
                                       ;Compare AL with r/m8. If equal, ZF is set and r8 is loaded into r/m8. Else, clear ZF and load r/m8 into AL.} */
          
          ERASM_DECODER_DO_ACTION (2,
                                   Cmpxchg,
                                   Just<OpRM8>,
                                   Just<EncModrm_rm>,
                                   Just<OpR8>,
                                   Just<EncModrm_reg>,
                                   Nothing,
                                   Nothing);
      }
      case (0xb1):
      if (is_data16)
         {
             /* EncodedInstructionDefinition {{[]
                                           ;0F B1 
                                           ;Just Modrm
                                           ;Just RMBoth
                                           ;Nothing
                                           ;[]
                                           ;Just Op16
                                           ;Nothing}
                                          ;Prototype {protoMnemonic = "CMPXCHG", protoOperands = [OpRM16,OpR16]}
                                          ;[(EncModrm_rm,OperandReadWrite)
                                           ,(EncModrm_reg,OperandReadOnly)]
                                          ;64bit: True
                                          ;legacy: True
                                          ;Compare AX with r/m16. If equal, ZF is set and r16 is loaded into r/m16. Else, clear ZF and load r/m16 into AX.} */
             
             ERASM_DECODER_DO_ACTION (2,
                                      Cmpxchg,
                                      Just<OpRM16>,
                                      Just<EncModrm_rm>,
                                      Just<OpR16>,
                                      Just<EncModrm_reg>,
                                      Nothing,
                                      Nothing);
         }
      else
         {
             /* EncodedInstructionDefinition {{[]
                                           ;0F B1 
                                           ;Just Modrm
                                           ;Just RMBoth
                                           ;Nothing
                                           ;[]
                                           ;Just Op32
                                           ;Nothing}
                                          ;Prototype {protoMnemonic = "CMPXCHG", protoOperands = [OpRM32,OpR32]}
                                          ;[(EncModrm_rm,OperandReadWrite)
                                           ,(EncModrm_reg,OperandReadOnly)]
                                          ;64bit: True
                                          ;legacy: True
                                          ;Compare EAX with r/m32. If equal, ZF is set and r32 is loaded into r/m32. Else, clear ZF and load r/m32 into EAX.} */
             
             ERASM_DECODER_DO_ACTION (2,
                                      Cmpxchg,
                                      Just<OpRM32>,
                                      Just<EncModrm_rm>,
                                      Just<OpR32>,
                                      Just<EncModrm_reg>,
                                      Nothing,
                                      Nothing);
         }
      case (0xb2):
      if (!modrm_mod3 (p))
         if (is_data16)
            {
                /* EncodedInstructionDefinition {{[]
                                              ;0F B2 
                                              ;Just Modrm
                                              ;Just RMMemOnly
                                              ;Nothing
                                              ;[]
                                              ;Just Op16
                                              ;Nothing}
                                             ;Prototype {protoMnemonic = "LSS", protoOperands = [OpR16,OpMFar16]}
                                             ;[(EncModrm_reg
                                               ,OperandReadWrite)
                                              ,(EncModrm_rm,OperandReadOnly)]
                                             ;64bit: True
                                             ;legacy: True
                                             ;Load SS:r16 with far pointer from memory.} */
                
                ERASM_DECODER_DO_ACTION (2,
                                         Lss,
                                         Just<OpR16>,
                                         Just<EncModrm_reg>,
                                         Just<OpMFar16>,
                                         Just<EncModrm_rm_mem>,
                                         Nothing,
                                         Nothing);
            }
         else
            {
                /* EncodedInstructionDefinition {{[]
                                              ;0F B2 
                                              ;Just Modrm
                                              ;Just RMMemOnly
                                              ;Nothing
                                              ;[]
                                              ;Just Op32
                                              ;Nothing}
                                             ;Prototype {protoMnemonic = "LSS", protoOperands = [OpR32,OpMFar32]}
                                             ;[(EncModrm_reg
                                               ,OperandReadWrite)
                                              ,(EncModrm_rm,OperandReadOnly)]
                                             ;64bit: True
                                             ;legacy: True
                                             ;Load SS:r32 with far pointer from memory.} */
                
                ERASM_DECODER_DO_ACTION (2,
                                         Lss,
                                         Just<OpR32>,
                                         Just<EncModrm_reg>,
                                         Just<OpMFar32>,
                                         Just<EncModrm_rm_mem>,
                                         Nothing,
                                         Nothing);
            }
      else
         goto decode_error;
      case (0xb3):
      if (is_data16)
         {
             /* EncodedInstructionDefinition {{[]
                                           ;0F B3 
                                           ;Just Modrm
                                           ;Just RMBoth
                                           ;Nothing
                                           ;[]
                                           ;Just Op16
                                           ;Nothing}
                                          ;Prototype {protoMnemonic = "BTR", protoOperands = [OpRM16,OpR16]}
                                          ;[(EncModrm_rm,OperandReadWrite)
                                           ,(EncModrm_reg,OperandReadOnly)]
                                          ;64bit: True
                                          ;legacy: True
                                          ;Store selected bit in CF flag and clear.} */
             
             ERASM_DECODER_DO_ACTION (2,
                                      Btr,
                                      Just<OpRM16>,
                                      Just<EncModrm_rm>,
                                      Just<OpR16>,
                                      Just<EncModrm_reg>,
                                      Nothing,
                                      Nothing);
         }
      else
         {
             /* EncodedInstructionDefinition {{[]
                                           ;0F B3 
                                           ;Just Modrm
                                           ;Just RMBoth
                                           ;Nothing
                                           ;[]
                                           ;Just Op32
                                           ;Nothing}
                                          ;Prototype {protoMnemonic = "BTR", protoOperands = [OpRM32,OpR32]}
                                          ;[(EncModrm_rm,OperandReadWrite)
                                           ,(EncModrm_reg,OperandReadOnly)]
                                          ;64bit: True
                                          ;legacy: True
                                          ;Store selected bit in CF flag and clear.} */
             
             ERASM_DECODER_DO_ACTION (2,
                                      Btr,
                                      Just<OpRM32>,
                                      Just<EncModrm_rm>,
                                      Just<OpR32>,
                                      Just<EncModrm_reg>,
                                      Nothing,
                                      Nothing);
         }
      case (0xb4):
      if (!modrm_mod3 (p))
         if (is_data16)
            {
                /* EncodedInstructionDefinition {{[]
                                              ;0F B4 
                                              ;Just Modrm
                                              ;Just RMMemOnly
                                              ;Nothing
                                              ;[]
                                              ;Just Op16
                                              ;Nothing}
                                             ;Prototype {protoMnemonic = "LFS", protoOperands = [OpR16,OpMFar16]}
                                             ;[(EncModrm_reg
                                               ,OperandReadWrite)
                                              ,(EncModrm_rm,OperandReadOnly)]
                                             ;64bit: True
                                             ;legacy: True
                                             ;Load FS:r16 with far pointer from memory.} */
                
                ERASM_DECODER_DO_ACTION (2,
                                         Lfs,
                                         Just<OpR16>,
                                         Just<EncModrm_reg>,
                                         Just<OpMFar16>,
                                         Just<EncModrm_rm_mem>,
                                         Nothing,
                                         Nothing);
            }
         else
            {
                /* EncodedInstructionDefinition {{[]
                                              ;0F B4 
                                              ;Just Modrm
                                              ;Just RMMemOnly
                                              ;Nothing
                                              ;[]
                                              ;Just Op32
                                              ;Nothing}
                                             ;Prototype {protoMnemonic = "LFS", protoOperands = [OpR32,OpMFar32]}
                                             ;[(EncModrm_reg
                                               ,OperandReadWrite)
                                              ,(EncModrm_rm,OperandReadOnly)]
                                             ;64bit: True
                                             ;legacy: True
                                             ;Load FS:r32 with far pointer from memory.} */
                
                ERASM_DECODER_DO_ACTION (2,
                                         Lfs,
                                         Just<OpR32>,
                                         Just<EncModrm_reg>,
                                         Just<OpMFar32>,
                                         Just<EncModrm_rm_mem>,
                                         Nothing,
                                         Nothing);
            }
      else
         goto decode_error;
      case (0xb5):
      if (!modrm_mod3 (p))
         if (is_data16)
            {
                /* EncodedInstructionDefinition {{[]
                                              ;0F B5 
                                              ;Just Modrm
                                              ;Just RMMemOnly
                                              ;Nothing
                                              ;[]
                                              ;Just Op16
                                              ;Nothing}
                                             ;Prototype {protoMnemonic = "LGS", protoOperands = [OpR16,OpMFar16]}
                                             ;[(EncModrm_reg
                                               ,OperandReadWrite)
                                              ,(EncModrm_rm,OperandReadOnly)]
                                             ;64bit: True
                                             ;legacy: True
                                             ;Load GS:r16 with far pointer from memory.} */
                
                ERASM_DECODER_DO_ACTION (2,
                                         Lgs,
                                         Just<OpR16>,
                                         Just<EncModrm_reg>,
                                         Just<OpMFar16>,
                                         Just<EncModrm_rm_mem>,
                                         Nothing,
                                         Nothing);
            }
         else
            {
                /* EncodedInstructionDefinition {{[]
                                              ;0F B5 
                                              ;Just Modrm
                                              ;Just RMMemOnly
                                              ;Nothing
                                              ;[]
                                              ;Just Op32
                                              ;Nothing}
                                             ;Prototype {protoMnemonic = "LGS", protoOperands = [OpR32,OpMFar32]}
                                             ;[(EncModrm_reg
                                               ,OperandReadWrite)
                                              ,(EncModrm_rm,OperandReadOnly)]
                                             ;64bit: True
                                             ;legacy: True
                                             ;Load GS:r32 with far pointer from memory.} */
                
                ERASM_DECODER_DO_ACTION (2,
                                         Lgs,
                                         Just<OpR32>,
                                         Just<EncModrm_reg>,
                                         Just<OpMFar32>,
                                         Just<EncModrm_rm_mem>,
                                         Nothing,
                                         Nothing);
            }
      else
         goto decode_error;
      case (0xb6):
      if (is_data16)
         {
             /* EncodedInstructionDefinition {{[]
                                           ;0F B6 
                                           ;Just Modrm
                                           ;Just RMBoth
                                           ;Nothing
                                           ;[]
                                           ;Just Op16
                                           ;Nothing}
                                          ;Prototype {protoMnemonic = "MOVZX", protoOperands = [OpR16,OpRM8]}
                                          ;[(EncModrm_reg
                                            ,OperandReadWrite)
                                           ,(EncModrm_rm,OperandReadOnly)]
                                          ;64bit: True
                                          ;legacy: True
                                          ;Move byte to word with zero-extension.} */
             
             ERASM_DECODER_DO_ACTION (2,
                                      Movzx,
                                      Just<OpR16>,
                                      Just<EncModrm_reg>,
                                      Just<OpRM8>,
                                      Just<EncModrm_rm>,
                                      Nothing,
                                      Nothing);
         }
      else
         {
             /* EncodedInstructionDefinition {{[]
                                           ;0F B6 
                                           ;Just Modrm
                                           ;Just RMBoth
                                           ;Nothing
                                           ;[]
                                           ;Just Op32
                                           ;Nothing}
                                          ;Prototype {protoMnemonic = "MOVZX", protoOperands = [OpR32,OpRM8]}
                                          ;[(EncModrm_reg
                                            ,OperandReadWrite)
                                           ,(EncModrm_rm,OperandReadOnly)]
                                          ;64bit: True
                                          ;legacy: True
                                          ;Move byte to doubleword, zero-extension.} */
             
             ERASM_DECODER_DO_ACTION (2,
                                      Movzx,
                                      Just<OpR32>,
                                      Just<EncModrm_reg>,
                                      Just<OpRM8>,
                                      Just<EncModrm_rm>,
                                      Nothing,
                                      Nothing);
         }
      case (0xb7):
      {
          /* EncodedInstructionDefinition {{[]
                                        ;0F B7 
                                        ;Just Modrm
                                        ;Just RMBoth
                                        ;Nothing
                                        ;[]
                                        ;Nothing
                                        ;Nothing}
                                       ;Prototype {protoMnemonic = "MOVZX", protoOperands = [OpR32,OpRM16]}
                                       ;[(EncModrm_reg
                                         ,OperandReadWrite)
                                        ,(EncModrm_rm,OperandReadOnly)]
                                       ;64bit: True
                                       ;legacy: True
                                       ;Move word to doubleword, zero-extension.} */
          
          ERASM_DECODER_DO_ACTION (2,
                                   Movzx,
                                   Just<OpR32>,
                                   Just<EncModrm_reg>,
                                   Just<OpRM16>,
                                   Just<EncModrm_rm>,
                                   Nothing,
                                   Nothing);
      }
      case (0xb8):
      if (prefix.rep)
         if (is_data16)
            {
                /* EncodedInstructionDefinition {{[REP]
                                              ;0F B8 
                                              ;Just Modrm
                                              ;Just RMBoth
                                              ;Nothing
                                              ;[]
                                              ;Just Op16
                                              ;Nothing}
                                             ;Prototype {protoMnemonic = "POPCNT", protoOperands = [OpR16,OpRM16]}
                                             ;[(EncModrm_reg
                                               ,OperandReadWrite)
                                              ,(EncModrm_rm,OperandReadOnly)]
                                             ;64bit: True
                                             ;legacy: True
                                             ;POPCNT on r/m16} */
                
                ERASM_DECODER_DO_ACTION (2,
                                         Popcnt,
                                         Just<OpR16>,
                                         Just<EncModrm_reg>,
                                         Just<OpRM16>,
                                         Just<EncModrm_rm>,
                                         Nothing,
                                         Nothing);
            }
         else
            {
                /* EncodedInstructionDefinition {{[REP]
                                              ;0F B8 
                                              ;Just Modrm
                                              ;Just RMBoth
                                              ;Nothing
                                              ;[]
                                              ;Just Op32
                                              ;Nothing}
                                             ;Prototype {protoMnemonic = "POPCNT", protoOperands = [OpR32,OpRM32]}
                                             ;[(EncModrm_reg
                                               ,OperandReadWrite)
                                              ,(EncModrm_rm,OperandReadOnly)]
                                             ;64bit: True
                                             ;legacy: True
                                             ;POPCNT on r/m32} */
                
                ERASM_DECODER_DO_ACTION (2,
                                         Popcnt,
                                         Just<OpR32>,
                                         Just<EncModrm_reg>,
                                         Just<OpRM32>,
                                         Just<EncModrm_rm>,
                                         Nothing,
                                         Nothing);
            }
      else
         goto decode_error;
      case (0xba):
      switch (modrm_reg_op (p)) {
         case (4):
         if (is_data16)
            {
                /* EncodedInstructionDefinition {{[]
                                              ;0F BA 
                                              ;Just (ModrmDigit 4)
                                              ;Just RMBoth
                                              ;Nothing
                                              ;[IMM_IB]
                                              ;Just Op16
                                              ;Nothing}
                                             ;Prototype {protoMnemonic = "BT", protoOperands = [OpRM16,OpIMM8]}
                                             ;[(EncModrm_rm,OperandReadOnly)
                                              ,(EncIMM,OperandReadWrite)]
                                             ;64bit: True
                                             ;legacy: True
                                             ;Store selected bit in CF flag.} */
                
                ERASM_DECODER_DO_ACTION (2,
                                         Bt,
                                         Just<OpRM16>,
                                         Just<EncModrm_rm>,
                                         Just<OpIMM8>,
                                         Just<EncIMM>,
                                         Nothing,
                                         Nothing);
            }
         else
            {
                /* EncodedInstructionDefinition {{[]
                                              ;0F BA 
                                              ;Just (ModrmDigit 4)
                                              ;Just RMBoth
                                              ;Nothing
                                              ;[IMM_IB]
                                              ;Just Op32
                                              ;Nothing}
                                             ;Prototype {protoMnemonic = "BT", protoOperands = [OpRM32,OpIMM8]}
                                             ;[(EncModrm_rm,OperandReadOnly)
                                              ,(EncIMM,OperandReadWrite)]
                                             ;64bit: True
                                             ;legacy: True
                                             ;Store selected bit in CF flag.} */
                
                ERASM_DECODER_DO_ACTION (2,
                                         Bt,
                                         Just<OpRM32>,
                                         Just<EncModrm_rm>,
                                         Just<OpIMM8>,
                                         Just<EncIMM>,
                                         Nothing,
                                         Nothing);
            }
         case (5):
         if (is_data16)
            {
                /* EncodedInstructionDefinition {{[]
                                              ;0F BA 
                                              ;Just (ModrmDigit 5)
                                              ;Just RMBoth
                                              ;Nothing
                                              ;[IMM_IB]
                                              ;Just Op16
                                              ;Nothing}
                                             ;Prototype {protoMnemonic = "BTS", protoOperands = [OpRM16,OpIMM8]}
                                             ;[(EncModrm_rm,OperandReadWrite)
                                              ,(EncIMM,OperandReadWrite)]
                                             ;64bit: True
                                             ;legacy: True
                                             ;Store selected bit in CF flag and set.} */
                
                ERASM_DECODER_DO_ACTION (2,
                                         Bts,
                                         Just<OpRM16>,
                                         Just<EncModrm_rm>,
                                         Just<OpIMM8>,
                                         Just<EncIMM>,
                                         Nothing,
                                         Nothing);
            }
         else
            {
                /* EncodedInstructionDefinition {{[]
                                              ;0F BA 
                                              ;Just (ModrmDigit 5)
                                              ;Just RMBoth
                                              ;Nothing
                                              ;[IMM_IB]
                                              ;Just Op32
                                              ;Nothing}
                                             ;Prototype {protoMnemonic = "BTS", protoOperands = [OpRM32,OpIMM8]}
                                             ;[(EncModrm_rm,OperandReadWrite)
                                              ,(EncIMM,OperandReadWrite)]
                                             ;64bit: True
                                             ;legacy: True
                                             ;Store selected bit in CF flag and set.} */
                
                ERASM_DECODER_DO_ACTION (2,
                                         Bts,
                                         Just<OpRM32>,
                                         Just<EncModrm_rm>,
                                         Just<OpIMM8>,
                                         Just<EncIMM>,
                                         Nothing,
                                         Nothing);
            }
         case (6):
         if (is_data16)
            {
                /* EncodedInstructionDefinition {{[]
                                              ;0F BA 
                                              ;Just (ModrmDigit 6)
                                              ;Just RMBoth
                                              ;Nothing
                                              ;[IMM_IB]
                                              ;Just Op16
                                              ;Nothing}
                                             ;Prototype {protoMnemonic = "BTR", protoOperands = [OpRM16,OpIMM8]}
                                             ;[(EncModrm_rm,OperandReadWrite)
                                              ,(EncIMM,OperandReadWrite)]
                                             ;64bit: True
                                             ;legacy: True
                                             ;Store selected bit in CF flag and clear.} */
                
                ERASM_DECODER_DO_ACTION (2,
                                         Btr,
                                         Just<OpRM16>,
                                         Just<EncModrm_rm>,
                                         Just<OpIMM8>,
                                         Just<EncIMM>,
                                         Nothing,
                                         Nothing);
            }
         else
            {
                /* EncodedInstructionDefinition {{[]
                                              ;0F BA 
                                              ;Just (ModrmDigit 6)
                                              ;Just RMBoth
                                              ;Nothing
                                              ;[IMM_IB]
                                              ;Just Op32
                                              ;Nothing}
                                             ;Prototype {protoMnemonic = "BTR", protoOperands = [OpRM32,OpIMM8]}
                                             ;[(EncModrm_rm,OperandReadWrite)
                                              ,(EncIMM,OperandReadWrite)]
                                             ;64bit: True
                                             ;legacy: True
                                             ;Store selected bit in CF flag and clear.} */
                
                ERASM_DECODER_DO_ACTION (2,
                                         Btr,
                                         Just<OpRM32>,
                                         Just<EncModrm_rm>,
                                         Just<OpIMM8>,
                                         Just<EncIMM>,
                                         Nothing,
                                         Nothing);
            }
         case (7):
         if (is_data16)
            {
                /* EncodedInstructionDefinition {{[]
                                              ;0F BA 
                                              ;Just (ModrmDigit 7)
                                              ;Just RMBoth
                                              ;Nothing
                                              ;[IMM_IB]
                                              ;Just Op16
                                              ;Nothing}
                                             ;Prototype {protoMnemonic = "BTC", protoOperands = [OpRM16,OpIMM8]}
                                             ;[(EncModrm_rm,OperandReadWrite)
                                              ,(EncIMM,OperandReadWrite)]
                                             ;64bit: True
                                             ;legacy: True
                                             ;Store selected bit in CF flag and complement.} */
                
                ERASM_DECODER_DO_ACTION (2,
                                         Btc,
                                         Just<OpRM16>,
                                         Just<EncModrm_rm>,
                                         Just<OpIMM8>,
                                         Just<EncIMM>,
                                         Nothing,
                                         Nothing);
            }
         else
            {
                /* EncodedInstructionDefinition {{[]
                                              ;0F BA 
                                              ;Just (ModrmDigit 7)
                                              ;Just RMBoth
                                              ;Nothing
                                              ;[IMM_IB]
                                              ;Just Op32
                                              ;Nothing}
                                             ;Prototype {protoMnemonic = "BTC", protoOperands = [OpRM32,OpIMM8]}
                                             ;[(EncModrm_rm,OperandReadWrite)
                                              ,(EncIMM,OperandReadWrite)]
                                             ;64bit: True
                                             ;legacy: True
                                             ;Store selected bit in CF flag and complement.} */
                
                ERASM_DECODER_DO_ACTION (2,
                                         Btc,
                                         Just<OpRM32>,
                                         Just<EncModrm_rm>,
                                         Just<OpIMM8>,
                                         Just<EncIMM>,
                                         Nothing,
                                         Nothing);
            }
         
      }
      case (0xbb):
      if (is_data16)
         {
             /* EncodedInstructionDefinition {{[]
                                           ;0F BB 
                                           ;Just Modrm
                                           ;Just RMBoth
                                           ;Nothing
                                           ;[]
                                           ;Just Op16
                                           ;Nothing}
                                          ;Prototype {protoMnemonic = "BTC", protoOperands = [OpRM16,OpR16]}
                                          ;[(EncModrm_rm,OperandReadWrite)
                                           ,(EncModrm_reg,OperandReadOnly)]
                                          ;64bit: True
                                          ;legacy: True
                                          ;Store selected bit in CF flag and complement.} */
             
             ERASM_DECODER_DO_ACTION (2,
                                      Btc,
                                      Just<OpRM16>,
                                      Just<EncModrm_rm>,
                                      Just<OpR16>,
                                      Just<EncModrm_reg>,
                                      Nothing,
                                      Nothing);
         }
      else
         {
             /* EncodedInstructionDefinition {{[]
                                           ;0F BB 
                                           ;Just Modrm
                                           ;Just RMBoth
                                           ;Nothing
                                           ;[]
                                           ;Just Op32
                                           ;Nothing}
                                          ;Prototype {protoMnemonic = "BTC", protoOperands = [OpRM32,OpR32]}
                                          ;[(EncModrm_rm,OperandReadWrite)
                                           ,(EncModrm_reg,OperandReadOnly)]
                                          ;64bit: True
                                          ;legacy: True
                                          ;Store selected bit in CF flag and complement.} */
             
             ERASM_DECODER_DO_ACTION (2,
                                      Btc,
                                      Just<OpRM32>,
                                      Just<EncModrm_rm>,
                                      Just<OpR32>,
                                      Just<EncModrm_reg>,
                                      Nothing,
                                      Nothing);
         }
      case (0xbc):
      if (is_data16)
         {
             /* EncodedInstructionDefinition {{[]
                                           ;0F BC 
                                           ;Just Modrm
                                           ;Just RMBoth
                                           ;Nothing
                                           ;[]
                                           ;Just Op16
                                           ;Nothing}
                                          ;Prototype {protoMnemonic = "BSF", protoOperands = [OpR16,OpRM16]}
                                          ;[(EncModrm_reg
                                            ,OperandReadWrite)
                                           ,(EncModrm_rm,OperandReadOnly)]
                                          ;64bit: True
                                          ;legacy: True
                                          ;Bit scan forward on r/m16.} */
             
             ERASM_DECODER_DO_ACTION (2,
                                      Bsf,
                                      Just<OpR16>,
                                      Just<EncModrm_reg>,
                                      Just<OpRM16>,
                                      Just<EncModrm_rm>,
                                      Nothing,
                                      Nothing);
         }
      else
         {
             /* EncodedInstructionDefinition {{[]
                                           ;0F BC 
                                           ;Just Modrm
                                           ;Just RMBoth
                                           ;Nothing
                                           ;[]
                                           ;Just Op32
                                           ;Nothing}
                                          ;Prototype {protoMnemonic = "BSF", protoOperands = [OpR32,OpRM32]}
                                          ;[(EncModrm_reg
                                            ,OperandReadWrite)
                                           ,(EncModrm_rm,OperandReadOnly)]
                                          ;64bit: True
                                          ;legacy: True
                                          ;Bit scan forward on r/m32.} */
             
             ERASM_DECODER_DO_ACTION (2,
                                      Bsf,
                                      Just<OpR32>,
                                      Just<EncModrm_reg>,
                                      Just<OpRM32>,
                                      Just<EncModrm_rm>,
                                      Nothing,
                                      Nothing);
         }
      case (0xbd):
      if (is_data16)
         {
             /* EncodedInstructionDefinition {{[]
                                           ;0F BD 
                                           ;Just Modrm
                                           ;Just RMBoth
                                           ;Nothing
                                           ;[]
                                           ;Just Op16
                                           ;Nothing}
                                          ;Prototype {protoMnemonic = "BSR", protoOperands = [OpR16,OpRM16]}
                                          ;[(EncModrm_reg
                                            ,OperandReadWrite)
                                           ,(EncModrm_rm,OperandReadOnly)]
                                          ;64bit: True
                                          ;legacy: True
                                          ;Bit scan reverse on r/m16.} */
             
             ERASM_DECODER_DO_ACTION (2,
                                      Bsr,
                                      Just<OpR16>,
                                      Just<EncModrm_reg>,
                                      Just<OpRM16>,
                                      Just<EncModrm_rm>,
                                      Nothing,
                                      Nothing);
         }
      else
         {
             /* EncodedInstructionDefinition {{[]
                                           ;0F BD 
                                           ;Just Modrm
                                           ;Just RMBoth
                                           ;Nothing
                                           ;[]
                                           ;Just Op32
                                           ;Nothing}
                                          ;Prototype {protoMnemonic = "BSR", protoOperands = [OpR32,OpRM32]}
                                          ;[(EncModrm_reg
                                            ,OperandReadWrite)
                                           ,(EncModrm_rm,OperandReadOnly)]
                                          ;64bit: True
                                          ;legacy: True
                                          ;Bit scan reverse on r/m32.} */
             
             ERASM_DECODER_DO_ACTION (2,
                                      Bsr,
                                      Just<OpR32>,
                                      Just<EncModrm_reg>,
                                      Just<OpRM32>,
                                      Just<EncModrm_rm>,
                                      Nothing,
                                      Nothing);
         }
      case (0xbe):
      if (is_data16)
         {
             /* EncodedInstructionDefinition {{[]
                                           ;0F BE 
                                           ;Just Modrm
                                           ;Just RMBoth
                                           ;Nothing
                                           ;[]
                                           ;Just Op16
                                           ;Nothing}
                                          ;Prototype {protoMnemonic = "MOVSX", protoOperands = [OpR16,OpRM8]}
                                          ;[(EncModrm_reg
                                            ,OperandReadWrite)
                                           ,(EncModrm_rm,OperandReadOnly)]
                                          ;64bit: True
                                          ;legacy: True
                                          ;Move byte to word with sign-extension.} */
             
             ERASM_DECODER_DO_ACTION (2,
                                      Movsx,
                                      Just<OpR16>,
                                      Just<EncModrm_reg>,
                                      Just<OpRM8>,
                                      Just<EncModrm_rm>,
                                      Nothing,
                                      Nothing);
         }
      else
         {
             /* EncodedInstructionDefinition {{[]
                                           ;0F BE 
                                           ;Just Modrm
                                           ;Just RMBoth
                                           ;Nothing
                                           ;[]
                                           ;Just Op32
                                           ;Nothing}
                                          ;Prototype {protoMnemonic = "MOVSX", protoOperands = [OpR32,OpRM8]}
                                          ;[(EncModrm_reg
                                            ,OperandReadWrite)
                                           ,(EncModrm_rm,OperandReadOnly)]
                                          ;64bit: True
                                          ;legacy: True
                                          ;Move byte to doubleword with sign-extension.} */
             
             ERASM_DECODER_DO_ACTION (2,
                                      Movsx,
                                      Just<OpR32>,
                                      Just<EncModrm_reg>,
                                      Just<OpRM8>,
                                      Just<EncModrm_rm>,
                                      Nothing,
                                      Nothing);
         }
      case (0xbf):
      {
          /* EncodedInstructionDefinition {{[]
                                        ;0F BF 
                                        ;Just Modrm
                                        ;Just RMBoth
                                        ;Nothing
                                        ;[]
                                        ;Nothing
                                        ;Nothing}
                                       ;Prototype {protoMnemonic = "MOVSX", protoOperands = [OpR32,OpRM16]}
                                       ;[(EncModrm_reg
                                         ,OperandReadWrite)
                                        ,(EncModrm_rm,OperandReadOnly)]
                                       ;64bit: True
                                       ;legacy: True
                                       ;Move word to doubleword, with sign-extension.} */
          
          ERASM_DECODER_DO_ACTION (2,
                                   Movsx,
                                   Just<OpR32>,
                                   Just<EncModrm_reg>,
                                   Just<OpRM16>,
                                   Just<EncModrm_rm>,
                                   Nothing,
                                   Nothing);
      }
      case (0xc0):
      {
          /* EncodedInstructionDefinition {{[]
                                        ;0F C0 
                                        ;Just Modrm
                                        ;Just RMBoth
                                        ;Nothing
                                        ;[]
                                        ;Nothing
                                        ;Nothing}
                                       ;Prototype {protoMnemonic = "XADD", protoOperands = [OpRM8,OpR8]}
                                       ;[(EncModrm_rm,OperandReadWrite)
                                        ,(EncModrm_reg,OperandReadOnly)]
                                       ;64bit: True
                                       ;legacy: True
                                       ;Exchange r8 and r/m8; load sum into r/m8.} */
          
          ERASM_DECODER_DO_ACTION (2,
                                   Xadd,
                                   Just<OpRM8>,
                                   Just<EncModrm_rm>,
                                   Just<OpR8>,
                                   Just<EncModrm_reg>,
                                   Nothing,
                                   Nothing);
      }
      case (0xc1):
      if (is_data16)
         {
             /* EncodedInstructionDefinition {{[]
                                           ;0F C1 
                                           ;Just Modrm
                                           ;Just RMBoth
                                           ;Nothing
                                           ;[]
                                           ;Just Op16
                                           ;Nothing}
                                          ;Prototype {protoMnemonic = "XADD", protoOperands = [OpRM16,OpR16]}
                                          ;[(EncModrm_rm,OperandReadWrite)
                                           ,(EncModrm_reg,OperandReadOnly)]
                                          ;64bit: True
                                          ;legacy: True
                                          ;Exchange r16 and r/m16; load sum into r/m16.} */
             
             ERASM_DECODER_DO_ACTION (2,
                                      Xadd,
                                      Just<OpRM16>,
                                      Just<EncModrm_rm>,
                                      Just<OpR16>,
                                      Just<EncModrm_reg>,
                                      Nothing,
                                      Nothing);
         }
      else
         {
             /* EncodedInstructionDefinition {{[]
                                           ;0F C1 
                                           ;Just Modrm
                                           ;Just RMBoth
                                           ;Nothing
                                           ;[]
                                           ;Just Op32
                                           ;Nothing}
                                          ;Prototype {protoMnemonic = "XADD", protoOperands = [OpRM32,OpR32]}
                                          ;[(EncModrm_rm,OperandReadWrite)
                                           ,(EncModrm_reg,OperandReadOnly)]
                                          ;64bit: True
                                          ;legacy: True
                                          ;Exchange r32 and r/m32; load sum into r/m32.} */
             
             ERASM_DECODER_DO_ACTION (2,
                                      Xadd,
                                      Just<OpRM32>,
                                      Just<EncModrm_rm>,
                                      Just<OpR32>,
                                      Just<EncModrm_reg>,
                                      Nothing,
                                      Nothing);
         }
      case (0xc2):
      if (prefix.repne)
         switch (imm (p,is_addr32)) {
            case (0):
            {
                /* EncodedInstructionDefinition {{[REPNE]
                                              ;0F C2 
                                              ;Just Modrm
                                              ;Just RMBoth
                                              ;Nothing
                                              ;[IMM_IB_Const 0]
                                              ;Nothing
                                              ;Nothing}
                                             ;Prototype {protoMnemonic = "CMPEQSD", protoOperands = [OpXMM,OpXMM_M64]}
                                             ;[(EncModrm_reg
                                               ,OperandReadWrite)
                                              ,(EncModrm_rm,OperandReadWrite)
                                              ,(EncIMM,OperandReadWrite)]
                                             ;64bit: True
                                             ;legacy: True
                                             ;alias for CMPSD} */
                
                ERASM_DECODER_DO_ACTION (2,
                                         Cmpeqsd,
                                         Just<OpXMM>,
                                         Just<EncModrm_reg>,
                                         Just<OpXMM_M64>,
                                         Just<EncModrm_rm>,
                                         Nothing,
                                         Just<EncIMM>);
            }
            case (1):
            {
                /* EncodedInstructionDefinition {{[REPNE]
                                              ;0F C2 
                                              ;Just Modrm
                                              ;Just RMBoth
                                              ;Nothing
                                              ;[IMM_IB_Const 1]
                                              ;Nothing
                                              ;Nothing}
                                             ;Prototype {protoMnemonic = "CMPLTSD", protoOperands = [OpXMM,OpXMM_M64]}
                                             ;[(EncModrm_reg
                                               ,OperandReadWrite)
                                              ,(EncModrm_rm,OperandReadWrite)
                                              ,(EncIMM,OperandReadWrite)]
                                             ;64bit: True
                                             ;legacy: True
                                             ;alias for CMPSD} */
                
                ERASM_DECODER_DO_ACTION (2,
                                         Cmpltsd,
                                         Just<OpXMM>,
                                         Just<EncModrm_reg>,
                                         Just<OpXMM_M64>,
                                         Just<EncModrm_rm>,
                                         Nothing,
                                         Just<EncIMM>);
            }
            case (2):
            {
                /* EncodedInstructionDefinition {{[REPNE]
                                              ;0F C2 
                                              ;Just Modrm
                                              ;Just RMBoth
                                              ;Nothing
                                              ;[IMM_IB_Const 2]
                                              ;Nothing
                                              ;Nothing}
                                             ;Prototype {protoMnemonic = "CMPLESD", protoOperands = [OpXMM,OpXMM_M64]}
                                             ;[(EncModrm_reg
                                               ,OperandReadWrite)
                                              ,(EncModrm_rm,OperandReadWrite)
                                              ,(EncIMM,OperandReadWrite)]
                                             ;64bit: True
                                             ;legacy: True
                                             ;alias for CMPSD} */
                
                ERASM_DECODER_DO_ACTION (2,
                                         Cmplesd,
                                         Just<OpXMM>,
                                         Just<EncModrm_reg>,
                                         Just<OpXMM_M64>,
                                         Just<EncModrm_rm>,
                                         Nothing,
                                         Just<EncIMM>);
            }
            case (3):
            {
                /* EncodedInstructionDefinition {{[REPNE]
                                              ;0F C2 
                                              ;Just Modrm
                                              ;Just RMBoth
                                              ;Nothing
                                              ;[IMM_IB_Const 3]
                                              ;Nothing
                                              ;Nothing}
                                             ;Prototype {protoMnemonic = "CMPUNORDSD", protoOperands = [OpXMM,OpXMM_M64]}
                                             ;[(EncModrm_reg
                                               ,OperandReadWrite)
                                              ,(EncModrm_rm,OperandReadWrite)
                                              ,(EncIMM,OperandReadWrite)]
                                             ;64bit: True
                                             ;legacy: True
                                             ;alias for CMPSD} */
                
                ERASM_DECODER_DO_ACTION (2,
                                         Cmpunordsd,
                                         Just<OpXMM>,
                                         Just<EncModrm_reg>,
                                         Just<OpXMM_M64>,
                                         Just<EncModrm_rm>,
                                         Nothing,
                                         Just<EncIMM>);
            }
            case (4):
            {
                /* EncodedInstructionDefinition {{[REPNE]
                                              ;0F C2 
                                              ;Just Modrm
                                              ;Just RMBoth
                                              ;Nothing
                                              ;[IMM_IB_Const 4]
                                              ;Nothing
                                              ;Nothing}
                                             ;Prototype {protoMnemonic = "CMPNEQSD", protoOperands = [OpXMM,OpXMM_M64]}
                                             ;[(EncModrm_reg
                                               ,OperandReadWrite)
                                              ,(EncModrm_rm,OperandReadWrite)
                                              ,(EncIMM,OperandReadWrite)]
                                             ;64bit: True
                                             ;legacy: True
                                             ;alias for CMPSD} */
                
                ERASM_DECODER_DO_ACTION (2,
                                         Cmpneqsd,
                                         Just<OpXMM>,
                                         Just<EncModrm_reg>,
                                         Just<OpXMM_M64>,
                                         Just<EncModrm_rm>,
                                         Nothing,
                                         Just<EncIMM>);
            }
            case (5):
            {
                /* EncodedInstructionDefinition {{[REPNE]
                                              ;0F C2 
                                              ;Just Modrm
                                              ;Just RMBoth
                                              ;Nothing
                                              ;[IMM_IB_Const 5]
                                              ;Nothing
                                              ;Nothing}
                                             ;Prototype {protoMnemonic = "CMPNLTSD", protoOperands = [OpXMM,OpXMM_M64]}
                                             ;[(EncModrm_reg
                                               ,OperandReadWrite)
                                              ,(EncModrm_rm,OperandReadWrite)
                                              ,(EncIMM,OperandReadWrite)]
                                             ;64bit: True
                                             ;legacy: True
                                             ;alias for CMPSD} */
                
                ERASM_DECODER_DO_ACTION (2,
                                         Cmpnltsd,
                                         Just<OpXMM>,
                                         Just<EncModrm_reg>,
                                         Just<OpXMM_M64>,
                                         Just<EncModrm_rm>,
                                         Nothing,
                                         Just<EncIMM>);
            }
            case (6):
            {
                /* EncodedInstructionDefinition {{[REPNE]
                                              ;0F C2 
                                              ;Just Modrm
                                              ;Just RMBoth
                                              ;Nothing
                                              ;[IMM_IB_Const 6]
                                              ;Nothing
                                              ;Nothing}
                                             ;Prototype {protoMnemonic = "CMPNLESD", protoOperands = [OpXMM,OpXMM_M64]}
                                             ;[(EncModrm_reg
                                               ,OperandReadWrite)
                                              ,(EncModrm_rm,OperandReadWrite)
                                              ,(EncIMM,OperandReadWrite)]
                                             ;64bit: True
                                             ;legacy: True
                                             ;alias for CMPSD} */
                
                ERASM_DECODER_DO_ACTION (2,
                                         Cmpnlesd,
                                         Just<OpXMM>,
                                         Just<EncModrm_reg>,
                                         Just<OpXMM_M64>,
                                         Just<EncModrm_rm>,
                                         Nothing,
                                         Just<EncIMM>);
            }
            case (7):
            {
                /* EncodedInstructionDefinition {{[REPNE]
                                              ;0F C2 
                                              ;Just Modrm
                                              ;Just RMBoth
                                              ;Nothing
                                              ;[IMM_IB_Const 7]
                                              ;Nothing
                                              ;Nothing}
                                             ;Prototype {protoMnemonic = "CMPORDSD", protoOperands = [OpXMM,OpXMM_M64]}
                                             ;[(EncModrm_reg
                                               ,OperandReadWrite)
                                              ,(EncModrm_rm,OperandReadWrite)
                                              ,(EncIMM,OperandReadWrite)]
                                             ;64bit: True
                                             ;legacy: True
                                             ;alias for CMPSD} */
                
                ERASM_DECODER_DO_ACTION (2,
                                         Cmpordsd,
                                         Just<OpXMM>,
                                         Just<EncModrm_reg>,
                                         Just<OpXMM_M64>,
                                         Just<EncModrm_rm>,
                                         Nothing,
                                         Just<EncIMM>);
            }
            default:
            {
                /* EncodedInstructionDefinition {{[REPNE]
                                              ;0F C2 
                                              ;Just Modrm
                                              ;Just RMBoth
                                              ;Nothing
                                              ;[IMM_IB]
                                              ;Nothing
                                              ;Nothing}
                                             ;Prototype {protoMnemonic = "CMPSD", protoOperands = [OpXMM,OpXMM_M64,OpIMM8]}
                                             ;[(EncModrm_reg
                                               ,OperandReadWrite)
                                              ,(EncModrm_rm,OperandReadOnly)
                                              ,(EncIMM,OperandReadWrite)]
                                             ;64bit: True
                                             ;legacy: True
                                             ;Compare low double- precision floating-point value in xmm2/m64 and xmm1 using imm8 as comparison predicate.} */
                
                ERASM_DECODER_DO_ACTION (2,
                                         Cmpsd,
                                         Just<OpXMM>,
                                         Just<EncModrm_reg>,
                                         Just<OpXMM_M64>,
                                         Just<EncModrm_rm>,
                                         Just<OpIMM8>,
                                         Just<EncIMM>);
            }
         }
      else
         if (prefix.rep)
            switch (imm (p,is_addr32)) {
               case (0):
               {
                   /* EncodedInstructionDefinition {{[REP]
                                                 ;0F C2 
                                                 ;Just Modrm
                                                 ;Just RMBoth
                                                 ;Nothing
                                                 ;[IMM_IB_Const 0]
                                                 ;Nothing
                                                 ;Nothing}
                                                ;Prototype {protoMnemonic = "CMPEQSS", protoOperands = [OpXMM,OpXMM_M32]}
                                                ;[(EncModrm_reg
                                                  ,OperandReadWrite)
                                                 ,(EncModrm_rm,OperandReadWrite)
                                                 ,(EncIMM,OperandReadWrite)]
                                                ;64bit: True
                                                ;legacy: True
                                                ;alias for CMPSS} */
                   
                   ERASM_DECODER_DO_ACTION (2,
                                            Cmpeqss,
                                            Just<OpXMM>,
                                            Just<EncModrm_reg>,
                                            Just<OpXMM_M32>,
                                            Just<EncModrm_rm>,
                                            Nothing,
                                            Just<EncIMM>);
               }
               case (1):
               {
                   /* EncodedInstructionDefinition {{[REP]
                                                 ;0F C2 
                                                 ;Just Modrm
                                                 ;Just RMBoth
                                                 ;Nothing
                                                 ;[IMM_IB_Const 1]
                                                 ;Nothing
                                                 ;Nothing}
                                                ;Prototype {protoMnemonic = "CMPLTSS", protoOperands = [OpXMM,OpXMM_M32]}
                                                ;[(EncModrm_reg
                                                  ,OperandReadWrite)
                                                 ,(EncModrm_rm,OperandReadWrite)
                                                 ,(EncIMM,OperandReadWrite)]
                                                ;64bit: True
                                                ;legacy: True
                                                ;alias for CMPSS} */
                   
                   ERASM_DECODER_DO_ACTION (2,
                                            Cmpltss,
                                            Just<OpXMM>,
                                            Just<EncModrm_reg>,
                                            Just<OpXMM_M32>,
                                            Just<EncModrm_rm>,
                                            Nothing,
                                            Just<EncIMM>);
               }
               case (2):
               {
                   /* EncodedInstructionDefinition {{[REP]
                                                 ;0F C2 
                                                 ;Just Modrm
                                                 ;Just RMBoth
                                                 ;Nothing
                                                 ;[IMM_IB_Const 2]
                                                 ;Nothing
                                                 ;Nothing}
                                                ;Prototype {protoMnemonic = "CMPLESS", protoOperands = [OpXMM,OpXMM_M32]}
                                                ;[(EncModrm_reg
                                                  ,OperandReadWrite)
                                                 ,(EncModrm_rm,OperandReadWrite)
                                                 ,(EncIMM,OperandReadWrite)]
                                                ;64bit: True
                                                ;legacy: True
                                                ;alias for CMPSS} */
                   
                   ERASM_DECODER_DO_ACTION (2,
                                            Cmpless,
                                            Just<OpXMM>,
                                            Just<EncModrm_reg>,
                                            Just<OpXMM_M32>,
                                            Just<EncModrm_rm>,
                                            Nothing,
                                            Just<EncIMM>);
               }
               case (3):
               {
                   /* EncodedInstructionDefinition {{[REP]
                                                 ;0F C2 
                                                 ;Just Modrm
                                                 ;Just RMBoth
                                                 ;Nothing
                                                 ;[IMM_IB_Const 3]
                                                 ;Nothing
                                                 ;Nothing}
                                                ;Prototype {protoMnemonic = "CMPUNORDSS", protoOperands = [OpXMM,OpXMM_M32]}
                                                ;[(EncModrm_reg
                                                  ,OperandReadWrite)
                                                 ,(EncModrm_rm,OperandReadWrite)
                                                 ,(EncIMM,OperandReadWrite)]
                                                ;64bit: True
                                                ;legacy: True
                                                ;alias for CMPSS} */
                   
                   ERASM_DECODER_DO_ACTION (2,
                                            Cmpunordss,
                                            Just<OpXMM>,
                                            Just<EncModrm_reg>,
                                            Just<OpXMM_M32>,
                                            Just<EncModrm_rm>,
                                            Nothing,
                                            Just<EncIMM>);
               }
               case (4):
               {
                   /* EncodedInstructionDefinition {{[REP]
                                                 ;0F C2 
                                                 ;Just Modrm
                                                 ;Just RMBoth
                                                 ;Nothing
                                                 ;[IMM_IB_Const 4]
                                                 ;Nothing
                                                 ;Nothing}
                                                ;Prototype {protoMnemonic = "CMPNEQSS", protoOperands = [OpXMM,OpXMM_M32]}
                                                ;[(EncModrm_reg
                                                  ,OperandReadWrite)
                                                 ,(EncModrm_rm,OperandReadWrite)
                                                 ,(EncIMM,OperandReadWrite)]
                                                ;64bit: True
                                                ;legacy: True
                                                ;alias for CMPSS} */
                   
                   ERASM_DECODER_DO_ACTION (2,
                                            Cmpneqss,
                                            Just<OpXMM>,
                                            Just<EncModrm_reg>,
                                            Just<OpXMM_M32>,
                                            Just<EncModrm_rm>,
                                            Nothing,
                                            Just<EncIMM>);
               }
               case (5):
               {
                   /* EncodedInstructionDefinition {{[REP]
                                                 ;0F C2 
                                                 ;Just Modrm
                                                 ;Just RMBoth
                                                 ;Nothing
                                                 ;[IMM_IB_Const 5]
                                                 ;Nothing
                                                 ;Nothing}
                                                ;Prototype {protoMnemonic = "CMPNLTSS", protoOperands = [OpXMM,OpXMM_M32]}
                                                ;[(EncModrm_reg
                                                  ,OperandReadWrite)
                                                 ,(EncModrm_rm,OperandReadWrite)
                                                 ,(EncIMM,OperandReadWrite)]
                                                ;64bit: True
                                                ;legacy: True
                                                ;alias for CMPSS} */
                   
                   ERASM_DECODER_DO_ACTION (2,
                                            Cmpnltss,
                                            Just<OpXMM>,
                                            Just<EncModrm_reg>,
                                            Just<OpXMM_M32>,
                                            Just<EncModrm_rm>,
                                            Nothing,
                                            Just<EncIMM>);
               }
               case (6):
               {
                   /* EncodedInstructionDefinition {{[REP]
                                                 ;0F C2 
                                                 ;Just Modrm
                                                 ;Just RMBoth
                                                 ;Nothing
                                                 ;[IMM_IB_Const 6]
                                                 ;Nothing
                                                 ;Nothing}
                                                ;Prototype {protoMnemonic = "CMPNLESS", protoOperands = [OpXMM,OpXMM_M32]}
                                                ;[(EncModrm_reg
                                                  ,OperandReadWrite)
                                                 ,(EncModrm_rm,OperandReadWrite)
                                                 ,(EncIMM,OperandReadWrite)]
                                                ;64bit: True
                                                ;legacy: True
                                                ;alias for CMPSS} */
                   
                   ERASM_DECODER_DO_ACTION (2,
                                            Cmpnless,
                                            Just<OpXMM>,
                                            Just<EncModrm_reg>,
                                            Just<OpXMM_M32>,
                                            Just<EncModrm_rm>,
                                            Nothing,
                                            Just<EncIMM>);
               }
               case (7):
               {
                   /* EncodedInstructionDefinition {{[REP]
                                                 ;0F C2 
                                                 ;Just Modrm
                                                 ;Just RMBoth
                                                 ;Nothing
                                                 ;[IMM_IB_Const 7]
                                                 ;Nothing
                                                 ;Nothing}
                                                ;Prototype {protoMnemonic = "CMPORDSS", protoOperands = [OpXMM,OpXMM_M32]}
                                                ;[(EncModrm_reg
                                                  ,OperandReadWrite)
                                                 ,(EncModrm_rm,OperandReadWrite)
                                                 ,(EncIMM,OperandReadWrite)]
                                                ;64bit: True
                                                ;legacy: True
                                                ;alias for CMPSS} */
                   
                   ERASM_DECODER_DO_ACTION (2,
                                            Cmpordss,
                                            Just<OpXMM>,
                                            Just<EncModrm_reg>,
                                            Just<OpXMM_M32>,
                                            Just<EncModrm_rm>,
                                            Nothing,
                                            Just<EncIMM>);
               }
               default:
               {
                   /* EncodedInstructionDefinition {{[REP]
                                                 ;0F C2 
                                                 ;Just Modrm
                                                 ;Just RMBoth
                                                 ;Nothing
                                                 ;[IMM_IB]
                                                 ;Nothing
                                                 ;Nothing}
                                                ;Prototype {protoMnemonic = "CMPSS", protoOperands = [OpXMM,OpXMM_M32,OpIMM8]}
                                                ;[(EncModrm_reg
                                                  ,OperandReadWrite)
                                                 ,(EncModrm_rm,OperandReadOnly)
                                                 ,(EncIMM,OperandReadWrite)]
                                                ;64bit: True
                                                ;legacy: True
                                                ;Compare low single- precision floating-point value in xmm2/m32 and xmm1 using imm8 as comparison predicate.} */
                   
                   ERASM_DECODER_DO_ACTION (2,
                                            Cmpss,
                                            Just<OpXMM>,
                                            Just<EncModrm_reg>,
                                            Just<OpXMM_M32>,
                                            Just<EncModrm_rm>,
                                            Just<OpIMM8>,
                                            Just<EncIMM>);
               }
            }
         else
            if (prefix.operand_size)
               switch (imm (p,is_addr32)) {
                  case (0):
                  {
                      /* EncodedInstructionDefinition {{[OPERAND_SIZE]
                                                    ;0F C2 
                                                    ;Just Modrm
                                                    ;Just RMBoth
                                                    ;Nothing
                                                    ;[IMM_IB_Const 0]
                                                    ;Nothing
                                                    ;Nothing}
                                                   ;Prototype {protoMnemonic = "CMPEQPD", protoOperands = [OpXMM,OpXMM_M128]}
                                                   ;[(EncModrm_reg
                                                     ,OperandReadWrite)
                                                    ,(EncModrm_rm,OperandReadWrite)
                                                    ,(EncIMM,OperandReadWrite)]
                                                   ;64bit: True
                                                   ;legacy: True
                                                   ;alias for CMPPD} */
                      
                      ERASM_DECODER_DO_ACTION (2,
                                               Cmpeqpd,
                                               Just<OpXMM>,
                                               Just<EncModrm_reg>,
                                               Just<OpXMM_M128>,
                                               Just<EncModrm_rm>,
                                               Nothing,
                                               Just<EncIMM>);
                  }
                  case (1):
                  {
                      /* EncodedInstructionDefinition {{[OPERAND_SIZE]
                                                    ;0F C2 
                                                    ;Just Modrm
                                                    ;Just RMBoth
                                                    ;Nothing
                                                    ;[IMM_IB_Const 1]
                                                    ;Nothing
                                                    ;Nothing}
                                                   ;Prototype {protoMnemonic = "CMPLTPD", protoOperands = [OpXMM,OpXMM_M128]}
                                                   ;[(EncModrm_reg
                                                     ,OperandReadWrite)
                                                    ,(EncModrm_rm,OperandReadWrite)
                                                    ,(EncIMM,OperandReadWrite)]
                                                   ;64bit: True
                                                   ;legacy: True
                                                   ;alias for CMPPD} */
                      
                      ERASM_DECODER_DO_ACTION (2,
                                               Cmpltpd,
                                               Just<OpXMM>,
                                               Just<EncModrm_reg>,
                                               Just<OpXMM_M128>,
                                               Just<EncModrm_rm>,
                                               Nothing,
                                               Just<EncIMM>);
                  }
                  case (2):
                  {
                      /* EncodedInstructionDefinition {{[OPERAND_SIZE]
                                                    ;0F C2 
                                                    ;Just Modrm
                                                    ;Just RMBoth
                                                    ;Nothing
                                                    ;[IMM_IB_Const 2]
                                                    ;Nothing
                                                    ;Nothing}
                                                   ;Prototype {protoMnemonic = "CMPLEPD", protoOperands = [OpXMM,OpXMM_M128]}
                                                   ;[(EncModrm_reg
                                                     ,OperandReadWrite)
                                                    ,(EncModrm_rm,OperandReadWrite)
                                                    ,(EncIMM,OperandReadWrite)]
                                                   ;64bit: True
                                                   ;legacy: True
                                                   ;alias for CMPPD} */
                      
                      ERASM_DECODER_DO_ACTION (2,
                                               Cmplepd,
                                               Just<OpXMM>,
                                               Just<EncModrm_reg>,
                                               Just<OpXMM_M128>,
                                               Just<EncModrm_rm>,
                                               Nothing,
                                               Just<EncIMM>);
                  }
                  case (3):
                  {
                      /* EncodedInstructionDefinition {{[OPERAND_SIZE]
                                                    ;0F C2 
                                                    ;Just Modrm
                                                    ;Just RMBoth
                                                    ;Nothing
                                                    ;[IMM_IB_Const 3]
                                                    ;Nothing
                                                    ;Nothing}
                                                   ;Prototype {protoMnemonic = "CMPUNORDPD", protoOperands = [OpXMM,OpXMM_M128]}
                                                   ;[(EncModrm_reg
                                                     ,OperandReadWrite)
                                                    ,(EncModrm_rm,OperandReadWrite)
                                                    ,(EncIMM,OperandReadWrite)]
                                                   ;64bit: True
                                                   ;legacy: True
                                                   ;alias for CMPPD} */
                      
                      ERASM_DECODER_DO_ACTION (2,
                                               Cmpunordpd,
                                               Just<OpXMM>,
                                               Just<EncModrm_reg>,
                                               Just<OpXMM_M128>,
                                               Just<EncModrm_rm>,
                                               Nothing,
                                               Just<EncIMM>);
                  }
                  case (4):
                  {
                      /* EncodedInstructionDefinition {{[OPERAND_SIZE]
                                                    ;0F C2 
                                                    ;Just Modrm
                                                    ;Just RMBoth
                                                    ;Nothing
                                                    ;[IMM_IB_Const 4]
                                                    ;Nothing
                                                    ;Nothing}
                                                   ;Prototype {protoMnemonic = "CMPNEQPD", protoOperands = [OpXMM,OpXMM_M128]}
                                                   ;[(EncModrm_reg
                                                     ,OperandReadWrite)
                                                    ,(EncModrm_rm,OperandReadWrite)
                                                    ,(EncIMM,OperandReadWrite)]
                                                   ;64bit: True
                                                   ;legacy: True
                                                   ;alias for CMPPD} */
                      
                      ERASM_DECODER_DO_ACTION (2,
                                               Cmpneqpd,
                                               Just<OpXMM>,
                                               Just<EncModrm_reg>,
                                               Just<OpXMM_M128>,
                                               Just<EncModrm_rm>,
                                               Nothing,
                                               Just<EncIMM>);
                  }
                  case (5):
                  {
                      /* EncodedInstructionDefinition {{[OPERAND_SIZE]
                                                    ;0F C2 
                                                    ;Just Modrm
                                                    ;Just RMBoth
                                                    ;Nothing
                                                    ;[IMM_IB_Const 5]
                                                    ;Nothing
                                                    ;Nothing}
                                                   ;Prototype {protoMnemonic = "CMPNLTPD", protoOperands = [OpXMM,OpXMM_M128]}
                                                   ;[(EncModrm_reg
                                                     ,OperandReadWrite)
                                                    ,(EncModrm_rm,OperandReadWrite)
                                                    ,(EncIMM,OperandReadWrite)]
                                                   ;64bit: True
                                                   ;legacy: True
                                                   ;alias for CMPPD} */
                      
                      ERASM_DECODER_DO_ACTION (2,
                                               Cmpnltpd,
                                               Just<OpXMM>,
                                               Just<EncModrm_reg>,
                                               Just<OpXMM_M128>,
                                               Just<EncModrm_rm>,
                                               Nothing,
                                               Just<EncIMM>);
                  }
                  case (6):
                  {
                      /* EncodedInstructionDefinition {{[OPERAND_SIZE]
                                                    ;0F C2 
                                                    ;Just Modrm
                                                    ;Just RMBoth
                                                    ;Nothing
                                                    ;[IMM_IB_Const 6]
                                                    ;Nothing
                                                    ;Nothing}
                                                   ;Prototype {protoMnemonic = "CMPNLEPD", protoOperands = [OpXMM,OpXMM_M128]}
                                                   ;[(EncModrm_reg
                                                     ,OperandReadWrite)
                                                    ,(EncModrm_rm,OperandReadWrite)
                                                    ,(EncIMM,OperandReadWrite)]
                                                   ;64bit: True
                                                   ;legacy: True
                                                   ;alias for CMPPD} */
                      
                      ERASM_DECODER_DO_ACTION (2,
                                               Cmpnlepd,
                                               Just<OpXMM>,
                                               Just<EncModrm_reg>,
                                               Just<OpXMM_M128>,
                                               Just<EncModrm_rm>,
                                               Nothing,
                                               Just<EncIMM>);
                  }
                  case (7):
                  {
                      /* EncodedInstructionDefinition {{[OPERAND_SIZE]
                                                    ;0F C2 
                                                    ;Just Modrm
                                                    ;Just RMBoth
                                                    ;Nothing
                                                    ;[IMM_IB_Const 7]
                                                    ;Nothing
                                                    ;Nothing}
                                                   ;Prototype {protoMnemonic = "CMPORDPD", protoOperands = [OpXMM,OpXMM_M128]}
                                                   ;[(EncModrm_reg
                                                     ,OperandReadWrite)
                                                    ,(EncModrm_rm,OperandReadWrite)
                                                    ,(EncIMM,OperandReadWrite)]
                                                   ;64bit: True
                                                   ;legacy: True
                                                   ;alias for CMPPD} */
                      
                      ERASM_DECODER_DO_ACTION (2,
                                               Cmpordpd,
                                               Just<OpXMM>,
                                               Just<EncModrm_reg>,
                                               Just<OpXMM_M128>,
                                               Just<EncModrm_rm>,
                                               Nothing,
                                               Just<EncIMM>);
                  }
                  default:
                  {
                      /* EncodedInstructionDefinition {{[OPERAND_SIZE]
                                                    ;0F C2 
                                                    ;Just Modrm
                                                    ;Just RMBoth
                                                    ;Nothing
                                                    ;[IMM_IB]
                                                    ;Nothing
                                                    ;Nothing}
                                                   ;Prototype {protoMnemonic = "CMPPD", protoOperands = [OpXMM,OpXMM_M128,OpIMM8]}
                                                   ;[(EncModrm_reg
                                                     ,OperandReadWrite)
                                                    ,(EncModrm_rm,OperandReadOnly)
                                                    ,(EncIMM,OperandReadWrite)]
                                                   ;64bit: True
                                                   ;legacy: True
                                                   ;Compare packed double- precision floating-point values in xmm2/m128 and xmm1 using imm8 as comparison predicate.} */
                      
                      ERASM_DECODER_DO_ACTION (2,
                                               Cmppd,
                                               Just<OpXMM>,
                                               Just<EncModrm_reg>,
                                               Just<OpXMM_M128>,
                                               Just<EncModrm_rm>,
                                               Just<OpIMM8>,
                                               Just<EncIMM>);
                  }
               }
            else
               switch (imm (p,is_addr32)) {
                  case (0):
                  {
                      /* EncodedInstructionDefinition {{[]
                                                    ;0F C2 
                                                    ;Just Modrm
                                                    ;Just RMBoth
                                                    ;Nothing
                                                    ;[IMM_IB_Const 0]
                                                    ;Nothing
                                                    ;Nothing}
                                                   ;Prototype {protoMnemonic = "CMPEQPS", protoOperands = [OpXMM,OpXMM_M128]}
                                                   ;[(EncModrm_reg
                                                     ,OperandReadWrite)
                                                    ,(EncModrm_rm,OperandReadWrite)
                                                    ,(EncIMM,OperandReadWrite)]
                                                   ;64bit: True
                                                   ;legacy: True
                                                   ;alias for CMPPS} */
                      
                      ERASM_DECODER_DO_ACTION (2,
                                               Cmpeqps,
                                               Just<OpXMM>,
                                               Just<EncModrm_reg>,
                                               Just<OpXMM_M128>,
                                               Just<EncModrm_rm>,
                                               Nothing,
                                               Just<EncIMM>);
                  }
                  case (1):
                  {
                      /* EncodedInstructionDefinition {{[]
                                                    ;0F C2 
                                                    ;Just Modrm
                                                    ;Just RMBoth
                                                    ;Nothing
                                                    ;[IMM_IB_Const 1]
                                                    ;Nothing
                                                    ;Nothing}
                                                   ;Prototype {protoMnemonic = "CMPLTPS", protoOperands = [OpXMM,OpXMM_M128]}
                                                   ;[(EncModrm_reg
                                                     ,OperandReadWrite)
                                                    ,(EncModrm_rm,OperandReadWrite)
                                                    ,(EncIMM,OperandReadWrite)]
                                                   ;64bit: True
                                                   ;legacy: True
                                                   ;alias for CMPPS} */
                      
                      ERASM_DECODER_DO_ACTION (2,
                                               Cmpltps,
                                               Just<OpXMM>,
                                               Just<EncModrm_reg>,
                                               Just<OpXMM_M128>,
                                               Just<EncModrm_rm>,
                                               Nothing,
                                               Just<EncIMM>);
                  }
                  case (2):
                  {
                      /* EncodedInstructionDefinition {{[]
                                                    ;0F C2 
                                                    ;Just Modrm
                                                    ;Just RMBoth
                                                    ;Nothing
                                                    ;[IMM_IB_Const 2]
                                                    ;Nothing
                                                    ;Nothing}
                                                   ;Prototype {protoMnemonic = "CMPLEPS", protoOperands = [OpXMM,OpXMM_M128]}
                                                   ;[(EncModrm_reg
                                                     ,OperandReadWrite)
                                                    ,(EncModrm_rm,OperandReadWrite)
                                                    ,(EncIMM,OperandReadWrite)]
                                                   ;64bit: True
                                                   ;legacy: True
                                                   ;alias for CMPPS} */
                      
                      ERASM_DECODER_DO_ACTION (2,
                                               Cmpleps,
                                               Just<OpXMM>,
                                               Just<EncModrm_reg>,
                                               Just<OpXMM_M128>,
                                               Just<EncModrm_rm>,
                                               Nothing,
                                               Just<EncIMM>);
                  }
                  case (3):
                  {
                      /* EncodedInstructionDefinition {{[]
                                                    ;0F C2 
                                                    ;Just Modrm
                                                    ;Just RMBoth
                                                    ;Nothing
                                                    ;[IMM_IB_Const 3]
                                                    ;Nothing
                                                    ;Nothing}
                                                   ;Prototype {protoMnemonic = "CMPUNORDPS", protoOperands = [OpXMM,OpXMM_M128]}
                                                   ;[(EncModrm_reg
                                                     ,OperandReadWrite)
                                                    ,(EncModrm_rm,OperandReadWrite)
                                                    ,(EncIMM,OperandReadWrite)]
                                                   ;64bit: True
                                                   ;legacy: True
                                                   ;alias for CMPPS} */
                      
                      ERASM_DECODER_DO_ACTION (2,
                                               Cmpunordps,
                                               Just<OpXMM>,
                                               Just<EncModrm_reg>,
                                               Just<OpXMM_M128>,
                                               Just<EncModrm_rm>,
                                               Nothing,
                                               Just<EncIMM>);
                  }
                  case (4):
                  {
                      /* EncodedInstructionDefinition {{[]
                                                    ;0F C2 
                                                    ;Just Modrm
                                                    ;Just RMBoth
                                                    ;Nothing
                                                    ;[IMM_IB_Const 4]
                                                    ;Nothing
                                                    ;Nothing}
                                                   ;Prototype {protoMnemonic = "CMPNEQPS", protoOperands = [OpXMM,OpXMM_M128]}
                                                   ;[(EncModrm_reg
                                                     ,OperandReadWrite)
                                                    ,(EncModrm_rm,OperandReadWrite)
                                                    ,(EncIMM,OperandReadWrite)]
                                                   ;64bit: True
                                                   ;legacy: True
                                                   ;alias for CMPPS} */
                      
                      ERASM_DECODER_DO_ACTION (2,
                                               Cmpneqps,
                                               Just<OpXMM>,
                                               Just<EncModrm_reg>,
                                               Just<OpXMM_M128>,
                                               Just<EncModrm_rm>,
                                               Nothing,
                                               Just<EncIMM>);
                  }
                  case (5):
                  {
                      /* EncodedInstructionDefinition {{[]
                                                    ;0F C2 
                                                    ;Just Modrm
                                                    ;Just RMBoth
                                                    ;Nothing
                                                    ;[IMM_IB_Const 5]
                                                    ;Nothing
                                                    ;Nothing}
                                                   ;Prototype {protoMnemonic = "CMPNLTPS", protoOperands = [OpXMM,OpXMM_M128]}
                                                   ;[(EncModrm_reg
                                                     ,OperandReadWrite)
                                                    ,(EncModrm_rm,OperandReadWrite)
                                                    ,(EncIMM,OperandReadWrite)]
                                                   ;64bit: True
                                                   ;legacy: True
                                                   ;alias for CMPPS} */
                      
                      ERASM_DECODER_DO_ACTION (2,
                                               Cmpnltps,
                                               Just<OpXMM>,
                                               Just<EncModrm_reg>,
                                               Just<OpXMM_M128>,
                                               Just<EncModrm_rm>,
                                               Nothing,
                                               Just<EncIMM>);
                  }
                  case (6):
                  {
                      /* EncodedInstructionDefinition {{[]
                                                    ;0F C2 
                                                    ;Just Modrm
                                                    ;Just RMBoth
                                                    ;Nothing
                                                    ;[IMM_IB_Const 6]
                                                    ;Nothing
                                                    ;Nothing}
                                                   ;Prototype {protoMnemonic = "CMPNLEPS", protoOperands = [OpXMM,OpXMM_M128]}
                                                   ;[(EncModrm_reg
                                                     ,OperandReadWrite)
                                                    ,(EncModrm_rm,OperandReadWrite)
                                                    ,(EncIMM,OperandReadWrite)]
                                                   ;64bit: True
                                                   ;legacy: True
                                                   ;alias for CMPPS} */
                      
                      ERASM_DECODER_DO_ACTION (2,
                                               Cmpnleps,
                                               Just<OpXMM>,
                                               Just<EncModrm_reg>,
                                               Just<OpXMM_M128>,
                                               Just<EncModrm_rm>,
                                               Nothing,
                                               Just<EncIMM>);
                  }
                  case (7):
                  {
                      /* EncodedInstructionDefinition {{[]
                                                    ;0F C2 
                                                    ;Just Modrm
                                                    ;Just RMBoth
                                                    ;Nothing
                                                    ;[IMM_IB_Const 7]
                                                    ;Nothing
                                                    ;Nothing}
                                                   ;Prototype {protoMnemonic = "CMPORDPS", protoOperands = [OpXMM,OpXMM_M128]}
                                                   ;[(EncModrm_reg
                                                     ,OperandReadWrite)
                                                    ,(EncModrm_rm,OperandReadWrite)
                                                    ,(EncIMM,OperandReadWrite)]
                                                   ;64bit: True
                                                   ;legacy: True
                                                   ;alias for CMPPS} */
                      
                      ERASM_DECODER_DO_ACTION (2,
                                               Cmpordps,
                                               Just<OpXMM>,
                                               Just<EncModrm_reg>,
                                               Just<OpXMM_M128>,
                                               Just<EncModrm_rm>,
                                               Nothing,
                                               Just<EncIMM>);
                  }
                  default:
                  {
                      /* EncodedInstructionDefinition {{[]
                                                    ;0F C2 
                                                    ;Just Modrm
                                                    ;Just RMBoth
                                                    ;Nothing
                                                    ;[IMM_IB]
                                                    ;Nothing
                                                    ;Nothing}
                                                   ;Prototype {protoMnemonic = "CMPPS", protoOperands = [OpXMM,OpXMM_M128,OpIMM8]}
                                                   ;[(EncModrm_reg
                                                     ,OperandReadWrite)
                                                    ,(EncModrm_rm,OperandReadOnly)
                                                    ,(EncIMM,OperandReadWrite)]
                                                   ;64bit: True
                                                   ;legacy: True
                                                   ;Compare packed single- precision floating-point values in xmm2/mem and xmm1 using imm8 as comparison predicate.} */
                      
                      ERASM_DECODER_DO_ACTION (2,
                                               Cmpps,
                                               Just<OpXMM>,
                                               Just<EncModrm_reg>,
                                               Just<OpXMM_M128>,
                                               Just<EncModrm_rm>,
                                               Just<OpIMM8>,
                                               Just<EncIMM>);
                  }
               }
      case (0xc3):
      if (!modrm_mod3 (p))
         {
             /* EncodedInstructionDefinition {{[]
                                           ;0F C3 
                                           ;Just Modrm
                                           ;Just RMMemOnly
                                           ;Nothing
                                           ;[]
                                           ;Nothing
                                           ;Nothing}
                                          ;Prototype {protoMnemonic = "MOVNTI", protoOperands = [OpM32,OpR32]}
                                          ;[(EncModrm_rm,OperandReadWrite)
                                           ,(EncModrm_reg,OperandReadOnly)]
                                          ;64bit: True
                                          ;legacy: True
                                          ;Move doubleword from r32 to m32 using non-temporal hint.} */
             
             ERASM_DECODER_DO_ACTION (2,
                                      Movnti,
                                      Just<OpM32>,
                                      Just<EncModrm_rm_mem>,
                                      Just<OpR32>,
                                      Just<EncModrm_reg>,
                                      Nothing,
                                      Nothing);
         }
      else
         goto decode_error;
      case (0xc4):
      if (prefix.operand_size)
         {
             /* EncodedInstructionDefinition {{[OPERAND_SIZE]
                                           ;0F C4 
                                           ;Just Modrm
                                           ;Just RMBoth
                                           ;Nothing
                                           ;[IMM_IB]
                                           ;Nothing
                                           ;Nothing}
                                          ;Prototype {protoMnemonic = "PINSRW", protoOperands = [OpXMM,OpR32_M16,OpIMM8]}
                                          ;[(EncModrm_reg
                                            ,OperandReadWrite)
                                           ,(EncModrm_rm,OperandReadOnly)
                                           ,(EncIMM,OperandReadWrite)]
                                          ;64bit: True
                                          ;legacy: True
                                          ;Move the low word of r32 or from m16 into xmm at the word position specified by imm8.} */
             
             ERASM_DECODER_DO_ACTION (2,
                                      Pinsrw,
                                      Just<OpXMM>,
                                      Just<EncModrm_reg>,
                                      Just<OpR32_M16>,
                                      Just<EncModrm_rm>,
                                      Just<OpIMM8>,
                                      Just<EncIMM>);
         }
      else
         {
             /* EncodedInstructionDefinition {{[]
                                           ;0F C4 
                                           ;Just Modrm
                                           ;Just RMBoth
                                           ;Nothing
                                           ;[IMM_IB]
                                           ;Nothing
                                           ;Nothing}
                                          ;Prototype {protoMnemonic = "PINSRW", protoOperands = [OpMM,OpR32_M16,OpIMM8]}
                                          ;[(EncModrm_reg
                                            ,OperandReadWrite)
                                           ,(EncModrm_rm,OperandReadOnly)
                                           ,(EncIMM,OperandReadWrite)]
                                          ;64bit: True
                                          ;legacy: True
                                          ;Insert the low word from r32 or from m16 into mm at the word position specified by imm8} */
             
             ERASM_DECODER_DO_ACTION (2,
                                      Pinsrw,
                                      Just<OpMM>,
                                      Just<EncModrm_reg>,
                                      Just<OpR32_M16>,
                                      Just<EncModrm_rm>,
                                      Just<OpIMM8>,
                                      Just<EncIMM>);
         }
      case (0xc5):
      if (modrm_mod3 (p))
         if (prefix.operand_size)
            {
                /* EncodedInstructionDefinition {{[OPERAND_SIZE]
                                              ;0F C5 
                                              ;Just Modrm
                                              ;Just RMRegOnly
                                              ;Nothing
                                              ;[IMM_IB]
                                              ;Nothing
                                              ;Nothing}
                                             ;Prototype {protoMnemonic = "PEXTRW", protoOperands = [OpRDefault,OpXMM,OpIMM8]}
                                             ;[(EncModrm_reg
                                               ,OperandReadWrite)
                                              ,(EncModrm_rm,OperandReadOnly)
                                              ,(EncIMM,OperandReadWrite)]
                                             ;64bit: True
                                             ;legacy: True
                                             ;Extract the word specified by imm8 from xmm and move it to reg, bits 15-0. The upper bits of r32 or r64 is zeroed.} */
                
                ERASM_DECODER_DO_ACTION (2,
                                         Pextrw,
                                         Just<OpRDefault>,
                                         Just<EncModrm_reg>,
                                         Just<OpXMM>,
                                         Just<EncModrm_rm_reg>,
                                         Just<OpIMM8>,
                                         Just<EncIMM>);
            }
         else
            {
                /* EncodedInstructionDefinition {{[]
                                              ;0F C5 
                                              ;Just Modrm
                                              ;Just RMRegOnly
                                              ;Nothing
                                              ;[IMM_IB]
                                              ;Nothing
                                              ;Nothing}
                                             ;Prototype {protoMnemonic = "PEXTRW", protoOperands = [OpRDefault,OpMM,OpIMM8]}
                                             ;[(EncModrm_reg
                                               ,OperandReadWrite)
                                              ,(EncModrm_rm,OperandReadOnly)
                                              ,(EncIMM,OperandReadWrite)]
                                             ;64bit: True
                                             ;legacy: True
                                             ;Extract the word specified by imm8 from mm and move it to reg, bits 15-0. The upper bits of r32 or r64 is zeroed.} */
                
                ERASM_DECODER_DO_ACTION (2,
                                         Pextrw,
                                         Just<OpRDefault>,
                                         Just<EncModrm_reg>,
                                         Just<OpMM>,
                                         Just<EncModrm_rm_reg>,
                                         Just<OpIMM8>,
                                         Just<EncIMM>);
            }
      else
         goto decode_error;
      case (0xc6):
      if (prefix.operand_size)
         {
             /* EncodedInstructionDefinition {{[OPERAND_SIZE]
                                           ;0F C6 
                                           ;Just Modrm
                                           ;Just RMBoth
                                           ;Nothing
                                           ;[IMM_IB]
                                           ;Nothing
                                           ;Nothing}
                                          ;Prototype {protoMnemonic = "SHUFPD", protoOperands = [OpXMM,OpXMM_M128,OpIMM8]}
                                          ;[(EncModrm_reg
                                            ,OperandReadWrite)
                                           ,(EncModrm_rm,OperandReadOnly)
                                           ,(EncIMM,OperandReadWrite)]
                                          ;64bit: True
                                          ;legacy: True
                                          ;Shuffle packed double- precision floating-point values selected by imm8 from xmm1 and xmm2/m128 to xmm1.} */
             
             ERASM_DECODER_DO_ACTION (2,
                                      Shufpd,
                                      Just<OpXMM>,
                                      Just<EncModrm_reg>,
                                      Just<OpXMM_M128>,
                                      Just<EncModrm_rm>,
                                      Just<OpIMM8>,
                                      Just<EncIMM>);
         }
      else
         {
             /* EncodedInstructionDefinition {{[]
                                           ;0F C6 
                                           ;Just Modrm
                                           ;Just RMBoth
                                           ;Nothing
                                           ;[IMM_IB]
                                           ;Nothing
                                           ;Nothing}
                                          ;Prototype {protoMnemonic = "SHUFPS", protoOperands = [OpXMM,OpXMM_M128,OpIMM8]}
                                          ;[(EncModrm_reg
                                            ,OperandReadWrite)
                                           ,(EncModrm_rm,OperandReadOnly)
                                           ,(EncIMM,OperandReadWrite)]
                                          ;64bit: True
                                          ;legacy: True
                                          ;Shuffle packed single- precision floating-point values selected by imm8 from xmm1 and xmm1/m128 to xmm1.} */
             
             ERASM_DECODER_DO_ACTION (2,
                                      Shufps,
                                      Just<OpXMM>,
                                      Just<EncModrm_reg>,
                                      Just<OpXMM_M128>,
                                      Just<EncModrm_rm>,
                                      Just<OpIMM8>,
                                      Just<EncIMM>);
         }
      case (0xc7):
      if (!modrm_mod3 (p))
         switch (modrm_reg_op (p)) {
            case (1):
            {
                /* EncodedInstructionDefinition {{[]
                                              ;0F C7 
                                              ;Just (ModrmDigit 1)
                                              ;Just RMMemOnly
                                              ;Nothing
                                              ;[]
                                              ;Nothing
                                              ;Nothing}
                                             ;Prototype {protoMnemonic = "CMPXCHG8B", protoOperands = [OpM64]}
                                             ;[(EncModrm_rm
                                               ,OperandReadWrite)]
                                             ;64bit: True
                                             ;legacy: True
                                             ;Compare EDX:EAX with m64. If equal, set ZF and load ECX:EBX into m64. Else, clear ZF and load m64 into EDX:EAX.} */
                
                ERASM_DECODER_DO_ACTION (2,
                                         Cmpxchg8b,
                                         Just<OpM64>,
                                         Just<EncModrm_rm_mem>,
                                         Nothing,
                                         Nothing,
                                         Nothing,
                                         Nothing);
            }
            case (6):
            if (prefix.rep)
               {
                   /* EncodedInstructionDefinition {{[REP]
                                                 ;0F C7 
                                                 ;Just (ModrmDigit 6)
                                                 ;Just RMMemOnly
                                                 ;Nothing
                                                 ;[]
                                                 ;Nothing
                                                 ;Nothing}
                                                ;Prototype {protoMnemonic = "VMXON", protoOperands = [OpM64]}
                                                ;[(EncModrm_rm
                                                  ,OperandReadWrite)]
                                                ;64bit: True
                                                ;legacy: True
                                                ;Enter VMX root operation.} */
                   
                   ERASM_DECODER_DO_ACTION (2,
                                            Vmxon,
                                            Just<OpM64>,
                                            Just<EncModrm_rm_mem>,
                                            Nothing,
                                            Nothing,
                                            Nothing,
                                            Nothing);
               }
            else
               if (prefix.operand_size)
                  {
                      /* EncodedInstructionDefinition {{[OPERAND_SIZE]
                                                    ;0F C7 
                                                    ;Just (ModrmDigit 6)
                                                    ;Just RMMemOnly
                                                    ;Nothing
                                                    ;[]
                                                    ;Nothing
                                                    ;Nothing}
                                                   ;Prototype {protoMnemonic = "VMCLEAR", protoOperands = [OpM64]}
                                                   ;[(EncModrm_rm
                                                     ,OperandReadWrite)]
                                                   ;64bit: True
                                                   ;legacy: True
                                                   ;Copy VMCS data to VMCS region in memory.} */
                      
                      ERASM_DECODER_DO_ACTION (2,
                                               Vmclear,
                                               Just<OpM64>,
                                               Just<EncModrm_rm_mem>,
                                               Nothing,
                                               Nothing,
                                               Nothing,
                                               Nothing);
                  }
               else
                  {
                      /* EncodedInstructionDefinition {{[]
                                                    ;0F C7 
                                                    ;Just (ModrmDigit 6)
                                                    ;Just RMMemOnly
                                                    ;Nothing
                                                    ;[]
                                                    ;Nothing
                                                    ;Nothing}
                                                   ;Prototype {protoMnemonic = "VMPTRLD", protoOperands = [OpM64]}
                                                   ;[(EncModrm_rm
                                                     ,OperandReadWrite)]
                                                   ;64bit: True
                                                   ;legacy: True
                                                   ;Loads the current VMCS pointer from memory.} */
                      
                      ERASM_DECODER_DO_ACTION (2,
                                               Vmptrld,
                                               Just<OpM64>,
                                               Just<EncModrm_rm_mem>,
                                               Nothing,
                                               Nothing,
                                               Nothing,
                                               Nothing);
                  }
            case (7):
            {
                /* EncodedInstructionDefinition {{[]
                                              ;0F C7 
                                              ;Just (ModrmDigit 7)
                                              ;Just RMMemOnly
                                              ;Nothing
                                              ;[]
                                              ;Nothing
                                              ;Nothing}
                                             ;Prototype {protoMnemonic = "VMPTRST", protoOperands = [OpM64]}
                                             ;[(EncModrm_rm
                                               ,OperandReadWrite)]
                                             ;64bit: True
                                             ;legacy: True
                                             ;Stores the current VMCS pointer into memory.} */
                
                ERASM_DECODER_DO_ACTION (2,
                                         Vmptrst,
                                         Just<OpM64>,
                                         Just<EncModrm_rm_mem>,
                                         Nothing,
                                         Nothing,
                                         Nothing,
                                         Nothing);
            }
            
         }
      else
         goto decode_error;
      case (0xd0):
      if (prefix.repne)
         {
             /* EncodedInstructionDefinition {{[REPNE]
                                           ;0F D0 
                                           ;Just Modrm
                                           ;Just RMBoth
                                           ;Nothing
                                           ;[]
                                           ;Nothing
                                           ;Nothing}
                                          ;Prototype {protoMnemonic = "ADDSUBPS", protoOperands = [OpXMM,OpXMM_M128]}
                                          ;[(EncModrm_reg
                                            ,OperandReadWrite)
                                           ,(EncModrm_rm,OperandReadOnly)]
                                          ;64bit: True
                                          ;legacy: True
                                          ;Add/subtract single- precision floating-point values from xmm2/m128 to xmm1.} */
             
             ERASM_DECODER_DO_ACTION (2,
                                      Addsubps,
                                      Just<OpXMM>,
                                      Just<EncModrm_reg>,
                                      Just<OpXMM_M128>,
                                      Just<EncModrm_rm>,
                                      Nothing,
                                      Nothing);
         }
      else
         if (prefix.operand_size)
            {
                /* EncodedInstructionDefinition {{[OPERAND_SIZE]
                                              ;0F D0 
                                              ;Just Modrm
                                              ;Just RMBoth
                                              ;Nothing
                                              ;[]
                                              ;Nothing
                                              ;Nothing}
                                             ;Prototype {protoMnemonic = "ADDSUBPD", protoOperands = [OpXMM,OpXMM_M128]}
                                             ;[(EncModrm_reg
                                               ,OperandReadWrite)
                                              ,(EncModrm_rm,OperandReadOnly)]
                                             ;64bit: True
                                             ;legacy: True
                                             ;Add/subtract double- precision floating-point values from xmm2/m128 to xmm1.} */
                
                ERASM_DECODER_DO_ACTION (2,
                                         Addsubpd,
                                         Just<OpXMM>,
                                         Just<EncModrm_reg>,
                                         Just<OpXMM_M128>,
                                         Just<EncModrm_rm>,
                                         Nothing,
                                         Nothing);
            }
         else
            goto decode_error;
      case (0xd1):
      if (prefix.operand_size)
         {
             /* EncodedInstructionDefinition {{[OPERAND_SIZE]
                                           ;0F D1 
                                           ;Just Modrm
                                           ;Just RMBoth
                                           ;Nothing
                                           ;[]
                                           ;Nothing
                                           ;Nothing}
                                          ;Prototype {protoMnemonic = "PSRLW", protoOperands = [OpXMM,OpXMM_M128]}
                                          ;[(EncModrm_reg
                                            ,OperandReadWrite)
                                           ,(EncModrm_rm,OperandReadOnly)]
                                          ;64bit: True
                                          ;legacy: True
                                          ;Shift words in xmm1 right by amount specified in xmm2/m128 while shifting in 0s.} */
             
             ERASM_DECODER_DO_ACTION (2,
                                      Psrlw,
                                      Just<OpXMM>,
                                      Just<EncModrm_reg>,
                                      Just<OpXMM_M128>,
                                      Just<EncModrm_rm>,
                                      Nothing,
                                      Nothing);
         }
      else
         {
             /* EncodedInstructionDefinition {{[]
                                           ;0F D1 
                                           ;Just Modrm
                                           ;Just RMBoth
                                           ;Nothing
                                           ;[]
                                           ;Nothing
                                           ;Nothing}
                                          ;Prototype {protoMnemonic = "PSRLW", protoOperands = [OpMM,OpMM_M64]}
                                          ;[(EncModrm_reg
                                            ,OperandReadWrite)
                                           ,(EncModrm_rm,OperandReadOnly)]
                                          ;64bit: True
                                          ;legacy: True
                                          ;Shift words in mm right by amount specified in mm/m64 while shifting in 0s.} */
             
             ERASM_DECODER_DO_ACTION (2,
                                      Psrlw,
                                      Just<OpMM>,
                                      Just<EncModrm_reg>,
                                      Just<OpMM_M64>,
                                      Just<EncModrm_rm>,
                                      Nothing,
                                      Nothing);
         }
      case (0xd2):
      if (prefix.operand_size)
         {
             /* EncodedInstructionDefinition {{[OPERAND_SIZE]
                                           ;0F D2 
                                           ;Just Modrm
                                           ;Just RMBoth
                                           ;Nothing
                                           ;[]
                                           ;Nothing
                                           ;Nothing}
                                          ;Prototype {protoMnemonic = "PSRLD", protoOperands = [OpXMM,OpXMM_M128]}
                                          ;[(EncModrm_reg
                                            ,OperandReadWrite)
                                           ,(EncModrm_rm,OperandReadOnly)]
                                          ;64bit: True
                                          ;legacy: True
                                          ;Shift doublewords in xmm1 right by amount specified in xmm2 /m128 while shifting in 0s.} */
             
             ERASM_DECODER_DO_ACTION (2,
                                      Psrld,
                                      Just<OpXMM>,
                                      Just<EncModrm_reg>,
                                      Just<OpXMM_M128>,
                                      Just<EncModrm_rm>,
                                      Nothing,
                                      Nothing);
         }
      else
         {
             /* EncodedInstructionDefinition {{[]
                                           ;0F D2 
                                           ;Just Modrm
                                           ;Just RMBoth
                                           ;Nothing
                                           ;[]
                                           ;Nothing
                                           ;Nothing}
                                          ;Prototype {protoMnemonic = "PSRLD", protoOperands = [OpMM,OpMM_M64]}
                                          ;[(EncModrm_reg
                                            ,OperandReadWrite)
                                           ,(EncModrm_rm,OperandReadOnly)]
                                          ;64bit: True
                                          ;legacy: True
                                          ;Shift doublewords in mm right by amount specified in mm/m64 while shifting in 0s.} */
             
             ERASM_DECODER_DO_ACTION (2,
                                      Psrld,
                                      Just<OpMM>,
                                      Just<EncModrm_reg>,
                                      Just<OpMM_M64>,
                                      Just<EncModrm_rm>,
                                      Nothing,
                                      Nothing);
         }
      case (0xd3):
      if (prefix.operand_size)
         {
             /* EncodedInstructionDefinition {{[OPERAND_SIZE]
                                           ;0F D3 
                                           ;Just Modrm
                                           ;Just RMBoth
                                           ;Nothing
                                           ;[]
                                           ;Nothing
                                           ;Nothing}
                                          ;Prototype {protoMnemonic = "PSRLQ", protoOperands = [OpXMM,OpXMM_M128]}
                                          ;[(EncModrm_reg
                                            ,OperandReadWrite)
                                           ,(EncModrm_rm,OperandReadOnly)]
                                          ;64bit: True
                                          ;legacy: True
                                          ;Shift quadwords in xmm1 right by amount specified in xmm2/m128 while shifting in 0s.} */
             
             ERASM_DECODER_DO_ACTION (2,
                                      Psrlq,
                                      Just<OpXMM>,
                                      Just<EncModrm_reg>,
                                      Just<OpXMM_M128>,
                                      Just<EncModrm_rm>,
                                      Nothing,
                                      Nothing);
         }
      else
         {
             /* EncodedInstructionDefinition {{[]
                                           ;0F D3 
                                           ;Just Modrm
                                           ;Just RMBoth
                                           ;Nothing
                                           ;[]
                                           ;Nothing
                                           ;Nothing}
                                          ;Prototype {protoMnemonic = "PSRLQ", protoOperands = [OpMM,OpMM_M64]}
                                          ;[(EncModrm_reg
                                            ,OperandReadWrite)
                                           ,(EncModrm_rm,OperandReadOnly)]
                                          ;64bit: True
                                          ;legacy: True
                                          ;Shift mm right by amount specified in mm/m64 while shifting in 0s.} */
             
             ERASM_DECODER_DO_ACTION (2,
                                      Psrlq,
                                      Just<OpMM>,
                                      Just<EncModrm_reg>,
                                      Just<OpMM_M64>,
                                      Just<EncModrm_rm>,
                                      Nothing,
                                      Nothing);
         }
      case (0xd4):
      if (prefix.operand_size)
         {
             /* EncodedInstructionDefinition {{[OPERAND_SIZE]
                                           ;0F D4 
                                           ;Just Modrm
                                           ;Just RMBoth
                                           ;Nothing
                                           ;[]
                                           ;Nothing
                                           ;Nothing}
                                          ;Prototype {protoMnemonic = "PADDQ", protoOperands = [OpXMM,OpXMM_M128]}
                                          ;[(EncModrm_reg
                                            ,OperandReadWrite)
                                           ,(EncModrm_rm,OperandReadOnly)]
                                          ;64bit: True
                                          ;legacy: True
                                          ;Add packed quadword integers xmm2/m128 to xmm1.} */
             
             ERASM_DECODER_DO_ACTION (2,
                                      Paddq,
                                      Just<OpXMM>,
                                      Just<EncModrm_reg>,
                                      Just<OpXMM_M128>,
                                      Just<EncModrm_rm>,
                                      Nothing,
                                      Nothing);
         }
      else
         {
             /* EncodedInstructionDefinition {{[]
                                           ;0F D4 
                                           ;Just Modrm
                                           ;Just RMBoth
                                           ;Nothing
                                           ;[]
                                           ;Nothing
                                           ;Nothing}
                                          ;Prototype {protoMnemonic = "PADDQ", protoOperands = [OpMM,OpMM_M64]}
                                          ;[(EncModrm_reg
                                            ,OperandReadWrite)
                                           ,(EncModrm_rm,OperandReadOnly)]
                                          ;64bit: True
                                          ;legacy: True
                                          ;Add quadword integer mm2/m64 to mm1.} */
             
             ERASM_DECODER_DO_ACTION (2,
                                      Paddq,
                                      Just<OpMM>,
                                      Just<EncModrm_reg>,
                                      Just<OpMM_M64>,
                                      Just<EncModrm_rm>,
                                      Nothing,
                                      Nothing);
         }
      case (0xd5):
      if (prefix.operand_size)
         {
             /* EncodedInstructionDefinition {{[OPERAND_SIZE]
                                           ;0F D5 
                                           ;Just Modrm
                                           ;Just RMBoth
                                           ;Nothing
                                           ;[]
                                           ;Nothing
                                           ;Nothing}
                                          ;Prototype {protoMnemonic = "PMULLW", protoOperands = [OpXMM,OpXMM_M128]}
                                          ;[(EncModrm_reg
                                            ,OperandReadWrite)
                                           ,(EncModrm_rm,OperandReadOnly)]
                                          ;64bit: True
                                          ;legacy: True
                                          ;Multiply the packed signed word integers in xmm1 and xmm2/m128, and store the low 16 bits of the results in xmm1.} */
             
             ERASM_DECODER_DO_ACTION (2,
                                      Pmullw,
                                      Just<OpXMM>,
                                      Just<EncModrm_reg>,
                                      Just<OpXMM_M128>,
                                      Just<EncModrm_rm>,
                                      Nothing,
                                      Nothing);
         }
      else
         {
             /* EncodedInstructionDefinition {{[]
                                           ;0F D5 
                                           ;Just Modrm
                                           ;Just RMBoth
                                           ;Nothing
                                           ;[]
                                           ;Nothing
                                           ;Nothing}
                                          ;Prototype {protoMnemonic = "PMULLW", protoOperands = [OpMM,OpMM_M64]}
                                          ;[(EncModrm_reg
                                            ,OperandReadWrite)
                                           ,(EncModrm_rm,OperandReadOnly)]
                                          ;64bit: True
                                          ;legacy: True
                                          ;Multiply the packed signed word integers in mm1 register and mm2/m64, and store the low 16 bits of the results in mm1.} */
             
             ERASM_DECODER_DO_ACTION (2,
                                      Pmullw,
                                      Just<OpMM>,
                                      Just<EncModrm_reg>,
                                      Just<OpMM_M64>,
                                      Just<EncModrm_rm>,
                                      Nothing,
                                      Nothing);
         }
      case (0xd6):
      if (modrm_mod3 (p))
         if (prefix.repne)
            {
                /* EncodedInstructionDefinition {{[REPNE]
                                              ;0F D6 
                                              ;Just Modrm
                                              ;Just RMRegOnly
                                              ;Nothing
                                              ;[]
                                              ;Nothing
                                              ;Nothing}
                                             ;Prototype {protoMnemonic = "MOVDQ2Q", protoOperands = [OpMM,OpXMM]}
                                             ;[(EncModrm_reg
                                               ,OperandReadWrite)
                                              ,(EncModrm_rm,OperandReadOnly)]
                                             ;64bit: True
                                             ;legacy: True
                                             ;Move low quadword from xmm to mmx register.} */
                
                ERASM_DECODER_DO_ACTION (2,
                                         Movdq2q,
                                         Just<OpMM>,
                                         Just<EncModrm_reg>,
                                         Just<OpXMM>,
                                         Just<EncModrm_rm_reg>,
                                         Nothing,
                                         Nothing);
            }
         else
            if (prefix.rep)
               {
                   /* EncodedInstructionDefinition {{[REP]
                                                 ;0F D6 
                                                 ;Just Modrm
                                                 ;Just RMRegOnly
                                                 ;Nothing
                                                 ;[]
                                                 ;Nothing
                                                 ;Nothing}
                                                ;Prototype {protoMnemonic = "MOVQ2DQ", protoOperands = [OpXMM,OpMM]}
                                                ;[(EncModrm_reg
                                                  ,OperandReadWrite)
                                                 ,(EncModrm_rm,OperandReadOnly)]
                                                ;64bit: True
                                                ;legacy: True
                                                ;Move quadword from mmx to low quadword of xmm.} */
                   
                   ERASM_DECODER_DO_ACTION (2,
                                            Movq2dq,
                                            Just<OpXMM>,
                                            Just<EncModrm_reg>,
                                            Just<OpMM>,
                                            Just<EncModrm_rm_reg>,
                                            Nothing,
                                            Nothing);
               }
            else
               if (prefix.operand_size)
                  {
                      /* EncodedInstructionDefinition {{[OPERAND_SIZE]
                                                    ;0F D6 
                                                    ;Just Modrm
                                                    ;Just RMBoth
                                                    ;Nothing
                                                    ;[]
                                                    ;Nothing
                                                    ;Nothing}
                                                   ;Prototype {protoMnemonic = "MOVQ", protoOperands = [OpXMM_M64,OpXMM]}
                                                   ;[(EncModrm_rm,OperandReadWrite)
                                                    ,(EncModrm_reg,OperandReadOnly)]
                                                   ;64bit: True
                                                   ;legacy: True
                                                   ;Move quadword from xmm1 to xmm2/mem64.} */
                      
                      ERASM_DECODER_DO_ACTION (2,
                                               Movq,
                                               Just<OpXMM_M64>,
                                               Just<EncModrm_rm>,
                                               Just<OpXMM>,
                                               Just<EncModrm_reg>,
                                               Nothing,
                                               Nothing);
                  }
               else
                  goto decode_error;
      else
         if (prefix.operand_size)
            {
                /* EncodedInstructionDefinition {{[OPERAND_SIZE]
                                              ;0F D6 
                                              ;Just Modrm
                                              ;Just RMBoth
                                              ;Nothing
                                              ;[]
                                              ;Nothing
                                              ;Nothing}
                                             ;Prototype {protoMnemonic = "MOVQ", protoOperands = [OpXMM_M64,OpXMM]}
                                             ;[(EncModrm_rm,OperandReadWrite)
                                              ,(EncModrm_reg,OperandReadOnly)]
                                             ;64bit: True
                                             ;legacy: True
                                             ;Move quadword from xmm1 to xmm2/mem64.} */
                
                ERASM_DECODER_DO_ACTION (2,
                                         Movq,
                                         Just<OpXMM_M64>,
                                         Just<EncModrm_rm>,
                                         Just<OpXMM>,
                                         Just<EncModrm_reg>,
                                         Nothing,
                                         Nothing);
            }
         else
            goto decode_error;
      case (0xd7):
      if (modrm_mod3 (p))
         if (prefix.operand_size)
            {
                /* EncodedInstructionDefinition {{[OPERAND_SIZE]
                                              ;0F D7 
                                              ;Just Modrm
                                              ;Just RMRegOnly
                                              ;Nothing
                                              ;[]
                                              ;Nothing
                                              ;Nothing}
                                             ;Prototype {protoMnemonic = "PMOVMSKB", protoOperands = [OpRDefault,OpXMM]}
                                             ;[(EncModrm_reg
                                               ,OperandReadWrite)
                                              ,(EncModrm_rm,OperandReadOnly)]
                                             ;64bit: True
                                             ;legacy: True
                                             ;Move a byte mask of xmm to reg. The upper bits of r32 or r64 are zeroed} */
                
                ERASM_DECODER_DO_ACTION (2,
                                         Pmovmskb,
                                         Just<OpRDefault>,
                                         Just<EncModrm_reg>,
                                         Just<OpXMM>,
                                         Just<EncModrm_rm_reg>,
                                         Nothing,
                                         Nothing);
            }
         else
            {
                /* EncodedInstructionDefinition {{[]
                                              ;0F D7 
                                              ;Just Modrm
                                              ;Just RMRegOnly
                                              ;Nothing
                                              ;[]
                                              ;Nothing
                                              ;Nothing}
                                             ;Prototype {protoMnemonic = "PMOVMSKB", protoOperands = [OpR32,OpMM]}
                                             ;[(EncModrm_reg
                                               ,OperandReadWrite)
                                              ,(EncModrm_rm,OperandReadOnly)]
                                             ;64bit: True
                                             ;legacy: True
                                             ;Move a byte mask of mm to r32.} */
                
                ERASM_DECODER_DO_ACTION (2,
                                         Pmovmskb,
                                         Just<OpR32>,
                                         Just<EncModrm_reg>,
                                         Just<OpMM>,
                                         Just<EncModrm_rm_reg>,
                                         Nothing,
                                         Nothing);
            }
      else
         goto decode_error;
      case (0xd8):
      if (prefix.operand_size)
         {
             /* EncodedInstructionDefinition {{[OPERAND_SIZE]
                                           ;0F D8 
                                           ;Just Modrm
                                           ;Just RMBoth
                                           ;Nothing
                                           ;[]
                                           ;Nothing
                                           ;Nothing}
                                          ;Prototype {protoMnemonic = "PSUBUSB", protoOperands = [OpXMM,OpXMM_M128]}
                                          ;[(EncModrm_reg
                                            ,OperandReadWrite)
                                           ,(EncModrm_rm,OperandReadOnly)]
                                          ;64bit: True
                                          ;legacy: True
                                          ;Subtract packed unsigned byte integers in xmm2/m128 from packed unsigned byte integers in xmm1 and saturate result.} */
             
             ERASM_DECODER_DO_ACTION (2,
                                      Psubusb,
                                      Just<OpXMM>,
                                      Just<EncModrm_reg>,
                                      Just<OpXMM_M128>,
                                      Just<EncModrm_rm>,
                                      Nothing,
                                      Nothing);
         }
      else
         {
             /* EncodedInstructionDefinition {{[]
                                           ;0F D8 
                                           ;Just Modrm
                                           ;Just RMBoth
                                           ;Nothing
                                           ;[]
                                           ;Nothing
                                           ;Nothing}
                                          ;Prototype {protoMnemonic = "PSUBUSB", protoOperands = [OpMM,OpMM_M64]}
                                          ;[(EncModrm_reg
                                            ,OperandReadWrite)
                                           ,(EncModrm_rm,OperandReadOnly)]
                                          ;64bit: True
                                          ;legacy: True
                                          ;Subtract unsigned packed bytes in mm/m64 from unsigned packed bytes in mm and saturate result.} */
             
             ERASM_DECODER_DO_ACTION (2,
                                      Psubusb,
                                      Just<OpMM>,
                                      Just<EncModrm_reg>,
                                      Just<OpMM_M64>,
                                      Just<EncModrm_rm>,
                                      Nothing,
                                      Nothing);
         }
      case (0xd9):
      if (prefix.operand_size)
         {
             /* EncodedInstructionDefinition {{[OPERAND_SIZE]
                                           ;0F D9 
                                           ;Just Modrm
                                           ;Just RMBoth
                                           ;Nothing
                                           ;[]
                                           ;Nothing
                                           ;Nothing}
                                          ;Prototype {protoMnemonic = "PSUBUSW", protoOperands = [OpXMM,OpXMM_M128]}
                                          ;[(EncModrm_reg
                                            ,OperandReadWrite)
                                           ,(EncModrm_rm,OperandReadOnly)]
                                          ;64bit: True
                                          ;legacy: True
                                          ;Subtract packed unsigned word integers in xmm2/m128 from packed unsigned word integers in xmm1 and saturate result.} */
             
             ERASM_DECODER_DO_ACTION (2,
                                      Psubusw,
                                      Just<OpXMM>,
                                      Just<EncModrm_reg>,
                                      Just<OpXMM_M128>,
                                      Just<EncModrm_rm>,
                                      Nothing,
                                      Nothing);
         }
      else
         {
             /* EncodedInstructionDefinition {{[]
                                           ;0F D9 
                                           ;Just Modrm
                                           ;Just RMBoth
                                           ;Nothing
                                           ;[]
                                           ;Nothing
                                           ;Nothing}
                                          ;Prototype {protoMnemonic = "PSUBUSW", protoOperands = [OpMM,OpMM_M64]}
                                          ;[(EncModrm_reg
                                            ,OperandReadWrite)
                                           ,(EncModrm_rm,OperandReadOnly)]
                                          ;64bit: True
                                          ;legacy: True
                                          ;Subtract unsigned packed words in mm/m64 from unsigned packed words in mm and saturate result.} */
             
             ERASM_DECODER_DO_ACTION (2,
                                      Psubusw,
                                      Just<OpMM>,
                                      Just<EncModrm_reg>,
                                      Just<OpMM_M64>,
                                      Just<EncModrm_rm>,
                                      Nothing,
                                      Nothing);
         }
      case (0xda):
      if (prefix.operand_size)
         {
             /* EncodedInstructionDefinition {{[OPERAND_SIZE]
                                           ;0F DA 
                                           ;Just Modrm
                                           ;Just RMBoth
                                           ;Nothing
                                           ;[]
                                           ;Nothing
                                           ;Nothing}
                                          ;Prototype {protoMnemonic = "PMINUB", protoOperands = [OpXMM,OpXMM_M128]}
                                          ;[(EncModrm_reg
                                            ,OperandReadWrite)
                                           ,(EncModrm_rm,OperandReadOnly)]
                                          ;64bit: True
                                          ;legacy: True
                                          ;Compare unsigned byte integers in xmm2/m128 and xmm1 and returns minimum values.} */
             
             ERASM_DECODER_DO_ACTION (2,
                                      Pminub,
                                      Just<OpXMM>,
                                      Just<EncModrm_reg>,
                                      Just<OpXMM_M128>,
                                      Just<EncModrm_rm>,
                                      Nothing,
                                      Nothing);
         }
      else
         {
             /* EncodedInstructionDefinition {{[]
                                           ;0F DA 
                                           ;Just Modrm
                                           ;Just RMBoth
                                           ;Nothing
                                           ;[]
                                           ;Nothing
                                           ;Nothing}
                                          ;Prototype {protoMnemonic = "PMINUB", protoOperands = [OpMM,OpMM_M64]}
                                          ;[(EncModrm_reg
                                            ,OperandReadWrite)
                                           ,(EncModrm_rm,OperandReadOnly)]
                                          ;64bit: True
                                          ;legacy: True
                                          ;Compare unsigned byte integers in mm2/m64 and mm1 and returns minimum values.} */
             
             ERASM_DECODER_DO_ACTION (2,
                                      Pminub,
                                      Just<OpMM>,
                                      Just<EncModrm_reg>,
                                      Just<OpMM_M64>,
                                      Just<EncModrm_rm>,
                                      Nothing,
                                      Nothing);
         }
      case (0xdb):
      if (prefix.operand_size)
         {
             /* EncodedInstructionDefinition {{[OPERAND_SIZE]
                                           ;0F DB 
                                           ;Just Modrm
                                           ;Just RMBoth
                                           ;Nothing
                                           ;[]
                                           ;Nothing
                                           ;Nothing}
                                          ;Prototype {protoMnemonic = "PAND", protoOperands = [OpXMM,OpXMM_M128]}
                                          ;[(EncModrm_reg
                                            ,OperandReadWrite)
                                           ,(EncModrm_rm,OperandReadOnly)]
                                          ;64bit: True
                                          ;legacy: True
                                          ;Bitwise AND of xmm2/m128 and xmm1.} */
             
             ERASM_DECODER_DO_ACTION (2,
                                      Pand,
                                      Just<OpXMM>,
                                      Just<EncModrm_reg>,
                                      Just<OpXMM_M128>,
                                      Just<EncModrm_rm>,
                                      Nothing,
                                      Nothing);
         }
      else
         {
             /* EncodedInstructionDefinition {{[]
                                           ;0F DB 
                                           ;Just Modrm
                                           ;Just RMBoth
                                           ;Nothing
                                           ;[]
                                           ;Nothing
                                           ;Nothing}
                                          ;Prototype {protoMnemonic = "PAND", protoOperands = [OpMM,OpMM_M64]}
                                          ;[(EncModrm_reg
                                            ,OperandReadWrite)
                                           ,(EncModrm_rm,OperandReadOnly)]
                                          ;64bit: True
                                          ;legacy: True
                                          ;Bitwise AND mm/m64 and mm.} */
             
             ERASM_DECODER_DO_ACTION (2,
                                      Pand,
                                      Just<OpMM>,
                                      Just<EncModrm_reg>,
                                      Just<OpMM_M64>,
                                      Just<EncModrm_rm>,
                                      Nothing,
                                      Nothing);
         }
      case (0xdc):
      if (prefix.operand_size)
         {
             /* EncodedInstructionDefinition {{[OPERAND_SIZE]
                                           ;0F DC 
                                           ;Just Modrm
                                           ;Just RMBoth
                                           ;Nothing
                                           ;[]
                                           ;Nothing
                                           ;Nothing}
                                          ;Prototype {protoMnemonic = "PADDUSB", protoOperands = [OpXMM,OpXMM_M128]}
                                          ;[(EncModrm_reg
                                            ,OperandReadWrite)
                                           ,(EncModrm_rm,OperandReadOnly)]
                                          ;64bit: True
                                          ;legacy: True
                                          ;Add packed unsigned byte integers from xmm2/m128 and xmm1 saturate the results.} */
             
             ERASM_DECODER_DO_ACTION (2,
                                      Paddusb,
                                      Just<OpXMM>,
                                      Just<EncModrm_reg>,
                                      Just<OpXMM_M128>,
                                      Just<EncModrm_rm>,
                                      Nothing,
                                      Nothing);
         }
      else
         {
             /* EncodedInstructionDefinition {{[]
                                           ;0F DC 
                                           ;Just Modrm
                                           ;Just RMBoth
                                           ;Nothing
                                           ;[]
                                           ;Nothing
                                           ;Nothing}
                                          ;Prototype {protoMnemonic = "PADDUSB", protoOperands = [OpMM,OpMM_M64]}
                                          ;[(EncModrm_reg
                                            ,OperandReadWrite)
                                           ,(EncModrm_rm,OperandReadOnly)]
                                          ;64bit: True
                                          ;legacy: True
                                          ;Add packed unsigned byte integers from mm/m64 and mm and saturate the results.} */
             
             ERASM_DECODER_DO_ACTION (2,
                                      Paddusb,
                                      Just<OpMM>,
                                      Just<EncModrm_reg>,
                                      Just<OpMM_M64>,
                                      Just<EncModrm_rm>,
                                      Nothing,
                                      Nothing);
         }
      case (0xdd):
      if (prefix.operand_size)
         {
             /* EncodedInstructionDefinition {{[OPERAND_SIZE]
                                           ;0F DD 
                                           ;Just Modrm
                                           ;Just RMBoth
                                           ;Nothing
                                           ;[]
                                           ;Nothing
                                           ;Nothing}
                                          ;Prototype {protoMnemonic = "PADDUSW", protoOperands = [OpXMM,OpXMM_M128]}
                                          ;[(EncModrm_reg
                                            ,OperandReadWrite)
                                           ,(EncModrm_rm,OperandReadOnly)]
                                          ;64bit: True
                                          ;legacy: True
                                          ;Add packed unsigned word integers from xmm2/m128 to xmm1 and saturate the results.} */
             
             ERASM_DECODER_DO_ACTION (2,
                                      Paddusw,
                                      Just<OpXMM>,
                                      Just<EncModrm_reg>,
                                      Just<OpXMM_M128>,
                                      Just<EncModrm_rm>,
                                      Nothing,
                                      Nothing);
         }
      else
         {
             /* EncodedInstructionDefinition {{[]
                                           ;0F DD 
                                           ;Just Modrm
                                           ;Just RMBoth
                                           ;Nothing
                                           ;[]
                                           ;Nothing
                                           ;Nothing}
                                          ;Prototype {protoMnemonic = "PADDUSW", protoOperands = [OpMM,OpMM_M64]}
                                          ;[(EncModrm_reg
                                            ,OperandReadWrite)
                                           ,(EncModrm_rm,OperandReadOnly)]
                                          ;64bit: True
                                          ;legacy: True
                                          ;Add packed unsigned word integers from mm/m64 and mm and saturate the results.} */
             
             ERASM_DECODER_DO_ACTION (2,
                                      Paddusw,
                                      Just<OpMM>,
                                      Just<EncModrm_reg>,
                                      Just<OpMM_M64>,
                                      Just<EncModrm_rm>,
                                      Nothing,
                                      Nothing);
         }
      case (0xde):
      if (prefix.operand_size)
         {
             /* EncodedInstructionDefinition {{[OPERAND_SIZE]
                                           ;0F DE 
                                           ;Just Modrm
                                           ;Just RMBoth
                                           ;Nothing
                                           ;[]
                                           ;Nothing
                                           ;Nothing}
                                          ;Prototype {protoMnemonic = "PMAXUB", protoOperands = [OpXMM,OpXMM_M128]}
                                          ;[(EncModrm_reg
                                            ,OperandReadWrite)
                                           ,(EncModrm_rm,OperandReadOnly)]
                                          ;64bit: True
                                          ;legacy: True
                                          ;Compare unsigned byte integers in xmm2/m128 and xmm1 and returns maximum values.} */
             
             ERASM_DECODER_DO_ACTION (2,
                                      Pmaxub,
                                      Just<OpXMM>,
                                      Just<EncModrm_reg>,
                                      Just<OpXMM_M128>,
                                      Just<EncModrm_rm>,
                                      Nothing,
                                      Nothing);
         }
      else
         {
             /* EncodedInstructionDefinition {{[]
                                           ;0F DE 
                                           ;Just Modrm
                                           ;Just RMBoth
                                           ;Nothing
                                           ;[]
                                           ;Nothing
                                           ;Nothing}
                                          ;Prototype {protoMnemonic = "PMAXUB", protoOperands = [OpMM,OpMM_M64]}
                                          ;[(EncModrm_reg
                                            ,OperandReadWrite)
                                           ,(EncModrm_rm,OperandReadOnly)]
                                          ;64bit: True
                                          ;legacy: True
                                          ;Compare unsigned byte integers in mm2/m64 and mm1 and returns maximum values.} */
             
             ERASM_DECODER_DO_ACTION (2,
                                      Pmaxub,
                                      Just<OpMM>,
                                      Just<EncModrm_reg>,
                                      Just<OpMM_M64>,
                                      Just<EncModrm_rm>,
                                      Nothing,
                                      Nothing);
         }
      case (0xdf):
      if (prefix.operand_size)
         {
             /* EncodedInstructionDefinition {{[OPERAND_SIZE]
                                           ;0F DF 
                                           ;Just Modrm
                                           ;Just RMBoth
                                           ;Nothing
                                           ;[]
                                           ;Nothing
                                           ;Nothing}
                                          ;Prototype {protoMnemonic = "PANDN", protoOperands = [OpXMM,OpXMM_M128]}
                                          ;[(EncModrm_reg
                                            ,OperandReadWrite)
                                           ,(EncModrm_rm,OperandReadOnly)]
                                          ;64bit: True
                                          ;legacy: True
                                          ;Bitwise AND NOT of xmm2/m128 and xmm1.} */
             
             ERASM_DECODER_DO_ACTION (2,
                                      Pandn,
                                      Just<OpXMM>,
                                      Just<EncModrm_reg>,
                                      Just<OpXMM_M128>,
                                      Just<EncModrm_rm>,
                                      Nothing,
                                      Nothing);
         }
      else
         {
             /* EncodedInstructionDefinition {{[]
                                           ;0F DF 
                                           ;Just Modrm
                                           ;Just RMBoth
                                           ;Nothing
                                           ;[]
                                           ;Nothing
                                           ;Nothing}
                                          ;Prototype {protoMnemonic = "PANDN", protoOperands = [OpMM,OpMM_M64]}
                                          ;[(EncModrm_reg
                                            ,OperandReadWrite)
                                           ,(EncModrm_rm,OperandReadOnly)]
                                          ;64bit: True
                                          ;legacy: True
                                          ;Bitwise AND NOT of mm/m64 and mm.} */
             
             ERASM_DECODER_DO_ACTION (2,
                                      Pandn,
                                      Just<OpMM>,
                                      Just<EncModrm_reg>,
                                      Just<OpMM_M64>,
                                      Just<EncModrm_rm>,
                                      Nothing,
                                      Nothing);
         }
      case (0xe0):
      if (prefix.operand_size)
         {
             /* EncodedInstructionDefinition {{[OPERAND_SIZE]
                                           ;0F E0 
                                           ;Just Modrm
                                           ;Just RMBoth
                                           ;Nothing
                                           ;[]
                                           ;Nothing
                                           ;Nothing}
                                          ;Prototype {protoMnemonic = "PAVGB", protoOperands = [OpXMM,OpXMM_M128]}
                                          ;[(EncModrm_reg
                                            ,OperandReadWrite)
                                           ,(EncModrm_rm,OperandReadOnly)]
                                          ;64bit: True
                                          ;legacy: True
                                          ;Average packed unsigned byte integers from xmm2/m128 and xmm1 with rounding.} */
             
             ERASM_DECODER_DO_ACTION (2,
                                      Pavgb,
                                      Just<OpXMM>,
                                      Just<EncModrm_reg>,
                                      Just<OpXMM_M128>,
                                      Just<EncModrm_rm>,
                                      Nothing,
                                      Nothing);
         }
      else
         {
             /* EncodedInstructionDefinition {{[]
                                           ;0F E0 
                                           ;Just Modrm
                                           ;Just RMBoth
                                           ;Nothing
                                           ;[]
                                           ;Nothing
                                           ;Nothing}
                                          ;Prototype {protoMnemonic = "PAVGB", protoOperands = [OpMM,OpMM_M64]}
                                          ;[(EncModrm_reg
                                            ,OperandReadWrite)
                                           ,(EncModrm_rm,OperandReadOnly)]
                                          ;64bit: True
                                          ;legacy: True
                                          ;Average packed unsigned byte integers from mm2/m64 and mm1 with rounding.} */
             
             ERASM_DECODER_DO_ACTION (2,
                                      Pavgb,
                                      Just<OpMM>,
                                      Just<EncModrm_reg>,
                                      Just<OpMM_M64>,
                                      Just<EncModrm_rm>,
                                      Nothing,
                                      Nothing);
         }
      case (0xe1):
      if (prefix.operand_size)
         {
             /* EncodedInstructionDefinition {{[OPERAND_SIZE]
                                           ;0F E1 
                                           ;Just Modrm
                                           ;Just RMBoth
                                           ;Nothing
                                           ;[]
                                           ;Nothing
                                           ;Nothing}
                                          ;Prototype {protoMnemonic = "PSRAW", protoOperands = [OpXMM,OpXMM_M128]}
                                          ;[(EncModrm_reg
                                            ,OperandReadWrite)
                                           ,(EncModrm_rm,OperandReadOnly)]
                                          ;64bit: True
                                          ;legacy: True
                                          ;Shift words in xmm1 right by xmm2/m128 while shifting in sign bits.} */
             
             ERASM_DECODER_DO_ACTION (2,
                                      Psraw,
                                      Just<OpXMM>,
                                      Just<EncModrm_reg>,
                                      Just<OpXMM_M128>,
                                      Just<EncModrm_rm>,
                                      Nothing,
                                      Nothing);
         }
      else
         {
             /* EncodedInstructionDefinition {{[]
                                           ;0F E1 
                                           ;Just Modrm
                                           ;Just RMBoth
                                           ;Nothing
                                           ;[]
                                           ;Nothing
                                           ;Nothing}
                                          ;Prototype {protoMnemonic = "PSRAW", protoOperands = [OpMM,OpMM_M64]}
                                          ;[(EncModrm_reg
                                            ,OperandReadWrite)
                                           ,(EncModrm_rm,OperandReadOnly)]
                                          ;64bit: True
                                          ;legacy: True
                                          ;Shift words in mm right by mm/m64 while shifting in sign bits.} */
             
             ERASM_DECODER_DO_ACTION (2,
                                      Psraw,
                                      Just<OpMM>,
                                      Just<EncModrm_reg>,
                                      Just<OpMM_M64>,
                                      Just<EncModrm_rm>,
                                      Nothing,
                                      Nothing);
         }
      case (0xe2):
      if (prefix.operand_size)
         {
             /* EncodedInstructionDefinition {{[OPERAND_SIZE]
                                           ;0F E2 
                                           ;Just Modrm
                                           ;Just RMBoth
                                           ;Nothing
                                           ;[]
                                           ;Nothing
                                           ;Nothing}
                                          ;Prototype {protoMnemonic = "PSRAD", protoOperands = [OpXMM,OpXMM_M128]}
                                          ;[(EncModrm_reg
                                            ,OperandReadWrite)
                                           ,(EncModrm_rm,OperandReadOnly)]
                                          ;64bit: True
                                          ;legacy: True
                                          ;Shift doubleword in xmm1 right by xmm2 /m128 while shifting in sign bits.} */
             
             ERASM_DECODER_DO_ACTION (2,
                                      Psrad,
                                      Just<OpXMM>,
                                      Just<EncModrm_reg>,
                                      Just<OpXMM_M128>,
                                      Just<EncModrm_rm>,
                                      Nothing,
                                      Nothing);
         }
      else
         {
             /* EncodedInstructionDefinition {{[]
                                           ;0F E2 
                                           ;Just Modrm
                                           ;Just RMBoth
                                           ;Nothing
                                           ;[]
                                           ;Nothing
                                           ;Nothing}
                                          ;Prototype {protoMnemonic = "PSRAD", protoOperands = [OpMM,OpMM_M64]}
                                          ;[(EncModrm_reg
                                            ,OperandReadWrite)
                                           ,(EncModrm_rm,OperandReadOnly)]
                                          ;64bit: True
                                          ;legacy: True
                                          ;Shift doublewords in mm right by mm/m64 while shifting in sign bits.} */
             
             ERASM_DECODER_DO_ACTION (2,
                                      Psrad,
                                      Just<OpMM>,
                                      Just<EncModrm_reg>,
                                      Just<OpMM_M64>,
                                      Just<EncModrm_rm>,
                                      Nothing,
                                      Nothing);
         }
      case (0xe3):
      if (prefix.operand_size)
         {
             /* EncodedInstructionDefinition {{[OPERAND_SIZE]
                                           ;0F E3 
                                           ;Just Modrm
                                           ;Just RMBoth
                                           ;Nothing
                                           ;[]
                                           ;Nothing
                                           ;Nothing}
                                          ;Prototype {protoMnemonic = "PAVGW", protoOperands = [OpXMM,OpXMM_M128]}
                                          ;[(EncModrm_reg
                                            ,OperandReadWrite)
                                           ,(EncModrm_rm,OperandReadOnly)]
                                          ;64bit: True
                                          ;legacy: True
                                          ;Average packed unsigned word integers from xmm2/m128 and xmm1 with rounding.} */
             
             ERASM_DECODER_DO_ACTION (2,
                                      Pavgw,
                                      Just<OpXMM>,
                                      Just<EncModrm_reg>,
                                      Just<OpXMM_M128>,
                                      Just<EncModrm_rm>,
                                      Nothing,
                                      Nothing);
         }
      else
         {
             /* EncodedInstructionDefinition {{[]
                                           ;0F E3 
                                           ;Just Modrm
                                           ;Just RMBoth
                                           ;Nothing
                                           ;[]
                                           ;Nothing
                                           ;Nothing}
                                          ;Prototype {protoMnemonic = "PAVGW", protoOperands = [OpMM,OpMM_M64]}
                                          ;[(EncModrm_reg
                                            ,OperandReadWrite)
                                           ,(EncModrm_rm,OperandReadOnly)]
                                          ;64bit: True
                                          ;legacy: True
                                          ;Average packed unsigned word integers from mm2/m64 and mm1 with rounding.} */
             
             ERASM_DECODER_DO_ACTION (2,
                                      Pavgw,
                                      Just<OpMM>,
                                      Just<EncModrm_reg>,
                                      Just<OpMM_M64>,
                                      Just<EncModrm_rm>,
                                      Nothing,
                                      Nothing);
         }
      case (0xe4):
      if (prefix.operand_size)
         {
             /* EncodedInstructionDefinition {{[OPERAND_SIZE]
                                           ;0F E4 
                                           ;Just Modrm
                                           ;Just RMBoth
                                           ;Nothing
                                           ;[]
                                           ;Nothing
                                           ;Nothing}
                                          ;Prototype {protoMnemonic = "PMULHUW", protoOperands = [OpXMM,OpXMM_M128]}
                                          ;[(EncModrm_reg
                                            ,OperandReadWrite)
                                           ,(EncModrm_rm,OperandReadOnly)]
                                          ;64bit: True
                                          ;legacy: True
                                          ;Multiply the packed unsigned word integers in xmm1 and xmm2/m128, and store the high 16 bits of the results in xmm1.} */
             
             ERASM_DECODER_DO_ACTION (2,
                                      Pmulhuw,
                                      Just<OpXMM>,
                                      Just<EncModrm_reg>,
                                      Just<OpXMM_M128>,
                                      Just<EncModrm_rm>,
                                      Nothing,
                                      Nothing);
         }
      else
         {
             /* EncodedInstructionDefinition {{[]
                                           ;0F E4 
                                           ;Just Modrm
                                           ;Just RMBoth
                                           ;Nothing
                                           ;[]
                                           ;Nothing
                                           ;Nothing}
                                          ;Prototype {protoMnemonic = "PMULHUW", protoOperands = [OpMM,OpMM_M64]}
                                          ;[(EncModrm_reg
                                            ,OperandReadWrite)
                                           ,(EncModrm_rm,OperandReadOnly)]
                                          ;64bit: True
                                          ;legacy: True
                                          ;Multiply the packed unsigned word integers in mm1 register and mm2/m64, and store the high 16 bits of the results in mm1.} */
             
             ERASM_DECODER_DO_ACTION (2,
                                      Pmulhuw,
                                      Just<OpMM>,
                                      Just<EncModrm_reg>,
                                      Just<OpMM_M64>,
                                      Just<EncModrm_rm>,
                                      Nothing,
                                      Nothing);
         }
      case (0xe5):
      if (prefix.operand_size)
         {
             /* EncodedInstructionDefinition {{[OPERAND_SIZE]
                                           ;0F E5 
                                           ;Just Modrm
                                           ;Just RMBoth
                                           ;Nothing
                                           ;[]
                                           ;Nothing
                                           ;Nothing}
                                          ;Prototype {protoMnemonic = "PMULHW", protoOperands = [OpXMM,OpXMM_M128]}
                                          ;[(EncModrm_reg
                                            ,OperandReadWrite)
                                           ,(EncModrm_rm,OperandReadOnly)]
                                          ;64bit: True
                                          ;legacy: True
                                          ;Multiply the packed signed word integers in xmm1 and xmm2/m128, and store the high 16 bits of the results in xmm1.} */
             
             ERASM_DECODER_DO_ACTION (2,
                                      Pmulhw,
                                      Just<OpXMM>,
                                      Just<EncModrm_reg>,
                                      Just<OpXMM_M128>,
                                      Just<EncModrm_rm>,
                                      Nothing,
                                      Nothing);
         }
      else
         {
             /* EncodedInstructionDefinition {{[]
                                           ;0F E5 
                                           ;Just Modrm
                                           ;Just RMBoth
                                           ;Nothing
                                           ;[]
                                           ;Nothing
                                           ;Nothing}
                                          ;Prototype {protoMnemonic = "PMULHW", protoOperands = [OpMM,OpMM_M64]}
                                          ;[(EncModrm_reg
                                            ,OperandReadWrite)
                                           ,(EncModrm_rm,OperandReadOnly)]
                                          ;64bit: True
                                          ;legacy: True
                                          ;Multiply the packed signed word integers in mm1 register and mm2/m64, and store the high 16 bits of the results in mm1.} */
             
             ERASM_DECODER_DO_ACTION (2,
                                      Pmulhw,
                                      Just<OpMM>,
                                      Just<EncModrm_reg>,
                                      Just<OpMM_M64>,
                                      Just<EncModrm_rm>,
                                      Nothing,
                                      Nothing);
         }
      case (0xe6):
      if (prefix.repne)
         {
             /* EncodedInstructionDefinition {{[REPNE]
                                           ;0F E6 
                                           ;Just Modrm
                                           ;Just RMBoth
                                           ;Nothing
                                           ;[]
                                           ;Nothing
                                           ;Nothing}
                                          ;Prototype {protoMnemonic = "CVTPD2DQ", protoOperands = [OpXMM,OpXMM_M128]}
                                          ;[(EncModrm_reg
                                            ,OperandReadWrite)
                                           ,(EncModrm_rm,OperandReadOnly)]
                                          ;64bit: True
                                          ;legacy: True
                                          ;Convert two packed double- precision floating-point values from xmm2/m128 to two packed signed doubleword integers in xmm1.} */
             
             ERASM_DECODER_DO_ACTION (2,
                                      Cvtpd2dq,
                                      Just<OpXMM>,
                                      Just<EncModrm_reg>,
                                      Just<OpXMM_M128>,
                                      Just<EncModrm_rm>,
                                      Nothing,
                                      Nothing);
         }
      else
         if (prefix.rep)
            {
                /* EncodedInstructionDefinition {{[REP]
                                              ;0F E6 
                                              ;Just Modrm
                                              ;Just RMBoth
                                              ;Nothing
                                              ;[]
                                              ;Nothing
                                              ;Nothing}
                                             ;Prototype {protoMnemonic = "CVTDQ2PD", protoOperands = [OpXMM,OpXMM_M64]}
                                             ;[(EncModrm_reg
                                               ,OperandReadWrite)
                                              ,(EncModrm_rm,OperandReadOnly)]
                                             ;64bit: True
                                             ;legacy: True
                                             ;Convert two packed signed doubleword integers from xmm2/m128 to two packed double-precision floating- point values in xmm1.} */
                
                ERASM_DECODER_DO_ACTION (2,
                                         Cvtdq2pd,
                                         Just<OpXMM>,
                                         Just<EncModrm_reg>,
                                         Just<OpXMM_M64>,
                                         Just<EncModrm_rm>,
                                         Nothing,
                                         Nothing);
            }
         else
            if (prefix.operand_size)
               {
                   /* EncodedInstructionDefinition {{[OPERAND_SIZE]
                                                 ;0F E6 
                                                 ;Just Modrm
                                                 ;Just RMBoth
                                                 ;Nothing
                                                 ;[]
                                                 ;Nothing
                                                 ;Nothing}
                                                ;Prototype {protoMnemonic = "CVTTPD2DQ", protoOperands = [OpXMM,OpXMM_M128]}
                                                ;[(EncModrm_reg
                                                  ,OperandReadWrite)
                                                 ,(EncModrm_rm,OperandReadOnly)]
                                                ;64bit: True
                                                ;legacy: True
                                                ;Convert two packed double- precision floating-point values from xmm2/m128 to two packed signed doubleword integers in xmm1 using truncation.} */
                   
                   ERASM_DECODER_DO_ACTION (2,
                                            Cvttpd2dq,
                                            Just<OpXMM>,
                                            Just<EncModrm_reg>,
                                            Just<OpXMM_M128>,
                                            Just<EncModrm_rm>,
                                            Nothing,
                                            Nothing);
               }
            else
               goto decode_error;
      case (0xe7):
      if (!modrm_mod3 (p))
         if (prefix.operand_size)
            {
                /* EncodedInstructionDefinition {{[OPERAND_SIZE]
                                              ;0F E7 
                                              ;Just Modrm
                                              ;Just RMMemOnly
                                              ;Nothing
                                              ;[]
                                              ;Nothing
                                              ;Nothing}
                                             ;Prototype {protoMnemonic = "MOVNTDQ", protoOperands = [OpM128Xmm,OpXMM]}
                                             ;[(EncModrm_rm,OperandReadWrite)
                                              ,(EncModrm_reg,OperandReadOnly)]
                                             ;64bit: True
                                             ;legacy: True
                                             ;Move double quadword from xmm to m128 using non-temporal hint.} */
                
                ERASM_DECODER_DO_ACTION (2,
                                         Movntdq,
                                         Just<OpM128Xmm>,
                                         Just<EncModrm_rm_mem>,
                                         Just<OpXMM>,
                                         Just<EncModrm_reg>,
                                         Nothing,
                                         Nothing);
            }
         else
            {
                /* EncodedInstructionDefinition {{[]
                                              ;0F E7 
                                              ;Just Modrm
                                              ;Just RMMemOnly
                                              ;Nothing
                                              ;[]
                                              ;Nothing
                                              ;Nothing}
                                             ;Prototype {protoMnemonic = "MOVNTQ", protoOperands = [OpM64,OpMM]}
                                             ;[(EncModrm_rm,OperandReadWrite)
                                              ,(EncModrm_reg,OperandReadOnly)]
                                             ;64bit: True
                                             ;legacy: True
                                             ;Move quadword from mm to m64 using non-temporal hint.} */
                
                ERASM_DECODER_DO_ACTION (2,
                                         Movntq,
                                         Just<OpM64>,
                                         Just<EncModrm_rm_mem>,
                                         Just<OpMM>,
                                         Just<EncModrm_reg>,
                                         Nothing,
                                         Nothing);
            }
      else
         goto decode_error;
      case (0xe8):
      if (prefix.operand_size)
         {
             /* EncodedInstructionDefinition {{[OPERAND_SIZE]
                                           ;0F E8 
                                           ;Just Modrm
                                           ;Just RMBoth
                                           ;Nothing
                                           ;[]
                                           ;Nothing
                                           ;Nothing}
                                          ;Prototype {protoMnemonic = "PSUBSB", protoOperands = [OpXMM,OpXMM_M128]}
                                          ;[(EncModrm_reg
                                            ,OperandReadWrite)
                                           ,(EncModrm_rm,OperandReadOnly)]
                                          ;64bit: True
                                          ;legacy: True
                                          ;Subtract packed signed byte integers in xmm2/m128 from packed signed byte integers in xmm1 and saturate results.} */
             
             ERASM_DECODER_DO_ACTION (2,
                                      Psubsb,
                                      Just<OpXMM>,
                                      Just<EncModrm_reg>,
                                      Just<OpXMM_M128>,
                                      Just<EncModrm_rm>,
                                      Nothing,
                                      Nothing);
         }
      else
         {
             /* EncodedInstructionDefinition {{[]
                                           ;0F E8 
                                           ;Just Modrm
                                           ;Just RMBoth
                                           ;Nothing
                                           ;[]
                                           ;Nothing
                                           ;Nothing}
                                          ;Prototype {protoMnemonic = "PSUBSB", protoOperands = [OpMM,OpMM_M64]}
                                          ;[(EncModrm_reg
                                            ,OperandReadWrite)
                                           ,(EncModrm_rm,OperandReadOnly)]
                                          ;64bit: True
                                          ;legacy: True
                                          ;Subtract signed packed bytes in mm/m64 from signed packed bytes in mm and saturate results.} */
             
             ERASM_DECODER_DO_ACTION (2,
                                      Psubsb,
                                      Just<OpMM>,
                                      Just<EncModrm_reg>,
                                      Just<OpMM_M64>,
                                      Just<EncModrm_rm>,
                                      Nothing,
                                      Nothing);
         }
      case (0xe9):
      if (prefix.operand_size)
         {
             /* EncodedInstructionDefinition {{[OPERAND_SIZE]
                                           ;0F E9 
                                           ;Just Modrm
                                           ;Just RMBoth
                                           ;Nothing
                                           ;[]
                                           ;Nothing
                                           ;Nothing}
                                          ;Prototype {protoMnemonic = "PSUBSW", protoOperands = [OpXMM,OpXMM_M128]}
                                          ;[(EncModrm_reg
                                            ,OperandReadWrite)
                                           ,(EncModrm_rm,OperandReadOnly)]
                                          ;64bit: True
                                          ;legacy: True
                                          ;Subtract packed signed word integers in xmm2/m128 from packed signed word integers in xmm1 and saturate results.} */
             
             ERASM_DECODER_DO_ACTION (2,
                                      Psubsw,
                                      Just<OpXMM>,
                                      Just<EncModrm_reg>,
                                      Just<OpXMM_M128>,
                                      Just<EncModrm_rm>,
                                      Nothing,
                                      Nothing);
         }
      else
         {
             /* EncodedInstructionDefinition {{[]
                                           ;0F E9 
                                           ;Just Modrm
                                           ;Just RMBoth
                                           ;Nothing
                                           ;[]
                                           ;Nothing
                                           ;Nothing}
                                          ;Prototype {protoMnemonic = "PSUBSW", protoOperands = [OpMM,OpMM_M64]}
                                          ;[(EncModrm_reg
                                            ,OperandReadWrite)
                                           ,(EncModrm_rm,OperandReadOnly)]
                                          ;64bit: True
                                          ;legacy: True
                                          ;Subtract signed packed words in mm/m64 from signed packed words in mm and saturate results.} */
             
             ERASM_DECODER_DO_ACTION (2,
                                      Psubsw,
                                      Just<OpMM>,
                                      Just<EncModrm_reg>,
                                      Just<OpMM_M64>,
                                      Just<EncModrm_rm>,
                                      Nothing,
                                      Nothing);
         }
      case (0xea):
      if (prefix.operand_size)
         {
             /* EncodedInstructionDefinition {{[OPERAND_SIZE]
                                           ;0F EA 
                                           ;Just Modrm
                                           ;Just RMBoth
                                           ;Nothing
                                           ;[]
                                           ;Nothing
                                           ;Nothing}
                                          ;Prototype {protoMnemonic = "PMINSW", protoOperands = [OpXMM,OpXMM_M128]}
                                          ;[(EncModrm_reg
                                            ,OperandReadWrite)
                                           ,(EncModrm_rm,OperandReadOnly)]
                                          ;64bit: True
                                          ;legacy: True
                                          ;Compare signed word integers in xmm2/m128 and xmm1 and return minimum values.} */
             
             ERASM_DECODER_DO_ACTION (2,
                                      Pminsw,
                                      Just<OpXMM>,
                                      Just<EncModrm_reg>,
                                      Just<OpXMM_M128>,
                                      Just<EncModrm_rm>,
                                      Nothing,
                                      Nothing);
         }
      else
         {
             /* EncodedInstructionDefinition {{[]
                                           ;0F EA 
                                           ;Just Modrm
                                           ;Just RMBoth
                                           ;Nothing
                                           ;[]
                                           ;Nothing
                                           ;Nothing}
                                          ;Prototype {protoMnemonic = "PMINSW", protoOperands = [OpMM,OpMM_M64]}
                                          ;[(EncModrm_reg
                                            ,OperandReadWrite)
                                           ,(EncModrm_rm,OperandReadOnly)]
                                          ;64bit: True
                                          ;legacy: True
                                          ;Compare signed word integers in mm2/m64 and mm1 and return minimum values.} */
             
             ERASM_DECODER_DO_ACTION (2,
                                      Pminsw,
                                      Just<OpMM>,
                                      Just<EncModrm_reg>,
                                      Just<OpMM_M64>,
                                      Just<EncModrm_rm>,
                                      Nothing,
                                      Nothing);
         }
      case (0xeb):
      if (prefix.operand_size)
         {
             /* EncodedInstructionDefinition {{[OPERAND_SIZE]
                                           ;0F EB 
                                           ;Just Modrm
                                           ;Just RMBoth
                                           ;Nothing
                                           ;[]
                                           ;Nothing
                                           ;Nothing}
                                          ;Prototype {protoMnemonic = "POR", protoOperands = [OpXMM,OpXMM_M128]}
                                          ;[(EncModrm_reg
                                            ,OperandReadWrite)
                                           ,(EncModrm_rm,OperandReadOnly)]
                                          ;64bit: True
                                          ;legacy: True
                                          ;Bitwise OR of xmm2/m128 and xmm1.} */
             
             ERASM_DECODER_DO_ACTION (2,
                                      Por,
                                      Just<OpXMM>,
                                      Just<EncModrm_reg>,
                                      Just<OpXMM_M128>,
                                      Just<EncModrm_rm>,
                                      Nothing,
                                      Nothing);
         }
      else
         {
             /* EncodedInstructionDefinition {{[]
                                           ;0F EB 
                                           ;Just Modrm
                                           ;Just RMBoth
                                           ;Nothing
                                           ;[]
                                           ;Nothing
                                           ;Nothing}
                                          ;Prototype {protoMnemonic = "POR", protoOperands = [OpMM,OpMM_M64]}
                                          ;[(EncModrm_reg
                                            ,OperandReadWrite)
                                           ,(EncModrm_rm,OperandReadOnly)]
                                          ;64bit: True
                                          ;legacy: True
                                          ;Bitwise OR of mm/m64 and mm.} */
             
             ERASM_DECODER_DO_ACTION (2,
                                      Por,
                                      Just<OpMM>,
                                      Just<EncModrm_reg>,
                                      Just<OpMM_M64>,
                                      Just<EncModrm_rm>,
                                      Nothing,
                                      Nothing);
         }
      case (0xec):
      if (prefix.operand_size)
         {
             /* EncodedInstructionDefinition {{[OPERAND_SIZE]
                                           ;0F EC 
                                           ;Just Modrm
                                           ;Just RMBoth
                                           ;Nothing
                                           ;[]
                                           ;Nothing
                                           ;Nothing}
                                          ;Prototype {protoMnemonic = "PADDSB", protoOperands = [OpXMM,OpXMM_M128]}
                                          ;[(EncModrm_reg
                                            ,OperandReadWrite)
                                           ,(EncModrm_rm,OperandReadOnly)]
                                          ;64bit: True
                                          ;legacy: True
                                          ;Add packed signed byte integers from xmm2/m128 and xmm1 saturate the results.} */
             
             ERASM_DECODER_DO_ACTION (2,
                                      Paddsb,
                                      Just<OpXMM>,
                                      Just<EncModrm_reg>,
                                      Just<OpXMM_M128>,
                                      Just<EncModrm_rm>,
                                      Nothing,
                                      Nothing);
         }
      else
         {
             /* EncodedInstructionDefinition {{[]
                                           ;0F EC 
                                           ;Just Modrm
                                           ;Just RMBoth
                                           ;Nothing
                                           ;[]
                                           ;Nothing
                                           ;Nothing}
                                          ;Prototype {protoMnemonic = "PADDSB", protoOperands = [OpMM,OpMM_M64]}
                                          ;[(EncModrm_reg
                                            ,OperandReadWrite)
                                           ,(EncModrm_rm,OperandReadOnly)]
                                          ;64bit: True
                                          ;legacy: True
                                          ;Add packed signed byte integers from mm/m64 and mm and saturate the results.} */
             
             ERASM_DECODER_DO_ACTION (2,
                                      Paddsb,
                                      Just<OpMM>,
                                      Just<EncModrm_reg>,
                                      Just<OpMM_M64>,
                                      Just<EncModrm_rm>,
                                      Nothing,
                                      Nothing);
         }
      case (0xed):
      if (prefix.operand_size)
         {
             /* EncodedInstructionDefinition {{[OPERAND_SIZE]
                                           ;0F ED 
                                           ;Just Modrm
                                           ;Just RMBoth
                                           ;Nothing
                                           ;[]
                                           ;Nothing
                                           ;Nothing}
                                          ;Prototype {protoMnemonic = "PADDSW", protoOperands = [OpXMM,OpXMM_M128]}
                                          ;[(EncModrm_reg
                                            ,OperandReadWrite)
                                           ,(EncModrm_rm,OperandReadOnly)]
                                          ;64bit: True
                                          ;legacy: True
                                          ;Add packed signed word integers from xmm2/m128 and xmm1 and saturate the results.} */
             
             ERASM_DECODER_DO_ACTION (2,
                                      Paddsw,
                                      Just<OpXMM>,
                                      Just<EncModrm_reg>,
                                      Just<OpXMM_M128>,
                                      Just<EncModrm_rm>,
                                      Nothing,
                                      Nothing);
         }
      else
         {
             /* EncodedInstructionDefinition {{[]
                                           ;0F ED 
                                           ;Just Modrm
                                           ;Just RMBoth
                                           ;Nothing
                                           ;[]
                                           ;Nothing
                                           ;Nothing}
                                          ;Prototype {protoMnemonic = "PADDSW", protoOperands = [OpMM,OpMM_M64]}
                                          ;[(EncModrm_reg
                                            ,OperandReadWrite)
                                           ,(EncModrm_rm,OperandReadOnly)]
                                          ;64bit: True
                                          ;legacy: True
                                          ;Add packed signed word integers from mm/m64 and mm and saturate the results.} */
             
             ERASM_DECODER_DO_ACTION (2,
                                      Paddsw,
                                      Just<OpMM>,
                                      Just<EncModrm_reg>,
                                      Just<OpMM_M64>,
                                      Just<EncModrm_rm>,
                                      Nothing,
                                      Nothing);
         }
      case (0xee):
      if (prefix.operand_size)
         {
             /* EncodedInstructionDefinition {{[OPERAND_SIZE]
                                           ;0F EE 
                                           ;Just Modrm
                                           ;Just RMBoth
                                           ;Nothing
                                           ;[]
                                           ;Nothing
                                           ;Nothing}
                                          ;Prototype {protoMnemonic = "PMAXSW", protoOperands = [OpXMM,OpXMM_M128]}
                                          ;[(EncModrm_reg
                                            ,OperandReadWrite)
                                           ,(EncModrm_rm,OperandReadOnly)]
                                          ;64bit: True
                                          ;legacy: True
                                          ;Compare signed word integers in xmm2/m128 and xmm1 and return maximum values.} */
             
             ERASM_DECODER_DO_ACTION (2,
                                      Pmaxsw,
                                      Just<OpXMM>,
                                      Just<EncModrm_reg>,
                                      Just<OpXMM_M128>,
                                      Just<EncModrm_rm>,
                                      Nothing,
                                      Nothing);
         }
      else
         {
             /* EncodedInstructionDefinition {{[]
                                           ;0F EE 
                                           ;Just Modrm
                                           ;Just RMBoth
                                           ;Nothing
                                           ;[]
                                           ;Nothing
                                           ;Nothing}
                                          ;Prototype {protoMnemonic = "PMAXSW", protoOperands = [OpMM,OpMM_M64]}
                                          ;[(EncModrm_reg
                                            ,OperandReadWrite)
                                           ,(EncModrm_rm,OperandReadOnly)]
                                          ;64bit: True
                                          ;legacy: True
                                          ;Compare signed word integers in mm2/m64 and mm1 and return maximum values.} */
             
             ERASM_DECODER_DO_ACTION (2,
                                      Pmaxsw,
                                      Just<OpMM>,
                                      Just<EncModrm_reg>,
                                      Just<OpMM_M64>,
                                      Just<EncModrm_rm>,
                                      Nothing,
                                      Nothing);
         }
      case (0xef):
      if (prefix.operand_size)
         {
             /* EncodedInstructionDefinition {{[OPERAND_SIZE]
                                           ;0F EF 
                                           ;Just Modrm
                                           ;Just RMBoth
                                           ;Nothing
                                           ;[]
                                           ;Nothing
                                           ;Nothing}
                                          ;Prototype {protoMnemonic = "PXOR", protoOperands = [OpXMM,OpXMM_M128]}
                                          ;[(EncModrm_reg
                                            ,OperandReadWrite)
                                           ,(EncModrm_rm,OperandReadOnly)]
                                          ;64bit: True
                                          ;legacy: True
                                          ;Bitwise XOR of xmm2/m128 and xmm1.} */
             
             ERASM_DECODER_DO_ACTION (2,
                                      Pxor,
                                      Just<OpXMM>,
                                      Just<EncModrm_reg>,
                                      Just<OpXMM_M128>,
                                      Just<EncModrm_rm>,
                                      Nothing,
                                      Nothing);
         }
      else
         {
             /* EncodedInstructionDefinition {{[]
                                           ;0F EF 
                                           ;Just Modrm
                                           ;Just RMBoth
                                           ;Nothing
                                           ;[]
                                           ;Nothing
                                           ;Nothing}
                                          ;Prototype {protoMnemonic = "PXOR", protoOperands = [OpMM,OpMM_M64]}
                                          ;[(EncModrm_reg
                                            ,OperandReadWrite)
                                           ,(EncModrm_rm,OperandReadOnly)]
                                          ;64bit: True
                                          ;legacy: True
                                          ;Bitwise XOR of mm/m64 and mm.} */
             
             ERASM_DECODER_DO_ACTION (2,
                                      Pxor,
                                      Just<OpMM>,
                                      Just<EncModrm_reg>,
                                      Just<OpMM_M64>,
                                      Just<EncModrm_rm>,
                                      Nothing,
                                      Nothing);
         }
      case (0xf0):
      if (!modrm_mod3 (p))
         if (prefix.repne)
            {
                /* EncodedInstructionDefinition {{[REPNE]
                                              ;0F F0 
                                              ;Just Modrm
                                              ;Just RMMemOnly
                                              ;Nothing
                                              ;[]
                                              ;Nothing
                                              ;Nothing}
                                             ;Prototype {protoMnemonic = "LDDQU", protoOperands = [OpXMM,OpM]}
                                             ;[(EncModrm_reg
                                               ,OperandReadWrite)
                                              ,(EncModrm_rm,OperandReadOnly)]
                                             ;64bit: True
                                             ;legacy: True
                                             ;Load unaligned data from mem and return double quadword in xmm1.} */
                
                ERASM_DECODER_DO_ACTION (2,
                                         Lddqu,
                                         Just<OpXMM>,
                                         Just<EncModrm_reg>,
                                         Just<OpM>,
                                         Just<EncModrm_rm_mem>,
                                         Nothing,
                                         Nothing);
            }
         else
            goto decode_error;
      else
         goto decode_error;
      case (0xf1):
      if (prefix.operand_size)
         {
             /* EncodedInstructionDefinition {{[OPERAND_SIZE]
                                           ;0F F1 
                                           ;Just Modrm
                                           ;Just RMBoth
                                           ;Nothing
                                           ;[]
                                           ;Nothing
                                           ;Nothing}
                                          ;Prototype {protoMnemonic = "PSLLW", protoOperands = [OpXMM,OpXMM_M128]}
                                          ;[(EncModrm_reg
                                            ,OperandReadWrite)
                                           ,(EncModrm_rm,OperandReadOnly)]
                                          ;64bit: True
                                          ;legacy: True
                                          ;Shift words in xmm1 left by xmm2/m128 while shifting in 0s.} */
             
             ERASM_DECODER_DO_ACTION (2,
                                      Psllw,
                                      Just<OpXMM>,
                                      Just<EncModrm_reg>,
                                      Just<OpXMM_M128>,
                                      Just<EncModrm_rm>,
                                      Nothing,
                                      Nothing);
         }
      else
         {
             /* EncodedInstructionDefinition {{[]
                                           ;0F F1 
                                           ;Just Modrm
                                           ;Just RMBoth
                                           ;Nothing
                                           ;[]
                                           ;Nothing
                                           ;Nothing}
                                          ;Prototype {protoMnemonic = "PSLLW", protoOperands = [OpMM,OpMM_M64]}
                                          ;[(EncModrm_reg
                                            ,OperandReadWrite)
                                           ,(EncModrm_rm,OperandReadOnly)]
                                          ;64bit: True
                                          ;legacy: True
                                          ;Shift words in mm left mm/m64 while shifting in 0s.} */
             
             ERASM_DECODER_DO_ACTION (2,
                                      Psllw,
                                      Just<OpMM>,
                                      Just<EncModrm_reg>,
                                      Just<OpMM_M64>,
                                      Just<EncModrm_rm>,
                                      Nothing,
                                      Nothing);
         }
      case (0xf2):
      if (prefix.operand_size)
         {
             /* EncodedInstructionDefinition {{[OPERAND_SIZE]
                                           ;0F F2 
                                           ;Just Modrm
                                           ;Just RMBoth
                                           ;Nothing
                                           ;[]
                                           ;Nothing
                                           ;Nothing}
                                          ;Prototype {protoMnemonic = "PSLLD", protoOperands = [OpXMM,OpXMM_M128]}
                                          ;[(EncModrm_reg
                                            ,OperandReadWrite)
                                           ,(EncModrm_rm,OperandReadOnly)]
                                          ;64bit: True
                                          ;legacy: True
                                          ;Shift doublewords in xmm1 left by xmm2/m128 while shifting in 0s.} */
             
             ERASM_DECODER_DO_ACTION (2,
                                      Pslld,
                                      Just<OpXMM>,
                                      Just<EncModrm_reg>,
                                      Just<OpXMM_M128>,
                                      Just<EncModrm_rm>,
                                      Nothing,
                                      Nothing);
         }
      else
         {
             /* EncodedInstructionDefinition {{[]
                                           ;0F F2 
                                           ;Just Modrm
                                           ;Just RMBoth
                                           ;Nothing
                                           ;[]
                                           ;Nothing
                                           ;Nothing}
                                          ;Prototype {protoMnemonic = "PSLLD", protoOperands = [OpMM,OpMM_M64]}
                                          ;[(EncModrm_reg
                                            ,OperandReadWrite)
                                           ,(EncModrm_rm,OperandReadOnly)]
                                          ;64bit: True
                                          ;legacy: True
                                          ;Shift doublewords in mm left by mm/m64 while shifting in 0s.} */
             
             ERASM_DECODER_DO_ACTION (2,
                                      Pslld,
                                      Just<OpMM>,
                                      Just<EncModrm_reg>,
                                      Just<OpMM_M64>,
                                      Just<EncModrm_rm>,
                                      Nothing,
                                      Nothing);
         }
      case (0xf3):
      if (prefix.operand_size)
         {
             /* EncodedInstructionDefinition {{[OPERAND_SIZE]
                                           ;0F F3 
                                           ;Just Modrm
                                           ;Just RMBoth
                                           ;Nothing
                                           ;[]
                                           ;Nothing
                                           ;Nothing}
                                          ;Prototype {protoMnemonic = "PSLLQ", protoOperands = [OpXMM,OpXMM_M128]}
                                          ;[(EncModrm_reg
                                            ,OperandReadWrite)
                                           ,(EncModrm_rm,OperandReadOnly)]
                                          ;64bit: True
                                          ;legacy: True
                                          ;Shift quadwords in xmm1 left by xmm2/m128 while shifting in 0s.} */
             
             ERASM_DECODER_DO_ACTION (2,
                                      Psllq,
                                      Just<OpXMM>,
                                      Just<EncModrm_reg>,
                                      Just<OpXMM_M128>,
                                      Just<EncModrm_rm>,
                                      Nothing,
                                      Nothing);
         }
      else
         {
             /* EncodedInstructionDefinition {{[]
                                           ;0F F3 
                                           ;Just Modrm
                                           ;Just RMBoth
                                           ;Nothing
                                           ;[]
                                           ;Nothing
                                           ;Nothing}
                                          ;Prototype {protoMnemonic = "PSLLQ", protoOperands = [OpMM,OpMM_M64]}
                                          ;[(EncModrm_reg
                                            ,OperandReadWrite)
                                           ,(EncModrm_rm,OperandReadOnly)]
                                          ;64bit: True
                                          ;legacy: True
                                          ;Shift quadword in mm left by mm/m64 while shifting in 0s.} */
             
             ERASM_DECODER_DO_ACTION (2,
                                      Psllq,
                                      Just<OpMM>,
                                      Just<EncModrm_reg>,
                                      Just<OpMM_M64>,
                                      Just<EncModrm_rm>,
                                      Nothing,
                                      Nothing);
         }
      case (0xf4):
      if (prefix.operand_size)
         {
             /* EncodedInstructionDefinition {{[OPERAND_SIZE]
                                           ;0F F4 
                                           ;Just Modrm
                                           ;Just RMBoth
                                           ;Nothing
                                           ;[]
                                           ;Nothing
                                           ;Nothing}
                                          ;Prototype {protoMnemonic = "PMULUDQ", protoOperands = [OpXMM,OpXMM_M128]}
                                          ;[(EncModrm_reg
                                            ,OperandReadWrite)
                                           ,(EncModrm_rm,OperandReadOnly)]
                                          ;64bit: True
                                          ;legacy: True
                                          ;Multiply packed unsigned doubleword integers in xmm1 by packed unsigned doubleword integers in xmm2/m128, and store the quadword results in xmm1.} */
             
             ERASM_DECODER_DO_ACTION (2,
                                      Pmuludq,
                                      Just<OpXMM>,
                                      Just<EncModrm_reg>,
                                      Just<OpXMM_M128>,
                                      Just<EncModrm_rm>,
                                      Nothing,
                                      Nothing);
         }
      else
         {
             /* EncodedInstructionDefinition {{[]
                                           ;0F F4 
                                           ;Just Modrm
                                           ;Just RMBoth
                                           ;Nothing
                                           ;[]
                                           ;Nothing
                                           ;Nothing}
                                          ;Prototype {protoMnemonic = "PMULUDQ", protoOperands = [OpMM,OpMM_M64]}
                                          ;[(EncModrm_reg
                                            ,OperandReadWrite)
                                           ,(EncModrm_rm,OperandReadOnly)]
                                          ;64bit: True
                                          ;legacy: True
                                          ;Multiply unsigned doubleword integer in mm1 by unsigned doubleword integer in mm2/m64, and store the quadword result in mm1.} */
             
             ERASM_DECODER_DO_ACTION (2,
                                      Pmuludq,
                                      Just<OpMM>,
                                      Just<EncModrm_reg>,
                                      Just<OpMM_M64>,
                                      Just<EncModrm_rm>,
                                      Nothing,
                                      Nothing);
         }
      case (0xf5):
      if (prefix.operand_size)
         {
             /* EncodedInstructionDefinition {{[OPERAND_SIZE]
                                           ;0F F5 
                                           ;Just Modrm
                                           ;Just RMBoth
                                           ;Nothing
                                           ;[]
                                           ;Nothing
                                           ;Nothing}
                                          ;Prototype {protoMnemonic = "PMADDWD", protoOperands = [OpXMM,OpXMM_M128]}
                                          ;[(EncModrm_reg
                                            ,OperandReadWrite)
                                           ,(EncModrm_rm,OperandReadOnly)]
                                          ;64bit: True
                                          ;legacy: True
                                          ;Multiply the packed word integers in xmm1 by the packed word integers in xmm2/m128, add adjacent doubleword results, and store in xmm1.} */
             
             ERASM_DECODER_DO_ACTION (2,
                                      Pmaddwd,
                                      Just<OpXMM>,
                                      Just<EncModrm_reg>,
                                      Just<OpXMM_M128>,
                                      Just<EncModrm_rm>,
                                      Nothing,
                                      Nothing);
         }
      else
         {
             /* EncodedInstructionDefinition {{[]
                                           ;0F F5 
                                           ;Just Modrm
                                           ;Just RMBoth
                                           ;Nothing
                                           ;[]
                                           ;Nothing
                                           ;Nothing}
                                          ;Prototype {protoMnemonic = "PMADDWD", protoOperands = [OpMM,OpMM_M64]}
                                          ;[(EncModrm_reg
                                            ,OperandReadWrite)
                                           ,(EncModrm_rm,OperandReadOnly)]
                                          ;64bit: True
                                          ;legacy: True
                                          ;Multiply the packed words in mm by the packed words in mm/m64, add adjacent doubleword results, and store in mm.} */
             
             ERASM_DECODER_DO_ACTION (2,
                                      Pmaddwd,
                                      Just<OpMM>,
                                      Just<EncModrm_reg>,
                                      Just<OpMM_M64>,
                                      Just<EncModrm_rm>,
                                      Nothing,
                                      Nothing);
         }
      case (0xf6):
      if (prefix.operand_size)
         {
             /* EncodedInstructionDefinition {{[OPERAND_SIZE]
                                           ;0F F6 
                                           ;Just Modrm
                                           ;Just RMBoth
                                           ;Nothing
                                           ;[]
                                           ;Nothing
                                           ;Nothing}
                                          ;Prototype {protoMnemonic = "PSADBW", protoOperands = [OpXMM,OpXMM_M128]}
                                          ;[(EncModrm_reg
                                            ,OperandReadWrite)
                                           ,(EncModrm_rm,OperandReadOnly)]
                                          ;64bit: True
                                          ;legacy: True
                                          ;Computes the absolute differences of the packed unsigned byte integers from xmm2 /m128 and xmm1; the 8 low differences and 8 high differences are then summed separately to produce two unsigned word integer results.} */
             
             ERASM_DECODER_DO_ACTION (2,
                                      Psadbw,
                                      Just<OpXMM>,
                                      Just<EncModrm_reg>,
                                      Just<OpXMM_M128>,
                                      Just<EncModrm_rm>,
                                      Nothing,
                                      Nothing);
         }
      else
         {
             /* EncodedInstructionDefinition {{[]
                                           ;0F F6 
                                           ;Just Modrm
                                           ;Just RMBoth
                                           ;Nothing
                                           ;[]
                                           ;Nothing
                                           ;Nothing}
                                          ;Prototype {protoMnemonic = "PSADBW", protoOperands = [OpMM,OpMM_M64]}
                                          ;[(EncModrm_reg
                                            ,OperandReadWrite)
                                           ,(EncModrm_rm,OperandReadOnly)]
                                          ;64bit: True
                                          ;legacy: True
                                          ;Computes the absolute differences of the packed unsigned byte integers from mm2 /m64 and mm1; differences are then summed to produce an unsigned word integer result.} */
             
             ERASM_DECODER_DO_ACTION (2,
                                      Psadbw,
                                      Just<OpMM>,
                                      Just<EncModrm_reg>,
                                      Just<OpMM_M64>,
                                      Just<EncModrm_rm>,
                                      Nothing,
                                      Nothing);
         }
      case (0xf7):
      if (modrm_mod3 (p))
         if (prefix.operand_size)
            {
                /* EncodedInstructionDefinition {{[OPERAND_SIZE]
                                              ;0F F7 
                                              ;Just Modrm
                                              ;Just RMRegOnly
                                              ;Nothing
                                              ;[]
                                              ;Nothing
                                              ;Nothing}
                                             ;Prototype {protoMnemonic = "MASKMOVDQU", protoOperands = [OpXMM,OpXMM]}
                                             ;[(EncModrm_reg,OperandReadOnly)
                                              ,(EncModrm_rm,OperandReadOnly)]
                                             ;64bit: True
                                             ;legacy: True
                                             ;Selectively write bytes from xmm1 to memory location using the byte mask in xmm2. The default memory location is specified by DS:EDI.} */
                
                ERASM_DECODER_DO_ACTION (2,
                                         Maskmovdqu,
                                         Just<OpXMM>,
                                         Just<EncModrm_reg>,
                                         Just<OpXMM>,
                                         Just<EncModrm_rm_reg>,
                                         Nothing,
                                         Nothing);
            }
         else
            {
                /* EncodedInstructionDefinition {{[]
                                              ;0F F7 
                                              ;Just Modrm
                                              ;Just RMRegOnly
                                              ;Nothing
                                              ;[]
                                              ;Nothing
                                              ;Nothing}
                                             ;Prototype {protoMnemonic = "MASKMOVQ", protoOperands = [OpMM,OpMM]}
                                             ;[(EncModrm_reg,OperandReadOnly)
                                              ,(EncModrm_rm,OperandReadOnly)]
                                             ;64bit: True
                                             ;legacy: True
                                             ;Selectively write bytes from mm1 to memory location using the byte mask in mm2. The default memory location is specified by DS:EDI.} */
                
                ERASM_DECODER_DO_ACTION (2,
                                         Maskmovq,
                                         Just<OpMM>,
                                         Just<EncModrm_reg>,
                                         Just<OpMM>,
                                         Just<EncModrm_rm_reg>,
                                         Nothing,
                                         Nothing);
            }
      else
         goto decode_error;
      case (0xf8):
      if (prefix.operand_size)
         {
             /* EncodedInstructionDefinition {{[OPERAND_SIZE]
                                           ;0F F8 
                                           ;Just Modrm
                                           ;Just RMBoth
                                           ;Nothing
                                           ;[]
                                           ;Nothing
                                           ;Nothing}
                                          ;Prototype {protoMnemonic = "PSUBB", protoOperands = [OpXMM,OpXMM_M128]}
                                          ;[(EncModrm_reg
                                            ,OperandReadWrite)
                                           ,(EncModrm_rm,OperandReadOnly)]
                                          ;64bit: True
                                          ;legacy: True
                                          ;Subtract packed byte integers in xmm2/m128 from packed byte integers in xmm1.} */
             
             ERASM_DECODER_DO_ACTION (2,
                                      Psubb,
                                      Just<OpXMM>,
                                      Just<EncModrm_reg>,
                                      Just<OpXMM_M128>,
                                      Just<EncModrm_rm>,
                                      Nothing,
                                      Nothing);
         }
      else
         {
             /* EncodedInstructionDefinition {{[]
                                           ;0F F8 
                                           ;Just Modrm
                                           ;Just RMBoth
                                           ;Nothing
                                           ;[]
                                           ;Nothing
                                           ;Nothing}
                                          ;Prototype {protoMnemonic = "PSUBB", protoOperands = [OpMM,OpMM_M64]}
                                          ;[(EncModrm_reg
                                            ,OperandReadWrite)
                                           ,(EncModrm_rm,OperandReadOnly)]
                                          ;64bit: True
                                          ;legacy: True
                                          ;Subtract packed byte integers in mm/m64 from packed byte integers in mm.} */
             
             ERASM_DECODER_DO_ACTION (2,
                                      Psubb,
                                      Just<OpMM>,
                                      Just<EncModrm_reg>,
                                      Just<OpMM_M64>,
                                      Just<EncModrm_rm>,
                                      Nothing,
                                      Nothing);
         }
      case (0xf9):
      if (prefix.operand_size)
         {
             /* EncodedInstructionDefinition {{[OPERAND_SIZE]
                                           ;0F F9 
                                           ;Just Modrm
                                           ;Just RMBoth
                                           ;Nothing
                                           ;[]
                                           ;Nothing
                                           ;Nothing}
                                          ;Prototype {protoMnemonic = "PSUBW", protoOperands = [OpXMM,OpXMM_M128]}
                                          ;[(EncModrm_reg
                                            ,OperandReadWrite)
                                           ,(EncModrm_rm,OperandReadOnly)]
                                          ;64bit: True
                                          ;legacy: True
                                          ;Subtract packed word integers in xmm2/m128 from packed word integers in xmm1.} */
             
             ERASM_DECODER_DO_ACTION (2,
                                      Psubw,
                                      Just<OpXMM>,
                                      Just<EncModrm_reg>,
                                      Just<OpXMM_M128>,
                                      Just<EncModrm_rm>,
                                      Nothing,
                                      Nothing);
         }
      else
         {
             /* EncodedInstructionDefinition {{[]
                                           ;0F F9 
                                           ;Just Modrm
                                           ;Just RMBoth
                                           ;Nothing
                                           ;[]
                                           ;Nothing
                                           ;Nothing}
                                          ;Prototype {protoMnemonic = "PSUBW", protoOperands = [OpMM,OpMM_M64]}
                                          ;[(EncModrm_reg
                                            ,OperandReadWrite)
                                           ,(EncModrm_rm,OperandReadOnly)]
                                          ;64bit: True
                                          ;legacy: True
                                          ;Subtract packed word integers in mm/m64 from packed word integers in mm.} */
             
             ERASM_DECODER_DO_ACTION (2,
                                      Psubw,
                                      Just<OpMM>,
                                      Just<EncModrm_reg>,
                                      Just<OpMM_M64>,
                                      Just<EncModrm_rm>,
                                      Nothing,
                                      Nothing);
         }
      case (0xfa):
      if (prefix.operand_size)
         {
             /* EncodedInstructionDefinition {{[OPERAND_SIZE]
                                           ;0F FA 
                                           ;Just Modrm
                                           ;Just RMBoth
                                           ;Nothing
                                           ;[]
                                           ;Nothing
                                           ;Nothing}
                                          ;Prototype {protoMnemonic = "PSUBD", protoOperands = [OpXMM,OpXMM_M128]}
                                          ;[(EncModrm_reg
                                            ,OperandReadWrite)
                                           ,(EncModrm_rm,OperandReadOnly)]
                                          ;64bit: True
                                          ;legacy: True
                                          ;Subtract packed doubleword integers in xmm2/mem128 from packed doubleword integers in xmm1.} */
             
             ERASM_DECODER_DO_ACTION (2,
                                      Psubd,
                                      Just<OpXMM>,
                                      Just<EncModrm_reg>,
                                      Just<OpXMM_M128>,
                                      Just<EncModrm_rm>,
                                      Nothing,
                                      Nothing);
         }
      else
         {
             /* EncodedInstructionDefinition {{[]
                                           ;0F FA 
                                           ;Just Modrm
                                           ;Just RMBoth
                                           ;Nothing
                                           ;[]
                                           ;Nothing
                                           ;Nothing}
                                          ;Prototype {protoMnemonic = "PSUBD", protoOperands = [OpMM,OpMM_M64]}
                                          ;[(EncModrm_reg
                                            ,OperandReadWrite)
                                           ,(EncModrm_rm,OperandReadOnly)]
                                          ;64bit: True
                                          ;legacy: True
                                          ;Subtract packed doubleword integers in mm/m64 from packed doubleword integers in mm.} */
             
             ERASM_DECODER_DO_ACTION (2,
                                      Psubd,
                                      Just<OpMM>,
                                      Just<EncModrm_reg>,
                                      Just<OpMM_M64>,
                                      Just<EncModrm_rm>,
                                      Nothing,
                                      Nothing);
         }
      case (0xfb):
      if (prefix.operand_size)
         {
             /* EncodedInstructionDefinition {{[OPERAND_SIZE]
                                           ;0F FB 
                                           ;Just Modrm
                                           ;Just RMBoth
                                           ;Nothing
                                           ;[]
                                           ;Nothing
                                           ;Nothing}
                                          ;Prototype {protoMnemonic = "PSUBQ", protoOperands = [OpXMM,OpXMM_M128]}
                                          ;[(EncModrm_reg
                                            ,OperandReadWrite)
                                           ,(EncModrm_rm,OperandReadOnly)]
                                          ;64bit: True
                                          ;legacy: True
                                          ;Subtract packed quadword integers in xmm1 from xmm2 /m128.} */
             
             ERASM_DECODER_DO_ACTION (2,
                                      Psubq,
                                      Just<OpXMM>,
                                      Just<EncModrm_reg>,
                                      Just<OpXMM_M128>,
                                      Just<EncModrm_rm>,
                                      Nothing,
                                      Nothing);
         }
      else
         {
             /* EncodedInstructionDefinition {{[]
                                           ;0F FB 
                                           ;Just Modrm
                                           ;Just RMBoth
                                           ;Nothing
                                           ;[]
                                           ;Nothing
                                           ;Nothing}
                                          ;Prototype {protoMnemonic = "PSUBQ", protoOperands = [OpMM,OpMM_M64]}
                                          ;[(EncModrm_reg
                                            ,OperandReadWrite)
                                           ,(EncModrm_rm,OperandReadOnly)]
                                          ;64bit: True
                                          ;legacy: True
                                          ;Subtract quadword integer in mm1 from mm2 /m64.} */
             
             ERASM_DECODER_DO_ACTION (2,
                                      Psubq,
                                      Just<OpMM>,
                                      Just<EncModrm_reg>,
                                      Just<OpMM_M64>,
                                      Just<EncModrm_rm>,
                                      Nothing,
                                      Nothing);
         }
      case (0xfc):
      if (prefix.operand_size)
         {
             /* EncodedInstructionDefinition {{[OPERAND_SIZE]
                                           ;0F FC 
                                           ;Just Modrm
                                           ;Just RMBoth
                                           ;Nothing
                                           ;[]
                                           ;Nothing
                                           ;Nothing}
                                          ;Prototype {protoMnemonic = "PADDB", protoOperands = [OpXMM,OpXMM_M128]}
                                          ;[(EncModrm_reg
                                            ,OperandReadWrite)
                                           ,(EncModrm_rm,OperandReadOnly)]
                                          ;64bit: True
                                          ;legacy: True
                                          ;Add packed byte integers from xmm2/m128 and xmm1.} */
             
             ERASM_DECODER_DO_ACTION (2,
                                      Paddb,
                                      Just<OpXMM>,
                                      Just<EncModrm_reg>,
                                      Just<OpXMM_M128>,
                                      Just<EncModrm_rm>,
                                      Nothing,
                                      Nothing);
         }
      else
         {
             /* EncodedInstructionDefinition {{[]
                                           ;0F FC 
                                           ;Just Modrm
                                           ;Just RMBoth
                                           ;Nothing
                                           ;[]
                                           ;Nothing
                                           ;Nothing}
                                          ;Prototype {protoMnemonic = "PADDB", protoOperands = [OpMM,OpMM_M64]}
                                          ;[(EncModrm_reg
                                            ,OperandReadWrite)
                                           ,(EncModrm_rm,OperandReadOnly)]
                                          ;64bit: True
                                          ;legacy: True
                                          ;Add packed byte integers from mm/m64 and mm.} */
             
             ERASM_DECODER_DO_ACTION (2,
                                      Paddb,
                                      Just<OpMM>,
                                      Just<EncModrm_reg>,
                                      Just<OpMM_M64>,
                                      Just<EncModrm_rm>,
                                      Nothing,
                                      Nothing);
         }
      case (0xfd):
      if (prefix.operand_size)
         {
             /* EncodedInstructionDefinition {{[OPERAND_SIZE]
                                           ;0F FD 
                                           ;Just Modrm
                                           ;Just RMBoth
                                           ;Nothing
                                           ;[]
                                           ;Nothing
                                           ;Nothing}
                                          ;Prototype {protoMnemonic = "PADDW", protoOperands = [OpXMM,OpXMM_M128]}
                                          ;[(EncModrm_reg
                                            ,OperandReadWrite)
                                           ,(EncModrm_rm,OperandReadOnly)]
                                          ;64bit: True
                                          ;legacy: True
                                          ;Add packed word integers from xmm2/m128 and xmm1.} */
             
             ERASM_DECODER_DO_ACTION (2,
                                      Paddw,
                                      Just<OpXMM>,
                                      Just<EncModrm_reg>,
                                      Just<OpXMM_M128>,
                                      Just<EncModrm_rm>,
                                      Nothing,
                                      Nothing);
         }
      else
         {
             /* EncodedInstructionDefinition {{[]
                                           ;0F FD 
                                           ;Just Modrm
                                           ;Just RMBoth
                                           ;Nothing
                                           ;[]
                                           ;Nothing
                                           ;Nothing}
                                          ;Prototype {protoMnemonic = "PADDW", protoOperands = [OpMM,OpMM_M64]}
                                          ;[(EncModrm_reg
                                            ,OperandReadWrite)
                                           ,(EncModrm_rm,OperandReadOnly)]
                                          ;64bit: True
                                          ;legacy: True
                                          ;Add packed word integers from mm/m64 and mm.} */
             
             ERASM_DECODER_DO_ACTION (2,
                                      Paddw,
                                      Just<OpMM>,
                                      Just<EncModrm_reg>,
                                      Just<OpMM_M64>,
                                      Just<EncModrm_rm>,
                                      Nothing,
                                      Nothing);
         }
      case (0xfe):
      if (prefix.operand_size)
         {
             /* EncodedInstructionDefinition {{[OPERAND_SIZE]
                                           ;0F FE 
                                           ;Just Modrm
                                           ;Just RMBoth
                                           ;Nothing
                                           ;[]
                                           ;Nothing
                                           ;Nothing}
                                          ;Prototype {protoMnemonic = "PADDD", protoOperands = [OpXMM,OpXMM_M128]}
                                          ;[(EncModrm_reg
                                            ,OperandReadWrite)
                                           ,(EncModrm_rm,OperandReadOnly)]
                                          ;64bit: True
                                          ;legacy: True
                                          ;Add packed doubleword integers from xmm2/m128 and xmm1.} */
             
             ERASM_DECODER_DO_ACTION (2,
                                      Paddd,
                                      Just<OpXMM>,
                                      Just<EncModrm_reg>,
                                      Just<OpXMM_M128>,
                                      Just<EncModrm_rm>,
                                      Nothing,
                                      Nothing);
         }
      else
         {
             /* EncodedInstructionDefinition {{[]
                                           ;0F FE 
                                           ;Just Modrm
                                           ;Just RMBoth
                                           ;Nothing
                                           ;[]
                                           ;Nothing
                                           ;Nothing}
                                          ;Prototype {protoMnemonic = "PADDD", protoOperands = [OpMM,OpMM_M64]}
                                          ;[(EncModrm_reg
                                            ,OperandReadWrite)
                                           ,(EncModrm_rm,OperandReadOnly)]
                                          ;64bit: True
                                          ;legacy: True
                                          ;Add packed doubleword integers from mm/m64 and mm.} */
             
             ERASM_DECODER_DO_ACTION (2,
                                      Paddd,
                                      Just<OpMM>,
                                      Just<EncModrm_reg>,
                                      Just<OpMM_M64>,
                                      Just<EncModrm_rm>,
                                      Nothing,
                                      Nothing);
         }
      case (0xc8):
      {
          
      }
      case (0xc9):
      {
          
      }
      case (0xca):
      {
          
      }
      case (0xcb):
      {
          
      }
      case (0xcc):
      {
          
      }
      case (0xcd):
      {
          
      }
      case (0xce):
      {
          
      }
      case (0xcf):
      {
          /* EncodedInstructionDefinition {{[]
                                        ;0F C8 
                                        ;Nothing
                                        ;Nothing
                                        ;Just RaddD
                                        ;[]
                                        ;Nothing
                                        ;Nothing}
                                       ;Prototype {protoMnemonic = "BSWAP", protoOperands = [OpR32]}
                                       ;[(EncReg,OperandReadWrite)]
                                       ;64bit: True
                                       ;legacy: True
                                       ;Reverses the byte order of a 32-bit register.} */
          
          ERASM_DECODER_DO_ACTION (2,
                                   Bswap,
                                   Just<OpR32>,
                                   Just<EncReg>,
                                   Nothing,
                                   Nothing,
                                   Nothing,
                                   Nothing);
      }
      
   }
   case (0x10):
   {
       /* EncodedInstructionDefinition {{[]
                                     ;10 
                                     ;Just Modrm
                                     ;Just RMBoth
                                     ;Nothing
                                     ;[]
                                     ;Nothing
                                     ;Nothing}
                                    ;Prototype {protoMnemonic = "ADC", protoOperands = [OpRM8,OpR8]}
                                    ;[(EncModrm_rm,OperandReadWrite)
                                     ,(EncModrm_reg,OperandReadOnly)]
                                    ;64bit: True
                                    ;legacy: True
                                    ;Add with carry byte register to r/m8.} */
       
       ERASM_DECODER_DO_ACTION (1,
                                Adc,
                                Just<OpRM8>,
                                Just<EncModrm_rm>,
                                Just<OpR8>,
                                Just<EncModrm_reg>,
                                Nothing,
                                Nothing);
   }
   case (0x11):
   if (is_data16)
      {
          /* EncodedInstructionDefinition {{[]
                                        ;11 
                                        ;Just Modrm
                                        ;Just RMBoth
                                        ;Nothing
                                        ;[]
                                        ;Just Op16
                                        ;Nothing}
                                       ;Prototype {protoMnemonic = "ADC", protoOperands = [OpRM16,OpR16]}
                                       ;[(EncModrm_rm,OperandReadWrite)
                                        ,(EncModrm_reg,OperandReadOnly)]
                                       ;64bit: True
                                       ;legacy: True
                                       ;Add with carry r16 to r/m16.} */
          
          ERASM_DECODER_DO_ACTION (1,
                                   Adc,
                                   Just<OpRM16>,
                                   Just<EncModrm_rm>,
                                   Just<OpR16>,
                                   Just<EncModrm_reg>,
                                   Nothing,
                                   Nothing);
      }
   else
      {
          /* EncodedInstructionDefinition {{[]
                                        ;11 
                                        ;Just Modrm
                                        ;Just RMBoth
                                        ;Nothing
                                        ;[]
                                        ;Just Op32
                                        ;Nothing}
                                       ;Prototype {protoMnemonic = "ADC", protoOperands = [OpRM32,OpR32]}
                                       ;[(EncModrm_rm,OperandReadWrite)
                                        ,(EncModrm_reg,OperandReadOnly)]
                                       ;64bit: True
                                       ;legacy: True
                                       ;Add with CF r32 to r/m32.} */
          
          ERASM_DECODER_DO_ACTION (1,
                                   Adc,
                                   Just<OpRM32>,
                                   Just<EncModrm_rm>,
                                   Just<OpR32>,
                                   Just<EncModrm_reg>,
                                   Nothing,
                                   Nothing);
      }
   case (0x12):
   {
       /* EncodedInstructionDefinition {{[]
                                     ;12 
                                     ;Just Modrm
                                     ;Just RMBoth
                                     ;Nothing
                                     ;[]
                                     ;Nothing
                                     ;Nothing}
                                    ;Prototype {protoMnemonic = "ADC", protoOperands = [OpR8,OpRM8]}
                                    ;[(EncModrm_reg
                                      ,OperandReadWrite)
                                     ,(EncModrm_rm,OperandReadOnly)]
                                    ;64bit: True
                                    ;legacy: True
                                    ;Add with carry r/m8 to byte register.} */
       
       ERASM_DECODER_DO_ACTION (1,
                                Adc,
                                Just<OpR8>,
                                Just<EncModrm_reg>,
                                Just<OpRM8>,
                                Just<EncModrm_rm>,
                                Nothing,
                                Nothing);
   }
   case (0x13):
   if (is_data16)
      {
          /* EncodedInstructionDefinition {{[]
                                        ;13 
                                        ;Just Modrm
                                        ;Just RMBoth
                                        ;Nothing
                                        ;[]
                                        ;Just Op16
                                        ;Nothing}
                                       ;Prototype {protoMnemonic = "ADC", protoOperands = [OpR16,OpRM16]}
                                       ;[(EncModrm_reg
                                         ,OperandReadWrite)
                                        ,(EncModrm_rm,OperandReadOnly)]
                                       ;64bit: True
                                       ;legacy: True
                                       ;Add with carry r/m16 to r16.} */
          
          ERASM_DECODER_DO_ACTION (1,
                                   Adc,
                                   Just<OpR16>,
                                   Just<EncModrm_reg>,
                                   Just<OpRM16>,
                                   Just<EncModrm_rm>,
                                   Nothing,
                                   Nothing);
      }
   else
      {
          /* EncodedInstructionDefinition {{[]
                                        ;13 
                                        ;Just Modrm
                                        ;Just RMBoth
                                        ;Nothing
                                        ;[]
                                        ;Just Op32
                                        ;Nothing}
                                       ;Prototype {protoMnemonic = "ADC", protoOperands = [OpR32,OpRM32]}
                                       ;[(EncModrm_reg
                                         ,OperandReadWrite)
                                        ,(EncModrm_rm,OperandReadOnly)]
                                       ;64bit: True
                                       ;legacy: True
                                       ;Add with CF r/m32 to r32.} */
          
          ERASM_DECODER_DO_ACTION (1,
                                   Adc,
                                   Just<OpR32>,
                                   Just<EncModrm_reg>,
                                   Just<OpRM32>,
                                   Just<EncModrm_rm>,
                                   Nothing,
                                   Nothing);
      }
   case (0x14):
   {
       /* EncodedInstructionDefinition {{[]
                                     ;14 
                                     ;Nothing
                                     ;Nothing
                                     ;Nothing
                                     ;[IMM_IB]
                                     ;Nothing
                                     ;Nothing}
                                    ;Prototype {protoMnemonic = "ADC", protoOperands = [OpAL,OpIMM8]}
                                    ;[(EncImplicit,OperandReadWrite)
                                     ,(EncIMM,OperandReadWrite)]
                                    ;64bit: True
                                    ;legacy: True
                                    ;Add with carry imm8 to AL.} */
       
       ERASM_DECODER_DO_ACTION (1,
                                Adc,
                                Just<OpAL>,
                                Just<EncImplicit>,
                                Just<OpIMM8>,
                                Just<EncIMM>,
                                Nothing,
                                Nothing);
   }
   case (0x15):
   if (is_data16)
      {
          /* EncodedInstructionDefinition {{[]
                                        ;15 
                                        ;Nothing
                                        ;Nothing
                                        ;Nothing
                                        ;[IMM_IW]
                                        ;Just Op16
                                        ;Nothing}
                                       ;Prototype {protoMnemonic = "ADC", protoOperands = [OpAX,OpIMM16]}
                                       ;[(EncImplicit,OperandReadWrite)
                                        ,(EncIMM,OperandReadWrite)]
                                       ;64bit: True
                                       ;legacy: True
                                       ;Add with carry imm16 to AX.} */
          
          ERASM_DECODER_DO_ACTION (1,
                                   Adc,
                                   Just<OpAX>,
                                   Just<EncImplicit>,
                                   Just<OpIMM16>,
                                   Just<EncIMM>,
                                   Nothing,
                                   Nothing);
      }
   else
      {
          /* EncodedInstructionDefinition {{[]
                                        ;15 
                                        ;Nothing
                                        ;Nothing
                                        ;Nothing
                                        ;[IMM_ID]
                                        ;Just Op32
                                        ;Nothing}
                                       ;Prototype {protoMnemonic = "ADC", protoOperands = [OpEAX,OpIMM32]}
                                       ;[(EncImplicit,OperandReadWrite)
                                        ,(EncIMM,OperandReadWrite)]
                                       ;64bit: True
                                       ;legacy: True
                                       ;Add with carry imm32 to EAX.} */
          
          ERASM_DECODER_DO_ACTION (1,
                                   Adc,
                                   Just<OpEAX>,
                                   Just<EncImplicit>,
                                   Just<OpIMM32>,
                                   Just<EncIMM>,
                                   Nothing,
                                   Nothing);
      }
   case (0x16):
   {
       /* EncodedInstructionDefinition {{[]
                                     ;16 
                                     ;Nothing
                                     ;Nothing
                                     ;Nothing
                                     ;[]
                                     ;Nothing
                                     ;Nothing}
                                    ;Prototype {protoMnemonic = "PUSH", protoOperands = [OpSS]}
                                    ;[(EncImplicit
                                      ,OperandReadWrite)]
                                    ;64bit: False
                                    ;legacy: True
                                    ;Push SS.} */
       
       ERASM_DECODER_DO_ACTION (1,
                                Push,
                                Just<OpSS>,
                                Just<EncImplicit>,
                                Nothing,
                                Nothing,
                                Nothing,
                                Nothing);
   }
   case (0x17):
   {
       /* EncodedInstructionDefinition {{[]
                                     ;17 
                                     ;Nothing
                                     ;Nothing
                                     ;Nothing
                                     ;[]
                                     ;Nothing
                                     ;Nothing}
                                    ;Prototype {protoMnemonic = "POP", protoOperands = [OpSS]}
                                    ;[(EncImplicit
                                      ,OperandReadWrite)]
                                    ;64bit: False
                                    ;legacy: True
                                    ;Pop top of stack into SS; increment stack pointer.} */
       
       ERASM_DECODER_DO_ACTION (1,
                                Pop,
                                Just<OpSS>,
                                Just<EncImplicit>,
                                Nothing,
                                Nothing,
                                Nothing,
                                Nothing);
   }
   case (0x18):
   {
       /* EncodedInstructionDefinition {{[]
                                     ;18 
                                     ;Just Modrm
                                     ;Just RMBoth
                                     ;Nothing
                                     ;[]
                                     ;Nothing
                                     ;Nothing}
                                    ;Prototype {protoMnemonic = "SBB", protoOperands = [OpRM8,OpR8]}
                                    ;[(EncModrm_rm,OperandReadWrite)
                                     ,(EncModrm_reg,OperandReadOnly)]
                                    ;64bit: True
                                    ;legacy: True
                                    ;Subtract with borrow r8 from r/m8.} */
       
       ERASM_DECODER_DO_ACTION (1,
                                Sbb,
                                Just<OpRM8>,
                                Just<EncModrm_rm>,
                                Just<OpR8>,
                                Just<EncModrm_reg>,
                                Nothing,
                                Nothing);
   }
   case (0x19):
   if (is_data16)
      {
          /* EncodedInstructionDefinition {{[]
                                        ;19 
                                        ;Just Modrm
                                        ;Just RMBoth
                                        ;Nothing
                                        ;[]
                                        ;Just Op16
                                        ;Nothing}
                                       ;Prototype {protoMnemonic = "SBB", protoOperands = [OpRM16,OpR16]}
                                       ;[(EncModrm_rm,OperandReadWrite)
                                        ,(EncModrm_reg,OperandReadOnly)]
                                       ;64bit: True
                                       ;legacy: True
                                       ;Subtract with borrow r16 from r/m16.} */
          
          ERASM_DECODER_DO_ACTION (1,
                                   Sbb,
                                   Just<OpRM16>,
                                   Just<EncModrm_rm>,
                                   Just<OpR16>,
                                   Just<EncModrm_reg>,
                                   Nothing,
                                   Nothing);
      }
   else
      {
          /* EncodedInstructionDefinition {{[]
                                        ;19 
                                        ;Just Modrm
                                        ;Just RMBoth
                                        ;Nothing
                                        ;[]
                                        ;Just Op32
                                        ;Nothing}
                                       ;Prototype {protoMnemonic = "SBB", protoOperands = [OpRM32,OpR32]}
                                       ;[(EncModrm_rm,OperandReadWrite)
                                        ,(EncModrm_reg,OperandReadOnly)]
                                       ;64bit: True
                                       ;legacy: True
                                       ;Subtract with borrow r32 from r/m32.} */
          
          ERASM_DECODER_DO_ACTION (1,
                                   Sbb,
                                   Just<OpRM32>,
                                   Just<EncModrm_rm>,
                                   Just<OpR32>,
                                   Just<EncModrm_reg>,
                                   Nothing,
                                   Nothing);
      }
   case (0x1a):
   {
       /* EncodedInstructionDefinition {{[]
                                     ;1A 
                                     ;Just Modrm
                                     ;Just RMBoth
                                     ;Nothing
                                     ;[]
                                     ;Nothing
                                     ;Nothing}
                                    ;Prototype {protoMnemonic = "SBB", protoOperands = [OpR8,OpRM8]}
                                    ;[(EncModrm_reg
                                      ,OperandReadWrite)
                                     ,(EncModrm_rm,OperandReadOnly)]
                                    ;64bit: True
                                    ;legacy: True
                                    ;Subtract with borrow r/m8 from r8.} */
       
       ERASM_DECODER_DO_ACTION (1,
                                Sbb,
                                Just<OpR8>,
                                Just<EncModrm_reg>,
                                Just<OpRM8>,
                                Just<EncModrm_rm>,
                                Nothing,
                                Nothing);
   }
   case (0x1b):
   if (is_data16)
      {
          /* EncodedInstructionDefinition {{[]
                                        ;1B 
                                        ;Just Modrm
                                        ;Just RMBoth
                                        ;Nothing
                                        ;[]
                                        ;Just Op16
                                        ;Nothing}
                                       ;Prototype {protoMnemonic = "SBB", protoOperands = [OpR16,OpRM16]}
                                       ;[(EncModrm_reg
                                         ,OperandReadWrite)
                                        ,(EncModrm_rm,OperandReadOnly)]
                                       ;64bit: True
                                       ;legacy: True
                                       ;Subtract with borrow r/m16 from r16.} */
          
          ERASM_DECODER_DO_ACTION (1,
                                   Sbb,
                                   Just<OpR16>,
                                   Just<EncModrm_reg>,
                                   Just<OpRM16>,
                                   Just<EncModrm_rm>,
                                   Nothing,
                                   Nothing);
      }
   else
      {
          /* EncodedInstructionDefinition {{[]
                                        ;1B 
                                        ;Just Modrm
                                        ;Just RMBoth
                                        ;Nothing
                                        ;[]
                                        ;Just Op32
                                        ;Nothing}
                                       ;Prototype {protoMnemonic = "SBB", protoOperands = [OpR32,OpRM32]}
                                       ;[(EncModrm_reg
                                         ,OperandReadWrite)
                                        ,(EncModrm_rm,OperandReadOnly)]
                                       ;64bit: True
                                       ;legacy: True
                                       ;Subtract with borrow r/m32 from r32.} */
          
          ERASM_DECODER_DO_ACTION (1,
                                   Sbb,
                                   Just<OpR32>,
                                   Just<EncModrm_reg>,
                                   Just<OpRM32>,
                                   Just<EncModrm_rm>,
                                   Nothing,
                                   Nothing);
      }
   case (0x1c):
   {
       /* EncodedInstructionDefinition {{[]
                                     ;1C 
                                     ;Nothing
                                     ;Nothing
                                     ;Nothing
                                     ;[IMM_IB]
                                     ;Nothing
                                     ;Nothing}
                                    ;Prototype {protoMnemonic = "SBB", protoOperands = [OpAL,OpIMM8]}
                                    ;[(EncImplicit,OperandReadWrite)
                                     ,(EncIMM,OperandReadWrite)]
                                    ;64bit: True
                                    ;legacy: True
                                    ;Subtract with borrow imm8 from AL.} */
       
       ERASM_DECODER_DO_ACTION (1,
                                Sbb,
                                Just<OpAL>,
                                Just<EncImplicit>,
                                Just<OpIMM8>,
                                Just<EncIMM>,
                                Nothing,
                                Nothing);
   }
   case (0x1d):
   if (is_data16)
      {
          /* EncodedInstructionDefinition {{[]
                                        ;1D 
                                        ;Nothing
                                        ;Nothing
                                        ;Nothing
                                        ;[IMM_IW]
                                        ;Just Op16
                                        ;Nothing}
                                       ;Prototype {protoMnemonic = "SBB", protoOperands = [OpAX,OpIMM16]}
                                       ;[(EncImplicit,OperandReadWrite)
                                        ,(EncIMM,OperandReadWrite)]
                                       ;64bit: True
                                       ;legacy: True
                                       ;Subtract with borrow imm16 from AX.} */
          
          ERASM_DECODER_DO_ACTION (1,
                                   Sbb,
                                   Just<OpAX>,
                                   Just<EncImplicit>,
                                   Just<OpIMM16>,
                                   Just<EncIMM>,
                                   Nothing,
                                   Nothing);
      }
   else
      {
          /* EncodedInstructionDefinition {{[]
                                        ;1D 
                                        ;Nothing
                                        ;Nothing
                                        ;Nothing
                                        ;[IMM_ID]
                                        ;Just Op32
                                        ;Nothing}
                                       ;Prototype {protoMnemonic = "SBB", protoOperands = [OpEAX,OpIMM32]}
                                       ;[(EncImplicit,OperandReadWrite)
                                        ,(EncIMM,OperandReadWrite)]
                                       ;64bit: True
                                       ;legacy: True
                                       ;Subtract with borrow imm32 from EAX.} */
          
          ERASM_DECODER_DO_ACTION (1,
                                   Sbb,
                                   Just<OpEAX>,
                                   Just<EncImplicit>,
                                   Just<OpIMM32>,
                                   Just<EncIMM>,
                                   Nothing,
                                   Nothing);
      }
   case (0x1e):
   {
       /* EncodedInstructionDefinition {{[]
                                     ;1E 
                                     ;Nothing
                                     ;Nothing
                                     ;Nothing
                                     ;[]
                                     ;Nothing
                                     ;Nothing}
                                    ;Prototype {protoMnemonic = "PUSH", protoOperands = [OpDS]}
                                    ;[(EncImplicit
                                      ,OperandReadWrite)]
                                    ;64bit: False
                                    ;legacy: True
                                    ;Push DS.} */
       
       ERASM_DECODER_DO_ACTION (1,
                                Push,
                                Just<OpDS>,
                                Just<EncImplicit>,
                                Nothing,
                                Nothing,
                                Nothing,
                                Nothing);
   }
   case (0x1f):
   {
       /* EncodedInstructionDefinition {{[]
                                     ;1F 
                                     ;Nothing
                                     ;Nothing
                                     ;Nothing
                                     ;[]
                                     ;Nothing
                                     ;Nothing}
                                    ;Prototype {protoMnemonic = "POP", protoOperands = [OpDS]}
                                    ;[(EncImplicit
                                      ,OperandReadWrite)]
                                    ;64bit: False
                                    ;legacy: True
                                    ;Pop top of stack into DS; increment stack pointer.} */
       
       ERASM_DECODER_DO_ACTION (1,
                                Pop,
                                Just<OpDS>,
                                Just<EncImplicit>,
                                Nothing,
                                Nothing,
                                Nothing,
                                Nothing);
   }
   case (0x20):
   {
       /* EncodedInstructionDefinition {{[]
                                     ;20 
                                     ;Just Modrm
                                     ;Just RMBoth
                                     ;Nothing
                                     ;[]
                                     ;Nothing
                                     ;Nothing}
                                    ;Prototype {protoMnemonic = "AND", protoOperands = [OpRM8,OpR8]}
                                    ;[(EncModrm_rm,OperandReadWrite)
                                     ,(EncModrm_reg,OperandReadOnly)]
                                    ;64bit: True
                                    ;legacy: True
                                    ;r/m8 AND r8.} */
       
       ERASM_DECODER_DO_ACTION (1,
                                And,
                                Just<OpRM8>,
                                Just<EncModrm_rm>,
                                Just<OpR8>,
                                Just<EncModrm_reg>,
                                Nothing,
                                Nothing);
   }
   case (0x21):
   if (is_data16)
      {
          /* EncodedInstructionDefinition {{[]
                                        ;21 
                                        ;Just Modrm
                                        ;Just RMBoth
                                        ;Nothing
                                        ;[]
                                        ;Just Op16
                                        ;Nothing}
                                       ;Prototype {protoMnemonic = "AND", protoOperands = [OpRM16,OpR16]}
                                       ;[(EncModrm_rm,OperandReadWrite)
                                        ,(EncModrm_reg,OperandReadOnly)]
                                       ;64bit: True
                                       ;legacy: True
                                       ;r/m16 AND r16.} */
          
          ERASM_DECODER_DO_ACTION (1,
                                   And,
                                   Just<OpRM16>,
                                   Just<EncModrm_rm>,
                                   Just<OpR16>,
                                   Just<EncModrm_reg>,
                                   Nothing,
                                   Nothing);
      }
   else
      {
          /* EncodedInstructionDefinition {{[]
                                        ;21 
                                        ;Just Modrm
                                        ;Just RMBoth
                                        ;Nothing
                                        ;[]
                                        ;Just Op32
                                        ;Nothing}
                                       ;Prototype {protoMnemonic = "AND", protoOperands = [OpRM32,OpR32]}
                                       ;[(EncModrm_rm,OperandReadWrite)
                                        ,(EncModrm_reg,OperandReadOnly)]
                                       ;64bit: True
                                       ;legacy: True
                                       ;r/m32 AND r32.} */
          
          ERASM_DECODER_DO_ACTION (1,
                                   And,
                                   Just<OpRM32>,
                                   Just<EncModrm_rm>,
                                   Just<OpR32>,
                                   Just<EncModrm_reg>,
                                   Nothing,
                                   Nothing);
      }
   case (0x22):
   {
       /* EncodedInstructionDefinition {{[]
                                     ;22 
                                     ;Just Modrm
                                     ;Just RMBoth
                                     ;Nothing
                                     ;[]
                                     ;Nothing
                                     ;Nothing}
                                    ;Prototype {protoMnemonic = "AND", protoOperands = [OpR8,OpRM8]}
                                    ;[(EncModrm_reg
                                      ,OperandReadWrite)
                                     ,(EncModrm_rm,OperandReadOnly)]
                                    ;64bit: True
                                    ;legacy: True
                                    ;r8 AND r/m8.} */
       
       ERASM_DECODER_DO_ACTION (1,
                                And,
                                Just<OpR8>,
                                Just<EncModrm_reg>,
                                Just<OpRM8>,
                                Just<EncModrm_rm>,
                                Nothing,
                                Nothing);
   }
   case (0x23):
   if (is_data16)
      {
          /* EncodedInstructionDefinition {{[]
                                        ;23 
                                        ;Just Modrm
                                        ;Just RMBoth
                                        ;Nothing
                                        ;[]
                                        ;Just Op16
                                        ;Nothing}
                                       ;Prototype {protoMnemonic = "AND", protoOperands = [OpR16,OpRM16]}
                                       ;[(EncModrm_reg
                                         ,OperandReadWrite)
                                        ,(EncModrm_rm,OperandReadOnly)]
                                       ;64bit: True
                                       ;legacy: True
                                       ;r16 AND r/m16.} */
          
          ERASM_DECODER_DO_ACTION (1,
                                   And,
                                   Just<OpR16>,
                                   Just<EncModrm_reg>,
                                   Just<OpRM16>,
                                   Just<EncModrm_rm>,
                                   Nothing,
                                   Nothing);
      }
   else
      {
          /* EncodedInstructionDefinition {{[]
                                        ;23 
                                        ;Just Modrm
                                        ;Just RMBoth
                                        ;Nothing
                                        ;[]
                                        ;Just Op32
                                        ;Nothing}
                                       ;Prototype {protoMnemonic = "AND", protoOperands = [OpR32,OpRM32]}
                                       ;[(EncModrm_reg
                                         ,OperandReadWrite)
                                        ,(EncModrm_rm,OperandReadOnly)]
                                       ;64bit: True
                                       ;legacy: True
                                       ;r32 AND r/m32.} */
          
          ERASM_DECODER_DO_ACTION (1,
                                   And,
                                   Just<OpR32>,
                                   Just<EncModrm_reg>,
                                   Just<OpRM32>,
                                   Just<EncModrm_rm>,
                                   Nothing,
                                   Nothing);
      }
   case (0x24):
   {
       /* EncodedInstructionDefinition {{[]
                                     ;24 
                                     ;Nothing
                                     ;Nothing
                                     ;Nothing
                                     ;[IMM_IB]
                                     ;Nothing
                                     ;Nothing}
                                    ;Prototype {protoMnemonic = "AND", protoOperands = [OpAL,OpIMM8]}
                                    ;[(EncImplicit,OperandReadWrite)
                                     ,(EncIMM,OperandReadWrite)]
                                    ;64bit: True
                                    ;legacy: True
                                    ;AL AND imm8.} */
       
       ERASM_DECODER_DO_ACTION (1,
                                And,
                                Just<OpAL>,
                                Just<EncImplicit>,
                                Just<OpIMM8>,
                                Just<EncIMM>,
                                Nothing,
                                Nothing);
   }
   case (0x25):
   if (is_data16)
      {
          /* EncodedInstructionDefinition {{[]
                                        ;25 
                                        ;Nothing
                                        ;Nothing
                                        ;Nothing
                                        ;[IMM_IW]
                                        ;Just Op16
                                        ;Nothing}
                                       ;Prototype {protoMnemonic = "AND", protoOperands = [OpAX,OpIMM16]}
                                       ;[(EncImplicit,OperandReadWrite)
                                        ,(EncIMM,OperandReadWrite)]
                                       ;64bit: True
                                       ;legacy: True
                                       ;AX AND imm16.} */
          
          ERASM_DECODER_DO_ACTION (1,
                                   And,
                                   Just<OpAX>,
                                   Just<EncImplicit>,
                                   Just<OpIMM16>,
                                   Just<EncIMM>,
                                   Nothing,
                                   Nothing);
      }
   else
      {
          /* EncodedInstructionDefinition {{[]
                                        ;25 
                                        ;Nothing
                                        ;Nothing
                                        ;Nothing
                                        ;[IMM_ID]
                                        ;Just Op32
                                        ;Nothing}
                                       ;Prototype {protoMnemonic = "AND", protoOperands = [OpEAX,OpIMM32]}
                                       ;[(EncImplicit,OperandReadWrite)
                                        ,(EncIMM,OperandReadWrite)]
                                       ;64bit: True
                                       ;legacy: True
                                       ;EAX AND imm32.} */
          
          ERASM_DECODER_DO_ACTION (1,
                                   And,
                                   Just<OpEAX>,
                                   Just<EncImplicit>,
                                   Just<OpIMM32>,
                                   Just<EncIMM>,
                                   Nothing,
                                   Nothing);
      }
   case (0x26):
   ERASM_DECODER_SEGMENT_PREFIX (ES,
                                 es);
   case (0x27):
   {
       /* EncodedInstructionDefinition {{[]
                                     ;27 
                                     ;Nothing
                                     ;Nothing
                                     ;Nothing
                                     ;[]
                                     ;Nothing
                                     ;Nothing}
                                    ;Prototype {protoMnemonic = "DAA", protoOperands = []}
                                    ;[]
                                    ;64bit: False
                                    ;legacy: True
                                    ;Decimal adjust AL after addition.} */
       
       ERASM_DECODER_DO_ACTION (1,
                                Daa,
                                Nothing,
                                Nothing,
                                Nothing,
                                Nothing,
                                Nothing,
                                Nothing);
   }
   case (0x28):
   {
       /* EncodedInstructionDefinition {{[]
                                     ;28 
                                     ;Just Modrm
                                     ;Just RMBoth
                                     ;Nothing
                                     ;[]
                                     ;Nothing
                                     ;Nothing}
                                    ;Prototype {protoMnemonic = "SUB", protoOperands = [OpRM8,OpR8]}
                                    ;[(EncModrm_rm,OperandReadWrite)
                                     ,(EncModrm_reg,OperandReadOnly)]
                                    ;64bit: True
                                    ;legacy: True
                                    ;Subtract r8 from r/m8.} */
       
       ERASM_DECODER_DO_ACTION (1,
                                Sub,
                                Just<OpRM8>,
                                Just<EncModrm_rm>,
                                Just<OpR8>,
                                Just<EncModrm_reg>,
                                Nothing,
                                Nothing);
   }
   case (0x29):
   if (is_data16)
      {
          /* EncodedInstructionDefinition {{[]
                                        ;29 
                                        ;Just Modrm
                                        ;Just RMBoth
                                        ;Nothing
                                        ;[]
                                        ;Just Op16
                                        ;Nothing}
                                       ;Prototype {protoMnemonic = "SUB", protoOperands = [OpRM16,OpR16]}
                                       ;[(EncModrm_rm,OperandReadWrite)
                                        ,(EncModrm_reg,OperandReadOnly)]
                                       ;64bit: True
                                       ;legacy: True
                                       ;Subtract r16 from r/m16.} */
          
          ERASM_DECODER_DO_ACTION (1,
                                   Sub,
                                   Just<OpRM16>,
                                   Just<EncModrm_rm>,
                                   Just<OpR16>,
                                   Just<EncModrm_reg>,
                                   Nothing,
                                   Nothing);
      }
   else
      {
          /* EncodedInstructionDefinition {{[]
                                        ;29 
                                        ;Just Modrm
                                        ;Just RMBoth
                                        ;Nothing
                                        ;[]
                                        ;Just Op32
                                        ;Nothing}
                                       ;Prototype {protoMnemonic = "SUB", protoOperands = [OpRM32,OpR32]}
                                       ;[(EncModrm_rm,OperandReadWrite)
                                        ,(EncModrm_reg,OperandReadOnly)]
                                       ;64bit: True
                                       ;legacy: True
                                       ;Subtract r32 from r/m32.} */
          
          ERASM_DECODER_DO_ACTION (1,
                                   Sub,
                                   Just<OpRM32>,
                                   Just<EncModrm_rm>,
                                   Just<OpR32>,
                                   Just<EncModrm_reg>,
                                   Nothing,
                                   Nothing);
      }
   case (0x2a):
   {
       /* EncodedInstructionDefinition {{[]
                                     ;2A 
                                     ;Just Modrm
                                     ;Just RMBoth
                                     ;Nothing
                                     ;[]
                                     ;Nothing
                                     ;Nothing}
                                    ;Prototype {protoMnemonic = "SUB", protoOperands = [OpR8,OpRM8]}
                                    ;[(EncModrm_reg
                                      ,OperandReadWrite)
                                     ,(EncModrm_rm,OperandReadOnly)]
                                    ;64bit: True
                                    ;legacy: True
                                    ;Subtract r/m8 from r8.} */
       
       ERASM_DECODER_DO_ACTION (1,
                                Sub,
                                Just<OpR8>,
                                Just<EncModrm_reg>,
                                Just<OpRM8>,
                                Just<EncModrm_rm>,
                                Nothing,
                                Nothing);
   }
   case (0x2b):
   if (is_data16)
      {
          /* EncodedInstructionDefinition {{[]
                                        ;2B 
                                        ;Just Modrm
                                        ;Just RMBoth
                                        ;Nothing
                                        ;[]
                                        ;Just Op16
                                        ;Nothing}
                                       ;Prototype {protoMnemonic = "SUB", protoOperands = [OpR16,OpRM16]}
                                       ;[(EncModrm_reg
                                         ,OperandReadWrite)
                                        ,(EncModrm_rm,OperandReadOnly)]
                                       ;64bit: True
                                       ;legacy: True
                                       ;Subtract r/m16 from r16.} */
          
          ERASM_DECODER_DO_ACTION (1,
                                   Sub,
                                   Just<OpR16>,
                                   Just<EncModrm_reg>,
                                   Just<OpRM16>,
                                   Just<EncModrm_rm>,
                                   Nothing,
                                   Nothing);
      }
   else
      {
          /* EncodedInstructionDefinition {{[]
                                        ;2B 
                                        ;Just Modrm
                                        ;Just RMBoth
                                        ;Nothing
                                        ;[]
                                        ;Just Op32
                                        ;Nothing}
                                       ;Prototype {protoMnemonic = "SUB", protoOperands = [OpR32,OpRM32]}
                                       ;[(EncModrm_reg
                                         ,OperandReadWrite)
                                        ,(EncModrm_rm,OperandReadOnly)]
                                       ;64bit: True
                                       ;legacy: True
                                       ;Subtract r/m32 from r32.} */
          
          ERASM_DECODER_DO_ACTION (1,
                                   Sub,
                                   Just<OpR32>,
                                   Just<EncModrm_reg>,
                                   Just<OpRM32>,
                                   Just<EncModrm_rm>,
                                   Nothing,
                                   Nothing);
      }
   case (0x2c):
   {
       /* EncodedInstructionDefinition {{[]
                                     ;2C 
                                     ;Nothing
                                     ;Nothing
                                     ;Nothing
                                     ;[IMM_IB]
                                     ;Nothing
                                     ;Nothing}
                                    ;Prototype {protoMnemonic = "SUB", protoOperands = [OpAL,OpIMM8]}
                                    ;[(EncImplicit,OperandReadWrite)
                                     ,(EncIMM,OperandReadWrite)]
                                    ;64bit: True
                                    ;legacy: True
                                    ;Subtract imm8 from AL.} */
       
       ERASM_DECODER_DO_ACTION (1,
                                Sub,
                                Just<OpAL>,
                                Just<EncImplicit>,
                                Just<OpIMM8>,
                                Just<EncIMM>,
                                Nothing,
                                Nothing);
   }
   case (0x2d):
   if (is_data16)
      {
          /* EncodedInstructionDefinition {{[]
                                        ;2D 
                                        ;Nothing
                                        ;Nothing
                                        ;Nothing
                                        ;[IMM_IW]
                                        ;Just Op16
                                        ;Nothing}
                                       ;Prototype {protoMnemonic = "SUB", protoOperands = [OpAX,OpIMM16]}
                                       ;[(EncImplicit,OperandReadWrite)
                                        ,(EncIMM,OperandReadWrite)]
                                       ;64bit: True
                                       ;legacy: True
                                       ;Subtract imm16 from AX.} */
          
          ERASM_DECODER_DO_ACTION (1,
                                   Sub,
                                   Just<OpAX>,
                                   Just<EncImplicit>,
                                   Just<OpIMM16>,
                                   Just<EncIMM>,
                                   Nothing,
                                   Nothing);
      }
   else
      {
          /* EncodedInstructionDefinition {{[]
                                        ;2D 
                                        ;Nothing
                                        ;Nothing
                                        ;Nothing
                                        ;[IMM_ID]
                                        ;Just Op32
                                        ;Nothing}
                                       ;Prototype {protoMnemonic = "SUB", protoOperands = [OpEAX,OpIMM32]}
                                       ;[(EncImplicit,OperandReadWrite)
                                        ,(EncIMM,OperandReadWrite)]
                                       ;64bit: True
                                       ;legacy: True
                                       ;Subtract imm32 from EAX.} */
          
          ERASM_DECODER_DO_ACTION (1,
                                   Sub,
                                   Just<OpEAX>,
                                   Just<EncImplicit>,
                                   Just<OpIMM32>,
                                   Just<EncIMM>,
                                   Nothing,
                                   Nothing);
      }
   case (0x2e):
   ERASM_DECODER_SEGMENT_PREFIX (CS,
                                 cs);
   case (0x2f):
   {
       /* EncodedInstructionDefinition {{[]
                                     ;2F 
                                     ;Nothing
                                     ;Nothing
                                     ;Nothing
                                     ;[]
                                     ;Nothing
                                     ;Nothing}
                                    ;Prototype {protoMnemonic = "DAS", protoOperands = []}
                                    ;[]
                                    ;64bit: False
                                    ;legacy: True
                                    ;Decimal adjust AL after subtraction.} */
       
       ERASM_DECODER_DO_ACTION (1,
                                Das,
                                Nothing,
                                Nothing,
                                Nothing,
                                Nothing,
                                Nothing,
                                Nothing);
   }
   case (0x30):
   {
       /* EncodedInstructionDefinition {{[]
                                     ;30 
                                     ;Just Modrm
                                     ;Just RMBoth
                                     ;Nothing
                                     ;[]
                                     ;Nothing
                                     ;Nothing}
                                    ;Prototype {protoMnemonic = "XOR", protoOperands = [OpRM8,OpR8]}
                                    ;[(EncModrm_rm,OperandReadWrite)
                                     ,(EncModrm_reg,OperandReadOnly)]
                                    ;64bit: True
                                    ;legacy: True
                                    ;r/m8 XOR r8.} */
       
       ERASM_DECODER_DO_ACTION (1,
                                Xor,
                                Just<OpRM8>,
                                Just<EncModrm_rm>,
                                Just<OpR8>,
                                Just<EncModrm_reg>,
                                Nothing,
                                Nothing);
   }
   case (0x31):
   if (is_data16)
      {
          /* EncodedInstructionDefinition {{[]
                                        ;31 
                                        ;Just Modrm
                                        ;Just RMBoth
                                        ;Nothing
                                        ;[]
                                        ;Just Op16
                                        ;Nothing}
                                       ;Prototype {protoMnemonic = "XOR", protoOperands = [OpRM16,OpR16]}
                                       ;[(EncModrm_rm,OperandReadWrite)
                                        ,(EncModrm_reg,OperandReadOnly)]
                                       ;64bit: True
                                       ;legacy: True
                                       ;r/m16 XOR r16.} */
          
          ERASM_DECODER_DO_ACTION (1,
                                   Xor,
                                   Just<OpRM16>,
                                   Just<EncModrm_rm>,
                                   Just<OpR16>,
                                   Just<EncModrm_reg>,
                                   Nothing,
                                   Nothing);
      }
   else
      {
          /* EncodedInstructionDefinition {{[]
                                        ;31 
                                        ;Just Modrm
                                        ;Just RMBoth
                                        ;Nothing
                                        ;[]
                                        ;Just Op32
                                        ;Nothing}
                                       ;Prototype {protoMnemonic = "XOR", protoOperands = [OpRM32,OpR32]}
                                       ;[(EncModrm_rm,OperandReadWrite)
                                        ,(EncModrm_reg,OperandReadOnly)]
                                       ;64bit: True
                                       ;legacy: True
                                       ;r/m32 XOR r32.} */
          
          ERASM_DECODER_DO_ACTION (1,
                                   Xor,
                                   Just<OpRM32>,
                                   Just<EncModrm_rm>,
                                   Just<OpR32>,
                                   Just<EncModrm_reg>,
                                   Nothing,
                                   Nothing);
      }
   case (0x32):
   {
       /* EncodedInstructionDefinition {{[]
                                     ;32 
                                     ;Just Modrm
                                     ;Just RMBoth
                                     ;Nothing
                                     ;[]
                                     ;Nothing
                                     ;Nothing}
                                    ;Prototype {protoMnemonic = "XOR", protoOperands = [OpR8,OpRM8]}
                                    ;[(EncModrm_reg
                                      ,OperandReadWrite)
                                     ,(EncModrm_rm,OperandReadOnly)]
                                    ;64bit: True
                                    ;legacy: True
                                    ;r8 XOR r/m8.} */
       
       ERASM_DECODER_DO_ACTION (1,
                                Xor,
                                Just<OpR8>,
                                Just<EncModrm_reg>,
                                Just<OpRM8>,
                                Just<EncModrm_rm>,
                                Nothing,
                                Nothing);
   }
   case (0x33):
   if (is_data16)
      {
          /* EncodedInstructionDefinition {{[]
                                        ;33 
                                        ;Just Modrm
                                        ;Just RMBoth
                                        ;Nothing
                                        ;[]
                                        ;Just Op16
                                        ;Nothing}
                                       ;Prototype {protoMnemonic = "XOR", protoOperands = [OpR16,OpRM16]}
                                       ;[(EncModrm_reg
                                         ,OperandReadWrite)
                                        ,(EncModrm_rm,OperandReadOnly)]
                                       ;64bit: True
                                       ;legacy: True
                                       ;r16 XOR r/m16.} */
          
          ERASM_DECODER_DO_ACTION (1,
                                   Xor,
                                   Just<OpR16>,
                                   Just<EncModrm_reg>,
                                   Just<OpRM16>,
                                   Just<EncModrm_rm>,
                                   Nothing,
                                   Nothing);
      }
   else
      {
          /* EncodedInstructionDefinition {{[]
                                        ;33 
                                        ;Just Modrm
                                        ;Just RMBoth
                                        ;Nothing
                                        ;[]
                                        ;Just Op32
                                        ;Nothing}
                                       ;Prototype {protoMnemonic = "XOR", protoOperands = [OpR32,OpRM32]}
                                       ;[(EncModrm_reg
                                         ,OperandReadWrite)
                                        ,(EncModrm_rm,OperandReadOnly)]
                                       ;64bit: True
                                       ;legacy: True
                                       ;r32 XOR r/m32.} */
          
          ERASM_DECODER_DO_ACTION (1,
                                   Xor,
                                   Just<OpR32>,
                                   Just<EncModrm_reg>,
                                   Just<OpRM32>,
                                   Just<EncModrm_rm>,
                                   Nothing,
                                   Nothing);
      }
   case (0x34):
   {
       /* EncodedInstructionDefinition {{[]
                                     ;34 
                                     ;Nothing
                                     ;Nothing
                                     ;Nothing
                                     ;[IMM_IB]
                                     ;Nothing
                                     ;Nothing}
                                    ;Prototype {protoMnemonic = "XOR", protoOperands = [OpAL,OpIMM8]}
                                    ;[(EncImplicit,OperandReadWrite)
                                     ,(EncIMM,OperandReadWrite)]
                                    ;64bit: True
                                    ;legacy: True
                                    ;AL XOR imm8.} */
       
       ERASM_DECODER_DO_ACTION (1,
                                Xor,
                                Just<OpAL>,
                                Just<EncImplicit>,
                                Just<OpIMM8>,
                                Just<EncIMM>,
                                Nothing,
                                Nothing);
   }
   case (0x35):
   if (is_data16)
      {
          /* EncodedInstructionDefinition {{[]
                                        ;35 
                                        ;Nothing
                                        ;Nothing
                                        ;Nothing
                                        ;[IMM_IW]
                                        ;Just Op16
                                        ;Nothing}
                                       ;Prototype {protoMnemonic = "XOR", protoOperands = [OpAX,OpIMM16]}
                                       ;[(EncImplicit,OperandReadWrite)
                                        ,(EncIMM,OperandReadWrite)]
                                       ;64bit: True
                                       ;legacy: True
                                       ;AX XOR imm16.} */
          
          ERASM_DECODER_DO_ACTION (1,
                                   Xor,
                                   Just<OpAX>,
                                   Just<EncImplicit>,
                                   Just<OpIMM16>,
                                   Just<EncIMM>,
                                   Nothing,
                                   Nothing);
      }
   else
      {
          /* EncodedInstructionDefinition {{[]
                                        ;35 
                                        ;Nothing
                                        ;Nothing
                                        ;Nothing
                                        ;[IMM_ID]
                                        ;Just Op32
                                        ;Nothing}
                                       ;Prototype {protoMnemonic = "XOR", protoOperands = [OpEAX,OpIMM32]}
                                       ;[(EncImplicit,OperandReadWrite)
                                        ,(EncIMM,OperandReadWrite)]
                                       ;64bit: True
                                       ;legacy: True
                                       ;EAX XOR imm32.} */
          
          ERASM_DECODER_DO_ACTION (1,
                                   Xor,
                                   Just<OpEAX>,
                                   Just<EncImplicit>,
                                   Just<OpIMM32>,
                                   Just<EncIMM>,
                                   Nothing,
                                   Nothing);
      }
   case (0x36):
   ERASM_DECODER_SEGMENT_PREFIX (SS,
                                 ss);
   case (0x37):
   {
       /* EncodedInstructionDefinition {{[]
                                     ;37 
                                     ;Nothing
                                     ;Nothing
                                     ;Nothing
                                     ;[]
                                     ;Nothing
                                     ;Nothing}
                                    ;Prototype {protoMnemonic = "AAA", protoOperands = []}
                                    ;[]
                                    ;64bit: False
                                    ;legacy: True
                                    ;ASCII adjust AL after addition.} */
       
       ERASM_DECODER_DO_ACTION (1,
                                Aaa,
                                Nothing,
                                Nothing,
                                Nothing,
                                Nothing,
                                Nothing,
                                Nothing);
   }
   case (0x38):
   {
       /* EncodedInstructionDefinition {{[]
                                     ;38 
                                     ;Just Modrm
                                     ;Just RMBoth
                                     ;Nothing
                                     ;[]
                                     ;Nothing
                                     ;Nothing}
                                    ;Prototype {protoMnemonic = "CMP", protoOperands = [OpRM8,OpR8]}
                                    ;[(EncModrm_rm,OperandReadWrite)
                                     ,(EncModrm_reg
                                      ,OperandReadWrite)]
                                    ;64bit: True
                                    ;legacy: True
                                    ;Compare r8 with r/m8.} */
       
       ERASM_DECODER_DO_ACTION (1,
                                Cmp,
                                Just<OpRM8>,
                                Just<EncModrm_rm>,
                                Just<OpR8>,
                                Just<EncModrm_reg>,
                                Nothing,
                                Nothing);
   }
   case (0x39):
   if (is_data16)
      {
          /* EncodedInstructionDefinition {{[]
                                        ;39 
                                        ;Just Modrm
                                        ;Just RMBoth
                                        ;Nothing
                                        ;[]
                                        ;Just Op16
                                        ;Nothing}
                                       ;Prototype {protoMnemonic = "CMP", protoOperands = [OpRM16,OpR16]}
                                       ;[(EncModrm_rm,OperandReadWrite)
                                        ,(EncModrm_reg
                                         ,OperandReadWrite)]
                                       ;64bit: True
                                       ;legacy: True
                                       ;Compare r16 with r/m16.} */
          
          ERASM_DECODER_DO_ACTION (1,
                                   Cmp,
                                   Just<OpRM16>,
                                   Just<EncModrm_rm>,
                                   Just<OpR16>,
                                   Just<EncModrm_reg>,
                                   Nothing,
                                   Nothing);
      }
   else
      {
          /* EncodedInstructionDefinition {{[]
                                        ;39 
                                        ;Just Modrm
                                        ;Just RMBoth
                                        ;Nothing
                                        ;[]
                                        ;Just Op32
                                        ;Nothing}
                                       ;Prototype {protoMnemonic = "CMP", protoOperands = [OpRM32,OpR32]}
                                       ;[(EncModrm_rm,OperandReadWrite)
                                        ,(EncModrm_reg
                                         ,OperandReadWrite)]
                                       ;64bit: True
                                       ;legacy: True
                                       ;Compare r32 with r/m32.} */
          
          ERASM_DECODER_DO_ACTION (1,
                                   Cmp,
                                   Just<OpRM32>,
                                   Just<EncModrm_rm>,
                                   Just<OpR32>,
                                   Just<EncModrm_reg>,
                                   Nothing,
                                   Nothing);
      }
   case (0x3a):
   {
       /* EncodedInstructionDefinition {{[]
                                     ;3A 
                                     ;Just Modrm
                                     ;Just RMBoth
                                     ;Nothing
                                     ;[]
                                     ;Nothing
                                     ;Nothing}
                                    ;Prototype {protoMnemonic = "CMP", protoOperands = [OpR8,OpRM8]}
                                    ;[(EncModrm_reg
                                      ,OperandReadWrite)
                                     ,(EncModrm_rm,OperandReadOnly)]
                                    ;64bit: True
                                    ;legacy: True
                                    ;Compare r/m8 with r8.} */
       
       ERASM_DECODER_DO_ACTION (1,
                                Cmp,
                                Just<OpR8>,
                                Just<EncModrm_reg>,
                                Just<OpRM8>,
                                Just<EncModrm_rm>,
                                Nothing,
                                Nothing);
   }
   case (0x3b):
   if (is_data16)
      {
          /* EncodedInstructionDefinition {{[]
                                        ;3B 
                                        ;Just Modrm
                                        ;Just RMBoth
                                        ;Nothing
                                        ;[]
                                        ;Just Op16
                                        ;Nothing}
                                       ;Prototype {protoMnemonic = "CMP", protoOperands = [OpR16,OpRM16]}
                                       ;[(EncModrm_reg
                                         ,OperandReadWrite)
                                        ,(EncModrm_rm,OperandReadOnly)]
                                       ;64bit: True
                                       ;legacy: True
                                       ;Compare r/m16 with r16.} */
          
          ERASM_DECODER_DO_ACTION (1,
                                   Cmp,
                                   Just<OpR16>,
                                   Just<EncModrm_reg>,
                                   Just<OpRM16>,
                                   Just<EncModrm_rm>,
                                   Nothing,
                                   Nothing);
      }
   else
      {
          /* EncodedInstructionDefinition {{[]
                                        ;3B 
                                        ;Just Modrm
                                        ;Just RMBoth
                                        ;Nothing
                                        ;[]
                                        ;Just Op32
                                        ;Nothing}
                                       ;Prototype {protoMnemonic = "CMP", protoOperands = [OpR32,OpRM32]}
                                       ;[(EncModrm_reg
                                         ,OperandReadWrite)
                                        ,(EncModrm_rm,OperandReadOnly)]
                                       ;64bit: True
                                       ;legacy: True
                                       ;Compare r/m32 with r32.} */
          
          ERASM_DECODER_DO_ACTION (1,
                                   Cmp,
                                   Just<OpR32>,
                                   Just<EncModrm_reg>,
                                   Just<OpRM32>,
                                   Just<EncModrm_rm>,
                                   Nothing,
                                   Nothing);
      }
   case (0x3c):
   {
       /* EncodedInstructionDefinition {{[]
                                     ;3C 
                                     ;Nothing
                                     ;Nothing
                                     ;Nothing
                                     ;[IMM_IB]
                                     ;Nothing
                                     ;Nothing}
                                    ;Prototype {protoMnemonic = "CMP", protoOperands = [OpAL,OpIMM8]}
                                    ;[(EncImplicit,OperandReadWrite)
                                     ,(EncIMM,OperandReadWrite)]
                                    ;64bit: True
                                    ;legacy: True
                                    ;Compare imm8 with AL.} */
       
       ERASM_DECODER_DO_ACTION (1,
                                Cmp,
                                Just<OpAL>,
                                Just<EncImplicit>,
                                Just<OpIMM8>,
                                Just<EncIMM>,
                                Nothing,
                                Nothing);
   }
   case (0x3d):
   if (is_data16)
      {
          /* EncodedInstructionDefinition {{[]
                                        ;3D 
                                        ;Nothing
                                        ;Nothing
                                        ;Nothing
                                        ;[IMM_IW]
                                        ;Just Op16
                                        ;Nothing}
                                       ;Prototype {protoMnemonic = "CMP", protoOperands = [OpAX,OpIMM16]}
                                       ;[(EncImplicit,OperandReadWrite)
                                        ,(EncIMM,OperandReadWrite)]
                                       ;64bit: True
                                       ;legacy: True
                                       ;Compare imm16 with AX.} */
          
          ERASM_DECODER_DO_ACTION (1,
                                   Cmp,
                                   Just<OpAX>,
                                   Just<EncImplicit>,
                                   Just<OpIMM16>,
                                   Just<EncIMM>,
                                   Nothing,
                                   Nothing);
      }
   else
      {
          /* EncodedInstructionDefinition {{[]
                                        ;3D 
                                        ;Nothing
                                        ;Nothing
                                        ;Nothing
                                        ;[IMM_ID]
                                        ;Just Op32
                                        ;Nothing}
                                       ;Prototype {protoMnemonic = "CMP", protoOperands = [OpEAX,OpIMM32]}
                                       ;[(EncImplicit,OperandReadWrite)
                                        ,(EncIMM,OperandReadWrite)]
                                       ;64bit: True
                                       ;legacy: True
                                       ;Compare imm32 with EAX.} */
          
          ERASM_DECODER_DO_ACTION (1,
                                   Cmp,
                                   Just<OpEAX>,
                                   Just<EncImplicit>,
                                   Just<OpIMM32>,
                                   Just<EncIMM>,
                                   Nothing,
                                   Nothing);
      }
   case (0x3e):
   ERASM_DECODER_SEGMENT_PREFIX (DS,
                                 ds);
   case (0x3f):
   {
       /* EncodedInstructionDefinition {{[]
                                     ;3F 
                                     ;Nothing
                                     ;Nothing
                                     ;Nothing
                                     ;[]
                                     ;Nothing
                                     ;Nothing}
                                    ;Prototype {protoMnemonic = "AAS", protoOperands = []}
                                    ;[]
                                    ;64bit: False
                                    ;legacy: True
                                    ;ASCII adjust AL after subtraction.} */
       
       ERASM_DECODER_DO_ACTION (1,
                                Aas,
                                Nothing,
                                Nothing,
                                Nothing,
                                Nothing,
                                Nothing,
                                Nothing);
   }
   case (0x60):
   if (is_data16)
      {
          /* EncodedInstructionDefinition {{[]
                                        ;60 
                                        ;Nothing
                                        ;Nothing
                                        ;Nothing
                                        ;[]
                                        ;Just Op16
                                        ;Nothing}
                                       ;Prototype {protoMnemonic = "PUSHA", protoOperands = []}
                                       ;[]
                                       ;64bit: False
                                       ;legacy: True
                                       ;Push AX, CX, DX, BX, original SP, BP, SI, and DI.} */
          
          ERASM_DECODER_DO_ACTION (1,
                                   Pusha,
                                   Nothing,
                                   Nothing,
                                   Nothing,
                                   Nothing,
                                   Nothing,
                                   Nothing);
      }
   else
      {
          /* EncodedInstructionDefinition {{[]
                                        ;60 
                                        ;Nothing
                                        ;Nothing
                                        ;Nothing
                                        ;[]
                                        ;Just Op32
                                        ;Nothing}
                                       ;Prototype {protoMnemonic = "PUSHAD", protoOperands = []}
                                       ;[]
                                       ;64bit: False
                                       ;legacy: True
                                       ;Push EAX, ECX, EDX, EBX, original ESP, EBP, ESI, and EDI.} */
          
          ERASM_DECODER_DO_ACTION (1,
                                   Pushad,
                                   Nothing,
                                   Nothing,
                                   Nothing,
                                   Nothing,
                                   Nothing,
                                   Nothing);
      }
   case (0x61):
   if (is_data16)
      {
          /* EncodedInstructionDefinition {{[]
                                        ;61 
                                        ;Nothing
                                        ;Nothing
                                        ;Nothing
                                        ;[]
                                        ;Just Op16
                                        ;Nothing}
                                       ;Prototype {protoMnemonic = "POPA", protoOperands = []}
                                       ;[]
                                       ;64bit: False
                                       ;legacy: True
                                       ;Pop DI, SI, BP, BX, DX, CX, and AX.} */
          
          ERASM_DECODER_DO_ACTION (1,
                                   Popa,
                                   Nothing,
                                   Nothing,
                                   Nothing,
                                   Nothing,
                                   Nothing,
                                   Nothing);
      }
   else
      {
          /* EncodedInstructionDefinition {{[]
                                        ;61 
                                        ;Nothing
                                        ;Nothing
                                        ;Nothing
                                        ;[]
                                        ;Just Op32
                                        ;Nothing}
                                       ;Prototype {protoMnemonic = "POPAD", protoOperands = []}
                                       ;[]
                                       ;64bit: False
                                       ;legacy: True
                                       ;Pop EDI, ESI, EBP, EBX, EDX, ECX, and EAX.} */
          
          ERASM_DECODER_DO_ACTION (1,
                                   Popad,
                                   Nothing,
                                   Nothing,
                                   Nothing,
                                   Nothing,
                                   Nothing,
                                   Nothing);
      }
   case (0x62):
   if (!modrm_mod3 (p))
      if (is_data16)
         {
             /* EncodedInstructionDefinition {{[]
                                           ;62 
                                           ;Just Modrm
                                           ;Just RMMemOnly
                                           ;Nothing
                                           ;[]
                                           ;Just Op16
                                           ;Nothing}
                                          ;Prototype {protoMnemonic = "BOUND", protoOperands = [OpR16,OpM16_16]}
                                          ;[(EncModrm_reg,OperandReadOnly)
                                           ,(EncModrm_rm,OperandReadOnly)]
                                          ;64bit: False
                                          ;legacy: True
                                          ;Check if r16 (array index) is within bounds specified by m16&16.} */
             
             ERASM_DECODER_DO_ACTION (1,
                                      Bound,
                                      Just<OpR16>,
                                      Just<EncModrm_reg>,
                                      Just<OpM16_16>,
                                      Just<EncModrm_rm_mem>,
                                      Nothing,
                                      Nothing);
         }
      else
         {
             /* EncodedInstructionDefinition {{[]
                                           ;62 
                                           ;Just Modrm
                                           ;Just RMMemOnly
                                           ;Nothing
                                           ;[]
                                           ;Just Op32
                                           ;Nothing}
                                          ;Prototype {protoMnemonic = "BOUND", protoOperands = [OpR32,OpM32_32]}
                                          ;[(EncModrm_reg,OperandReadOnly)
                                           ,(EncModrm_rm,OperandReadOnly)]
                                          ;64bit: False
                                          ;legacy: True
                                          ;Check if r32 (array index) is within bounds specified by m16&16.} */
             
             ERASM_DECODER_DO_ACTION (1,
                                      Bound,
                                      Just<OpR32>,
                                      Just<EncModrm_reg>,
                                      Just<OpM32_32>,
                                      Just<EncModrm_rm_mem>,
                                      Nothing,
                                      Nothing);
         }
   else
      goto decode_error;
   case (0x63):
   {
       /* EncodedInstructionDefinition {{[]
                                     ;63 
                                     ;Just Modrm
                                     ;Just RMBoth
                                     ;Nothing
                                     ;[]
                                     ;Nothing
                                     ;Nothing}
                                    ;Prototype {protoMnemonic = "ARPL", protoOperands = [OpRM16,OpR16]}
                                    ;[(EncModrm_rm,OperandReadWrite)
                                     ,(EncModrm_reg,OperandReadOnly)]
                                    ;64bit: False
                                    ;legacy: True
                                    ;Adjust RPL of r/m16 to not less than RPL of r16.} */
       
       ERASM_DECODER_DO_ACTION (1,
                                Arpl,
                                Just<OpRM16>,
                                Just<EncModrm_rm>,
                                Just<OpR16>,
                                Just<EncModrm_reg>,
                                Nothing,
                                Nothing);
   }
   case (0x64):
   ERASM_DECODER_SEGMENT_PREFIX (FS,
                                 fs);
   case (0x65):
   ERASM_DECODER_SEGMENT_PREFIX (GS,
                                 gs);
   case (0x66):
   ERASM_DECODER_OPERAND_SIZE;
   case (0x67):
   ERASM_DECODER_ADDRESS_SIZE;
   case (0x68):
   if (is_data16)
      {
          /* EncodedInstructionDefinition {{[]
                                        ;68 
                                        ;Nothing
                                        ;Nothing
                                        ;Nothing
                                        ;[IMM_IW]
                                        ;Just Op16
                                        ;Nothing}
                                       ;Prototype {protoMnemonic = "PUSH", protoOperands = [OpIMM16]}
                                       ;[(EncIMM,OperandReadWrite)]
                                       ;64bit: True
                                       ;legacy: True
                                       ;Push sign-extended imm16. Stack pointer is decremented by the size of stack pointer.} */
          
          ERASM_DECODER_DO_ACTION (1,
                                   Push,
                                   Just<OpIMM16>,
                                   Just<EncIMM>,
                                   Nothing,
                                   Nothing,
                                   Nothing,
                                   Nothing);
      }
   else
      {
          /* EncodedInstructionDefinition {{[]
                                        ;68 
                                        ;Nothing
                                        ;Nothing
                                        ;Nothing
                                        ;[IMM_ID]
                                        ;Just Op32
                                        ;Nothing}
                                       ;Prototype {protoMnemonic = "PUSH", protoOperands = [OpIMM32]}
                                       ;[(EncIMM,OperandReadWrite)]
                                       ;64bit: True
                                       ;legacy: True
                                       ;Push sign-extended imm32. Stack pointer is decremented by the size of stack pointer.} */
          
          ERASM_DECODER_DO_ACTION (1,
                                   Push,
                                   Just<OpIMM32>,
                                   Just<EncIMM>,
                                   Nothing,
                                   Nothing,
                                   Nothing,
                                   Nothing);
      }
   case (0x69):
   if (is_data16)
      {
          /* EncodedInstructionDefinition {{[]
                                        ;69 
                                        ;Just Modrm
                                        ;Just RMBoth
                                        ;Nothing
                                        ;[IMM_IW]
                                        ;Just Op16
                                        ;Nothing}
                                       ;Prototype {protoMnemonic = "IMUL", protoOperands = [OpR16,OpRM16,OpIMM16]}
                                       ;[(EncModrm_reg
                                         ,OperandReadWrite)
                                        ,(EncModrm_rm,OperandReadOnly)
                                        ,(EncIMM,OperandReadWrite)]
                                       ;64bit: True
                                       ;legacy: True
                                       ;word register ← r/m16 ∗ immediate word.} */
          
          ERASM_DECODER_DO_ACTION (1,
                                   Imul,
                                   Just<OpR16>,
                                   Just<EncModrm_reg>,
                                   Just<OpRM16>,
                                   Just<EncModrm_rm>,
                                   Just<OpIMM16>,
                                   Just<EncIMM>);
      }
   else
      {
          /* EncodedInstructionDefinition {{[]
                                        ;69 
                                        ;Just Modrm
                                        ;Just RMBoth
                                        ;Nothing
                                        ;[IMM_ID]
                                        ;Just Op32
                                        ;Nothing}
                                       ;Prototype {protoMnemonic = "IMUL", protoOperands = [OpR32,OpRM32,OpIMM32]}
                                       ;[(EncModrm_reg
                                         ,OperandReadWrite)
                                        ,(EncModrm_rm,OperandReadOnly)
                                        ,(EncIMM,OperandReadWrite)]
                                       ;64bit: True
                                       ;legacy: True
                                       ;doubleword register ← r/m32 ∗ immediate doubleword.} */
          
          ERASM_DECODER_DO_ACTION (1,
                                   Imul,
                                   Just<OpR32>,
                                   Just<EncModrm_reg>,
                                   Just<OpRM32>,
                                   Just<EncModrm_rm>,
                                   Just<OpIMM32>,
                                   Just<EncIMM>);
      }
   case (0x6a):
   {
       /* EncodedInstructionDefinition {{[]
                                     ;6A 
                                     ;Nothing
                                     ;Nothing
                                     ;Nothing
                                     ;[IMM_IB]
                                     ;Nothing
                                     ;Nothing}
                                    ;Prototype {protoMnemonic = "PUSH", protoOperands = [OpIMM8]}
                                    ;[(EncIMM,OperandReadWrite)]
                                    ;64bit: True
                                    ;legacy: True
                                    ;Push sign-extended imm8. Stack pointer is decremented by the size of stack pointer.} */
       
       ERASM_DECODER_DO_ACTION (1,
                                Push,
                                Just<OpIMM8>,
                                Just<EncIMM>,
                                Nothing,
                                Nothing,
                                Nothing,
                                Nothing);
   }
   case (0x6b):
   if (is_data16)
      {
          /* EncodedInstructionDefinition {{[]
                                        ;6B 
                                        ;Just Modrm
                                        ;Just RMBoth
                                        ;Nothing
                                        ;[IMM_IB]
                                        ;Just Op16
                                        ;Nothing}
                                       ;Prototype {protoMnemonic = "IMUL", protoOperands = [OpR16,OpRM16,OpIMM8]}
                                       ;[(EncModrm_reg
                                         ,OperandReadWrite)
                                        ,(EncModrm_rm,OperandReadOnly)
                                        ,(EncIMM,OperandReadWrite)]
                                       ;64bit: True
                                       ;legacy: True
                                       ;word register ← r/m16 ∗ sign-extended immediate byte.} */
          
          ERASM_DECODER_DO_ACTION (1,
                                   Imul,
                                   Just<OpR16>,
                                   Just<EncModrm_reg>,
                                   Just<OpRM16>,
                                   Just<EncModrm_rm>,
                                   Just<OpIMM8>,
                                   Just<EncIMM>);
      }
   else
      {
          /* EncodedInstructionDefinition {{[]
                                        ;6B 
                                        ;Just Modrm
                                        ;Just RMBoth
                                        ;Nothing
                                        ;[IMM_IB]
                                        ;Just Op32
                                        ;Nothing}
                                       ;Prototype {protoMnemonic = "IMUL", protoOperands = [OpR32,OpRM32,OpIMM8]}
                                       ;[(EncModrm_reg
                                         ,OperandReadWrite)
                                        ,(EncModrm_rm,OperandReadOnly)
                                        ,(EncIMM,OperandReadWrite)]
                                       ;64bit: True
                                       ;legacy: True
                                       ;doubleword register ← r/m32 ∗ sign-extended immediate byte.} */
          
          ERASM_DECODER_DO_ACTION (1,
                                   Imul,
                                   Just<OpR32>,
                                   Just<EncModrm_reg>,
                                   Just<OpRM32>,
                                   Just<EncModrm_rm>,
                                   Just<OpIMM8>,
                                   Just<EncIMM>);
      }
   case (0x6c):
   if (prefix.rep)
      {
          /* EncodedInstructionDefinition {{[REP]
                                        ;6C 
                                        ;Nothing
                                        ;Nothing
                                        ;Nothing
                                        ;[]
                                        ;Nothing
                                        ;Nothing}
                                       ;Prototype {protoMnemonic = "REP_INS", protoOperands = [OpM8_ES_DI_EDI_RDI,OpDX]}
                                       ;[(EncES_DI_EDI_RDI
                                         ,OperandReadWrite)
                                        ,(EncImplicit,OperandReadWrite)]
                                       ;64bit: True
                                       ;legacy: True
                                       ;Input (E)CX bytes from port DX into ES:[(E)DI].} */
          
          ERASM_DECODER_DO_ACTION (1,
                                   Rep_ins,
                                   Just<OpM8_ES_DI_EDI_RDI>,
                                   Just<EncES_DI_EDI_RDI>,
                                   Just<OpDX>,
                                   Just<EncImplicit>,
                                   Nothing,
                                   Nothing);
      }
   else
      {
          /* EncodedInstructionDefinition {{[]
                                        ;6C 
                                        ;Nothing
                                        ;Nothing
                                        ;Nothing
                                        ;[]
                                        ;Nothing
                                        ;Nothing}
                                       ;Prototype {protoMnemonic = "INS", protoOperands = [OpM8_ES_DI_EDI_RDI,OpDX]}
                                       ;[(EncES_DI_EDI_RDI
                                         ,OperandReadWrite)
                                        ,(EncImplicit,OperandReadWrite)]
                                       ;64bit: True
                                       ;legacy: True
                                       ;Input byte from I/O port specified in DX into memory location specified in ES:(E)DI or RDI.*} */
          
          ERASM_DECODER_DO_ACTION (1,
                                   Ins,
                                   Just<OpM8_ES_DI_EDI_RDI>,
                                   Just<EncES_DI_EDI_RDI>,
                                   Just<OpDX>,
                                   Just<EncImplicit>,
                                   Nothing,
                                   Nothing);
      }
   case (0x6d):
   if (prefix.rep)
      if (is_data16)
         {
             /* EncodedInstructionDefinition {{[REP]
                                           ;6D 
                                           ;Nothing
                                           ;Nothing
                                           ;Nothing
                                           ;[]
                                           ;Just Op16
                                           ;Nothing}
                                          ;Prototype {protoMnemonic = "REP_INS", protoOperands = [OpM16_ES_DI_EDI_RDI,OpDX]}
                                          ;[(EncES_DI_EDI_RDI
                                            ,OperandReadWrite)
                                           ,(EncImplicit,OperandReadWrite)]
                                          ;64bit: True
                                          ;legacy: True
                                          ;Input (E)CX words from port DX into ES:[(E)DI.]} */
             
             ERASM_DECODER_DO_ACTION (1,
                                      Rep_ins,
                                      Just<OpM16_ES_DI_EDI_RDI>,
                                      Just<EncES_DI_EDI_RDI>,
                                      Just<OpDX>,
                                      Just<EncImplicit>,
                                      Nothing,
                                      Nothing);
         }
      else
         {
             /* EncodedInstructionDefinition {{[REP]
                                           ;6D 
                                           ;Nothing
                                           ;Nothing
                                           ;Nothing
                                           ;[]
                                           ;Just Op32
                                           ;Nothing}
                                          ;Prototype {protoMnemonic = "REP_INS", protoOperands = [OpM32_ES_DI_EDI_RDI,OpDX]}
                                          ;[(EncES_DI_EDI_RDI
                                            ,OperandReadWrite)
                                           ,(EncImplicit,OperandReadWrite)]
                                          ;64bit: True
                                          ;legacy: True
                                          ;Input (E)CX doublewords from port DX into ES:[(E)DI].} */
             
             ERASM_DECODER_DO_ACTION (1,
                                      Rep_ins,
                                      Just<OpM32_ES_DI_EDI_RDI>,
                                      Just<EncES_DI_EDI_RDI>,
                                      Just<OpDX>,
                                      Just<EncImplicit>,
                                      Nothing,
                                      Nothing);
         }
   else
      if (is_data16)
         {
             /* EncodedInstructionDefinition {{[]
                                           ;6D 
                                           ;Nothing
                                           ;Nothing
                                           ;Nothing
                                           ;[]
                                           ;Just Op16
                                           ;Nothing}
                                          ;Prototype {protoMnemonic = "INS", protoOperands = [OpM16_ES_DI_EDI_RDI,OpDX]}
                                          ;[(EncES_DI_EDI_RDI
                                            ,OperandReadWrite)
                                           ,(EncImplicit,OperandReadWrite)]
                                          ;64bit: True
                                          ;legacy: True
                                          ;Input word from I/O port specified in DX into memory location specified in ES:(E)DI or RDI.1} */
             
             ERASM_DECODER_DO_ACTION (1,
                                      Ins,
                                      Just<OpM16_ES_DI_EDI_RDI>,
                                      Just<EncES_DI_EDI_RDI>,
                                      Just<OpDX>,
                                      Just<EncImplicit>,
                                      Nothing,
                                      Nothing);
         }
      else
         {
             /* EncodedInstructionDefinition {{[]
                                           ;6D 
                                           ;Nothing
                                           ;Nothing
                                           ;Nothing
                                           ;[]
                                           ;Just Op32
                                           ;Nothing}
                                          ;Prototype {protoMnemonic = "INS", protoOperands = [OpM32_ES_DI_EDI_RDI,OpDX]}
                                          ;[(EncES_DI_EDI_RDI
                                            ,OperandReadWrite)
                                           ,(EncImplicit,OperandReadWrite)]
                                          ;64bit: True
                                          ;legacy: True
                                          ;Input doubleword from I/O port specified in DX into memory location specified in ES:(E)DI or RDI.1} */
             
             ERASM_DECODER_DO_ACTION (1,
                                      Ins,
                                      Just<OpM32_ES_DI_EDI_RDI>,
                                      Just<EncES_DI_EDI_RDI>,
                                      Just<OpDX>,
                                      Just<EncImplicit>,
                                      Nothing,
                                      Nothing);
         }
   case (0x6e):
   if (prefix.rep)
      {
          /* EncodedInstructionDefinition {{[REP]
                                        ;6E 
                                        ;Nothing
                                        ;Nothing
                                        ;Nothing
                                        ;[]
                                        ;Nothing
                                        ;Nothing}
                                       ;Prototype {protoMnemonic = "REP_OUTS", protoOperands = [OpDX,OpM8_DS_SI_ESI_RSI]}
                                       ;[(EncImplicit,OperandReadWrite)
                                        ,(EncDS_SI_ESI_RSI
                                         ,OperandReadOnly)]
                                       ;64bit: True
                                       ;legacy: True
                                       ;Output (E)CX bytes from DS:[(E)SI] to port DX.} */
          
          ERASM_DECODER_DO_ACTION (1,
                                   Rep_outs,
                                   Just<OpDX>,
                                   Just<EncImplicit>,
                                   Just<OpM8_DS_SI_ESI_RSI>,
                                   Just<EncDS_SI_ESI_RSI>,
                                   Nothing,
                                   Nothing);
      }
   else
      {
          /* EncodedInstructionDefinition {{[]
                                        ;6E 
                                        ;Nothing
                                        ;Nothing
                                        ;Nothing
                                        ;[]
                                        ;Nothing
                                        ;Nothing}
                                       ;Prototype {protoMnemonic = "OUTS", protoOperands = [OpDX,OpM8_DS_SI_ESI_RSI]}
                                       ;[(EncImplicit,OperandReadWrite)
                                        ,(EncDS_SI_ESI_RSI
                                         ,OperandReadOnly)]
                                       ;64bit: True
                                       ;legacy: True
                                       ;Output byte from memory location specified in DS:(E)SI or RSI to I/O port specified in DX**.} */
          
          ERASM_DECODER_DO_ACTION (1,
                                   Outs,
                                   Just<OpDX>,
                                   Just<EncImplicit>,
                                   Just<OpM8_DS_SI_ESI_RSI>,
                                   Just<EncDS_SI_ESI_RSI>,
                                   Nothing,
                                   Nothing);
      }
   case (0x6f):
   if (prefix.rep)
      if (is_data16)
         {
             /* EncodedInstructionDefinition {{[REP]
                                           ;6F 
                                           ;Nothing
                                           ;Nothing
                                           ;Nothing
                                           ;[]
                                           ;Just Op16
                                           ;Nothing}
                                          ;Prototype {protoMnemonic = "REP_OUTS", protoOperands = [OpDX,OpM16_DS_SI_ESI_RSI]}
                                          ;[(EncImplicit,OperandReadWrite)
                                           ,(EncDS_SI_ESI_RSI
                                            ,OperandReadOnly)]
                                          ;64bit: True
                                          ;legacy: True
                                          ;Output (E)CX words from DS:[(E)SI] to port DX.} */
             
             ERASM_DECODER_DO_ACTION (1,
                                      Rep_outs,
                                      Just<OpDX>,
                                      Just<EncImplicit>,
                                      Just<OpM16_DS_SI_ESI_RSI>,
                                      Just<EncDS_SI_ESI_RSI>,
                                      Nothing,
                                      Nothing);
         }
      else
         {
             /* EncodedInstructionDefinition {{[REP]
                                           ;6F 
                                           ;Nothing
                                           ;Nothing
                                           ;Nothing
                                           ;[]
                                           ;Just Op32
                                           ;Nothing}
                                          ;Prototype {protoMnemonic = "REP_OUTS", protoOperands = [OpDX,OpM32_DS_SI_ESI_RSI]}
                                          ;[(EncImplicit,OperandReadWrite)
                                           ,(EncDS_SI_ESI_RSI
                                            ,OperandReadOnly)]
                                          ;64bit: True
                                          ;legacy: True
                                          ;Output (E)CX doublewords from DS:[(E)SI] to port DX.} */
             
             ERASM_DECODER_DO_ACTION (1,
                                      Rep_outs,
                                      Just<OpDX>,
                                      Just<EncImplicit>,
                                      Just<OpM32_DS_SI_ESI_RSI>,
                                      Just<EncDS_SI_ESI_RSI>,
                                      Nothing,
                                      Nothing);
         }
   else
      if (is_data16)
         {
             /* EncodedInstructionDefinition {{[]
                                           ;6F 
                                           ;Nothing
                                           ;Nothing
                                           ;Nothing
                                           ;[]
                                           ;Just Op16
                                           ;Nothing}
                                          ;Prototype {protoMnemonic = "OUTS", protoOperands = [OpDX,OpM16_DS_SI_ESI_RSI]}
                                          ;[(EncImplicit,OperandReadWrite)
                                           ,(EncDS_SI_ESI_RSI
                                            ,OperandReadOnly)]
                                          ;64bit: True
                                          ;legacy: True
                                          ;Output word from memory location specified in DS:(E)SI or RSI to I/O port specified in DX**.} */
             
             ERASM_DECODER_DO_ACTION (1,
                                      Outs,
                                      Just<OpDX>,
                                      Just<EncImplicit>,
                                      Just<OpM16_DS_SI_ESI_RSI>,
                                      Just<EncDS_SI_ESI_RSI>,
                                      Nothing,
                                      Nothing);
         }
      else
         {
             /* EncodedInstructionDefinition {{[]
                                           ;6F 
                                           ;Nothing
                                           ;Nothing
                                           ;Nothing
                                           ;[]
                                           ;Just Op32
                                           ;Nothing}
                                          ;Prototype {protoMnemonic = "OUTS", protoOperands = [OpDX,OpM32_DS_SI_ESI_RSI]}
                                          ;[(EncImplicit,OperandReadWrite)
                                           ,(EncDS_SI_ESI_RSI
                                            ,OperandReadOnly)]
                                          ;64bit: True
                                          ;legacy: True
                                          ;Output doubleword from memory location specified in DS:(E)SI or RSI to I/O port specified in DX**.} */
             
             ERASM_DECODER_DO_ACTION (1,
                                      Outs,
                                      Just<OpDX>,
                                      Just<EncImplicit>,
                                      Just<OpM32_DS_SI_ESI_RSI>,
                                      Just<EncDS_SI_ESI_RSI>,
                                      Nothing,
                                      Nothing);
         }
   case (0x70):
   {
       /* EncodedInstructionDefinition {{[]
                                     ;70 
                                     ;Nothing
                                     ;Nothing
                                     ;Nothing
                                     ;[IMM_CB]
                                     ;Nothing
                                     ;Nothing}
                                    ;Prototype {protoMnemonic = "JO", protoOperands = [OpRel8]}
                                    ;[(EncOffset,OperandReadWrite)]
                                    ;64bit: True
                                    ;legacy: True
                                    ;Jump short if overflow (OF=1).} */
       
       ERASM_DECODER_DO_ACTION (1,
                                Jo,
                                Just<OpRel8>,
                                Just<EncOffset>,
                                Nothing,
                                Nothing,
                                Nothing,
                                Nothing);
   }
   case (0x71):
   {
       /* EncodedInstructionDefinition {{[]
                                     ;71 
                                     ;Nothing
                                     ;Nothing
                                     ;Nothing
                                     ;[IMM_CB]
                                     ;Nothing
                                     ;Nothing}
                                    ;Prototype {protoMnemonic = "JNO", protoOperands = [OpRel8]}
                                    ;[(EncOffset,OperandReadWrite)]
                                    ;64bit: True
                                    ;legacy: True
                                    ;Jump short if not overflow (OF=0).} */
       
       ERASM_DECODER_DO_ACTION (1,
                                Jno,
                                Just<OpRel8>,
                                Just<EncOffset>,
                                Nothing,
                                Nothing,
                                Nothing,
                                Nothing);
   }
   case (0x72):
   {
       /* EncodedInstructionDefinition {{[]
                                     ;72 
                                     ;Nothing
                                     ;Nothing
                                     ;Nothing
                                     ;[IMM_CB]
                                     ;Nothing
                                     ;Nothing}
                                    ;Prototype {protoMnemonic = "JB", protoOperands = [OpRel8]}
                                    ;[(EncOffset,OperandReadWrite)]
                                    ;64bit: True
                                    ;legacy: True
                                    ;Jump short if below (CF=1).} */
       
       ERASM_DECODER_DO_ACTION (1,
                                Jb,
                                Just<OpRel8>,
                                Just<EncOffset>,
                                Nothing,
                                Nothing,
                                Nothing,
                                Nothing);
   }
   case (0x73):
   {
       /* EncodedInstructionDefinition {{[]
                                     ;73 
                                     ;Nothing
                                     ;Nothing
                                     ;Nothing
                                     ;[IMM_CB]
                                     ;Nothing
                                     ;Nothing}
                                    ;Prototype {protoMnemonic = "JAE", protoOperands = [OpRel8]}
                                    ;[(EncOffset,OperandReadWrite)]
                                    ;64bit: True
                                    ;legacy: True
                                    ;Jump short if above or equal (CF=0).} */
       
       ERASM_DECODER_DO_ACTION (1,
                                Jae,
                                Just<OpRel8>,
                                Just<EncOffset>,
                                Nothing,
                                Nothing,
                                Nothing,
                                Nothing);
   }
   case (0x74):
   {
       /* EncodedInstructionDefinition {{[]
                                     ;74 
                                     ;Nothing
                                     ;Nothing
                                     ;Nothing
                                     ;[IMM_CB]
                                     ;Nothing
                                     ;Nothing}
                                    ;Prototype {protoMnemonic = "JE", protoOperands = [OpRel8]}
                                    ;[(EncOffset,OperandReadWrite)]
                                    ;64bit: True
                                    ;legacy: True
                                    ;Jump short if equal (ZF=1).} */
       
       ERASM_DECODER_DO_ACTION (1,
                                Je,
                                Just<OpRel8>,
                                Just<EncOffset>,
                                Nothing,
                                Nothing,
                                Nothing,
                                Nothing);
   }
   case (0x75):
   {
       /* EncodedInstructionDefinition {{[]
                                     ;75 
                                     ;Nothing
                                     ;Nothing
                                     ;Nothing
                                     ;[IMM_CB]
                                     ;Nothing
                                     ;Nothing}
                                    ;Prototype {protoMnemonic = "JNE", protoOperands = [OpRel8]}
                                    ;[(EncOffset,OperandReadWrite)]
                                    ;64bit: True
                                    ;legacy: True
                                    ;Jump short if not equal (ZF=0).} */
       
       ERASM_DECODER_DO_ACTION (1,
                                Jne,
                                Just<OpRel8>,
                                Just<EncOffset>,
                                Nothing,
                                Nothing,
                                Nothing,
                                Nothing);
   }
   case (0x76):
   {
       /* EncodedInstructionDefinition {{[]
                                     ;76 
                                     ;Nothing
                                     ;Nothing
                                     ;Nothing
                                     ;[IMM_CB]
                                     ;Nothing
                                     ;Nothing}
                                    ;Prototype {protoMnemonic = "JBE", protoOperands = [OpRel8]}
                                    ;[(EncOffset,OperandReadWrite)]
                                    ;64bit: True
                                    ;legacy: True
                                    ;Jump short if below or equal (CF=1 or ZF=1).} */
       
       ERASM_DECODER_DO_ACTION (1,
                                Jbe,
                                Just<OpRel8>,
                                Just<EncOffset>,
                                Nothing,
                                Nothing,
                                Nothing,
                                Nothing);
   }
   case (0x77):
   {
       /* EncodedInstructionDefinition {{[]
                                     ;77 
                                     ;Nothing
                                     ;Nothing
                                     ;Nothing
                                     ;[IMM_CB]
                                     ;Nothing
                                     ;Nothing}
                                    ;Prototype {protoMnemonic = "JA", protoOperands = [OpRel8]}
                                    ;[(EncOffset,OperandReadWrite)]
                                    ;64bit: True
                                    ;legacy: True
                                    ;Jump short if above (CF=0 and ZF=0).} */
       
       ERASM_DECODER_DO_ACTION (1,
                                Ja,
                                Just<OpRel8>,
                                Just<EncOffset>,
                                Nothing,
                                Nothing,
                                Nothing,
                                Nothing);
   }
   case (0x78):
   {
       /* EncodedInstructionDefinition {{[]
                                     ;78 
                                     ;Nothing
                                     ;Nothing
                                     ;Nothing
                                     ;[IMM_CB]
                                     ;Nothing
                                     ;Nothing}
                                    ;Prototype {protoMnemonic = "JS", protoOperands = [OpRel8]}
                                    ;[(EncOffset,OperandReadWrite)]
                                    ;64bit: True
                                    ;legacy: True
                                    ;Jump short if sign (SF=1).} */
       
       ERASM_DECODER_DO_ACTION (1,
                                Js,
                                Just<OpRel8>,
                                Just<EncOffset>,
                                Nothing,
                                Nothing,
                                Nothing,
                                Nothing);
   }
   case (0x79):
   {
       /* EncodedInstructionDefinition {{[]
                                     ;79 
                                     ;Nothing
                                     ;Nothing
                                     ;Nothing
                                     ;[IMM_CB]
                                     ;Nothing
                                     ;Nothing}
                                    ;Prototype {protoMnemonic = "JNS", protoOperands = [OpRel8]}
                                    ;[(EncOffset,OperandReadWrite)]
                                    ;64bit: True
                                    ;legacy: True
                                    ;Jump short if not sign (SF=0).} */
       
       ERASM_DECODER_DO_ACTION (1,
                                Jns,
                                Just<OpRel8>,
                                Just<EncOffset>,
                                Nothing,
                                Nothing,
                                Nothing,
                                Nothing);
   }
   case (0x7a):
   {
       /* EncodedInstructionDefinition {{[]
                                     ;7A 
                                     ;Nothing
                                     ;Nothing
                                     ;Nothing
                                     ;[IMM_CB]
                                     ;Nothing
                                     ;Nothing}
                                    ;Prototype {protoMnemonic = "JP", protoOperands = [OpRel8]}
                                    ;[(EncOffset,OperandReadWrite)]
                                    ;64bit: True
                                    ;legacy: True
                                    ;Jump short if parity (PF=1).} */
       
       ERASM_DECODER_DO_ACTION (1,
                                Jp,
                                Just<OpRel8>,
                                Just<EncOffset>,
                                Nothing,
                                Nothing,
                                Nothing,
                                Nothing);
   }
   case (0x7b):
   {
       /* EncodedInstructionDefinition {{[]
                                     ;7B 
                                     ;Nothing
                                     ;Nothing
                                     ;Nothing
                                     ;[IMM_CB]
                                     ;Nothing
                                     ;Nothing}
                                    ;Prototype {protoMnemonic = "JNP", protoOperands = [OpRel8]}
                                    ;[(EncOffset,OperandReadWrite)]
                                    ;64bit: True
                                    ;legacy: True
                                    ;Jump short if not parity (PF=0).} */
       
       ERASM_DECODER_DO_ACTION (1,
                                Jnp,
                                Just<OpRel8>,
                                Just<EncOffset>,
                                Nothing,
                                Nothing,
                                Nothing,
                                Nothing);
   }
   case (0x7c):
   {
       /* EncodedInstructionDefinition {{[]
                                     ;7C 
                                     ;Nothing
                                     ;Nothing
                                     ;Nothing
                                     ;[IMM_CB]
                                     ;Nothing
                                     ;Nothing}
                                    ;Prototype {protoMnemonic = "JL", protoOperands = [OpRel8]}
                                    ;[(EncOffset,OperandReadWrite)]
                                    ;64bit: True
                                    ;legacy: True
                                    ;Jump short if less (SF≠ OF).} */
       
       ERASM_DECODER_DO_ACTION (1,
                                Jl,
                                Just<OpRel8>,
                                Just<EncOffset>,
                                Nothing,
                                Nothing,
                                Nothing,
                                Nothing);
   }
   case (0x7d):
   {
       /* EncodedInstructionDefinition {{[]
                                     ;7D 
                                     ;Nothing
                                     ;Nothing
                                     ;Nothing
                                     ;[IMM_CB]
                                     ;Nothing
                                     ;Nothing}
                                    ;Prototype {protoMnemonic = "JGE", protoOperands = [OpRel8]}
                                    ;[(EncOffset,OperandReadWrite)]
                                    ;64bit: True
                                    ;legacy: True
                                    ;Jump short if greater or equal (SF=OF).} */
       
       ERASM_DECODER_DO_ACTION (1,
                                Jge,
                                Just<OpRel8>,
                                Just<EncOffset>,
                                Nothing,
                                Nothing,
                                Nothing,
                                Nothing);
   }
   case (0x7e):
   {
       /* EncodedInstructionDefinition {{[]
                                     ;7E 
                                     ;Nothing
                                     ;Nothing
                                     ;Nothing
                                     ;[IMM_CB]
                                     ;Nothing
                                     ;Nothing}
                                    ;Prototype {protoMnemonic = "JLE", protoOperands = [OpRel8]}
                                    ;[(EncOffset,OperandReadWrite)]
                                    ;64bit: True
                                    ;legacy: True
                                    ;Jump short if less or equal (ZF=1 or SF≠ OF).} */
       
       ERASM_DECODER_DO_ACTION (1,
                                Jle,
                                Just<OpRel8>,
                                Just<EncOffset>,
                                Nothing,
                                Nothing,
                                Nothing,
                                Nothing);
   }
   case (0x7f):
   {
       /* EncodedInstructionDefinition {{[]
                                     ;7F 
                                     ;Nothing
                                     ;Nothing
                                     ;Nothing
                                     ;[IMM_CB]
                                     ;Nothing
                                     ;Nothing}
                                    ;Prototype {protoMnemonic = "JG", protoOperands = [OpRel8]}
                                    ;[(EncOffset,OperandReadWrite)]
                                    ;64bit: True
                                    ;legacy: True
                                    ;Jump short if greater (ZF=0 and SF=OF).} */
       
       ERASM_DECODER_DO_ACTION (1,
                                Jg,
                                Just<OpRel8>,
                                Just<EncOffset>,
                                Nothing,
                                Nothing,
                                Nothing,
                                Nothing);
   }
   case (0x80):
   switch (modrm_reg_op (p)) {
      case (0):
      {
          /* EncodedInstructionDefinition {{[]
                                        ;80 
                                        ;Just (ModrmDigit 0)
                                        ;Just RMBoth
                                        ;Nothing
                                        ;[IMM_IB]
                                        ;Nothing
                                        ;Nothing}
                                       ;Prototype {protoMnemonic = "ADD", protoOperands = [OpRM8,OpIMM8]}
                                       ;[(EncModrm_rm,OperandReadWrite)
                                        ,(EncIMM,OperandReadWrite)]
                                       ;64bit: True
                                       ;legacy: True
                                       ;Add imm8 to r/m8.} */
          
          ERASM_DECODER_DO_ACTION (1,
                                   Add,
                                   Just<OpRM8>,
                                   Just<EncModrm_rm>,
                                   Just<OpIMM8>,
                                   Just<EncIMM>,
                                   Nothing,
                                   Nothing);
      }
      case (1):
      {
          /* EncodedInstructionDefinition {{[]
                                        ;80 
                                        ;Just (ModrmDigit 1)
                                        ;Just RMBoth
                                        ;Nothing
                                        ;[IMM_IB]
                                        ;Nothing
                                        ;Nothing}
                                       ;Prototype {protoMnemonic = "OR", protoOperands = [OpRM8,OpIMM8]}
                                       ;[(EncModrm_rm,OperandReadWrite)
                                        ,(EncIMM,OperandReadWrite)]
                                       ;64bit: True
                                       ;legacy: True
                                       ;r/m8 OR imm8.} */
          
          ERASM_DECODER_DO_ACTION (1,
                                   Or,
                                   Just<OpRM8>,
                                   Just<EncModrm_rm>,
                                   Just<OpIMM8>,
                                   Just<EncIMM>,
                                   Nothing,
                                   Nothing);
      }
      case (2):
      {
          /* EncodedInstructionDefinition {{[]
                                        ;80 
                                        ;Just (ModrmDigit 2)
                                        ;Just RMBoth
                                        ;Nothing
                                        ;[IMM_IB]
                                        ;Nothing
                                        ;Nothing}
                                       ;Prototype {protoMnemonic = "ADC", protoOperands = [OpRM8,OpIMM8]}
                                       ;[(EncModrm_rm,OperandReadWrite)
                                        ,(EncIMM,OperandReadWrite)]
                                       ;64bit: True
                                       ;legacy: True
                                       ;Add with carry imm8 to r/m8.} */
          
          ERASM_DECODER_DO_ACTION (1,
                                   Adc,
                                   Just<OpRM8>,
                                   Just<EncModrm_rm>,
                                   Just<OpIMM8>,
                                   Just<EncIMM>,
                                   Nothing,
                                   Nothing);
      }
      case (3):
      {
          /* EncodedInstructionDefinition {{[]
                                        ;80 
                                        ;Just (ModrmDigit 3)
                                        ;Just RMBoth
                                        ;Nothing
                                        ;[IMM_IB]
                                        ;Nothing
                                        ;Nothing}
                                       ;Prototype {protoMnemonic = "SBB", protoOperands = [OpRM8,OpIMM8]}
                                       ;[(EncModrm_rm,OperandReadWrite)
                                        ,(EncIMM,OperandReadWrite)]
                                       ;64bit: True
                                       ;legacy: True
                                       ;Subtract with borrow imm8 from r/m8.} */
          
          ERASM_DECODER_DO_ACTION (1,
                                   Sbb,
                                   Just<OpRM8>,
                                   Just<EncModrm_rm>,
                                   Just<OpIMM8>,
                                   Just<EncIMM>,
                                   Nothing,
                                   Nothing);
      }
      case (4):
      {
          /* EncodedInstructionDefinition {{[]
                                        ;80 
                                        ;Just (ModrmDigit 4)
                                        ;Just RMBoth
                                        ;Nothing
                                        ;[IMM_IB]
                                        ;Nothing
                                        ;Nothing}
                                       ;Prototype {protoMnemonic = "AND", protoOperands = [OpRM8,OpIMM8]}
                                       ;[(EncModrm_rm,OperandReadWrite)
                                        ,(EncIMM,OperandReadWrite)]
                                       ;64bit: True
                                       ;legacy: True
                                       ;r/m8 AND imm8.} */
          
          ERASM_DECODER_DO_ACTION (1,
                                   And,
                                   Just<OpRM8>,
                                   Just<EncModrm_rm>,
                                   Just<OpIMM8>,
                                   Just<EncIMM>,
                                   Nothing,
                                   Nothing);
      }
      case (5):
      {
          /* EncodedInstructionDefinition {{[]
                                        ;80 
                                        ;Just (ModrmDigit 5)
                                        ;Just RMBoth
                                        ;Nothing
                                        ;[IMM_IB]
                                        ;Nothing
                                        ;Nothing}
                                       ;Prototype {protoMnemonic = "SUB", protoOperands = [OpRM8,OpIMM8]}
                                       ;[(EncModrm_rm,OperandReadWrite)
                                        ,(EncIMM,OperandReadWrite)]
                                       ;64bit: True
                                       ;legacy: True
                                       ;Subtract imm8 from r/m8.} */
          
          ERASM_DECODER_DO_ACTION (1,
                                   Sub,
                                   Just<OpRM8>,
                                   Just<EncModrm_rm>,
                                   Just<OpIMM8>,
                                   Just<EncIMM>,
                                   Nothing,
                                   Nothing);
      }
      case (6):
      {
          /* EncodedInstructionDefinition {{[]
                                        ;80 
                                        ;Just (ModrmDigit 6)
                                        ;Just RMBoth
                                        ;Nothing
                                        ;[IMM_IB]
                                        ;Nothing
                                        ;Nothing}
                                       ;Prototype {protoMnemonic = "XOR", protoOperands = [OpRM8,OpIMM8]}
                                       ;[(EncModrm_rm,OperandReadWrite)
                                        ,(EncIMM,OperandReadWrite)]
                                       ;64bit: True
                                       ;legacy: True
                                       ;r/m8 XOR imm8.} */
          
          ERASM_DECODER_DO_ACTION (1,
                                   Xor,
                                   Just<OpRM8>,
                                   Just<EncModrm_rm>,
                                   Just<OpIMM8>,
                                   Just<EncIMM>,
                                   Nothing,
                                   Nothing);
      }
      case (7):
      {
          /* EncodedInstructionDefinition {{[]
                                        ;80 
                                        ;Just (ModrmDigit 7)
                                        ;Just RMBoth
                                        ;Nothing
                                        ;[IMM_IB]
                                        ;Nothing
                                        ;Nothing}
                                       ;Prototype {protoMnemonic = "CMP", protoOperands = [OpRM8,OpIMM8]}
                                       ;[(EncModrm_rm,OperandReadWrite)
                                        ,(EncIMM,OperandReadWrite)]
                                       ;64bit: True
                                       ;legacy: True
                                       ;Compare imm8 with r/m8.} */
          
          ERASM_DECODER_DO_ACTION (1,
                                   Cmp,
                                   Just<OpRM8>,
                                   Just<EncModrm_rm>,
                                   Just<OpIMM8>,
                                   Just<EncIMM>,
                                   Nothing,
                                   Nothing);
      }
      
   }
   case (0x81):
   switch (modrm_reg_op (p)) {
      case (0):
      if (is_data16)
         {
             /* EncodedInstructionDefinition {{[]
                                           ;81 
                                           ;Just (ModrmDigit 0)
                                           ;Just RMBoth
                                           ;Nothing
                                           ;[IMM_IW]
                                           ;Just Op16
                                           ;Nothing}
                                          ;Prototype {protoMnemonic = "ADD", protoOperands = [OpRM16,OpIMM16]}
                                          ;[(EncModrm_rm,OperandReadWrite)
                                           ,(EncIMM,OperandReadWrite)]
                                          ;64bit: True
                                          ;legacy: True
                                          ;Add imm16 to r/m16.} */
             
             ERASM_DECODER_DO_ACTION (1,
                                      Add,
                                      Just<OpRM16>,
                                      Just<EncModrm_rm>,
                                      Just<OpIMM16>,
                                      Just<EncIMM>,
                                      Nothing,
                                      Nothing);
         }
      else
         {
             /* EncodedInstructionDefinition {{[]
                                           ;81 
                                           ;Just (ModrmDigit 0)
                                           ;Just RMBoth
                                           ;Nothing
                                           ;[IMM_ID]
                                           ;Just Op32
                                           ;Nothing}
                                          ;Prototype {protoMnemonic = "ADD", protoOperands = [OpRM32,OpIMM32]}
                                          ;[(EncModrm_rm,OperandReadWrite)
                                           ,(EncIMM,OperandReadWrite)]
                                          ;64bit: True
                                          ;legacy: True
                                          ;Add imm32 to r/m32.} */
             
             ERASM_DECODER_DO_ACTION (1,
                                      Add,
                                      Just<OpRM32>,
                                      Just<EncModrm_rm>,
                                      Just<OpIMM32>,
                                      Just<EncIMM>,
                                      Nothing,
                                      Nothing);
         }
      case (1):
      if (is_data16)
         {
             /* EncodedInstructionDefinition {{[]
                                           ;81 
                                           ;Just (ModrmDigit 1)
                                           ;Just RMBoth
                                           ;Nothing
                                           ;[IMM_IW]
                                           ;Just Op16
                                           ;Nothing}
                                          ;Prototype {protoMnemonic = "OR", protoOperands = [OpRM16,OpIMM16]}
                                          ;[(EncModrm_rm,OperandReadWrite)
                                           ,(EncIMM,OperandReadWrite)]
                                          ;64bit: True
                                          ;legacy: True
                                          ;r/m16 OR imm16.} */
             
             ERASM_DECODER_DO_ACTION (1,
                                      Or,
                                      Just<OpRM16>,
                                      Just<EncModrm_rm>,
                                      Just<OpIMM16>,
                                      Just<EncIMM>,
                                      Nothing,
                                      Nothing);
         }
      else
         {
             /* EncodedInstructionDefinition {{[]
                                           ;81 
                                           ;Just (ModrmDigit 1)
                                           ;Just RMBoth
                                           ;Nothing
                                           ;[IMM_ID]
                                           ;Just Op32
                                           ;Nothing}
                                          ;Prototype {protoMnemonic = "OR", protoOperands = [OpRM32,OpIMM32]}
                                          ;[(EncModrm_rm,OperandReadWrite)
                                           ,(EncIMM,OperandReadWrite)]
                                          ;64bit: True
                                          ;legacy: True
                                          ;r/m32 OR imm32.} */
             
             ERASM_DECODER_DO_ACTION (1,
                                      Or,
                                      Just<OpRM32>,
                                      Just<EncModrm_rm>,
                                      Just<OpIMM32>,
                                      Just<EncIMM>,
                                      Nothing,
                                      Nothing);
         }
      case (2):
      if (is_data16)
         {
             /* EncodedInstructionDefinition {{[]
                                           ;81 
                                           ;Just (ModrmDigit 2)
                                           ;Just RMBoth
                                           ;Nothing
                                           ;[IMM_IW]
                                           ;Just Op16
                                           ;Nothing}
                                          ;Prototype {protoMnemonic = "ADC", protoOperands = [OpRM16,OpIMM16]}
                                          ;[(EncModrm_rm,OperandReadWrite)
                                           ,(EncIMM,OperandReadWrite)]
                                          ;64bit: True
                                          ;legacy: True
                                          ;Add with carry imm16 to r/m16.} */
             
             ERASM_DECODER_DO_ACTION (1,
                                      Adc,
                                      Just<OpRM16>,
                                      Just<EncModrm_rm>,
                                      Just<OpIMM16>,
                                      Just<EncIMM>,
                                      Nothing,
                                      Nothing);
         }
      else
         {
             /* EncodedInstructionDefinition {{[]
                                           ;81 
                                           ;Just (ModrmDigit 2)
                                           ;Just RMBoth
                                           ;Nothing
                                           ;[IMM_ID]
                                           ;Just Op32
                                           ;Nothing}
                                          ;Prototype {protoMnemonic = "ADC", protoOperands = [OpRM32,OpIMM32]}
                                          ;[(EncModrm_rm,OperandReadWrite)
                                           ,(EncIMM,OperandReadWrite)]
                                          ;64bit: True
                                          ;legacy: True
                                          ;Add with CF imm32 to r/m32.} */
             
             ERASM_DECODER_DO_ACTION (1,
                                      Adc,
                                      Just<OpRM32>,
                                      Just<EncModrm_rm>,
                                      Just<OpIMM32>,
                                      Just<EncIMM>,
                                      Nothing,
                                      Nothing);
         }
      case (3):
      if (is_data16)
         {
             /* EncodedInstructionDefinition {{[]
                                           ;81 
                                           ;Just (ModrmDigit 3)
                                           ;Just RMBoth
                                           ;Nothing
                                           ;[IMM_IW]
                                           ;Just Op16
                                           ;Nothing}
                                          ;Prototype {protoMnemonic = "SBB", protoOperands = [OpRM16,OpIMM16]}
                                          ;[(EncModrm_rm,OperandReadWrite)
                                           ,(EncIMM,OperandReadWrite)]
                                          ;64bit: True
                                          ;legacy: True
                                          ;Subtract with borrow imm16 from r/m16.} */
             
             ERASM_DECODER_DO_ACTION (1,
                                      Sbb,
                                      Just<OpRM16>,
                                      Just<EncModrm_rm>,
                                      Just<OpIMM16>,
                                      Just<EncIMM>,
                                      Nothing,
                                      Nothing);
         }
      else
         {
             /* EncodedInstructionDefinition {{[]
                                           ;81 
                                           ;Just (ModrmDigit 3)
                                           ;Just RMBoth
                                           ;Nothing
                                           ;[IMM_ID]
                                           ;Just Op32
                                           ;Nothing}
                                          ;Prototype {protoMnemonic = "SBB", protoOperands = [OpRM32,OpIMM32]}
                                          ;[(EncModrm_rm,OperandReadWrite)
                                           ,(EncIMM,OperandReadWrite)]
                                          ;64bit: True
                                          ;legacy: True
                                          ;Subtract with borrow imm32 from r/m32.} */
             
             ERASM_DECODER_DO_ACTION (1,
                                      Sbb,
                                      Just<OpRM32>,
                                      Just<EncModrm_rm>,
                                      Just<OpIMM32>,
                                      Just<EncIMM>,
                                      Nothing,
                                      Nothing);
         }
      case (4):
      if (is_data16)
         {
             /* EncodedInstructionDefinition {{[]
                                           ;81 
                                           ;Just (ModrmDigit 4)
                                           ;Just RMBoth
                                           ;Nothing
                                           ;[IMM_IW]
                                           ;Just Op16
                                           ;Nothing}
                                          ;Prototype {protoMnemonic = "AND", protoOperands = [OpRM16,OpIMM16]}
                                          ;[(EncModrm_rm,OperandReadWrite)
                                           ,(EncIMM,OperandReadWrite)]
                                          ;64bit: True
                                          ;legacy: True
                                          ;r/m16 AND imm16.} */
             
             ERASM_DECODER_DO_ACTION (1,
                                      And,
                                      Just<OpRM16>,
                                      Just<EncModrm_rm>,
                                      Just<OpIMM16>,
                                      Just<EncIMM>,
                                      Nothing,
                                      Nothing);
         }
      else
         {
             /* EncodedInstructionDefinition {{[]
                                           ;81 
                                           ;Just (ModrmDigit 4)
                                           ;Just RMBoth
                                           ;Nothing
                                           ;[IMM_ID]
                                           ;Just Op32
                                           ;Nothing}
                                          ;Prototype {protoMnemonic = "AND", protoOperands = [OpRM32,OpIMM32]}
                                          ;[(EncModrm_rm,OperandReadWrite)
                                           ,(EncIMM,OperandReadWrite)]
                                          ;64bit: True
                                          ;legacy: True
                                          ;r/m32 AND imm32.} */
             
             ERASM_DECODER_DO_ACTION (1,
                                      And,
                                      Just<OpRM32>,
                                      Just<EncModrm_rm>,
                                      Just<OpIMM32>,
                                      Just<EncIMM>,
                                      Nothing,
                                      Nothing);
         }
      case (5):
      if (is_data16)
         {
             /* EncodedInstructionDefinition {{[]
                                           ;81 
                                           ;Just (ModrmDigit 5)
                                           ;Just RMBoth
                                           ;Nothing
                                           ;[IMM_IW]
                                           ;Just Op16
                                           ;Nothing}
                                          ;Prototype {protoMnemonic = "SUB", protoOperands = [OpRM16,OpIMM16]}
                                          ;[(EncModrm_rm,OperandReadWrite)
                                           ,(EncIMM,OperandReadWrite)]
                                          ;64bit: True
                                          ;legacy: True
                                          ;Subtract imm16 from r/m16.} */
             
             ERASM_DECODER_DO_ACTION (1,
                                      Sub,
                                      Just<OpRM16>,
                                      Just<EncModrm_rm>,
                                      Just<OpIMM16>,
                                      Just<EncIMM>,
                                      Nothing,
                                      Nothing);
         }
      else
         {
             /* EncodedInstructionDefinition {{[]
                                           ;81 
                                           ;Just (ModrmDigit 5)
                                           ;Just RMBoth
                                           ;Nothing
                                           ;[IMM_ID]
                                           ;Just Op32
                                           ;Nothing}
                                          ;Prototype {protoMnemonic = "SUB", protoOperands = [OpRM32,OpIMM32]}
                                          ;[(EncModrm_rm,OperandReadWrite)
                                           ,(EncIMM,OperandReadWrite)]
                                          ;64bit: True
                                          ;legacy: True
                                          ;Subtract imm32 from r/m32.} */
             
             ERASM_DECODER_DO_ACTION (1,
                                      Sub,
                                      Just<OpRM32>,
                                      Just<EncModrm_rm>,
                                      Just<OpIMM32>,
                                      Just<EncIMM>,
                                      Nothing,
                                      Nothing);
         }
      case (6):
      if (is_data16)
         {
             /* EncodedInstructionDefinition {{[]
                                           ;81 
                                           ;Just (ModrmDigit 6)
                                           ;Just RMBoth
                                           ;Nothing
                                           ;[IMM_IW]
                                           ;Just Op16
                                           ;Nothing}
                                          ;Prototype {protoMnemonic = "XOR", protoOperands = [OpRM16,OpIMM16]}
                                          ;[(EncModrm_rm,OperandReadWrite)
                                           ,(EncIMM,OperandReadWrite)]
                                          ;64bit: True
                                          ;legacy: True
                                          ;r/m16 XOR imm16.} */
             
             ERASM_DECODER_DO_ACTION (1,
                                      Xor,
                                      Just<OpRM16>,
                                      Just<EncModrm_rm>,
                                      Just<OpIMM16>,
                                      Just<EncIMM>,
                                      Nothing,
                                      Nothing);
         }
      else
         {
             /* EncodedInstructionDefinition {{[]
                                           ;81 
                                           ;Just (ModrmDigit 6)
                                           ;Just RMBoth
                                           ;Nothing
                                           ;[IMM_ID]
                                           ;Just Op32
                                           ;Nothing}
                                          ;Prototype {protoMnemonic = "XOR", protoOperands = [OpRM32,OpIMM32]}
                                          ;[(EncModrm_rm,OperandReadWrite)
                                           ,(EncIMM,OperandReadWrite)]
                                          ;64bit: True
                                          ;legacy: True
                                          ;r/m32 XOR imm32.} */
             
             ERASM_DECODER_DO_ACTION (1,
                                      Xor,
                                      Just<OpRM32>,
                                      Just<EncModrm_rm>,
                                      Just<OpIMM32>,
                                      Just<EncIMM>,
                                      Nothing,
                                      Nothing);
         }
      case (7):
      if (is_data16)
         {
             /* EncodedInstructionDefinition {{[]
                                           ;81 
                                           ;Just (ModrmDigit 7)
                                           ;Just RMBoth
                                           ;Nothing
                                           ;[IMM_IW]
                                           ;Just Op16
                                           ;Nothing}
                                          ;Prototype {protoMnemonic = "CMP", protoOperands = [OpRM16,OpIMM16]}
                                          ;[(EncModrm_rm,OperandReadWrite)
                                           ,(EncIMM,OperandReadWrite)]
                                          ;64bit: True
                                          ;legacy: True
                                          ;Compare imm16 with r/m16.} */
             
             ERASM_DECODER_DO_ACTION (1,
                                      Cmp,
                                      Just<OpRM16>,
                                      Just<EncModrm_rm>,
                                      Just<OpIMM16>,
                                      Just<EncIMM>,
                                      Nothing,
                                      Nothing);
         }
      else
         {
             /* EncodedInstructionDefinition {{[]
                                           ;81 
                                           ;Just (ModrmDigit 7)
                                           ;Just RMBoth
                                           ;Nothing
                                           ;[IMM_ID]
                                           ;Just Op32
                                           ;Nothing}
                                          ;Prototype {protoMnemonic = "CMP", protoOperands = [OpRM32,OpIMM32]}
                                          ;[(EncModrm_rm,OperandReadWrite)
                                           ,(EncIMM,OperandReadWrite)]
                                          ;64bit: True
                                          ;legacy: True
                                          ;Compare imm32 with r/m32.} */
             
             ERASM_DECODER_DO_ACTION (1,
                                      Cmp,
                                      Just<OpRM32>,
                                      Just<EncModrm_rm>,
                                      Just<OpIMM32>,
                                      Just<EncIMM>,
                                      Nothing,
                                      Nothing);
         }
      
   }
   case (0x83):
   switch (modrm_reg_op (p)) {
      case (0):
      if (is_data16)
         {
             /* EncodedInstructionDefinition {{[]
                                           ;83 
                                           ;Just (ModrmDigit 0)
                                           ;Just RMBoth
                                           ;Nothing
                                           ;[IMM_IB]
                                           ;Just Op16
                                           ;Nothing}
                                          ;Prototype {protoMnemonic = "ADD", protoOperands = [OpRM16,OpIMM8]}
                                          ;[(EncModrm_rm,OperandReadWrite)
                                           ,(EncIMM,OperandReadWrite)]
                                          ;64bit: True
                                          ;legacy: True
                                          ;Add sign-extended imm8 to r/m16.} */
             
             ERASM_DECODER_DO_ACTION (1,
                                      Add,
                                      Just<OpRM16>,
                                      Just<EncModrm_rm>,
                                      Just<OpIMM8>,
                                      Just<EncIMM>,
                                      Nothing,
                                      Nothing);
         }
      else
         {
             /* EncodedInstructionDefinition {{[]
                                           ;83 
                                           ;Just (ModrmDigit 0)
                                           ;Just RMBoth
                                           ;Nothing
                                           ;[IMM_IB]
                                           ;Just Op32
                                           ;Nothing}
                                          ;Prototype {protoMnemonic = "ADD", protoOperands = [OpRM32,OpIMM8]}
                                          ;[(EncModrm_rm,OperandReadWrite)
                                           ,(EncIMM,OperandReadWrite)]
                                          ;64bit: True
                                          ;legacy: True
                                          ;Add sign-extended imm8 to r/m32.} */
             
             ERASM_DECODER_DO_ACTION (1,
                                      Add,
                                      Just<OpRM32>,
                                      Just<EncModrm_rm>,
                                      Just<OpIMM8>,
                                      Just<EncIMM>,
                                      Nothing,
                                      Nothing);
         }
      case (1):
      if (is_data16)
         {
             /* EncodedInstructionDefinition {{[]
                                           ;83 
                                           ;Just (ModrmDigit 1)
                                           ;Just RMBoth
                                           ;Nothing
                                           ;[IMM_IB]
                                           ;Just Op16
                                           ;Nothing}
                                          ;Prototype {protoMnemonic = "OR", protoOperands = [OpRM16,OpIMM8]}
                                          ;[(EncModrm_rm,OperandReadWrite)
                                           ,(EncIMM,OperandReadWrite)]
                                          ;64bit: True
                                          ;legacy: True
                                          ;r/m16 OR imm8 (sign- extended).} */
             
             ERASM_DECODER_DO_ACTION (1,
                                      Or,
                                      Just<OpRM16>,
                                      Just<EncModrm_rm>,
                                      Just<OpIMM8>,
                                      Just<EncIMM>,
                                      Nothing,
                                      Nothing);
         }
      else
         {
             /* EncodedInstructionDefinition {{[]
                                           ;83 
                                           ;Just (ModrmDigit 1)
                                           ;Just RMBoth
                                           ;Nothing
                                           ;[IMM_IB]
                                           ;Just Op32
                                           ;Nothing}
                                          ;Prototype {protoMnemonic = "OR", protoOperands = [OpRM32,OpIMM8]}
                                          ;[(EncModrm_rm,OperandReadWrite)
                                           ,(EncIMM,OperandReadWrite)]
                                          ;64bit: True
                                          ;legacy: True
                                          ;r/m32 OR imm8 (sign- extended).} */
             
             ERASM_DECODER_DO_ACTION (1,
                                      Or,
                                      Just<OpRM32>,
                                      Just<EncModrm_rm>,
                                      Just<OpIMM8>,
                                      Just<EncIMM>,
                                      Nothing,
                                      Nothing);
         }
      case (2):
      if (is_data16)
         {
             /* EncodedInstructionDefinition {{[]
                                           ;83 
                                           ;Just (ModrmDigit 2)
                                           ;Just RMBoth
                                           ;Nothing
                                           ;[IMM_IB]
                                           ;Just Op16
                                           ;Nothing}
                                          ;Prototype {protoMnemonic = "ADC", protoOperands = [OpRM16,OpIMM8]}
                                          ;[(EncModrm_rm,OperandReadWrite)
                                           ,(EncIMM,OperandReadWrite)]
                                          ;64bit: True
                                          ;legacy: True
                                          ;Add with CF sign-extended imm8 to r/m16.} */
             
             ERASM_DECODER_DO_ACTION (1,
                                      Adc,
                                      Just<OpRM16>,
                                      Just<EncModrm_rm>,
                                      Just<OpIMM8>,
                                      Just<EncIMM>,
                                      Nothing,
                                      Nothing);
         }
      else
         {
             /* EncodedInstructionDefinition {{[]
                                           ;83 
                                           ;Just (ModrmDigit 2)
                                           ;Just RMBoth
                                           ;Nothing
                                           ;[IMM_IB]
                                           ;Just Op32
                                           ;Nothing}
                                          ;Prototype {protoMnemonic = "ADC", protoOperands = [OpRM32,OpIMM8]}
                                          ;[(EncModrm_rm,OperandReadWrite)
                                           ,(EncIMM,OperandReadWrite)]
                                          ;64bit: True
                                          ;legacy: True
                                          ;Add with CF sign-extended imm8 into r/m32.} */
             
             ERASM_DECODER_DO_ACTION (1,
                                      Adc,
                                      Just<OpRM32>,
                                      Just<EncModrm_rm>,
                                      Just<OpIMM8>,
                                      Just<EncIMM>,
                                      Nothing,
                                      Nothing);
         }
      case (3):
      if (is_data16)
         {
             /* EncodedInstructionDefinition {{[]
                                           ;83 
                                           ;Just (ModrmDigit 3)
                                           ;Just RMBoth
                                           ;Nothing
                                           ;[IMM_IB]
                                           ;Just Op16
                                           ;Nothing}
                                          ;Prototype {protoMnemonic = "SBB", protoOperands = [OpRM16,OpIMM8]}
                                          ;[(EncModrm_rm,OperandReadWrite)
                                           ,(EncIMM,OperandReadWrite)]
                                          ;64bit: True
                                          ;legacy: True
                                          ;Subtract with borrow sign- extended imm8 from r/m16.} */
             
             ERASM_DECODER_DO_ACTION (1,
                                      Sbb,
                                      Just<OpRM16>,
                                      Just<EncModrm_rm>,
                                      Just<OpIMM8>,
                                      Just<EncIMM>,
                                      Nothing,
                                      Nothing);
         }
      else
         {
             /* EncodedInstructionDefinition {{[]
                                           ;83 
                                           ;Just (ModrmDigit 3)
                                           ;Just RMBoth
                                           ;Nothing
                                           ;[IMM_IB]
                                           ;Just Op32
                                           ;Nothing}
                                          ;Prototype {protoMnemonic = "SBB", protoOperands = [OpRM32,OpIMM8]}
                                          ;[(EncModrm_rm,OperandReadWrite)
                                           ,(EncIMM,OperandReadWrite)]
                                          ;64bit: True
                                          ;legacy: True
                                          ;Subtract with borrow sign- extended imm8 from r/m32.} */
             
             ERASM_DECODER_DO_ACTION (1,
                                      Sbb,
                                      Just<OpRM32>,
                                      Just<EncModrm_rm>,
                                      Just<OpIMM8>,
                                      Just<EncIMM>,
                                      Nothing,
                                      Nothing);
         }
      case (4):
      if (is_data16)
         {
             /* EncodedInstructionDefinition {{[]
                                           ;83 
                                           ;Just (ModrmDigit 4)
                                           ;Just RMBoth
                                           ;Nothing
                                           ;[IMM_IB]
                                           ;Just Op16
                                           ;Nothing}
                                          ;Prototype {protoMnemonic = "AND", protoOperands = [OpRM16,OpIMM8]}
                                          ;[(EncModrm_rm,OperandReadWrite)
                                           ,(EncIMM,OperandReadWrite)]
                                          ;64bit: True
                                          ;legacy: True
                                          ;r/m16 AND imm8 (sign- extended).} */
             
             ERASM_DECODER_DO_ACTION (1,
                                      And,
                                      Just<OpRM16>,
                                      Just<EncModrm_rm>,
                                      Just<OpIMM8>,
                                      Just<EncIMM>,
                                      Nothing,
                                      Nothing);
         }
      else
         {
             /* EncodedInstructionDefinition {{[]
                                           ;83 
                                           ;Just (ModrmDigit 4)
                                           ;Just RMBoth
                                           ;Nothing
                                           ;[IMM_IB]
                                           ;Just Op32
                                           ;Nothing}
                                          ;Prototype {protoMnemonic = "AND", protoOperands = [OpRM32,OpIMM8]}
                                          ;[(EncModrm_rm,OperandReadWrite)
                                           ,(EncIMM,OperandReadWrite)]
                                          ;64bit: True
                                          ;legacy: True
                                          ;r/m32 AND imm8 (sign- extended).} */
             
             ERASM_DECODER_DO_ACTION (1,
                                      And,
                                      Just<OpRM32>,
                                      Just<EncModrm_rm>,
                                      Just<OpIMM8>,
                                      Just<EncIMM>,
                                      Nothing,
                                      Nothing);
         }
      case (5):
      if (is_data16)
         {
             /* EncodedInstructionDefinition {{[]
                                           ;83 
                                           ;Just (ModrmDigit 5)
                                           ;Just RMBoth
                                           ;Nothing
                                           ;[IMM_IB]
                                           ;Just Op16
                                           ;Nothing}
                                          ;Prototype {protoMnemonic = "SUB", protoOperands = [OpRM16,OpIMM8]}
                                          ;[(EncModrm_rm,OperandReadWrite)
                                           ,(EncIMM,OperandReadWrite)]
                                          ;64bit: True
                                          ;legacy: True
                                          ;Subtract sign-extended imm8 from r/m16.} */
             
             ERASM_DECODER_DO_ACTION (1,
                                      Sub,
                                      Just<OpRM16>,
                                      Just<EncModrm_rm>,
                                      Just<OpIMM8>,
                                      Just<EncIMM>,
                                      Nothing,
                                      Nothing);
         }
      else
         {
             /* EncodedInstructionDefinition {{[]
                                           ;83 
                                           ;Just (ModrmDigit 5)
                                           ;Just RMBoth
                                           ;Nothing
                                           ;[IMM_IB]
                                           ;Just Op32
                                           ;Nothing}
                                          ;Prototype {protoMnemonic = "SUB", protoOperands = [OpRM32,OpIMM8]}
                                          ;[(EncModrm_rm,OperandReadWrite)
                                           ,(EncIMM,OperandReadWrite)]
                                          ;64bit: True
                                          ;legacy: True
                                          ;Subtract sign-extended imm8 from r/m32.} */
             
             ERASM_DECODER_DO_ACTION (1,
                                      Sub,
                                      Just<OpRM32>,
                                      Just<EncModrm_rm>,
                                      Just<OpIMM8>,
                                      Just<EncIMM>,
                                      Nothing,
                                      Nothing);
         }
      case (6):
      if (is_data16)
         {
             /* EncodedInstructionDefinition {{[]
                                           ;83 
                                           ;Just (ModrmDigit 6)
                                           ;Just RMBoth
                                           ;Nothing
                                           ;[IMM_IB]
                                           ;Just Op16
                                           ;Nothing}
                                          ;Prototype {protoMnemonic = "XOR", protoOperands = [OpRM16,OpIMM8]}
                                          ;[(EncModrm_rm,OperandReadWrite)
                                           ,(EncIMM,OperandReadWrite)]
                                          ;64bit: True
                                          ;legacy: True
                                          ;r/m16 XOR imm8 (sign- extended).} */
             
             ERASM_DECODER_DO_ACTION (1,
                                      Xor,
                                      Just<OpRM16>,
                                      Just<EncModrm_rm>,
                                      Just<OpIMM8>,
                                      Just<EncIMM>,
                                      Nothing,
                                      Nothing);
         }
      else
         {
             /* EncodedInstructionDefinition {{[]
                                           ;83 
                                           ;Just (ModrmDigit 6)
                                           ;Just RMBoth
                                           ;Nothing
                                           ;[IMM_IB]
                                           ;Just Op32
                                           ;Nothing}
                                          ;Prototype {protoMnemonic = "XOR", protoOperands = [OpRM32,OpIMM8]}
                                          ;[(EncModrm_rm,OperandReadWrite)
                                           ,(EncIMM,OperandReadWrite)]
                                          ;64bit: True
                                          ;legacy: True
                                          ;r/m32 XOR imm8 (sign- extended).} */
             
             ERASM_DECODER_DO_ACTION (1,
                                      Xor,
                                      Just<OpRM32>,
                                      Just<EncModrm_rm>,
                                      Just<OpIMM8>,
                                      Just<EncIMM>,
                                      Nothing,
                                      Nothing);
         }
      case (7):
      if (is_data16)
         {
             /* EncodedInstructionDefinition {{[]
                                           ;83 
                                           ;Just (ModrmDigit 7)
                                           ;Just RMBoth
                                           ;Nothing
                                           ;[IMM_IB]
                                           ;Just Op16
                                           ;Nothing}
                                          ;Prototype {protoMnemonic = "CMP", protoOperands = [OpRM16,OpIMM8]}
                                          ;[(EncModrm_rm,OperandReadWrite)
                                           ,(EncIMM,OperandReadWrite)]
                                          ;64bit: True
                                          ;legacy: True
                                          ;Compare imm8 with r/m16.} */
             
             ERASM_DECODER_DO_ACTION (1,
                                      Cmp,
                                      Just<OpRM16>,
                                      Just<EncModrm_rm>,
                                      Just<OpIMM8>,
                                      Just<EncIMM>,
                                      Nothing,
                                      Nothing);
         }
      else
         {
             /* EncodedInstructionDefinition {{[]
                                           ;83 
                                           ;Just (ModrmDigit 7)
                                           ;Just RMBoth
                                           ;Nothing
                                           ;[IMM_IB]
                                           ;Just Op32
                                           ;Nothing}
                                          ;Prototype {protoMnemonic = "CMP", protoOperands = [OpRM32,OpIMM8]}
                                          ;[(EncModrm_rm,OperandReadWrite)
                                           ,(EncIMM,OperandReadWrite)]
                                          ;64bit: True
                                          ;legacy: True
                                          ;Compare imm8 with r/m32.} */
             
             ERASM_DECODER_DO_ACTION (1,
                                      Cmp,
                                      Just<OpRM32>,
                                      Just<EncModrm_rm>,
                                      Just<OpIMM8>,
                                      Just<EncIMM>,
                                      Nothing,
                                      Nothing);
         }
      
   }
   case (0x84):
   {
       /* EncodedInstructionDefinition {{[]
                                     ;84 
                                     ;Just Modrm
                                     ;Just RMBoth
                                     ;Nothing
                                     ;[]
                                     ;Nothing
                                     ;Nothing}
                                    ;Prototype {protoMnemonic = "TEST", protoOperands = [OpRM8,OpR8]}
                                    ;[(EncModrm_rm,OperandReadOnly)
                                     ,(EncModrm_reg,OperandReadOnly)]
                                    ;64bit: True
                                    ;legacy: True
                                    ;AND r8 with r/m8; set SF, ZF, PF according to result.} */
       
       ERASM_DECODER_DO_ACTION (1,
                                Test,
                                Just<OpRM8>,
                                Just<EncModrm_rm>,
                                Just<OpR8>,
                                Just<EncModrm_reg>,
                                Nothing,
                                Nothing);
   }
   case (0x85):
   if (is_data16)
      {
          /* EncodedInstructionDefinition {{[]
                                        ;85 
                                        ;Just Modrm
                                        ;Just RMBoth
                                        ;Nothing
                                        ;[]
                                        ;Just Op16
                                        ;Nothing}
                                       ;Prototype {protoMnemonic = "TEST", protoOperands = [OpRM16,OpR16]}
                                       ;[(EncModrm_rm,OperandReadOnly)
                                        ,(EncModrm_reg,OperandReadOnly)]
                                       ;64bit: True
                                       ;legacy: True
                                       ;AND r16 with r/m16; set SF, ZF, PF according to result.} */
          
          ERASM_DECODER_DO_ACTION (1,
                                   Test,
                                   Just<OpRM16>,
                                   Just<EncModrm_rm>,
                                   Just<OpR16>,
                                   Just<EncModrm_reg>,
                                   Nothing,
                                   Nothing);
      }
   else
      {
          /* EncodedInstructionDefinition {{[]
                                        ;85 
                                        ;Just Modrm
                                        ;Just RMBoth
                                        ;Nothing
                                        ;[]
                                        ;Just Op32
                                        ;Nothing}
                                       ;Prototype {protoMnemonic = "TEST", protoOperands = [OpRM32,OpR32]}
                                       ;[(EncModrm_rm,OperandReadOnly)
                                        ,(EncModrm_reg,OperandReadOnly)]
                                       ;64bit: True
                                       ;legacy: True
                                       ;AND r32 with r/m32; set SF, ZF, PF according to result.} */
          
          ERASM_DECODER_DO_ACTION (1,
                                   Test,
                                   Just<OpRM32>,
                                   Just<EncModrm_rm>,
                                   Just<OpR32>,
                                   Just<EncModrm_reg>,
                                   Nothing,
                                   Nothing);
      }
   case (0x86):
   {
       /* EncodedInstructionDefinition {{[]
                                     ;86 
                                     ;Just Modrm
                                     ;Just RMBoth
                                     ;Nothing
                                     ;[]
                                     ;Nothing
                                     ;Nothing}
                                    ;Prototype {protoMnemonic = "XCHG", protoOperands = [OpR8,OpRM8]}
                                    ;[(EncModrm_reg
                                      ,OperandReadWrite)
                                     ,(EncModrm_rm,OperandReadWrite)]
                                    ;64bit: True
                                    ;legacy: True
                                    ;Exchange byte from r/m8 with r8 (byte register).} */
       
       ERASM_DECODER_DO_ACTION (1,
                                Xchg,
                                Just<OpR8>,
                                Just<EncModrm_reg>,
                                Just<OpRM8>,
                                Just<EncModrm_rm>,
                                Nothing,
                                Nothing);
   }
   case (0x87):
   if (is_data16)
      {
          /* EncodedInstructionDefinition {{[]
                                        ;87 
                                        ;Just Modrm
                                        ;Just RMBoth
                                        ;Nothing
                                        ;[]
                                        ;Just Op16
                                        ;Nothing}
                                       ;Prototype {protoMnemonic = "XCHG", protoOperands = [OpR16,OpRM16]}
                                       ;[(EncModrm_reg
                                         ,OperandReadWrite)
                                        ,(EncModrm_rm,OperandReadWrite)]
                                       ;64bit: True
                                       ;legacy: True
                                       ;Exchange word from r/m16 with r16.} */
          
          ERASM_DECODER_DO_ACTION (1,
                                   Xchg,
                                   Just<OpR16>,
                                   Just<EncModrm_reg>,
                                   Just<OpRM16>,
                                   Just<EncModrm_rm>,
                                   Nothing,
                                   Nothing);
      }
   else
      {
          /* EncodedInstructionDefinition {{[]
                                        ;87 
                                        ;Just Modrm
                                        ;Just RMBoth
                                        ;Nothing
                                        ;[]
                                        ;Just Op32
                                        ;Nothing}
                                       ;Prototype {protoMnemonic = "XCHG", protoOperands = [OpR32,OpRM32]}
                                       ;[(EncModrm_reg
                                         ,OperandReadWrite)
                                        ,(EncModrm_rm,OperandReadWrite)]
                                       ;64bit: True
                                       ;legacy: True
                                       ;Exchange doubleword from r/m32 with r32.} */
          
          ERASM_DECODER_DO_ACTION (1,
                                   Xchg,
                                   Just<OpR32>,
                                   Just<EncModrm_reg>,
                                   Just<OpRM32>,
                                   Just<EncModrm_rm>,
                                   Nothing,
                                   Nothing);
      }
   case (0x88):
   {
       /* EncodedInstructionDefinition {{[]
                                     ;88 
                                     ;Just Modrm
                                     ;Just RMBoth
                                     ;Nothing
                                     ;[]
                                     ;Nothing
                                     ;Nothing}
                                    ;Prototype {protoMnemonic = "MOV", protoOperands = [OpRM8,OpR8]}
                                    ;[(EncModrm_rm,OperandReadWrite)
                                     ,(EncModrm_reg,OperandReadOnly)]
                                    ;64bit: True
                                    ;legacy: True
                                    ;Move r8 to r/m8.} */
       
       ERASM_DECODER_DO_ACTION (1,
                                Mov,
                                Just<OpRM8>,
                                Just<EncModrm_rm>,
                                Just<OpR8>,
                                Just<EncModrm_reg>,
                                Nothing,
                                Nothing);
   }
   case (0x89):
   if (is_data16)
      {
          /* EncodedInstructionDefinition {{[]
                                        ;89 
                                        ;Just Modrm
                                        ;Just RMBoth
                                        ;Nothing
                                        ;[]
                                        ;Just Op16
                                        ;Nothing}
                                       ;Prototype {protoMnemonic = "MOV", protoOperands = [OpRM16,OpR16]}
                                       ;[(EncModrm_rm,OperandReadWrite)
                                        ,(EncModrm_reg,OperandReadOnly)]
                                       ;64bit: True
                                       ;legacy: True
                                       ;Move r16 to r/m16.} */
          
          ERASM_DECODER_DO_ACTION (1,
                                   Mov,
                                   Just<OpRM16>,
                                   Just<EncModrm_rm>,
                                   Just<OpR16>,
                                   Just<EncModrm_reg>,
                                   Nothing,
                                   Nothing);
      }
   else
      {
          /* EncodedInstructionDefinition {{[]
                                        ;89 
                                        ;Just Modrm
                                        ;Just RMBoth
                                        ;Nothing
                                        ;[]
                                        ;Just Op32
                                        ;Nothing}
                                       ;Prototype {protoMnemonic = "MOV", protoOperands = [OpRM32,OpR32]}
                                       ;[(EncModrm_rm,OperandReadWrite)
                                        ,(EncModrm_reg,OperandReadOnly)]
                                       ;64bit: True
                                       ;legacy: True
                                       ;Move r32 to r/m32.} */
          
          ERASM_DECODER_DO_ACTION (1,
                                   Mov,
                                   Just<OpRM32>,
                                   Just<EncModrm_rm>,
                                   Just<OpR32>,
                                   Just<EncModrm_reg>,
                                   Nothing,
                                   Nothing);
      }
   case (0x8a):
   {
       /* EncodedInstructionDefinition {{[]
                                     ;8A 
                                     ;Just Modrm
                                     ;Just RMBoth
                                     ;Nothing
                                     ;[]
                                     ;Nothing
                                     ;Nothing}
                                    ;Prototype {protoMnemonic = "MOV", protoOperands = [OpR8,OpRM8]}
                                    ;[(EncModrm_reg
                                      ,OperandReadWrite)
                                     ,(EncModrm_rm,OperandReadOnly)]
                                    ;64bit: True
                                    ;legacy: True
                                    ;Move r/m8 to r8.} */
       
       ERASM_DECODER_DO_ACTION (1,
                                Mov,
                                Just<OpR8>,
                                Just<EncModrm_reg>,
                                Just<OpRM8>,
                                Just<EncModrm_rm>,
                                Nothing,
                                Nothing);
   }
   case (0x8b):
   if (is_data16)
      {
          /* EncodedInstructionDefinition {{[]
                                        ;8B 
                                        ;Just Modrm
                                        ;Just RMBoth
                                        ;Nothing
                                        ;[]
                                        ;Just Op16
                                        ;Nothing}
                                       ;Prototype {protoMnemonic = "MOV", protoOperands = [OpR16,OpRM16]}
                                       ;[(EncModrm_reg
                                         ,OperandReadWrite)
                                        ,(EncModrm_rm,OperandReadOnly)]
                                       ;64bit: True
                                       ;legacy: True
                                       ;Move r/m16 to r16.} */
          
          ERASM_DECODER_DO_ACTION (1,
                                   Mov,
                                   Just<OpR16>,
                                   Just<EncModrm_reg>,
                                   Just<OpRM16>,
                                   Just<EncModrm_rm>,
                                   Nothing,
                                   Nothing);
      }
   else
      {
          /* EncodedInstructionDefinition {{[]
                                        ;8B 
                                        ;Just Modrm
                                        ;Just RMBoth
                                        ;Nothing
                                        ;[]
                                        ;Just Op32
                                        ;Nothing}
                                       ;Prototype {protoMnemonic = "MOV", protoOperands = [OpR32,OpRM32]}
                                       ;[(EncModrm_reg
                                         ,OperandReadWrite)
                                        ,(EncModrm_rm,OperandReadOnly)]
                                       ;64bit: True
                                       ;legacy: True
                                       ;Move r/m32 to r32.} */
          
          ERASM_DECODER_DO_ACTION (1,
                                   Mov,
                                   Just<OpR32>,
                                   Just<EncModrm_reg>,
                                   Just<OpRM32>,
                                   Just<EncModrm_rm>,
                                   Nothing,
                                   Nothing);
      }
   case (0x8c):
   {
       /* EncodedInstructionDefinition {{[]
                                     ;8C 
                                     ;Just Modrm
                                     ;Just RMBoth
                                     ;Nothing
                                     ;[]
                                     ;Nothing
                                     ;Nothing}
                                    ;Prototype {protoMnemonic = "MOV", protoOperands = [OpRM16,OpSReg]}
                                    ;[(EncModrm_rm,OperandReadWrite)
                                     ,(EncModrm_reg,OperandReadOnly)]
                                    ;64bit: True
                                    ;legacy: True
                                    ;Move segment register to r/m16.} */
       
       ERASM_DECODER_DO_ACTION (1,
                                Mov,
                                Just<OpRM16>,
                                Just<EncModrm_rm>,
                                Just<OpSReg>,
                                Just<EncModrm_reg>,
                                Nothing,
                                Nothing);
   }
   case (0x8d):
   if (!modrm_mod3 (p))
      if (is_data16)
         {
             /* EncodedInstructionDefinition {{[]
                                           ;8D 
                                           ;Just Modrm
                                           ;Just RMMemOnly
                                           ;Nothing
                                           ;[]
                                           ;Just Op16
                                           ;Nothing}
                                          ;Prototype {protoMnemonic = "LEA", protoOperands = [OpR16,OpM]}
                                          ;[(EncModrm_reg
                                            ,OperandReadWrite)
                                           ,(EncModrm_rm,OperandReadOnly)]
                                          ;64bit: True
                                          ;legacy: True
                                          ;Store effective address for m in register r16.} */
             
             ERASM_DECODER_DO_ACTION (1,
                                      Lea,
                                      Just<OpR16>,
                                      Just<EncModrm_reg>,
                                      Just<OpM>,
                                      Just<EncModrm_rm_mem>,
                                      Nothing,
                                      Nothing);
         }
      else
         {
             /* EncodedInstructionDefinition {{[]
                                           ;8D 
                                           ;Just Modrm
                                           ;Just RMMemOnly
                                           ;Nothing
                                           ;[]
                                           ;Just Op32
                                           ;Nothing}
                                          ;Prototype {protoMnemonic = "LEA", protoOperands = [OpR32,OpM]}
                                          ;[(EncModrm_reg
                                            ,OperandReadWrite)
                                           ,(EncModrm_rm,OperandReadOnly)]
                                          ;64bit: True
                                          ;legacy: True
                                          ;Store effective address for m in register r32.} */
             
             ERASM_DECODER_DO_ACTION (1,
                                      Lea,
                                      Just<OpR32>,
                                      Just<EncModrm_reg>,
                                      Just<OpM>,
                                      Just<EncModrm_rm_mem>,
                                      Nothing,
                                      Nothing);
         }
   else
      goto decode_error;
   case (0x8e):
   {
       /* EncodedInstructionDefinition {{[]
                                     ;8E 
                                     ;Just Modrm
                                     ;Just RMBoth
                                     ;Nothing
                                     ;[]
                                     ;Nothing
                                     ;Nothing}
                                    ;Prototype {protoMnemonic = "MOV", protoOperands = [OpSReg,OpRM16]}
                                    ;[(EncModrm_reg
                                      ,OperandReadWrite)
                                     ,(EncModrm_rm,OperandReadOnly)]
                                    ;64bit: True
                                    ;legacy: True
                                    ;Move r/m16 to segment register.} */
       
       ERASM_DECODER_DO_ACTION (1,
                                Mov,
                                Just<OpSReg>,
                                Just<EncModrm_reg>,
                                Just<OpRM16>,
                                Just<EncModrm_rm>,
                                Nothing,
                                Nothing);
   }
   case (0x8f):
   switch (modrm_reg_op (p)) {
      case (0):
      if (is_data16)
         {
             /* EncodedInstructionDefinition {{[]
                                           ;8F 
                                           ;Just (ModrmDigit 0)
                                           ;Just RMBoth
                                           ;Nothing
                                           ;[]
                                           ;Just Op16
                                           ;Nothing}
                                          ;Prototype {protoMnemonic = "POP", protoOperands = [OpRM16]}
                                          ;[(EncModrm_rm
                                            ,OperandReadWrite)]
                                          ;64bit: True
                                          ;legacy: True
                                          ;Pop top of stack into m16; increment stack pointer.} */
             
             ERASM_DECODER_DO_ACTION (1,
                                      Pop,
                                      Just<OpRM16>,
                                      Just<EncModrm_rm>,
                                      Nothing,
                                      Nothing,
                                      Nothing,
                                      Nothing);
         }
      else
         {
             /* EncodedInstructionDefinition {{[]
                                           ;8F 
                                           ;Just (ModrmDigit 0)
                                           ;Just RMBoth
                                           ;Nothing
                                           ;[]
                                           ;Just Op32
                                           ;Nothing}
                                          ;Prototype {protoMnemonic = "POP", protoOperands = [OpRM32]}
                                          ;[(EncModrm_rm
                                            ,OperandReadWrite)]
                                          ;64bit: False
                                          ;legacy: True
                                          ;Pop top of stack into m32; increment stack pointer.} */
             
             ERASM_DECODER_DO_ACTION (1,
                                      Pop,
                                      Just<OpRM32>,
                                      Just<EncModrm_rm>,
                                      Nothing,
                                      Nothing,
                                      Nothing,
                                      Nothing);
         }
      
   }
   case (0x90):
   if (prefix.rep)
      {
          /* EncodedInstructionDefinition {{[REP]
                                        ;90 
                                        ;Nothing
                                        ;Nothing
                                        ;Nothing
                                        ;[]
                                        ;Nothing
                                        ;Nothing}
                                       ;Prototype {protoMnemonic = "PAUSE", protoOperands = []}
                                       ;[]
                                       ;64bit: True
                                       ;legacy: True
                                       ;Gives hint to processor that improves performance of spin-wait loops.} */
          
          ERASM_DECODER_DO_ACTION (1,
                                   Pause,
                                   Nothing,
                                   Nothing,
                                   Nothing,
                                   Nothing,
                                   Nothing,
                                   Nothing);
      }
   else
      if (is_data16)
         {
             /* EncodedInstructionDefinition {{[]
                                           ;90 
                                           ;Nothing
                                           ;Nothing
                                           ;Just RaddW
                                           ;[]
                                           ;Just Op16
                                           ;Nothing}
                                          ;Prototype {protoMnemonic = "XCHG", protoOperands = [OpR16,OpAX]}
                                          ;[(EncReg,OperandReadWrite)
                                           ,(EncImplicit,OperandReadWrite)]
                                          ;64bit: True
                                          ;legacy: True
                                          ;Exchange AX with r16.} */
             
             ERASM_DECODER_DO_ACTION (1,
                                      Xchg,
                                      Just<OpR16>,
                                      Just<EncReg>,
                                      Just<OpAX>,
                                      Just<EncImplicit>,
                                      Nothing,
                                      Nothing);
         }
      else
         {
             /* EncodedInstructionDefinition {{[]
                                           ;90 
                                           ;Nothing
                                           ;Nothing
                                           ;Just RaddD
                                           ;[]
                                           ;Just Op32
                                           ;Nothing}
                                          ;Prototype {protoMnemonic = "XCHG", protoOperands = [OpR32,OpEAX]}
                                          ;[(EncReg,OperandReadWrite)
                                           ,(EncImplicit,OperandReadWrite)]
                                          ;64bit: True
                                          ;legacy: True
                                          ;Exchange EAX with r32.} */
             
             ERASM_DECODER_DO_ACTION (1,
                                      Xchg,
                                      Just<OpR32>,
                                      Just<EncReg>,
                                      Just<OpEAX>,
                                      Just<EncImplicit>,
                                      Nothing,
                                      Nothing);
         }
   case (0x98):
   if (is_data16)
      {
          /* EncodedInstructionDefinition {{[]
                                        ;98 
                                        ;Nothing
                                        ;Nothing
                                        ;Nothing
                                        ;[]
                                        ;Just Op16
                                        ;Nothing}
                                       ;Prototype {protoMnemonic = "CBW", protoOperands = []}
                                       ;[]
                                       ;64bit: True
                                       ;legacy: True
                                       ;AX ← sign-extend of AL.} */
          
          ERASM_DECODER_DO_ACTION (1,
                                   Cbw,
                                   Nothing,
                                   Nothing,
                                   Nothing,
                                   Nothing,
                                   Nothing,
                                   Nothing);
      }
   else
      {
          /* EncodedInstructionDefinition {{[]
                                        ;98 
                                        ;Nothing
                                        ;Nothing
                                        ;Nothing
                                        ;[]
                                        ;Just Op32
                                        ;Nothing}
                                       ;Prototype {protoMnemonic = "CWDE", protoOperands = []}
                                       ;[]
                                       ;64bit: True
                                       ;legacy: True
                                       ;EAX ← sign-extend of AX.} */
          
          ERASM_DECODER_DO_ACTION (1,
                                   Cwde,
                                   Nothing,
                                   Nothing,
                                   Nothing,
                                   Nothing,
                                   Nothing,
                                   Nothing);
      }
   case (0x99):
   if (is_data16)
      {
          /* EncodedInstructionDefinition {{[]
                                        ;99 
                                        ;Nothing
                                        ;Nothing
                                        ;Nothing
                                        ;[]
                                        ;Just Op16
                                        ;Nothing}
                                       ;Prototype {protoMnemonic = "CWD", protoOperands = []}
                                       ;[]
                                       ;64bit: True
                                       ;legacy: True
                                       ;DX:AX ← sign-extend of AX.} */
          
          ERASM_DECODER_DO_ACTION (1,
                                   Cwd,
                                   Nothing,
                                   Nothing,
                                   Nothing,
                                   Nothing,
                                   Nothing,
                                   Nothing);
      }
   else
      {
          /* EncodedInstructionDefinition {{[]
                                        ;99 
                                        ;Nothing
                                        ;Nothing
                                        ;Nothing
                                        ;[]
                                        ;Just Op32
                                        ;Nothing}
                                       ;Prototype {protoMnemonic = "CDQ", protoOperands = []}
                                       ;[]
                                       ;64bit: True
                                       ;legacy: True
                                       ;EDX:EAX ← sign-extend of EAX.} */
          
          ERASM_DECODER_DO_ACTION (1,
                                   Cdq,
                                   Nothing,
                                   Nothing,
                                   Nothing,
                                   Nothing,
                                   Nothing,
                                   Nothing);
      }
   case (0x9a):
   if (is_data16)
      {
          /* EncodedInstructionDefinition {{[]
                                        ;9A 
                                        ;Nothing
                                        ;Nothing
                                        ;Nothing
                                        ;[IMM_CD]
                                        ;Just Op16
                                        ;Nothing}
                                       ;Prototype {protoMnemonic = "CALL", protoOperands = [OpFar16]}
                                       ;[(EncOffset,OperandReadWrite)]
                                       ;64bit: False
                                       ;legacy: True
                                       ;Call far, absolute, address given in operand.} */
          
          ERASM_DECODER_DO_ACTION (1,
                                   Call,
                                   Just<OpFar16>,
                                   Just<EncOffset>,
                                   Nothing,
                                   Nothing,
                                   Nothing,
                                   Nothing);
      }
   else
      {
          /* EncodedInstructionDefinition {{[]
                                        ;9A 
                                        ;Nothing
                                        ;Nothing
                                        ;Nothing
                                        ;[IMM_CP]
                                        ;Just Op32
                                        ;Nothing}
                                       ;Prototype {protoMnemonic = "CALL", protoOperands = [OpFar32]}
                                       ;[(EncOffset,OperandReadWrite)]
                                       ;64bit: False
                                       ;legacy: True
                                       ;Call far, absolute, address given in operand.} */
          
          ERASM_DECODER_DO_ACTION (1,
                                   Call,
                                   Just<OpFar32>,
                                   Just<EncOffset>,
                                   Nothing,
                                   Nothing,
                                   Nothing,
                                   Nothing);
      }
   case (0x9b):
   switch (*p++) {
      case (0xd9):
      if (!modrm_mod3 (p))
         switch (modrm_reg_op (p)) {
            case (6):
            {
                /* EncodedInstructionDefinition {{[]
                                              ;9B D9 
                                              ;Just (ModrmDigit 6)
                                              ;Just RMMemOnly
                                              ;Nothing
                                              ;[]
                                              ;Nothing
                                              ;Nothing}
                                             ;Prototype {protoMnemonic = "FSTENV", protoOperands = [OpM14_28byte]}
                                             ;[(EncModrm_rm
                                               ,OperandReadWrite)]
                                             ;64bit: True
                                             ;legacy: True
                                             ;Store FPU environment to m14byte or m28byte after checking for pending unmasked floating-point exceptions. Then mask all floating- point exceptions.} */
                
                ERASM_DECODER_DO_ACTION (2,
                                         Fstenv,
                                         Just<OpM14_28byte>,
                                         Just<EncModrm_rm_mem>,
                                         Nothing,
                                         Nothing,
                                         Nothing,
                                         Nothing);
            }
            case (7):
            {
                /* EncodedInstructionDefinition {{[]
                                              ;9B D9 
                                              ;Just (ModrmDigit 7)
                                              ;Just RMMemOnly
                                              ;Nothing
                                              ;[]
                                              ;Nothing
                                              ;Nothing}
                                             ;Prototype {protoMnemonic = "FSTCW", protoOperands = [OpM2byte]}
                                             ;[(EncModrm_rm
                                               ,OperandReadWrite)]
                                             ;64bit: True
                                             ;legacy: True
                                             ;Store FPU control word to m2byte after checking for pending unmasked floating-point exceptions.} */
                
                ERASM_DECODER_DO_ACTION (2,
                                         Fstcw,
                                         Just<OpM2byte>,
                                         Just<EncModrm_rm_mem>,
                                         Nothing,
                                         Nothing,
                                         Nothing,
                                         Nothing);
            }
            
         }
      else
         goto decode_error;
      case (0xdb):
      switch (*p++) {
         case (0xe2):
         {
             /* EncodedInstructionDefinition {{[]
                                           ;9B DB E2 
                                           ;Nothing
                                           ;Nothing
                                           ;Nothing
                                           ;[]
                                           ;Nothing
                                           ;Nothing}
                                          ;Prototype {protoMnemonic = "FCLEX", protoOperands = []}
                                          ;[]
                                          ;64bit: True
                                          ;legacy: True
                                          ;Clear floating-point exception flags after checking for pending unmasked floating- point exceptions.} */
             
             ERASM_DECODER_DO_ACTION (3,
                                      Fclex,
                                      Nothing,
                                      Nothing,
                                      Nothing,
                                      Nothing,
                                      Nothing,
                                      Nothing);
         }
         case (0xe3):
         {
             /* EncodedInstructionDefinition {{[]
                                           ;9B DB E3 
                                           ;Nothing
                                           ;Nothing
                                           ;Nothing
                                           ;[]
                                           ;Nothing
                                           ;Nothing}
                                          ;Prototype {protoMnemonic = "FINIT", protoOperands = []}
                                          ;[]
                                          ;64bit: True
                                          ;legacy: True
                                          ;Initialize FPU after checking for pending unmasked floating-point exceptions.} */
             
             ERASM_DECODER_DO_ACTION (3,
                                      Finit,
                                      Nothing,
                                      Nothing,
                                      Nothing,
                                      Nothing,
                                      Nothing,
                                      Nothing);
         }
         
      }
      case (0xdd):
      if (!modrm_mod3 (p))
         switch (modrm_reg_op (p)) {
            case (6):
            {
                /* EncodedInstructionDefinition {{[]
                                              ;9B DD 
                                              ;Just (ModrmDigit 6)
                                              ;Just RMMemOnly
                                              ;Nothing
                                              ;[]
                                              ;Nothing
                                              ;Nothing}
                                             ;Prototype {protoMnemonic = "FSAVE", protoOperands = [OpM94_108byte]}
                                             ;[(EncModrm_rm
                                               ,OperandReadWrite)]
                                             ;64bit: True
                                             ;legacy: True
                                             ;Store FPU state to m94byte or m108byte after checking for pending unmasked floating- point exceptions. Then re- initialize the FPU.} */
                
                ERASM_DECODER_DO_ACTION (2,
                                         Fsave,
                                         Just<OpM94_108byte>,
                                         Just<EncModrm_rm_mem>,
                                         Nothing,
                                         Nothing,
                                         Nothing,
                                         Nothing);
            }
            case (7):
            {
                /* EncodedInstructionDefinition {{[]
                                              ;9B DD 
                                              ;Just (ModrmDigit 7)
                                              ;Just RMMemOnly
                                              ;Nothing
                                              ;[]
                                              ;Nothing
                                              ;Nothing}
                                             ;Prototype {protoMnemonic = "FSTSW", protoOperands = [OpM2byte]}
                                             ;[(EncModrm_rm
                                               ,OperandReadWrite)]
                                             ;64bit: True
                                             ;legacy: True
                                             ;Store FPU status word at m2byte after checking for pending unmasked floating- point exceptions.} */
                
                ERASM_DECODER_DO_ACTION (2,
                                         Fstsw,
                                         Just<OpM2byte>,
                                         Just<EncModrm_rm_mem>,
                                         Nothing,
                                         Nothing,
                                         Nothing,
                                         Nothing);
            }
            
         }
      else
         goto decode_error;
      case (0xdf):
      switch (*p++) {
         case (0xe0):
         {
             /* EncodedInstructionDefinition {{[]
                                           ;9B DF E0 
                                           ;Nothing
                                           ;Nothing
                                           ;Nothing
                                           ;[]
                                           ;Nothing
                                           ;Nothing}
                                          ;Prototype {protoMnemonic = "FSTSW", protoOperands = [OpAX]}
                                          ;[(EncImplicit
                                            ,OperandReadWrite)]
                                          ;64bit: True
                                          ;legacy: True
                                          ;Store FPU status word in AX register after checking for pending unmasked floating- point exceptions.} */
             
             ERASM_DECODER_DO_ACTION (3,
                                      Fstsw,
                                      Just<OpAX>,
                                      Just<EncImplicit>,
                                      Nothing,
                                      Nothing,
                                      Nothing,
                                      Nothing);
         }
         
      }
      default:
      {
          p--;
          {
              /* EncodedInstructionDefinition {{[]
                                            ;9B 
                                            ;Nothing
                                            ;Nothing
                                            ;Nothing
                                            ;[]
                                            ;Nothing
                                            ;Nothing}
                                           ;Prototype {protoMnemonic = "FWAIT", protoOperands = []}
                                           ;[]
                                           ;64bit: True
                                           ;legacy: True
                                           ;Check pending unmasked floating-point exceptions.} */
              
              ERASM_DECODER_DO_ACTION (1,
                                       Fwait,
                                       Nothing,
                                       Nothing,
                                       Nothing,
                                       Nothing,
                                       Nothing,
                                       Nothing);
          }
      }
   }
   case (0x9c):
   if (is_data16)
      {
          /* EncodedInstructionDefinition {{[]
                                        ;9C 
                                        ;Nothing
                                        ;Nothing
                                        ;Nothing
                                        ;[]
                                        ;Just Op16
                                        ;Nothing}
                                       ;Prototype {protoMnemonic = "PUSHF", protoOperands = []}
                                       ;[]
                                       ;64bit: True
                                       ;legacy: True
                                       ;Push lower 16 bits of EFLAGS.} */
          
          ERASM_DECODER_DO_ACTION (1,
                                   Pushf,
                                   Nothing,
                                   Nothing,
                                   Nothing,
                                   Nothing,
                                   Nothing,
                                   Nothing);
      }
   else
      {
          /* EncodedInstructionDefinition {{[]
                                        ;9C 
                                        ;Nothing
                                        ;Nothing
                                        ;Nothing
                                        ;[]
                                        ;Just Op32
                                        ;Nothing}
                                       ;Prototype {protoMnemonic = "PUSHFD", protoOperands = []}
                                       ;[]
                                       ;64bit: False
                                       ;legacy: True
                                       ;Push EFLAGS.} */
          
          ERASM_DECODER_DO_ACTION (1,
                                   Pushfd,
                                   Nothing,
                                   Nothing,
                                   Nothing,
                                   Nothing,
                                   Nothing,
                                   Nothing);
      }
   case (0x9d):
   if (is_data16)
      {
          /* EncodedInstructionDefinition {{[]
                                        ;9D 
                                        ;Nothing
                                        ;Nothing
                                        ;Nothing
                                        ;[]
                                        ;Just Op16
                                        ;Nothing}
                                       ;Prototype {protoMnemonic = "POPF", protoOperands = []}
                                       ;[]
                                       ;64bit: True
                                       ;legacy: True
                                       ;Pop top of stack into lower 16 bits of EFLAGS.} */
          
          ERASM_DECODER_DO_ACTION (1,
                                   Popf,
                                   Nothing,
                                   Nothing,
                                   Nothing,
                                   Nothing,
                                   Nothing,
                                   Nothing);
      }
   else
      {
          /* EncodedInstructionDefinition {{[]
                                        ;9D 
                                        ;Nothing
                                        ;Nothing
                                        ;Nothing
                                        ;[]
                                        ;Just Op32
                                        ;Nothing}
                                       ;Prototype {protoMnemonic = "POPFD", protoOperands = []}
                                       ;[]
                                       ;64bit: False
                                       ;legacy: True
                                       ;Pop top of stack into EFLAGS.} */
          
          ERASM_DECODER_DO_ACTION (1,
                                   Popfd,
                                   Nothing,
                                   Nothing,
                                   Nothing,
                                   Nothing,
                                   Nothing,
                                   Nothing);
      }
   case (0x9e):
   {
       /* EncodedInstructionDefinition {{[]
                                     ;9E 
                                     ;Nothing
                                     ;Nothing
                                     ;Nothing
                                     ;[]
                                     ;Nothing
                                     ;Nothing}
                                    ;Prototype {protoMnemonic = "SAHF", protoOperands = []}
                                    ;[]
                                    ;64bit: False
                                    ;legacy: True
                                    ;Loads SF, ZF, AF, PF, and CF from AH into EFLAGS register.} */
       
       ERASM_DECODER_DO_ACTION (1,
                                Sahf,
                                Nothing,
                                Nothing,
                                Nothing,
                                Nothing,
                                Nothing,
                                Nothing);
   }
   case (0x9f):
   {
       /* EncodedInstructionDefinition {{[]
                                     ;9F 
                                     ;Nothing
                                     ;Nothing
                                     ;Nothing
                                     ;[]
                                     ;Nothing
                                     ;Nothing}
                                    ;Prototype {protoMnemonic = "LAHF", protoOperands = []}
                                    ;[]
                                    ;64bit: False
                                    ;legacy: True
                                    ;Load: AH ← EFLAGS(SF:ZF:0:AF:0:PF:1:CF).} */
       
       ERASM_DECODER_DO_ACTION (1,
                                Lahf,
                                Nothing,
                                Nothing,
                                Nothing,
                                Nothing,
                                Nothing,
                                Nothing);
   }
   case (0xa0):
   {
       /* EncodedInstructionDefinition {{[]
                                     ;A0 
                                     ;Nothing
                                     ;Nothing
                                     ;Nothing
                                     ;[]
                                     ;Nothing
                                     ;Nothing}
                                    ;Prototype {protoMnemonic = "MOV", protoOperands = [OpAL,OpMOffs8]}
                                    ;[(EncImplicit,OperandReadWrite)
                                     ,(EncDisplacement
                                      ,OperandReadWrite)]
                                    ;64bit: True
                                    ;legacy: True
                                    ;Move byte at (seg:offset) to AL.} */
       
       ERASM_DECODER_DO_ACTION (1,
                                Mov,
                                Just<OpAL>,
                                Just<EncImplicit>,
                                Just<OpMOffs8>,
                                Just<EncDisplacement>,
                                Nothing,
                                Nothing);
   }
   case (0xa1):
   if (is_data16)
      {
          /* EncodedInstructionDefinition {{[]
                                        ;A1 
                                        ;Nothing
                                        ;Nothing
                                        ;Nothing
                                        ;[]
                                        ;Just Op16
                                        ;Nothing}
                                       ;Prototype {protoMnemonic = "MOV", protoOperands = [OpAX,OpMOffs16]}
                                       ;[(EncImplicit,OperandReadWrite)
                                        ,(EncDisplacement
                                         ,OperandReadWrite)]
                                       ;64bit: True
                                       ;legacy: True
                                       ;Move word at (seg:offset) to AX.} */
          
          ERASM_DECODER_DO_ACTION (1,
                                   Mov,
                                   Just<OpAX>,
                                   Just<EncImplicit>,
                                   Just<OpMOffs16>,
                                   Just<EncDisplacement>,
                                   Nothing,
                                   Nothing);
      }
   else
      {
          /* EncodedInstructionDefinition {{[]
                                        ;A1 
                                        ;Nothing
                                        ;Nothing
                                        ;Nothing
                                        ;[]
                                        ;Just Op32
                                        ;Nothing}
                                       ;Prototype {protoMnemonic = "MOV", protoOperands = [OpEAX,OpMOffs32]}
                                       ;[(EncImplicit,OperandReadWrite)
                                        ,(EncDisplacement
                                         ,OperandReadWrite)]
                                       ;64bit: True
                                       ;legacy: True
                                       ;Move doubleword at (seg:offset) to EAX.} */
          
          ERASM_DECODER_DO_ACTION (1,
                                   Mov,
                                   Just<OpEAX>,
                                   Just<EncImplicit>,
                                   Just<OpMOffs32>,
                                   Just<EncDisplacement>,
                                   Nothing,
                                   Nothing);
      }
   case (0xa2):
   {
       /* EncodedInstructionDefinition {{[]
                                     ;A2 
                                     ;Nothing
                                     ;Nothing
                                     ;Nothing
                                     ;[]
                                     ;Nothing
                                     ;Nothing}
                                    ;Prototype {protoMnemonic = "MOV", protoOperands = [OpMOffs8,OpAL]}
                                    ;[(EncDisplacement
                                      ,OperandReadWrite)
                                     ,(EncImplicit,OperandReadWrite)]
                                    ;64bit: True
                                    ;legacy: True
                                    ;Move AL to (seg:offset).} */
       
       ERASM_DECODER_DO_ACTION (1,
                                Mov,
                                Just<OpMOffs8>,
                                Just<EncDisplacement>,
                                Just<OpAL>,
                                Just<EncImplicit>,
                                Nothing,
                                Nothing);
   }
   case (0xa3):
   if (is_data16)
      {
          /* EncodedInstructionDefinition {{[]
                                        ;A3 
                                        ;Nothing
                                        ;Nothing
                                        ;Nothing
                                        ;[]
                                        ;Just Op16
                                        ;Nothing}
                                       ;Prototype {protoMnemonic = "MOV", protoOperands = [OpMOffs16,OpAX]}
                                       ;[(EncDisplacement
                                         ,OperandReadWrite)
                                        ,(EncImplicit,OperandReadWrite)]
                                       ;64bit: True
                                       ;legacy: True
                                       ;Move AX to (seg:offset).} */
          
          ERASM_DECODER_DO_ACTION (1,
                                   Mov,
                                   Just<OpMOffs16>,
                                   Just<EncDisplacement>,
                                   Just<OpAX>,
                                   Just<EncImplicit>,
                                   Nothing,
                                   Nothing);
      }
   else
      {
          /* EncodedInstructionDefinition {{[]
                                        ;A3 
                                        ;Nothing
                                        ;Nothing
                                        ;Nothing
                                        ;[]
                                        ;Just Op32
                                        ;Nothing}
                                       ;Prototype {protoMnemonic = "MOV", protoOperands = [OpMOffs32,OpEAX]}
                                       ;[(EncDisplacement
                                         ,OperandReadWrite)
                                        ,(EncImplicit,OperandReadWrite)]
                                       ;64bit: True
                                       ;legacy: True
                                       ;Move EAX to (seg:offset).} */
          
          ERASM_DECODER_DO_ACTION (1,
                                   Mov,
                                   Just<OpMOffs32>,
                                   Just<EncDisplacement>,
                                   Just<OpEAX>,
                                   Just<EncImplicit>,
                                   Nothing,
                                   Nothing);
      }
   case (0xa4):
   if (prefix.rep)
      {
          /* EncodedInstructionDefinition {{[REP]
                                        ;A4 
                                        ;Nothing
                                        ;Nothing
                                        ;Nothing
                                        ;[]
                                        ;Nothing
                                        ;Nothing}
                                       ;Prototype {protoMnemonic = "REP_MOVS", protoOperands = [OpM8_ES_DI_EDI_RDI,OpM8_DS_SI_ESI_RSI]}
                                       ;[(EncES_DI_EDI_RDI
                                         ,OperandReadWrite)
                                        ,(EncDS_SI_ESI_RSI
                                         ,OperandReadOnly)]
                                       ;64bit: True
                                       ;legacy: True
                                       ;Move (E)CX bytes from DS:[(E)SI] to ES:[(E)DI].} */
          
          ERASM_DECODER_DO_ACTION (1,
                                   Rep_movs,
                                   Just<OpM8_ES_DI_EDI_RDI>,
                                   Just<EncES_DI_EDI_RDI>,
                                   Just<OpM8_DS_SI_ESI_RSI>,
                                   Just<EncDS_SI_ESI_RSI>,
                                   Nothing,
                                   Nothing);
      }
   else
      {
          /* EncodedInstructionDefinition {{[]
                                        ;A4 
                                        ;Nothing
                                        ;Nothing
                                        ;Nothing
                                        ;[]
                                        ;Nothing
                                        ;Nothing}
                                       ;Prototype {protoMnemonic = "MOVS", protoOperands = [OpM8_ES_DI_EDI_RDI,OpM8_DS_SI_ESI_RSI]}
                                       ;[(EncES_DI_EDI_RDI
                                         ,OperandReadWrite)
                                        ,(EncDS_SI_ESI_RSI
                                         ,OperandReadOnly)]
                                       ;64bit: True
                                       ;legacy: True
                                       ;For legacy mode, Move byte from address DS:(E)SI to ES:(E)DI. For 64-bit mode move byte from address (R|E)SI to (R|E)DI.} */
          
          ERASM_DECODER_DO_ACTION (1,
                                   Movs,
                                   Just<OpM8_ES_DI_EDI_RDI>,
                                   Just<EncES_DI_EDI_RDI>,
                                   Just<OpM8_DS_SI_ESI_RSI>,
                                   Just<EncDS_SI_ESI_RSI>,
                                   Nothing,
                                   Nothing);
      }
   case (0xa5):
   if (prefix.rep)
      if (is_data16)
         {
             /* EncodedInstructionDefinition {{[REP]
                                           ;A5 
                                           ;Nothing
                                           ;Nothing
                                           ;Nothing
                                           ;[]
                                           ;Just Op16
                                           ;Nothing}
                                          ;Prototype {protoMnemonic = "REP_MOVS", protoOperands = [OpM16_ES_DI_EDI_RDI,OpM16_DS_SI_ESI_RSI]}
                                          ;[(EncES_DI_EDI_RDI
                                            ,OperandReadWrite)
                                           ,(EncDS_SI_ESI_RSI
                                            ,OperandReadOnly)]
                                          ;64bit: True
                                          ;legacy: True
                                          ;Move (E)CX words from DS:[(E)SI] to ES:[(E)DI].} */
             
             ERASM_DECODER_DO_ACTION (1,
                                      Rep_movs,
                                      Just<OpM16_ES_DI_EDI_RDI>,
                                      Just<EncES_DI_EDI_RDI>,
                                      Just<OpM16_DS_SI_ESI_RSI>,
                                      Just<EncDS_SI_ESI_RSI>,
                                      Nothing,
                                      Nothing);
         }
      else
         {
             /* EncodedInstructionDefinition {{[REP]
                                           ;A5 
                                           ;Nothing
                                           ;Nothing
                                           ;Nothing
                                           ;[]
                                           ;Just Op32
                                           ;Nothing}
                                          ;Prototype {protoMnemonic = "REP_MOVS", protoOperands = [OpM32_ES_DI_EDI_RDI,OpM32_DS_SI_ESI_RSI]}
                                          ;[(EncES_DI_EDI_RDI
                                            ,OperandReadWrite)
                                           ,(EncDS_SI_ESI_RSI
                                            ,OperandReadOnly)]
                                          ;64bit: True
                                          ;legacy: True
                                          ;Move (E)CX doublewords from DS:[(E)SI] to ES:[(E)DI].} */
             
             ERASM_DECODER_DO_ACTION (1,
                                      Rep_movs,
                                      Just<OpM32_ES_DI_EDI_RDI>,
                                      Just<EncES_DI_EDI_RDI>,
                                      Just<OpM32_DS_SI_ESI_RSI>,
                                      Just<EncDS_SI_ESI_RSI>,
                                      Nothing,
                                      Nothing);
         }
   else
      if (is_data16)
         {
             /* EncodedInstructionDefinition {{[]
                                           ;A5 
                                           ;Nothing
                                           ;Nothing
                                           ;Nothing
                                           ;[]
                                           ;Just Op16
                                           ;Nothing}
                                          ;Prototype {protoMnemonic = "MOVS", protoOperands = [OpM16_ES_DI_EDI_RDI,OpM16_DS_SI_ESI_RSI]}
                                          ;[(EncES_DI_EDI_RDI
                                            ,OperandReadWrite)
                                           ,(EncDS_SI_ESI_RSI
                                            ,OperandReadOnly)]
                                          ;64bit: True
                                          ;legacy: True
                                          ;For legacy mode, move word from address DS:(E)SI to ES:(E)DI. For 64-bit mode move word at address (R|E)SI to (R|E)DI.} */
             
             ERASM_DECODER_DO_ACTION (1,
                                      Movs,
                                      Just<OpM16_ES_DI_EDI_RDI>,
                                      Just<EncES_DI_EDI_RDI>,
                                      Just<OpM16_DS_SI_ESI_RSI>,
                                      Just<EncDS_SI_ESI_RSI>,
                                      Nothing,
                                      Nothing);
         }
      else
         {
             /* EncodedInstructionDefinition {{[]
                                           ;A5 
                                           ;Nothing
                                           ;Nothing
                                           ;Nothing
                                           ;[]
                                           ;Just Op32
                                           ;Nothing}
                                          ;Prototype {protoMnemonic = "MOVS", protoOperands = [OpM32_ES_DI_EDI_RDI,OpM32_DS_SI_ESI_RSI]}
                                          ;[(EncES_DI_EDI_RDI
                                            ,OperandReadWrite)
                                           ,(EncDS_SI_ESI_RSI
                                            ,OperandReadOnly)]
                                          ;64bit: True
                                          ;legacy: True
                                          ;For legacy mode, move dword from address DS:(E)SI to ES:(E)DI. For 64-bit mode move dword from address (R|E)SI to (R|E)DI.} */
             
             ERASM_DECODER_DO_ACTION (1,
                                      Movs,
                                      Just<OpM32_ES_DI_EDI_RDI>,
                                      Just<EncES_DI_EDI_RDI>,
                                      Just<OpM32_DS_SI_ESI_RSI>,
                                      Just<EncDS_SI_ESI_RSI>,
                                      Nothing,
                                      Nothing);
         }
   case (0xa6):
   if (prefix.repne)
      {
          /* EncodedInstructionDefinition {{[REPNE]
                                        ;A6 
                                        ;Nothing
                                        ;Nothing
                                        ;Nothing
                                        ;[]
                                        ;Nothing
                                        ;Nothing}
                                       ;Prototype {protoMnemonic = "REPNE_CMPS", protoOperands = [OpM8_DS_SI_ESI_RSI,OpM8_ES_DI_EDI_RDI]}
                                       ;[(EncDS_SI_ESI_RSI
                                         ,OperandReadOnly)
                                        ,(EncES_DI_EDI_RDI
                                         ,OperandReadWrite)]
                                       ;64bit: True
                                       ;legacy: True
                                       ;Find matching bytes in ES:[(E)DI] and DS:[(E)SI].} */
          
          ERASM_DECODER_DO_ACTION (1,
                                   Repne_cmps,
                                   Just<OpM8_DS_SI_ESI_RSI>,
                                   Just<EncDS_SI_ESI_RSI>,
                                   Just<OpM8_ES_DI_EDI_RDI>,
                                   Just<EncES_DI_EDI_RDI>,
                                   Nothing,
                                   Nothing);
      }
   else
      if (prefix.rep)
         {
             /* EncodedInstructionDefinition {{[REP]
                                           ;A6 
                                           ;Nothing
                                           ;Nothing
                                           ;Nothing
                                           ;[]
                                           ;Nothing
                                           ;Nothing}
                                          ;Prototype {protoMnemonic = "REPE_CMPS", protoOperands = [OpM8_DS_SI_ESI_RSI,OpM8_ES_DI_EDI_RDI]}
                                          ;[(EncDS_SI_ESI_RSI
                                            ,OperandReadOnly)
                                           ,(EncES_DI_EDI_RDI
                                            ,OperandReadWrite)]
                                          ;64bit: True
                                          ;legacy: True
                                          ;Find nonmatching bytes in ES:[(E)DI] and DS:[(E)SI].} */
             
             ERASM_DECODER_DO_ACTION (1,
                                      Repe_cmps,
                                      Just<OpM8_DS_SI_ESI_RSI>,
                                      Just<EncDS_SI_ESI_RSI>,
                                      Just<OpM8_ES_DI_EDI_RDI>,
                                      Just<EncES_DI_EDI_RDI>,
                                      Nothing,
                                      Nothing);
         }
      else
         {
             /* EncodedInstructionDefinition {{[]
                                           ;A6 
                                           ;Nothing
                                           ;Nothing
                                           ;Nothing
                                           ;[]
                                           ;Nothing
                                           ;Nothing}
                                          ;Prototype {protoMnemonic = "CMPS", protoOperands = [OpM8_DS_SI_ESI_RSI,OpM8_ES_DI_EDI_RDI]}
                                          ;[(EncDS_SI_ESI_RSI
                                            ,OperandReadOnly)
                                           ,(EncES_DI_EDI_RDI
                                            ,OperandReadWrite)]
                                          ;64bit: True
                                          ;legacy: True
                                          ;For legacy mode, compare byte at address DS:(E)SI with byte at address ES:(E)DI; For 64-bit mode compare byte at address (R|E)SI to byte at address (R|E)DI. The status flags are set accordingly.} */
             
             ERASM_DECODER_DO_ACTION (1,
                                      Cmps,
                                      Just<OpM8_DS_SI_ESI_RSI>,
                                      Just<EncDS_SI_ESI_RSI>,
                                      Just<OpM8_ES_DI_EDI_RDI>,
                                      Just<EncES_DI_EDI_RDI>,
                                      Nothing,
                                      Nothing);
         }
   case (0xa7):
   if (prefix.repne)
      if (is_data16)
         {
             /* EncodedInstructionDefinition {{[REPNE]
                                           ;A7 
                                           ;Nothing
                                           ;Nothing
                                           ;Nothing
                                           ;[]
                                           ;Just Op16
                                           ;Nothing}
                                          ;Prototype {protoMnemonic = "REPNE_CMPS", protoOperands = [OpM16_DS_SI_ESI_RSI,OpM16_ES_DI_EDI_RDI]}
                                          ;[(EncDS_SI_ESI_RSI
                                            ,OperandReadOnly)
                                           ,(EncES_DI_EDI_RDI
                                            ,OperandReadWrite)]
                                          ;64bit: True
                                          ;legacy: True
                                          ;Find matching words in ES:[(E)DI] and DS:[(E)SI].} */
             
             ERASM_DECODER_DO_ACTION (1,
                                      Repne_cmps,
                                      Just<OpM16_DS_SI_ESI_RSI>,
                                      Just<EncDS_SI_ESI_RSI>,
                                      Just<OpM16_ES_DI_EDI_RDI>,
                                      Just<EncES_DI_EDI_RDI>,
                                      Nothing,
                                      Nothing);
         }
      else
         {
             /* EncodedInstructionDefinition {{[REPNE]
                                           ;A7 
                                           ;Nothing
                                           ;Nothing
                                           ;Nothing
                                           ;[]
                                           ;Just Op32
                                           ;Nothing}
                                          ;Prototype {protoMnemonic = "REPNE_CMPS", protoOperands = [OpM32_DS_SI_ESI_RSI,OpM32_ES_DI_EDI_RDI]}
                                          ;[(EncDS_SI_ESI_RSI
                                            ,OperandReadOnly)
                                           ,(EncES_DI_EDI_RDI
                                            ,OperandReadWrite)]
                                          ;64bit: True
                                          ;legacy: True
                                          ;Find matching doublewords in ES:[(E)DI] and DS:[(E)SI].} */
             
             ERASM_DECODER_DO_ACTION (1,
                                      Repne_cmps,
                                      Just<OpM32_DS_SI_ESI_RSI>,
                                      Just<EncDS_SI_ESI_RSI>,
                                      Just<OpM32_ES_DI_EDI_RDI>,
                                      Just<EncES_DI_EDI_RDI>,
                                      Nothing,
                                      Nothing);
         }
   else
      if (prefix.rep)
         if (is_data16)
            {
                /* EncodedInstructionDefinition {{[REP]
                                              ;A7 
                                              ;Nothing
                                              ;Nothing
                                              ;Nothing
                                              ;[]
                                              ;Just Op16
                                              ;Nothing}
                                             ;Prototype {protoMnemonic = "REPE_CMPS", protoOperands = [OpM16_DS_SI_ESI_RSI,OpM16_ES_DI_EDI_RDI]}
                                             ;[(EncDS_SI_ESI_RSI
                                               ,OperandReadOnly)
                                              ,(EncES_DI_EDI_RDI
                                               ,OperandReadWrite)]
                                             ;64bit: True
                                             ;legacy: True
                                             ;Find nonmatching words in ES:[(E)DI] and DS:[(E)SI].} */
                
                ERASM_DECODER_DO_ACTION (1,
                                         Repe_cmps,
                                         Just<OpM16_DS_SI_ESI_RSI>,
                                         Just<EncDS_SI_ESI_RSI>,
                                         Just<OpM16_ES_DI_EDI_RDI>,
                                         Just<EncES_DI_EDI_RDI>,
                                         Nothing,
                                         Nothing);
            }
         else
            {
                /* EncodedInstructionDefinition {{[REP]
                                              ;A7 
                                              ;Nothing
                                              ;Nothing
                                              ;Nothing
                                              ;[]
                                              ;Just Op32
                                              ;Nothing}
                                             ;Prototype {protoMnemonic = "REPE_CMPS", protoOperands = [OpM32_DS_SI_ESI_RSI,OpM32_ES_DI_EDI_RDI]}
                                             ;[(EncDS_SI_ESI_RSI
                                               ,OperandReadOnly)
                                              ,(EncES_DI_EDI_RDI
                                               ,OperandReadWrite)]
                                             ;64bit: True
                                             ;legacy: True
                                             ;Find nonmatching doublewords in ES:[(E)DI] and DS:[(E)SI].} */
                
                ERASM_DECODER_DO_ACTION (1,
                                         Repe_cmps,
                                         Just<OpM32_DS_SI_ESI_RSI>,
                                         Just<EncDS_SI_ESI_RSI>,
                                         Just<OpM32_ES_DI_EDI_RDI>,
                                         Just<EncES_DI_EDI_RDI>,
                                         Nothing,
                                         Nothing);
            }
      else
         if (is_data16)
            {
                /* EncodedInstructionDefinition {{[]
                                              ;A7 
                                              ;Nothing
                                              ;Nothing
                                              ;Nothing
                                              ;[]
                                              ;Just Op16
                                              ;Nothing}
                                             ;Prototype {protoMnemonic = "CMPS", protoOperands = [OpM16_DS_SI_ESI_RSI,OpM16_ES_DI_EDI_RDI]}
                                             ;[(EncDS_SI_ESI_RSI
                                               ,OperandReadOnly)
                                              ,(EncES_DI_EDI_RDI
                                               ,OperandReadWrite)]
                                             ;64bit: True
                                             ;legacy: True
                                             ;For legacy mode, compare word at address DS:(E)SI with word at address ES:(E)DI; For 64-bit mode compare word at address (R|E)SI with word at address (R|E)DI. The status flags are set accordingly.} */
                
                ERASM_DECODER_DO_ACTION (1,
                                         Cmps,
                                         Just<OpM16_DS_SI_ESI_RSI>,
                                         Just<EncDS_SI_ESI_RSI>,
                                         Just<OpM16_ES_DI_EDI_RDI>,
                                         Just<EncES_DI_EDI_RDI>,
                                         Nothing,
                                         Nothing);
            }
         else
            {
                /* EncodedInstructionDefinition {{[]
                                              ;A7 
                                              ;Nothing
                                              ;Nothing
                                              ;Nothing
                                              ;[]
                                              ;Just Op32
                                              ;Nothing}
                                             ;Prototype {protoMnemonic = "CMPS", protoOperands = [OpM32_DS_SI_ESI_RSI,OpM32_ES_DI_EDI_RDI]}
                                             ;[(EncDS_SI_ESI_RSI
                                               ,OperandReadOnly)
                                              ,(EncES_DI_EDI_RDI
                                               ,OperandReadWrite)]
                                             ;64bit: True
                                             ;legacy: True
                                             ;For legacy mode, compare dword at address DS:(E)SI at dword at address ES:(E)DI; For 64-bit mode compare dword at address (R|E)SI at dword at address (R|E)DI. The status flags are set accordingly.} */
                
                ERASM_DECODER_DO_ACTION (1,
                                         Cmps,
                                         Just<OpM32_DS_SI_ESI_RSI>,
                                         Just<EncDS_SI_ESI_RSI>,
                                         Just<OpM32_ES_DI_EDI_RDI>,
                                         Just<EncES_DI_EDI_RDI>,
                                         Nothing,
                                         Nothing);
            }
   case (0xa8):
   {
       /* EncodedInstructionDefinition {{[]
                                     ;A8 
                                     ;Nothing
                                     ;Nothing
                                     ;Nothing
                                     ;[IMM_IB]
                                     ;Nothing
                                     ;Nothing}
                                    ;Prototype {protoMnemonic = "TEST", protoOperands = [OpAL,OpIMM8]}
                                    ;[(EncImplicit,OperandReadWrite)
                                     ,(EncIMM,OperandReadWrite)]
                                    ;64bit: True
                                    ;legacy: True
                                    ;AND imm8 with AL; set SF, ZF, PF according to result.} */
       
       ERASM_DECODER_DO_ACTION (1,
                                Test,
                                Just<OpAL>,
                                Just<EncImplicit>,
                                Just<OpIMM8>,
                                Just<EncIMM>,
                                Nothing,
                                Nothing);
   }
   case (0xa9):
   if (is_data16)
      {
          /* EncodedInstructionDefinition {{[]
                                        ;A9 
                                        ;Nothing
                                        ;Nothing
                                        ;Nothing
                                        ;[IMM_IW]
                                        ;Just Op16
                                        ;Nothing}
                                       ;Prototype {protoMnemonic = "TEST", protoOperands = [OpAX,OpIMM16]}
                                       ;[(EncImplicit,OperandReadWrite)
                                        ,(EncIMM,OperandReadWrite)]
                                       ;64bit: True
                                       ;legacy: True
                                       ;AND imm16 with AX; set SF, ZF, PF according to result.} */
          
          ERASM_DECODER_DO_ACTION (1,
                                   Test,
                                   Just<OpAX>,
                                   Just<EncImplicit>,
                                   Just<OpIMM16>,
                                   Just<EncIMM>,
                                   Nothing,
                                   Nothing);
      }
   else
      {
          /* EncodedInstructionDefinition {{[]
                                        ;A9 
                                        ;Nothing
                                        ;Nothing
                                        ;Nothing
                                        ;[IMM_ID]
                                        ;Just Op32
                                        ;Nothing}
                                       ;Prototype {protoMnemonic = "TEST", protoOperands = [OpEAX,OpIMM32]}
                                       ;[(EncImplicit,OperandReadWrite)
                                        ,(EncIMM,OperandReadWrite)]
                                       ;64bit: True
                                       ;legacy: True
                                       ;AND imm32 with EAX; set SF, ZF, PF according to result.} */
          
          ERASM_DECODER_DO_ACTION (1,
                                   Test,
                                   Just<OpEAX>,
                                   Just<EncImplicit>,
                                   Just<OpIMM32>,
                                   Just<EncIMM>,
                                   Nothing,
                                   Nothing);
      }
   case (0xaa):
   if (prefix.rep)
      {
          /* EncodedInstructionDefinition {{[REP]
                                        ;AA 
                                        ;Nothing
                                        ;Nothing
                                        ;Nothing
                                        ;[]
                                        ;Nothing
                                        ;Nothing}
                                       ;Prototype {protoMnemonic = "REP_STOS", protoOperands = [OpM8_ES_DI_EDI_RDI,OpAL]}
                                       ;[(EncES_DI_EDI_RDI
                                         ,OperandReadWrite)
                                        ,(EncImplicit,OperandReadWrite)]
                                       ;64bit: True
                                       ;legacy: True
                                       ;Fill (E)CX bytes at ES:[(E)DI] with AL.} */
          
          ERASM_DECODER_DO_ACTION (1,
                                   Rep_stos,
                                   Just<OpM8_ES_DI_EDI_RDI>,
                                   Just<EncES_DI_EDI_RDI>,
                                   Just<OpAL>,
                                   Just<EncImplicit>,
                                   Nothing,
                                   Nothing);
      }
   else
      {
          /* EncodedInstructionDefinition {{[]
                                        ;AA 
                                        ;Nothing
                                        ;Nothing
                                        ;Nothing
                                        ;[]
                                        ;Nothing
                                        ;Nothing}
                                       ;Prototype {protoMnemonic = "STOS", protoOperands = [OpM8_ES_DI_EDI_RDI,OpAL]}
                                       ;[(EncES_DI_EDI_RDI
                                         ,OperandReadWrite)
                                        ,(EncImplicit,OperandReadWrite)]
                                       ;64bit: True
                                       ;legacy: True
                                       ;For legacy mode, store AL at address ES:(E)DI; For 64-bit mode store AL at address RDI or EDI.} */
          
          ERASM_DECODER_DO_ACTION (1,
                                   Stos,
                                   Just<OpM8_ES_DI_EDI_RDI>,
                                   Just<EncES_DI_EDI_RDI>,
                                   Just<OpAL>,
                                   Just<EncImplicit>,
                                   Nothing,
                                   Nothing);
      }
   case (0xab):
   if (prefix.rep)
      if (is_data16)
         {
             /* EncodedInstructionDefinition {{[REP]
                                           ;AB 
                                           ;Nothing
                                           ;Nothing
                                           ;Nothing
                                           ;[]
                                           ;Just Op16
                                           ;Nothing}
                                          ;Prototype {protoMnemonic = "REP_STOS", protoOperands = [OpM16_ES_DI_EDI_RDI,OpAX]}
                                          ;[(EncES_DI_EDI_RDI
                                            ,OperandReadWrite)
                                           ,(EncImplicit,OperandReadWrite)]
                                          ;64bit: True
                                          ;legacy: True
                                          ;Fill (E)CX words at ES:[(E)DI] with AX.} */
             
             ERASM_DECODER_DO_ACTION (1,
                                      Rep_stos,
                                      Just<OpM16_ES_DI_EDI_RDI>,
                                      Just<EncES_DI_EDI_RDI>,
                                      Just<OpAX>,
                                      Just<EncImplicit>,
                                      Nothing,
                                      Nothing);
         }
      else
         {
             /* EncodedInstructionDefinition {{[REP]
                                           ;AB 
                                           ;Nothing
                                           ;Nothing
                                           ;Nothing
                                           ;[]
                                           ;Just Op32
                                           ;Nothing}
                                          ;Prototype {protoMnemonic = "REP_STOS", protoOperands = [OpM32_ES_DI_EDI_RDI,OpEAX]}
                                          ;[(EncES_DI_EDI_RDI
                                            ,OperandReadWrite)
                                           ,(EncImplicit,OperandReadWrite)]
                                          ;64bit: True
                                          ;legacy: True
                                          ;Fill (E)CX doublewords at ES:[(E)DI] with EAX.} */
             
             ERASM_DECODER_DO_ACTION (1,
                                      Rep_stos,
                                      Just<OpM32_ES_DI_EDI_RDI>,
                                      Just<EncES_DI_EDI_RDI>,
                                      Just<OpEAX>,
                                      Just<EncImplicit>,
                                      Nothing,
                                      Nothing);
         }
   else
      if (is_data16)
         {
             /* EncodedInstructionDefinition {{[]
                                           ;AB 
                                           ;Nothing
                                           ;Nothing
                                           ;Nothing
                                           ;[]
                                           ;Just Op16
                                           ;Nothing}
                                          ;Prototype {protoMnemonic = "STOS", protoOperands = [OpM16_ES_DI_EDI_RDI,OpAX]}
                                          ;[(EncES_DI_EDI_RDI
                                            ,OperandReadWrite)
                                           ,(EncImplicit,OperandReadWrite)]
                                          ;64bit: True
                                          ;legacy: True
                                          ;For legacy mode, store AX at address ES:(E)DI; For 64- bit mode store AX at address RDI or EDI.} */
             
             ERASM_DECODER_DO_ACTION (1,
                                      Stos,
                                      Just<OpM16_ES_DI_EDI_RDI>,
                                      Just<EncES_DI_EDI_RDI>,
                                      Just<OpAX>,
                                      Just<EncImplicit>,
                                      Nothing,
                                      Nothing);
         }
      else
         {
             /* EncodedInstructionDefinition {{[]
                                           ;AB 
                                           ;Nothing
                                           ;Nothing
                                           ;Nothing
                                           ;[]
                                           ;Just Op32
                                           ;Nothing}
                                          ;Prototype {protoMnemonic = "STOS", protoOperands = [OpM32_ES_DI_EDI_RDI,OpEAX]}
                                          ;[(EncES_DI_EDI_RDI
                                            ,OperandReadWrite)
                                           ,(EncImplicit,OperandReadWrite)]
                                          ;64bit: True
                                          ;legacy: True
                                          ;For legacy mode, store EAX at address ES:(E)DI; For 64- bit mode store EAX at address RDI or EDI.} */
             
             ERASM_DECODER_DO_ACTION (1,
                                      Stos,
                                      Just<OpM32_ES_DI_EDI_RDI>,
                                      Just<EncES_DI_EDI_RDI>,
                                      Just<OpEAX>,
                                      Just<EncImplicit>,
                                      Nothing,
                                      Nothing);
         }
   case (0xac):
   if (prefix.rep)
      {
          /* EncodedInstructionDefinition {{[REP]
                                        ;AC 
                                        ;Nothing
                                        ;Nothing
                                        ;Nothing
                                        ;[]
                                        ;Nothing
                                        ;Nothing}
                                       ;Prototype {protoMnemonic = "REP_LODS", protoOperands = [OpAL,OpM8_DS_SI_ESI_RSI]}
                                       ;[(EncImplicit,OperandReadWrite)
                                        ,(EncDS_SI_ESI_RSI
                                         ,OperandReadOnly)]
                                       ;64bit: True
                                       ;legacy: True
                                       ;Load (E)CX bytes from DS:[(E)SI] to AL.} */
          
          ERASM_DECODER_DO_ACTION (1,
                                   Rep_lods,
                                   Just<OpAL>,
                                   Just<EncImplicit>,
                                   Just<OpM8_DS_SI_ESI_RSI>,
                                   Just<EncDS_SI_ESI_RSI>,
                                   Nothing,
                                   Nothing);
      }
   else
      {
          /* EncodedInstructionDefinition {{[]
                                        ;AC 
                                        ;Nothing
                                        ;Nothing
                                        ;Nothing
                                        ;[]
                                        ;Nothing
                                        ;Nothing}
                                       ;Prototype {protoMnemonic = "LODS", protoOperands = [OpAL,OpM8_DS_SI_ESI_RSI]}
                                       ;[(EncImplicit,OperandReadWrite)
                                        ,(EncDS_SI_ESI_RSI
                                         ,OperandReadOnly)]
                                       ;64bit: True
                                       ;legacy: True
                                       ;For legacy mode, Load byte at address DS:(E)SI into AL. For 64-bit mode load byte at address (R)SI into AL.} */
          
          ERASM_DECODER_DO_ACTION (1,
                                   Lods,
                                   Just<OpAL>,
                                   Just<EncImplicit>,
                                   Just<OpM8_DS_SI_ESI_RSI>,
                                   Just<EncDS_SI_ESI_RSI>,
                                   Nothing,
                                   Nothing);
      }
   case (0xad):
   if (prefix.rep)
      if (is_data16)
         {
             /* EncodedInstructionDefinition {{[REP]
                                           ;AD 
                                           ;Nothing
                                           ;Nothing
                                           ;Nothing
                                           ;[]
                                           ;Just Op16
                                           ;Nothing}
                                          ;Prototype {protoMnemonic = "REP_LODS", protoOperands = [OpAX,OpM16_DS_SI_ESI_RSI]}
                                          ;[(EncImplicit,OperandReadWrite)
                                           ,(EncDS_SI_ESI_RSI
                                            ,OperandReadOnly)]
                                          ;64bit: True
                                          ;legacy: True
                                          ;Load (E)CX words from DS:[(E)SI] to AX.} */
             
             ERASM_DECODER_DO_ACTION (1,
                                      Rep_lods,
                                      Just<OpAX>,
                                      Just<EncImplicit>,
                                      Just<OpM16_DS_SI_ESI_RSI>,
                                      Just<EncDS_SI_ESI_RSI>,
                                      Nothing,
                                      Nothing);
         }
      else
         {
             /* EncodedInstructionDefinition {{[REP]
                                           ;AD 
                                           ;Nothing
                                           ;Nothing
                                           ;Nothing
                                           ;[]
                                           ;Just Op32
                                           ;Nothing}
                                          ;Prototype {protoMnemonic = "REP_LODS", protoOperands = [OpEAX,OpM32_DS_SI_ESI_RSI]}
                                          ;[(EncImplicit,OperandReadWrite)
                                           ,(EncDS_SI_ESI_RSI
                                            ,OperandReadOnly)]
                                          ;64bit: True
                                          ;legacy: True
                                          ;Load (E)CX doublewords from DS:[(E)SI] to EAX.} */
             
             ERASM_DECODER_DO_ACTION (1,
                                      Rep_lods,
                                      Just<OpEAX>,
                                      Just<EncImplicit>,
                                      Just<OpM32_DS_SI_ESI_RSI>,
                                      Just<EncDS_SI_ESI_RSI>,
                                      Nothing,
                                      Nothing);
         }
   else
      if (is_data16)
         {
             /* EncodedInstructionDefinition {{[]
                                           ;AD 
                                           ;Nothing
                                           ;Nothing
                                           ;Nothing
                                           ;[]
                                           ;Just Op16
                                           ;Nothing}
                                          ;Prototype {protoMnemonic = "LODS", protoOperands = [OpAX,OpM16_DS_SI_ESI_RSI]}
                                          ;[(EncImplicit,OperandReadWrite)
                                           ,(EncDS_SI_ESI_RSI
                                            ,OperandReadOnly)]
                                          ;64bit: True
                                          ;legacy: True
                                          ;For legacy mode, Load word at address DS:(E)SI into AX. For 64-bit mode load word at address (R)SI into AX.} */
             
             ERASM_DECODER_DO_ACTION (1,
                                      Lods,
                                      Just<OpAX>,
                                      Just<EncImplicit>,
                                      Just<OpM16_DS_SI_ESI_RSI>,
                                      Just<EncDS_SI_ESI_RSI>,
                                      Nothing,
                                      Nothing);
         }
      else
         {
             /* EncodedInstructionDefinition {{[]
                                           ;AD 
                                           ;Nothing
                                           ;Nothing
                                           ;Nothing
                                           ;[]
                                           ;Just Op32
                                           ;Nothing}
                                          ;Prototype {protoMnemonic = "LODS", protoOperands = [OpEAX,OpM32_DS_SI_ESI_RSI]}
                                          ;[(EncImplicit,OperandReadWrite)
                                           ,(EncDS_SI_ESI_RSI
                                            ,OperandReadOnly)]
                                          ;64bit: True
                                          ;legacy: True
                                          ;For legacy mode, Load dword at address DS:(E)SI into EAX. For 64-bit mode load dword at address (R)SI into EAX.} */
             
             ERASM_DECODER_DO_ACTION (1,
                                      Lods,
                                      Just<OpEAX>,
                                      Just<EncImplicit>,
                                      Just<OpM32_DS_SI_ESI_RSI>,
                                      Just<EncDS_SI_ESI_RSI>,
                                      Nothing,
                                      Nothing);
         }
   case (0xae):
   if (prefix.repne)
      {
          /* EncodedInstructionDefinition {{[REPNE]
                                        ;AE 
                                        ;Nothing
                                        ;Nothing
                                        ;Nothing
                                        ;[]
                                        ;Nothing
                                        ;Nothing}
                                       ;Prototype {protoMnemonic = "REPNE_SCAS", protoOperands = [OpAL,OpM8_ES_DI_EDI_RDI]}
                                       ;[(EncImplicit,OperandReadWrite)
                                        ,(EncES_DI_EDI_RDI
                                         ,OperandReadWrite)]
                                       ;64bit: True
                                       ;legacy: True
                                       ;Find AL, starting at ES:[(E)DI].} */
          
          ERASM_DECODER_DO_ACTION (1,
                                   Repne_scas,
                                   Just<OpAL>,
                                   Just<EncImplicit>,
                                   Just<OpM8_ES_DI_EDI_RDI>,
                                   Just<EncES_DI_EDI_RDI>,
                                   Nothing,
                                   Nothing);
      }
   else
      if (prefix.rep)
         {
             /* EncodedInstructionDefinition {{[REP]
                                           ;AE 
                                           ;Nothing
                                           ;Nothing
                                           ;Nothing
                                           ;[]
                                           ;Nothing
                                           ;Nothing}
                                          ;Prototype {protoMnemonic = "REPE_SCAS", protoOperands = [OpAL,OpM8_ES_DI_EDI_RDI]}
                                          ;[(EncImplicit,OperandReadWrite)
                                           ,(EncES_DI_EDI_RDI
                                            ,OperandReadWrite)]
                                          ;64bit: True
                                          ;legacy: True
                                          ;Find non-AL byte starting at ES:[(E)DI].} */
             
             ERASM_DECODER_DO_ACTION (1,
                                      Repe_scas,
                                      Just<OpAL>,
                                      Just<EncImplicit>,
                                      Just<OpM8_ES_DI_EDI_RDI>,
                                      Just<EncES_DI_EDI_RDI>,
                                      Nothing,
                                      Nothing);
         }
      else
         {
             /* EncodedInstructionDefinition {{[]
                                           ;AE 
                                           ;Nothing
                                           ;Nothing
                                           ;Nothing
                                           ;[]
                                           ;Nothing
                                           ;Nothing}
                                          ;Prototype {protoMnemonic = "SCAS", protoOperands = [OpAL,OpM8_ES_DI_EDI_RDI]}
                                          ;[(EncImplicit,OperandReadWrite)
                                           ,(EncES_DI_EDI_RDI
                                            ,OperandReadWrite)]
                                          ;64bit: True
                                          ;legacy: True
                                          ;Compare AL with byte at ES:(E)DI or RDI, then set status flags.*} */
             
             ERASM_DECODER_DO_ACTION (1,
                                      Scas,
                                      Just<OpAL>,
                                      Just<EncImplicit>,
                                      Just<OpM8_ES_DI_EDI_RDI>,
                                      Just<EncES_DI_EDI_RDI>,
                                      Nothing,
                                      Nothing);
         }
   case (0xaf):
   if (prefix.repne)
      if (is_data16)
         {
             /* EncodedInstructionDefinition {{[REPNE]
                                           ;AF 
                                           ;Nothing
                                           ;Nothing
                                           ;Nothing
                                           ;[]
                                           ;Just Op16
                                           ;Nothing}
                                          ;Prototype {protoMnemonic = "REPNE_SCAS", protoOperands = [OpAX,OpM16_ES_DI_EDI_RDI]}
                                          ;[(EncImplicit,OperandReadWrite)
                                           ,(EncES_DI_EDI_RDI
                                            ,OperandReadWrite)]
                                          ;64bit: True
                                          ;legacy: True
                                          ;Find AX, starting at ES:[(E)DI].} */
             
             ERASM_DECODER_DO_ACTION (1,
                                      Repne_scas,
                                      Just<OpAX>,
                                      Just<EncImplicit>,
                                      Just<OpM16_ES_DI_EDI_RDI>,
                                      Just<EncES_DI_EDI_RDI>,
                                      Nothing,
                                      Nothing);
         }
      else
         {
             /* EncodedInstructionDefinition {{[REPNE]
                                           ;AF 
                                           ;Nothing
                                           ;Nothing
                                           ;Nothing
                                           ;[]
                                           ;Just Op32
                                           ;Nothing}
                                          ;Prototype {protoMnemonic = "REPNE_SCAS", protoOperands = [OpEAX,OpM32_ES_DI_EDI_RDI]}
                                          ;[(EncImplicit,OperandReadWrite)
                                           ,(EncES_DI_EDI_RDI
                                            ,OperandReadWrite)]
                                          ;64bit: True
                                          ;legacy: True
                                          ;Find EAX, starting at ES:[(E)DI].} */
             
             ERASM_DECODER_DO_ACTION (1,
                                      Repne_scas,
                                      Just<OpEAX>,
                                      Just<EncImplicit>,
                                      Just<OpM32_ES_DI_EDI_RDI>,
                                      Just<EncES_DI_EDI_RDI>,
                                      Nothing,
                                      Nothing);
         }
   else
      if (prefix.rep)
         if (is_data16)
            {
                /* EncodedInstructionDefinition {{[REP]
                                              ;AF 
                                              ;Nothing
                                              ;Nothing
                                              ;Nothing
                                              ;[]
                                              ;Just Op16
                                              ;Nothing}
                                             ;Prototype {protoMnemonic = "REPE_SCAS", protoOperands = [OpAX,OpM16_ES_DI_EDI_RDI]}
                                             ;[(EncImplicit,OperandReadWrite)
                                              ,(EncES_DI_EDI_RDI
                                               ,OperandReadWrite)]
                                             ;64bit: True
                                             ;legacy: True
                                             ;Find non-AX word starting at ES:[(E)DI].} */
                
                ERASM_DECODER_DO_ACTION (1,
                                         Repe_scas,
                                         Just<OpAX>,
                                         Just<EncImplicit>,
                                         Just<OpM16_ES_DI_EDI_RDI>,
                                         Just<EncES_DI_EDI_RDI>,
                                         Nothing,
                                         Nothing);
            }
         else
            {
                /* EncodedInstructionDefinition {{[REP]
                                              ;AF 
                                              ;Nothing
                                              ;Nothing
                                              ;Nothing
                                              ;[]
                                              ;Just Op32
                                              ;Nothing}
                                             ;Prototype {protoMnemonic = "REPE_SCAS", protoOperands = [OpEAX,OpM32_ES_DI_EDI_RDI]}
                                             ;[(EncImplicit,OperandReadWrite)
                                              ,(EncES_DI_EDI_RDI
                                               ,OperandReadWrite)]
                                             ;64bit: True
                                             ;legacy: True
                                             ;Find non-EAX doubleword starting at ES:[(E)DI].} */
                
                ERASM_DECODER_DO_ACTION (1,
                                         Repe_scas,
                                         Just<OpEAX>,
                                         Just<EncImplicit>,
                                         Just<OpM32_ES_DI_EDI_RDI>,
                                         Just<EncES_DI_EDI_RDI>,
                                         Nothing,
                                         Nothing);
            }
      else
         if (is_data16)
            {
                /* EncodedInstructionDefinition {{[]
                                              ;AF 
                                              ;Nothing
                                              ;Nothing
                                              ;Nothing
                                              ;[]
                                              ;Just Op16
                                              ;Nothing}
                                             ;Prototype {protoMnemonic = "SCAS", protoOperands = [OpAX,OpM16_ES_DI_EDI_RDI]}
                                             ;[(EncImplicit,OperandReadWrite)
                                              ,(EncES_DI_EDI_RDI
                                               ,OperandReadWrite)]
                                             ;64bit: True
                                             ;legacy: True
                                             ;Compare AX with word at ES:(E)DI or RDI, then set status flags.*} */
                
                ERASM_DECODER_DO_ACTION (1,
                                         Scas,
                                         Just<OpAX>,
                                         Just<EncImplicit>,
                                         Just<OpM16_ES_DI_EDI_RDI>,
                                         Just<EncES_DI_EDI_RDI>,
                                         Nothing,
                                         Nothing);
            }
         else
            {
                /* EncodedInstructionDefinition {{[]
                                              ;AF 
                                              ;Nothing
                                              ;Nothing
                                              ;Nothing
                                              ;[]
                                              ;Just Op32
                                              ;Nothing}
                                             ;Prototype {protoMnemonic = "SCAS", protoOperands = [OpEAX,OpM32_ES_DI_EDI_RDI]}
                                             ;[(EncImplicit,OperandReadWrite)
                                              ,(EncES_DI_EDI_RDI
                                               ,OperandReadWrite)]
                                             ;64bit: True
                                             ;legacy: True
                                             ;Compare EAX with doubleword at ES(E)DI or RDI then set status flags.*} */
                
                ERASM_DECODER_DO_ACTION (1,
                                         Scas,
                                         Just<OpEAX>,
                                         Just<EncImplicit>,
                                         Just<OpM32_ES_DI_EDI_RDI>,
                                         Just<EncES_DI_EDI_RDI>,
                                         Nothing,
                                         Nothing);
            }
   case (0xc0):
   switch (modrm_reg_op (p)) {
      case (0):
      {
          /* EncodedInstructionDefinition {{[]
                                        ;C0 
                                        ;Just (ModrmDigit 0)
                                        ;Just RMBoth
                                        ;Nothing
                                        ;[IMM_IB]
                                        ;Nothing
                                        ;Nothing}
                                       ;Prototype {protoMnemonic = "ROL", protoOperands = [OpRM8,OpIMM8]}
                                       ;[(EncModrm_rm,OperandReadWrite)
                                        ,(EncIMM,OperandReadWrite)]
                                       ;64bit: True
                                       ;legacy: True
                                       ;Rotate 8 bits r/m8 left imm8 times.} */
          
          ERASM_DECODER_DO_ACTION (1,
                                   Rol,
                                   Just<OpRM8>,
                                   Just<EncModrm_rm>,
                                   Just<OpIMM8>,
                                   Just<EncIMM>,
                                   Nothing,
                                   Nothing);
      }
      case (1):
      {
          /* EncodedInstructionDefinition {{[]
                                        ;C0 
                                        ;Just (ModrmDigit 1)
                                        ;Just RMBoth
                                        ;Nothing
                                        ;[IMM_IB]
                                        ;Nothing
                                        ;Nothing}
                                       ;Prototype {protoMnemonic = "ROR", protoOperands = [OpRM8,OpIMM8]}
                                       ;[(EncModrm_rm,OperandReadWrite)
                                        ,(EncIMM,OperandReadWrite)]
                                       ;64bit: True
                                       ;legacy: True
                                       ;Rotate 8 bits r/m16 right imm8 times.} */
          
          ERASM_DECODER_DO_ACTION (1,
                                   Ror,
                                   Just<OpRM8>,
                                   Just<EncModrm_rm>,
                                   Just<OpIMM8>,
                                   Just<EncIMM>,
                                   Nothing,
                                   Nothing);
      }
      case (2):
      {
          /* EncodedInstructionDefinition {{[]
                                        ;C0 
                                        ;Just (ModrmDigit 2)
                                        ;Just RMBoth
                                        ;Nothing
                                        ;[IMM_IB]
                                        ;Nothing
                                        ;Nothing}
                                       ;Prototype {protoMnemonic = "RCL", protoOperands = [OpRM8,OpIMM8]}
                                       ;[(EncModrm_rm,OperandReadWrite)
                                        ,(EncIMM,OperandReadWrite)]
                                       ;64bit: True
                                       ;legacy: True
                                       ;Rotate 9 bits (CF, r/m8) left imm8 times.} */
          
          ERASM_DECODER_DO_ACTION (1,
                                   Rcl,
                                   Just<OpRM8>,
                                   Just<EncModrm_rm>,
                                   Just<OpIMM8>,
                                   Just<EncIMM>,
                                   Nothing,
                                   Nothing);
      }
      case (3):
      {
          /* EncodedInstructionDefinition {{[]
                                        ;C0 
                                        ;Just (ModrmDigit 3)
                                        ;Just RMBoth
                                        ;Nothing
                                        ;[IMM_IB]
                                        ;Nothing
                                        ;Nothing}
                                       ;Prototype {protoMnemonic = "RCR", protoOperands = [OpRM8,OpIMM8]}
                                       ;[(EncModrm_rm,OperandReadWrite)
                                        ,(EncIMM,OperandReadWrite)]
                                       ;64bit: True
                                       ;legacy: True
                                       ;Rotate 9 bits (CF, r/m8) right imm8 times.} */
          
          ERASM_DECODER_DO_ACTION (1,
                                   Rcr,
                                   Just<OpRM8>,
                                   Just<EncModrm_rm>,
                                   Just<OpIMM8>,
                                   Just<EncIMM>,
                                   Nothing,
                                   Nothing);
      }
      case (4):
      {
          /* EncodedInstructionDefinition {{[]
                                        ;C0 
                                        ;Just (ModrmDigit 4)
                                        ;Just RMBoth
                                        ;Nothing
                                        ;[IMM_IB]
                                        ;Nothing
                                        ;Nothing}
                                       ;Prototype {protoMnemonic = "SAL", protoOperands = [OpRM8,OpIMM8]}
                                       ;[(EncModrm_rm,OperandReadWrite)
                                        ,(EncIMM,OperandReadWrite)]
                                       ;64bit: True
                                       ;legacy: True
                                       ;Multiply r/m8 by 2, imm8 times.} */
          
          ERASM_DECODER_DO_ACTION (1,
                                   Sal,
                                   Just<OpRM8>,
                                   Just<EncModrm_rm>,
                                   Just<OpIMM8>,
                                   Just<EncIMM>,
                                   Nothing,
                                   Nothing);
      }
      case (5):
      {
          /* EncodedInstructionDefinition {{[]
                                        ;C0 
                                        ;Just (ModrmDigit 5)
                                        ;Just RMBoth
                                        ;Nothing
                                        ;[IMM_IB]
                                        ;Nothing
                                        ;Nothing}
                                       ;Prototype {protoMnemonic = "SHR", protoOperands = [OpRM8,OpIMM8]}
                                       ;[(EncModrm_rm,OperandReadWrite)
                                        ,(EncIMM,OperandReadWrite)]
                                       ;64bit: True
                                       ;legacy: True
                                       ;Unsigned divide r/m8 by 2, imm8 times.} */
          
          ERASM_DECODER_DO_ACTION (1,
                                   Shr,
                                   Just<OpRM8>,
                                   Just<EncModrm_rm>,
                                   Just<OpIMM8>,
                                   Just<EncIMM>,
                                   Nothing,
                                   Nothing);
      }
      case (7):
      {
          /* EncodedInstructionDefinition {{[]
                                        ;C0 
                                        ;Just (ModrmDigit 7)
                                        ;Just RMBoth
                                        ;Nothing
                                        ;[IMM_IB]
                                        ;Nothing
                                        ;Nothing}
                                       ;Prototype {protoMnemonic = "SAR", protoOperands = [OpRM8,OpIMM8]}
                                       ;[(EncModrm_rm,OperandReadWrite)
                                        ,(EncIMM,OperandReadWrite)]
                                       ;64bit: True
                                       ;legacy: True
                                       ;Signed divide* r/m8 by 2, imm8 time.} */
          
          ERASM_DECODER_DO_ACTION (1,
                                   Sar,
                                   Just<OpRM8>,
                                   Just<EncModrm_rm>,
                                   Just<OpIMM8>,
                                   Just<EncIMM>,
                                   Nothing,
                                   Nothing);
      }
      
   }
   case (0xc1):
   switch (modrm_reg_op (p)) {
      case (0):
      if (is_data16)
         {
             /* EncodedInstructionDefinition {{[]
                                           ;C1 
                                           ;Just (ModrmDigit 0)
                                           ;Just RMBoth
                                           ;Nothing
                                           ;[IMM_IB]
                                           ;Just Op16
                                           ;Nothing}
                                          ;Prototype {protoMnemonic = "ROL", protoOperands = [OpRM16,OpIMM8]}
                                          ;[(EncModrm_rm,OperandReadWrite)
                                           ,(EncIMM,OperandReadWrite)]
                                          ;64bit: True
                                          ;legacy: True
                                          ;Rotate 16 bits r/m16 left imm8 times.} */
             
             ERASM_DECODER_DO_ACTION (1,
                                      Rol,
                                      Just<OpRM16>,
                                      Just<EncModrm_rm>,
                                      Just<OpIMM8>,
                                      Just<EncIMM>,
                                      Nothing,
                                      Nothing);
         }
      else
         {
             /* EncodedInstructionDefinition {{[]
                                           ;C1 
                                           ;Just (ModrmDigit 0)
                                           ;Just RMBoth
                                           ;Nothing
                                           ;[IMM_IB]
                                           ;Just Op32
                                           ;Nothing}
                                          ;Prototype {protoMnemonic = "ROL", protoOperands = [OpRM32,OpIMM8]}
                                          ;[(EncModrm_rm,OperandReadWrite)
                                           ,(EncIMM,OperandReadWrite)]
                                          ;64bit: True
                                          ;legacy: True
                                          ;Rotate 32 bits r/m32 left imm8 times.} */
             
             ERASM_DECODER_DO_ACTION (1,
                                      Rol,
                                      Just<OpRM32>,
                                      Just<EncModrm_rm>,
                                      Just<OpIMM8>,
                                      Just<EncIMM>,
                                      Nothing,
                                      Nothing);
         }
      case (1):
      if (is_data16)
         {
             /* EncodedInstructionDefinition {{[]
                                           ;C1 
                                           ;Just (ModrmDigit 1)
                                           ;Just RMBoth
                                           ;Nothing
                                           ;[IMM_IB]
                                           ;Just Op16
                                           ;Nothing}
                                          ;Prototype {protoMnemonic = "ROR", protoOperands = [OpRM16,OpIMM8]}
                                          ;[(EncModrm_rm,OperandReadWrite)
                                           ,(EncIMM,OperandReadWrite)]
                                          ;64bit: True
                                          ;legacy: True
                                          ;Rotate 16 bits r/m16 right imm8 times.} */
             
             ERASM_DECODER_DO_ACTION (1,
                                      Ror,
                                      Just<OpRM16>,
                                      Just<EncModrm_rm>,
                                      Just<OpIMM8>,
                                      Just<EncIMM>,
                                      Nothing,
                                      Nothing);
         }
      else
         {
             /* EncodedInstructionDefinition {{[]
                                           ;C1 
                                           ;Just (ModrmDigit 1)
                                           ;Just RMBoth
                                           ;Nothing
                                           ;[IMM_IB]
                                           ;Just Op32
                                           ;Nothing}
                                          ;Prototype {protoMnemonic = "ROR", protoOperands = [OpRM32,OpIMM8]}
                                          ;[(EncModrm_rm,OperandReadWrite)
                                           ,(EncIMM,OperandReadWrite)]
                                          ;64bit: True
                                          ;legacy: True
                                          ;Rotate 32 bits r/m32 right imm8 times.} */
             
             ERASM_DECODER_DO_ACTION (1,
                                      Ror,
                                      Just<OpRM32>,
                                      Just<EncModrm_rm>,
                                      Just<OpIMM8>,
                                      Just<EncIMM>,
                                      Nothing,
                                      Nothing);
         }
      case (2):
      if (is_data16)
         {
             /* EncodedInstructionDefinition {{[]
                                           ;C1 
                                           ;Just (ModrmDigit 2)
                                           ;Just RMBoth
                                           ;Nothing
                                           ;[IMM_IB]
                                           ;Just Op16
                                           ;Nothing}
                                          ;Prototype {protoMnemonic = "RCL", protoOperands = [OpRM16,OpIMM8]}
                                          ;[(EncModrm_rm,OperandReadWrite)
                                           ,(EncIMM,OperandReadWrite)]
                                          ;64bit: True
                                          ;legacy: True
                                          ;Rotate 17 bits (CF, r/m16) left imm8 times.} */
             
             ERASM_DECODER_DO_ACTION (1,
                                      Rcl,
                                      Just<OpRM16>,
                                      Just<EncModrm_rm>,
                                      Just<OpIMM8>,
                                      Just<EncIMM>,
                                      Nothing,
                                      Nothing);
         }
      else
         {
             /* EncodedInstructionDefinition {{[]
                                           ;C1 
                                           ;Just (ModrmDigit 2)
                                           ;Just RMBoth
                                           ;Nothing
                                           ;[IMM_IB]
                                           ;Just Op32
                                           ;Nothing}
                                          ;Prototype {protoMnemonic = "RCL", protoOperands = [OpRM32,OpIMM8]}
                                          ;[(EncModrm_rm,OperandReadWrite)
                                           ,(EncIMM,OperandReadWrite)]
                                          ;64bit: True
                                          ;legacy: True
                                          ;Rotate 33 bits (CF, r/m32) left imm8 times.} */
             
             ERASM_DECODER_DO_ACTION (1,
                                      Rcl,
                                      Just<OpRM32>,
                                      Just<EncModrm_rm>,
                                      Just<OpIMM8>,
                                      Just<EncIMM>,
                                      Nothing,
                                      Nothing);
         }
      case (3):
      if (is_data16)
         {
             /* EncodedInstructionDefinition {{[]
                                           ;C1 
                                           ;Just (ModrmDigit 3)
                                           ;Just RMBoth
                                           ;Nothing
                                           ;[IMM_IB]
                                           ;Just Op16
                                           ;Nothing}
                                          ;Prototype {protoMnemonic = "RCR", protoOperands = [OpRM16,OpIMM8]}
                                          ;[(EncModrm_rm,OperandReadWrite)
                                           ,(EncIMM,OperandReadWrite)]
                                          ;64bit: True
                                          ;legacy: True
                                          ;Rotate 17 bits (CF, r/m16) right imm8 times.} */
             
             ERASM_DECODER_DO_ACTION (1,
                                      Rcr,
                                      Just<OpRM16>,
                                      Just<EncModrm_rm>,
                                      Just<OpIMM8>,
                                      Just<EncIMM>,
                                      Nothing,
                                      Nothing);
         }
      else
         {
             /* EncodedInstructionDefinition {{[]
                                           ;C1 
                                           ;Just (ModrmDigit 3)
                                           ;Just RMBoth
                                           ;Nothing
                                           ;[IMM_IB]
                                           ;Just Op32
                                           ;Nothing}
                                          ;Prototype {protoMnemonic = "RCR", protoOperands = [OpRM32,OpIMM8]}
                                          ;[(EncModrm_rm,OperandReadWrite)
                                           ,(EncIMM,OperandReadWrite)]
                                          ;64bit: True
                                          ;legacy: True
                                          ;Rotate 33 bits (CF, r/m32) right imm8 times.} */
             
             ERASM_DECODER_DO_ACTION (1,
                                      Rcr,
                                      Just<OpRM32>,
                                      Just<EncModrm_rm>,
                                      Just<OpIMM8>,
                                      Just<EncIMM>,
                                      Nothing,
                                      Nothing);
         }
      case (4):
      if (is_data16)
         {
             /* EncodedInstructionDefinition {{[]
                                           ;C1 
                                           ;Just (ModrmDigit 4)
                                           ;Just RMBoth
                                           ;Nothing
                                           ;[IMM_IB]
                                           ;Just Op16
                                           ;Nothing}
                                          ;Prototype {protoMnemonic = "SAL", protoOperands = [OpRM16,OpIMM8]}
                                          ;[(EncModrm_rm,OperandReadWrite)
                                           ,(EncIMM,OperandReadWrite)]
                                          ;64bit: True
                                          ;legacy: True
                                          ;Multiply r/m16 by 2, imm8 times.} */
             
             ERASM_DECODER_DO_ACTION (1,
                                      Sal,
                                      Just<OpRM16>,
                                      Just<EncModrm_rm>,
                                      Just<OpIMM8>,
                                      Just<EncIMM>,
                                      Nothing,
                                      Nothing);
         }
      else
         {
             /* EncodedInstructionDefinition {{[]
                                           ;C1 
                                           ;Just (ModrmDigit 4)
                                           ;Just RMBoth
                                           ;Nothing
                                           ;[IMM_IB]
                                           ;Just Op32
                                           ;Nothing}
                                          ;Prototype {protoMnemonic = "SAL", protoOperands = [OpRM32,OpIMM8]}
                                          ;[(EncModrm_rm,OperandReadWrite)
                                           ,(EncIMM,OperandReadWrite)]
                                          ;64bit: True
                                          ;legacy: True
                                          ;Multiply r/m32 by 2, imm8 times.} */
             
             ERASM_DECODER_DO_ACTION (1,
                                      Sal,
                                      Just<OpRM32>,
                                      Just<EncModrm_rm>,
                                      Just<OpIMM8>,
                                      Just<EncIMM>,
                                      Nothing,
                                      Nothing);
         }
      case (5):
      if (is_data16)
         {
             /* EncodedInstructionDefinition {{[]
                                           ;C1 
                                           ;Just (ModrmDigit 5)
                                           ;Just RMBoth
                                           ;Nothing
                                           ;[IMM_IB]
                                           ;Just Op16
                                           ;Nothing}
                                          ;Prototype {protoMnemonic = "SHR", protoOperands = [OpRM16,OpIMM8]}
                                          ;[(EncModrm_rm,OperandReadWrite)
                                           ,(EncIMM,OperandReadWrite)]
                                          ;64bit: True
                                          ;legacy: True
                                          ;Unsigned divide r/m16 by 2, imm8 times.} */
             
             ERASM_DECODER_DO_ACTION (1,
                                      Shr,
                                      Just<OpRM16>,
                                      Just<EncModrm_rm>,
                                      Just<OpIMM8>,
                                      Just<EncIMM>,
                                      Nothing,
                                      Nothing);
         }
      else
         {
             /* EncodedInstructionDefinition {{[]
                                           ;C1 
                                           ;Just (ModrmDigit 5)
                                           ;Just RMBoth
                                           ;Nothing
                                           ;[IMM_IB]
                                           ;Just Op32
                                           ;Nothing}
                                          ;Prototype {protoMnemonic = "SHR", protoOperands = [OpRM32,OpIMM8]}
                                          ;[(EncModrm_rm,OperandReadWrite)
                                           ,(EncIMM,OperandReadWrite)]
                                          ;64bit: True
                                          ;legacy: True
                                          ;Unsigned divide r/m32 by 2, imm8 times.} */
             
             ERASM_DECODER_DO_ACTION (1,
                                      Shr,
                                      Just<OpRM32>,
                                      Just<EncModrm_rm>,
                                      Just<OpIMM8>,
                                      Just<EncIMM>,
                                      Nothing,
                                      Nothing);
         }
      case (7):
      if (is_data16)
         {
             /* EncodedInstructionDefinition {{[]
                                           ;C1 
                                           ;Just (ModrmDigit 7)
                                           ;Just RMBoth
                                           ;Nothing
                                           ;[IMM_IB]
                                           ;Just Op16
                                           ;Nothing}
                                          ;Prototype {protoMnemonic = "SAR", protoOperands = [OpRM16,OpIMM8]}
                                          ;[(EncModrm_rm,OperandReadWrite)
                                           ,(EncIMM,OperandReadWrite)]
                                          ;64bit: True
                                          ;legacy: True
                                          ;Signed divide* r/m16 by 2, imm8 times.} */
             
             ERASM_DECODER_DO_ACTION (1,
                                      Sar,
                                      Just<OpRM16>,
                                      Just<EncModrm_rm>,
                                      Just<OpIMM8>,
                                      Just<EncIMM>,
                                      Nothing,
                                      Nothing);
         }
      else
         {
             /* EncodedInstructionDefinition {{[]
                                           ;C1 
                                           ;Just (ModrmDigit 7)
                                           ;Just RMBoth
                                           ;Nothing
                                           ;[IMM_IB]
                                           ;Just Op32
                                           ;Nothing}
                                          ;Prototype {protoMnemonic = "SAR", protoOperands = [OpRM32,OpIMM8]}
                                          ;[(EncModrm_rm,OperandReadWrite)
                                           ,(EncIMM,OperandReadWrite)]
                                          ;64bit: True
                                          ;legacy: True
                                          ;Signed divide* r/m32 by 2, imm8 times.} */
             
             ERASM_DECODER_DO_ACTION (1,
                                      Sar,
                                      Just<OpRM32>,
                                      Just<EncModrm_rm>,
                                      Just<OpIMM8>,
                                      Just<EncIMM>,
                                      Nothing,
                                      Nothing);
         }
      
   }
   case (0xc2):
   {
       /* EncodedInstructionDefinition {{[]
                                     ;C2 
                                     ;Nothing
                                     ;Nothing
                                     ;Nothing
                                     ;[IMM_IW]
                                     ;Nothing
                                     ;Nothing}
                                    ;Prototype {protoMnemonic = "RET", protoOperands = [OpIMM16]}
                                    ;[(EncIMM,OperandReadWrite)]
                                    ;64bit: True
                                    ;legacy: True
                                    ;Near return to calling procedure and pop imm16 bytes from stack.} */
       
       ERASM_DECODER_DO_ACTION (1,
                                Ret,
                                Just<OpIMM16>,
                                Just<EncIMM>,
                                Nothing,
                                Nothing,
                                Nothing,
                                Nothing);
   }
   case (0xc3):
   {
       /* EncodedInstructionDefinition {{[]
                                     ;C3 
                                     ;Nothing
                                     ;Nothing
                                     ;Nothing
                                     ;[]
                                     ;Nothing
                                     ;Nothing}
                                    ;Prototype {protoMnemonic = "RET", protoOperands = []}
                                    ;[]
                                    ;64bit: True
                                    ;legacy: True
                                    ;Near return to calling procedure.} */
       
       ERASM_DECODER_DO_ACTION (1,
                                Ret,
                                Nothing,
                                Nothing,
                                Nothing,
                                Nothing,
                                Nothing,
                                Nothing);
   }
   case (0xc4):
   if (!modrm_mod3 (p))
      if (is_data16)
         {
             /* EncodedInstructionDefinition {{[]
                                           ;C4 
                                           ;Just Modrm
                                           ;Just RMMemOnly
                                           ;Nothing
                                           ;[]
                                           ;Just Op16
                                           ;Nothing}
                                          ;Prototype {protoMnemonic = "LES", protoOperands = [OpR16,OpMFar16]}
                                          ;[(EncModrm_reg
                                            ,OperandReadWrite)
                                           ,(EncModrm_rm,OperandReadOnly)]
                                          ;64bit: False
                                          ;legacy: True
                                          ;Load ES:r16 with far pointer from memory.} */
             
             ERASM_DECODER_DO_ACTION (1,
                                      Les,
                                      Just<OpR16>,
                                      Just<EncModrm_reg>,
                                      Just<OpMFar16>,
                                      Just<EncModrm_rm_mem>,
                                      Nothing,
                                      Nothing);
         }
      else
         {
             /* EncodedInstructionDefinition {{[]
                                           ;C4 
                                           ;Just Modrm
                                           ;Just RMMemOnly
                                           ;Nothing
                                           ;[]
                                           ;Just Op32
                                           ;Nothing}
                                          ;Prototype {protoMnemonic = "LES", protoOperands = [OpR32,OpMFar32]}
                                          ;[(EncModrm_reg
                                            ,OperandReadWrite)
                                           ,(EncModrm_rm,OperandReadOnly)]
                                          ;64bit: False
                                          ;legacy: True
                                          ;Load ES:r32 with far pointer from memory.} */
             
             ERASM_DECODER_DO_ACTION (1,
                                      Les,
                                      Just<OpR32>,
                                      Just<EncModrm_reg>,
                                      Just<OpMFar32>,
                                      Just<EncModrm_rm_mem>,
                                      Nothing,
                                      Nothing);
         }
   else
      goto decode_error;
   case (0xc5):
   if (!modrm_mod3 (p))
      if (is_data16)
         {
             /* EncodedInstructionDefinition {{[]
                                           ;C5 
                                           ;Just Modrm
                                           ;Just RMMemOnly
                                           ;Nothing
                                           ;[]
                                           ;Just Op16
                                           ;Nothing}
                                          ;Prototype {protoMnemonic = "LDS", protoOperands = [OpR16,OpMFar16]}
                                          ;[(EncModrm_reg
                                            ,OperandReadWrite)
                                           ,(EncModrm_rm,OperandReadOnly)]
                                          ;64bit: False
                                          ;legacy: True
                                          ;Load DS:r16 with far pointer from memory.} */
             
             ERASM_DECODER_DO_ACTION (1,
                                      Lds,
                                      Just<OpR16>,
                                      Just<EncModrm_reg>,
                                      Just<OpMFar16>,
                                      Just<EncModrm_rm_mem>,
                                      Nothing,
                                      Nothing);
         }
      else
         {
             /* EncodedInstructionDefinition {{[]
                                           ;C5 
                                           ;Just Modrm
                                           ;Just RMMemOnly
                                           ;Nothing
                                           ;[]
                                           ;Just Op32
                                           ;Nothing}
                                          ;Prototype {protoMnemonic = "LDS", protoOperands = [OpR32,OpMFar32]}
                                          ;[(EncModrm_reg
                                            ,OperandReadWrite)
                                           ,(EncModrm_rm,OperandReadOnly)]
                                          ;64bit: False
                                          ;legacy: True
                                          ;Load DS:r32 with far pointer from memory.} */
             
             ERASM_DECODER_DO_ACTION (1,
                                      Lds,
                                      Just<OpR32>,
                                      Just<EncModrm_reg>,
                                      Just<OpMFar32>,
                                      Just<EncModrm_rm_mem>,
                                      Nothing,
                                      Nothing);
         }
   else
      goto decode_error;
   case (0xc6):
   switch (modrm_reg_op (p)) {
      case (0):
      {
          /* EncodedInstructionDefinition {{[]
                                        ;C6 
                                        ;Just (ModrmDigit 0)
                                        ;Just RMBoth
                                        ;Nothing
                                        ;[IMM_IB]
                                        ;Nothing
                                        ;Nothing}
                                       ;Prototype {protoMnemonic = "MOV", protoOperands = [OpRM8,OpIMM8]}
                                       ;[(EncModrm_rm,OperandReadWrite)
                                        ,(EncIMM,OperandReadWrite)]
                                       ;64bit: True
                                       ;legacy: True
                                       ;Move imm8 to r/m8.} */
          
          ERASM_DECODER_DO_ACTION (1,
                                   Mov,
                                   Just<OpRM8>,
                                   Just<EncModrm_rm>,
                                   Just<OpIMM8>,
                                   Just<EncIMM>,
                                   Nothing,
                                   Nothing);
      }
      
   }
   case (0xc7):
   switch (modrm_reg_op (p)) {
      case (0):
      if (is_data16)
         {
             /* EncodedInstructionDefinition {{[]
                                           ;C7 
                                           ;Just (ModrmDigit 0)
                                           ;Just RMBoth
                                           ;Nothing
                                           ;[IMM_IW]
                                           ;Just Op16
                                           ;Nothing}
                                          ;Prototype {protoMnemonic = "MOV", protoOperands = [OpRM16,OpIMM16]}
                                          ;[(EncModrm_rm,OperandReadWrite)
                                           ,(EncIMM,OperandReadWrite)]
                                          ;64bit: True
                                          ;legacy: True
                                          ;Move imm16 to r/m16.} */
             
             ERASM_DECODER_DO_ACTION (1,
                                      Mov,
                                      Just<OpRM16>,
                                      Just<EncModrm_rm>,
                                      Just<OpIMM16>,
                                      Just<EncIMM>,
                                      Nothing,
                                      Nothing);
         }
      else
         {
             /* EncodedInstructionDefinition {{[]
                                           ;C7 
                                           ;Just (ModrmDigit 0)
                                           ;Just RMBoth
                                           ;Nothing
                                           ;[IMM_ID]
                                           ;Just Op32
                                           ;Nothing}
                                          ;Prototype {protoMnemonic = "MOV", protoOperands = [OpRM32,OpIMM32]}
                                          ;[(EncModrm_rm,OperandReadWrite)
                                           ,(EncIMM,OperandReadWrite)]
                                          ;64bit: True
                                          ;legacy: True
                                          ;Move imm32 to r/m32.} */
             
             ERASM_DECODER_DO_ACTION (1,
                                      Mov,
                                      Just<OpRM32>,
                                      Just<EncModrm_rm>,
                                      Just<OpIMM32>,
                                      Just<EncIMM>,
                                      Nothing,
                                      Nothing);
         }
      
   }
   case (0xc8):
   {
       /* EncodedInstructionDefinition {{[]
                                     ;C8 
                                     ;Nothing
                                     ;Nothing
                                     ;Nothing
                                     ;[IMM_IW,IMM_IB]
                                     ;Nothing
                                     ;Nothing}
                                    ;Prototype {protoMnemonic = "ENTER", protoOperands = [OpIMM16,OpIMM8]}
                                    ;[(EncIMM,OperandReadWrite)
                                     ,(EncIMM,OperandReadWrite)]
                                    ;64bit: True
                                    ;legacy: True
                                    ;Create a nested stack frame for a procedure.} */
       
       ERASM_DECODER_DO_ACTION (1,
                                Enter,
                                Just<OpIMM16>,
                                Just<EncIMM>,
                                Just<OpIMM8>,
                                Just<EncIMM>,
                                Nothing,
                                Nothing);
   }
   case (0xc9):
   if (is_data16)
      {
          /* EncodedInstructionDefinition {{[]
                                        ;C9 
                                        ;Nothing
                                        ;Nothing
                                        ;Nothing
                                        ;[]
                                        ;Just Op16
                                        ;Nothing}
                                       ;Prototype {protoMnemonic = "LEAVEW", protoOperands = []}
                                       ;[]
                                       ;64bit: True
                                       ;legacy: True
                                       ;Set SP to BP, then pop BP.} */
          
          ERASM_DECODER_DO_ACTION (1,
                                   Leavew,
                                   Nothing,
                                   Nothing,
                                   Nothing,
                                   Nothing,
                                   Nothing,
                                   Nothing);
      }
   else
      {
          /* EncodedInstructionDefinition {{[]
                                        ;C9 
                                        ;Nothing
                                        ;Nothing
                                        ;Nothing
                                        ;[]
                                        ;Just Op32
                                        ;Nothing}
                                       ;Prototype {protoMnemonic = "LEAVE", protoOperands = []}
                                       ;[]
                                       ;64bit: False
                                       ;legacy: True
                                       ;Set ESP to EBP, then pop EBP.} */
          
          ERASM_DECODER_DO_ACTION (1,
                                   Leave,
                                   Nothing,
                                   Nothing,
                                   Nothing,
                                   Nothing,
                                   Nothing,
                                   Nothing);
      }
   case (0xca):
   {
       /* EncodedInstructionDefinition {{[]
                                     ;CA 
                                     ;Nothing
                                     ;Nothing
                                     ;Nothing
                                     ;[IMM_IW]
                                     ;Nothing
                                     ;Nothing}
                                    ;Prototype {protoMnemonic = "RETF", protoOperands = [OpIMM16]}
                                    ;[(EncIMM,OperandReadWrite)]
                                    ;64bit: True
                                    ;legacy: True
                                    ;Far return to calling procedure and pop imm16 bytes from stack.} */
       
       ERASM_DECODER_DO_ACTION (1,
                                Retf,
                                Just<OpIMM16>,
                                Just<EncIMM>,
                                Nothing,
                                Nothing,
                                Nothing,
                                Nothing);
   }
   case (0xcb):
   {
       /* EncodedInstructionDefinition {{[]
                                     ;CB 
                                     ;Nothing
                                     ;Nothing
                                     ;Nothing
                                     ;[]
                                     ;Nothing
                                     ;Nothing}
                                    ;Prototype {protoMnemonic = "RETF", protoOperands = []}
                                    ;[]
                                    ;64bit: True
                                    ;legacy: True
                                    ;Far return to calling procedure.} */
       
       ERASM_DECODER_DO_ACTION (1,
                                Retf,
                                Nothing,
                                Nothing,
                                Nothing,
                                Nothing,
                                Nothing,
                                Nothing);
   }
   case (0xcc):
   {
       /* EncodedInstructionDefinition {{[]
                                     ;CC 
                                     ;Nothing
                                     ;Nothing
                                     ;Nothing
                                     ;[]
                                     ;Nothing
                                     ;Nothing}
                                    ;Prototype {protoMnemonic = "INT3", protoOperands = []}
                                    ;[]
                                    ;64bit: True
                                    ;legacy: True
                                    ;Interrupt 3—trap to debugger.} */
       
       ERASM_DECODER_DO_ACTION (1,
                                Int3,
                                Nothing,
                                Nothing,
                                Nothing,
                                Nothing,
                                Nothing,
                                Nothing);
   }
   case (0xcd):
   {
       /* EncodedInstructionDefinition {{[]
                                     ;CD 
                                     ;Nothing
                                     ;Nothing
                                     ;Nothing
                                     ;[IMM_IB]
                                     ;Nothing
                                     ;Nothing}
                                    ;Prototype {protoMnemonic = "INT", protoOperands = [OpIMM8]}
                                    ;[(EncIMM,OperandReadWrite)]
                                    ;64bit: True
                                    ;legacy: True
                                    ;Interrupt vector number specified by immediate byte.} */
       
       ERASM_DECODER_DO_ACTION (1,
                                Int,
                                Just<OpIMM8>,
                                Just<EncIMM>,
                                Nothing,
                                Nothing,
                                Nothing,
                                Nothing);
   }
   case (0xce):
   {
       /* EncodedInstructionDefinition {{[]
                                     ;CE 
                                     ;Nothing
                                     ;Nothing
                                     ;Nothing
                                     ;[]
                                     ;Nothing
                                     ;Nothing}
                                    ;Prototype {protoMnemonic = "INTO", protoOperands = []}
                                    ;[]
                                    ;64bit: False
                                    ;legacy: True
                                    ;Interrupt 4—if overflow flag is 1.} */
       
       ERASM_DECODER_DO_ACTION (1,
                                Into,
                                Nothing,
                                Nothing,
                                Nothing,
                                Nothing,
                                Nothing,
                                Nothing);
   }
   case (0xcf):
   if (is_data16)
      {
          /* EncodedInstructionDefinition {{[]
                                        ;CF 
                                        ;Nothing
                                        ;Nothing
                                        ;Nothing
                                        ;[]
                                        ;Just Op16
                                        ;Nothing}
                                       ;Prototype {protoMnemonic = "IRET", protoOperands = []}
                                       ;[]
                                       ;64bit: True
                                       ;legacy: True
                                       ;Interrupt return (16-bit operand size).} */
          
          ERASM_DECODER_DO_ACTION (1,
                                   Iret,
                                   Nothing,
                                   Nothing,
                                   Nothing,
                                   Nothing,
                                   Nothing,
                                   Nothing);
      }
   else
      {
          /* EncodedInstructionDefinition {{[]
                                        ;CF 
                                        ;Nothing
                                        ;Nothing
                                        ;Nothing
                                        ;[]
                                        ;Just Op32
                                        ;Nothing}
                                       ;Prototype {protoMnemonic = "IRETD", protoOperands = []}
                                       ;[]
                                       ;64bit: True
                                       ;legacy: True
                                       ;Interrupt return (32-bit operand size).} */
          
          ERASM_DECODER_DO_ACTION (1,
                                   Iretd,
                                   Nothing,
                                   Nothing,
                                   Nothing,
                                   Nothing,
                                   Nothing,
                                   Nothing);
      }
   case (0xd0):
   switch (modrm_reg_op (p)) {
      case (0):
      {
          /* EncodedInstructionDefinition {{[]
                                        ;D0 
                                        ;Just (ModrmDigit 0)
                                        ;Just RMBoth
                                        ;Nothing
                                        ;[]
                                        ;Nothing
                                        ;Nothing}
                                       ;Prototype {protoMnemonic = "ROL", protoOperands = [OpRM8,Op1]}
                                       ;[(EncModrm_rm,OperandReadWrite)
                                        ,(Enc1,OperandReadWrite)]
                                       ;64bit: True
                                       ;legacy: True
                                       ;Rotate 8 bits r/m8 left once.} */
          
          ERASM_DECODER_DO_ACTION (1,
                                   Rol,
                                   Just<OpRM8>,
                                   Just<EncModrm_rm>,
                                   Just<Op1>,
                                   Just<EncImplicit>,
                                   Nothing,
                                   Nothing);
      }
      case (1):
      {
          /* EncodedInstructionDefinition {{[]
                                        ;D0 
                                        ;Just (ModrmDigit 1)
                                        ;Just RMBoth
                                        ;Nothing
                                        ;[]
                                        ;Nothing
                                        ;Nothing}
                                       ;Prototype {protoMnemonic = "ROR", protoOperands = [OpRM8,Op1]}
                                       ;[(EncModrm_rm,OperandReadWrite)
                                        ,(Enc1,OperandReadWrite)]
                                       ;64bit: True
                                       ;legacy: True
                                       ;Rotate 8 bits r/m8 right once.} */
          
          ERASM_DECODER_DO_ACTION (1,
                                   Ror,
                                   Just<OpRM8>,
                                   Just<EncModrm_rm>,
                                   Just<Op1>,
                                   Just<EncImplicit>,
                                   Nothing,
                                   Nothing);
      }
      case (2):
      {
          /* EncodedInstructionDefinition {{[]
                                        ;D0 
                                        ;Just (ModrmDigit 2)
                                        ;Just RMBoth
                                        ;Nothing
                                        ;[]
                                        ;Nothing
                                        ;Nothing}
                                       ;Prototype {protoMnemonic = "RCL", protoOperands = [OpRM8,Op1]}
                                       ;[(EncModrm_rm,OperandReadWrite)
                                        ,(Enc1,OperandReadWrite)]
                                       ;64bit: True
                                       ;legacy: True
                                       ;Rotate 9 bits (CF, r/m8) left once.} */
          
          ERASM_DECODER_DO_ACTION (1,
                                   Rcl,
                                   Just<OpRM8>,
                                   Just<EncModrm_rm>,
                                   Just<Op1>,
                                   Just<EncImplicit>,
                                   Nothing,
                                   Nothing);
      }
      case (3):
      {
          /* EncodedInstructionDefinition {{[]
                                        ;D0 
                                        ;Just (ModrmDigit 3)
                                        ;Just RMBoth
                                        ;Nothing
                                        ;[]
                                        ;Nothing
                                        ;Nothing}
                                       ;Prototype {protoMnemonic = "RCR", protoOperands = [OpRM8,Op1]}
                                       ;[(EncModrm_rm,OperandReadWrite)
                                        ,(Enc1,OperandReadWrite)]
                                       ;64bit: True
                                       ;legacy: True
                                       ;Rotate 9 bits (CF, r/m8) right once.} */
          
          ERASM_DECODER_DO_ACTION (1,
                                   Rcr,
                                   Just<OpRM8>,
                                   Just<EncModrm_rm>,
                                   Just<Op1>,
                                   Just<EncImplicit>,
                                   Nothing,
                                   Nothing);
      }
      case (4):
      {
          /* EncodedInstructionDefinition {{[]
                                        ;D0 
                                        ;Just (ModrmDigit 4)
                                        ;Just RMBoth
                                        ;Nothing
                                        ;[]
                                        ;Nothing
                                        ;Nothing}
                                       ;Prototype {protoMnemonic = "SAL", protoOperands = [OpRM8,Op1]}
                                       ;[(EncModrm_rm,OperandReadWrite)
                                        ,(Enc1,OperandReadWrite)]
                                       ;64bit: True
                                       ;legacy: True
                                       ;Multiply r/m8 by 2, once.} */
          
          ERASM_DECODER_DO_ACTION (1,
                                   Sal,
                                   Just<OpRM8>,
                                   Just<EncModrm_rm>,
                                   Just<Op1>,
                                   Just<EncImplicit>,
                                   Nothing,
                                   Nothing);
      }
      case (5):
      {
          /* EncodedInstructionDefinition {{[]
                                        ;D0 
                                        ;Just (ModrmDigit 5)
                                        ;Just RMBoth
                                        ;Nothing
                                        ;[]
                                        ;Nothing
                                        ;Nothing}
                                       ;Prototype {protoMnemonic = "SHR", protoOperands = [OpRM8,Op1]}
                                       ;[(EncModrm_rm,OperandReadWrite)
                                        ,(Enc1,OperandReadWrite)]
                                       ;64bit: True
                                       ;legacy: True
                                       ;Unsigned divide r/m8 by 2, once.} */
          
          ERASM_DECODER_DO_ACTION (1,
                                   Shr,
                                   Just<OpRM8>,
                                   Just<EncModrm_rm>,
                                   Just<Op1>,
                                   Just<EncImplicit>,
                                   Nothing,
                                   Nothing);
      }
      case (7):
      {
          /* EncodedInstructionDefinition {{[]
                                        ;D0 
                                        ;Just (ModrmDigit 7)
                                        ;Just RMBoth
                                        ;Nothing
                                        ;[]
                                        ;Nothing
                                        ;Nothing}
                                       ;Prototype {protoMnemonic = "SAR", protoOperands = [OpRM8,Op1]}
                                       ;[(EncModrm_rm,OperandReadWrite)
                                        ,(Enc1,OperandReadWrite)]
                                       ;64bit: True
                                       ;legacy: True
                                       ;Signed divide* r/m8 by 2, once.} */
          
          ERASM_DECODER_DO_ACTION (1,
                                   Sar,
                                   Just<OpRM8>,
                                   Just<EncModrm_rm>,
                                   Just<Op1>,
                                   Just<EncImplicit>,
                                   Nothing,
                                   Nothing);
      }
      
   }
   case (0xd1):
   switch (modrm_reg_op (p)) {
      case (0):
      if (is_data16)
         {
             /* EncodedInstructionDefinition {{[]
                                           ;D1 
                                           ;Just (ModrmDigit 0)
                                           ;Just RMBoth
                                           ;Nothing
                                           ;[]
                                           ;Just Op16
                                           ;Nothing}
                                          ;Prototype {protoMnemonic = "ROL", protoOperands = [OpRM16,Op1]}
                                          ;[(EncModrm_rm,OperandReadWrite)
                                           ,(Enc1,OperandReadWrite)]
                                          ;64bit: True
                                          ;legacy: True
                                          ;Rotate 16 bits r/m16 left once.} */
             
             ERASM_DECODER_DO_ACTION (1,
                                      Rol,
                                      Just<OpRM16>,
                                      Just<EncModrm_rm>,
                                      Just<Op1>,
                                      Just<EncImplicit>,
                                      Nothing,
                                      Nothing);
         }
      else
         {
             /* EncodedInstructionDefinition {{[]
                                           ;D1 
                                           ;Just (ModrmDigit 0)
                                           ;Just RMBoth
                                           ;Nothing
                                           ;[]
                                           ;Just Op32
                                           ;Nothing}
                                          ;Prototype {protoMnemonic = "ROL", protoOperands = [OpRM32,Op1]}
                                          ;[(EncModrm_rm,OperandReadWrite)
                                           ,(Enc1,OperandReadWrite)]
                                          ;64bit: True
                                          ;legacy: True
                                          ;Rotate 32 bits r/m32 left once.} */
             
             ERASM_DECODER_DO_ACTION (1,
                                      Rol,
                                      Just<OpRM32>,
                                      Just<EncModrm_rm>,
                                      Just<Op1>,
                                      Just<EncImplicit>,
                                      Nothing,
                                      Nothing);
         }
      case (1):
      if (is_data16)
         {
             /* EncodedInstructionDefinition {{[]
                                           ;D1 
                                           ;Just (ModrmDigit 1)
                                           ;Just RMBoth
                                           ;Nothing
                                           ;[]
                                           ;Just Op16
                                           ;Nothing}
                                          ;Prototype {protoMnemonic = "ROR", protoOperands = [OpRM16,Op1]}
                                          ;[(EncModrm_rm,OperandReadWrite)
                                           ,(Enc1,OperandReadWrite)]
                                          ;64bit: True
                                          ;legacy: True
                                          ;Rotate 16 bits r/m16 right once.} */
             
             ERASM_DECODER_DO_ACTION (1,
                                      Ror,
                                      Just<OpRM16>,
                                      Just<EncModrm_rm>,
                                      Just<Op1>,
                                      Just<EncImplicit>,
                                      Nothing,
                                      Nothing);
         }
      else
         {
             /* EncodedInstructionDefinition {{[]
                                           ;D1 
                                           ;Just (ModrmDigit 1)
                                           ;Just RMBoth
                                           ;Nothing
                                           ;[]
                                           ;Just Op32
                                           ;Nothing}
                                          ;Prototype {protoMnemonic = "ROR", protoOperands = [OpRM32,Op1]}
                                          ;[(EncModrm_rm,OperandReadWrite)
                                           ,(Enc1,OperandReadWrite)]
                                          ;64bit: True
                                          ;legacy: True
                                          ;Rotate 32 bits r/m32 right once.} */
             
             ERASM_DECODER_DO_ACTION (1,
                                      Ror,
                                      Just<OpRM32>,
                                      Just<EncModrm_rm>,
                                      Just<Op1>,
                                      Just<EncImplicit>,
                                      Nothing,
                                      Nothing);
         }
      case (2):
      if (is_data16)
         {
             /* EncodedInstructionDefinition {{[]
                                           ;D1 
                                           ;Just (ModrmDigit 2)
                                           ;Just RMBoth
                                           ;Nothing
                                           ;[]
                                           ;Just Op16
                                           ;Nothing}
                                          ;Prototype {protoMnemonic = "RCL", protoOperands = [OpRM16,Op1]}
                                          ;[(EncModrm_rm,OperandReadWrite)
                                           ,(Enc1,OperandReadWrite)]
                                          ;64bit: True
                                          ;legacy: True
                                          ;Rotate 17 bits (CF, r/m16) left once.} */
             
             ERASM_DECODER_DO_ACTION (1,
                                      Rcl,
                                      Just<OpRM16>,
                                      Just<EncModrm_rm>,
                                      Just<Op1>,
                                      Just<EncImplicit>,
                                      Nothing,
                                      Nothing);
         }
      else
         {
             /* EncodedInstructionDefinition {{[]
                                           ;D1 
                                           ;Just (ModrmDigit 2)
                                           ;Just RMBoth
                                           ;Nothing
                                           ;[]
                                           ;Just Op32
                                           ;Nothing}
                                          ;Prototype {protoMnemonic = "RCL", protoOperands = [OpRM32,Op1]}
                                          ;[(EncModrm_rm,OperandReadWrite)
                                           ,(Enc1,OperandReadWrite)]
                                          ;64bit: True
                                          ;legacy: True
                                          ;Rotate 33 bits (CF, r/m32) left once.} */
             
             ERASM_DECODER_DO_ACTION (1,
                                      Rcl,
                                      Just<OpRM32>,
                                      Just<EncModrm_rm>,
                                      Just<Op1>,
                                      Just<EncImplicit>,
                                      Nothing,
                                      Nothing);
         }
      case (3):
      if (is_data16)
         {
             /* EncodedInstructionDefinition {{[]
                                           ;D1 
                                           ;Just (ModrmDigit 3)
                                           ;Just RMBoth
                                           ;Nothing
                                           ;[]
                                           ;Just Op16
                                           ;Nothing}
                                          ;Prototype {protoMnemonic = "RCR", protoOperands = [OpRM16,Op1]}
                                          ;[(EncModrm_rm,OperandReadWrite)
                                           ,(Enc1,OperandReadWrite)]
                                          ;64bit: True
                                          ;legacy: True
                                          ;Rotate 17 bits (CF, r/m16) right once.} */
             
             ERASM_DECODER_DO_ACTION (1,
                                      Rcr,
                                      Just<OpRM16>,
                                      Just<EncModrm_rm>,
                                      Just<Op1>,
                                      Just<EncImplicit>,
                                      Nothing,
                                      Nothing);
         }
      else
         {
             /* EncodedInstructionDefinition {{[]
                                           ;D1 
                                           ;Just (ModrmDigit 3)
                                           ;Just RMBoth
                                           ;Nothing
                                           ;[]
                                           ;Just Op32
                                           ;Nothing}
                                          ;Prototype {protoMnemonic = "RCR", protoOperands = [OpRM32,Op1]}
                                          ;[(EncModrm_rm,OperandReadWrite)
                                           ,(Enc1,OperandReadWrite)]
                                          ;64bit: True
                                          ;legacy: True
                                          ;Rotate 33 bits (CF, r/m32) right once. Uses a 6 bit count.} */
             
             ERASM_DECODER_DO_ACTION (1,
                                      Rcr,
                                      Just<OpRM32>,
                                      Just<EncModrm_rm>,
                                      Just<Op1>,
                                      Just<EncImplicit>,
                                      Nothing,
                                      Nothing);
         }
      case (4):
      if (is_data16)
         {
             /* EncodedInstructionDefinition {{[]
                                           ;D1 
                                           ;Just (ModrmDigit 4)
                                           ;Just RMBoth
                                           ;Nothing
                                           ;[]
                                           ;Just Op16
                                           ;Nothing}
                                          ;Prototype {protoMnemonic = "SAL", protoOperands = [OpRM16,Op1]}
                                          ;[(EncModrm_rm,OperandReadWrite)
                                           ,(Enc1,OperandReadWrite)]
                                          ;64bit: True
                                          ;legacy: True
                                          ;Multiply r/m16 by 2, once.} */
             
             ERASM_DECODER_DO_ACTION (1,
                                      Sal,
                                      Just<OpRM16>,
                                      Just<EncModrm_rm>,
                                      Just<Op1>,
                                      Just<EncImplicit>,
                                      Nothing,
                                      Nothing);
         }
      else
         {
             /* EncodedInstructionDefinition {{[]
                                           ;D1 
                                           ;Just (ModrmDigit 4)
                                           ;Just RMBoth
                                           ;Nothing
                                           ;[]
                                           ;Just Op32
                                           ;Nothing}
                                          ;Prototype {protoMnemonic = "SAL", protoOperands = [OpRM32,Op1]}
                                          ;[(EncModrm_rm,OperandReadWrite)
                                           ,(Enc1,OperandReadWrite)]
                                          ;64bit: True
                                          ;legacy: True
                                          ;Multiply r/m32 by 2, once.} */
             
             ERASM_DECODER_DO_ACTION (1,
                                      Sal,
                                      Just<OpRM32>,
                                      Just<EncModrm_rm>,
                                      Just<Op1>,
                                      Just<EncImplicit>,
                                      Nothing,
                                      Nothing);
         }
      case (5):
      if (is_data16)
         {
             /* EncodedInstructionDefinition {{[]
                                           ;D1 
                                           ;Just (ModrmDigit 5)
                                           ;Just RMBoth
                                           ;Nothing
                                           ;[]
                                           ;Just Op16
                                           ;Nothing}
                                          ;Prototype {protoMnemonic = "SHR", protoOperands = [OpRM16,Op1]}
                                          ;[(EncModrm_rm,OperandReadWrite)
                                           ,(Enc1,OperandReadWrite)]
                                          ;64bit: True
                                          ;legacy: True
                                          ;Unsigned divide r/m16 by 2, once.} */
             
             ERASM_DECODER_DO_ACTION (1,
                                      Shr,
                                      Just<OpRM16>,
                                      Just<EncModrm_rm>,
                                      Just<Op1>,
                                      Just<EncImplicit>,
                                      Nothing,
                                      Nothing);
         }
      else
         {
             /* EncodedInstructionDefinition {{[]
                                           ;D1 
                                           ;Just (ModrmDigit 5)
                                           ;Just RMBoth
                                           ;Nothing
                                           ;[]
                                           ;Just Op32
                                           ;Nothing}
                                          ;Prototype {protoMnemonic = "SHR", protoOperands = [OpRM32,Op1]}
                                          ;[(EncModrm_rm,OperandReadWrite)
                                           ,(Enc1,OperandReadWrite)]
                                          ;64bit: True
                                          ;legacy: True
                                          ;Unsigned divide r/m32 by 2, once.} */
             
             ERASM_DECODER_DO_ACTION (1,
                                      Shr,
                                      Just<OpRM32>,
                                      Just<EncModrm_rm>,
                                      Just<Op1>,
                                      Just<EncImplicit>,
                                      Nothing,
                                      Nothing);
         }
      case (7):
      if (is_data16)
         {
             /* EncodedInstructionDefinition {{[]
                                           ;D1 
                                           ;Just (ModrmDigit 7)
                                           ;Just RMBoth
                                           ;Nothing
                                           ;[]
                                           ;Just Op16
                                           ;Nothing}
                                          ;Prototype {protoMnemonic = "SAR", protoOperands = [OpRM16,Op1]}
                                          ;[(EncModrm_rm,OperandReadWrite)
                                           ,(Enc1,OperandReadWrite)]
                                          ;64bit: True
                                          ;legacy: True
                                          ;Signed divide* r/m16 by 2, once.} */
             
             ERASM_DECODER_DO_ACTION (1,
                                      Sar,
                                      Just<OpRM16>,
                                      Just<EncModrm_rm>,
                                      Just<Op1>,
                                      Just<EncImplicit>,
                                      Nothing,
                                      Nothing);
         }
      else
         {
             /* EncodedInstructionDefinition {{[]
                                           ;D1 
                                           ;Just (ModrmDigit 7)
                                           ;Just RMBoth
                                           ;Nothing
                                           ;[]
                                           ;Just Op32
                                           ;Nothing}
                                          ;Prototype {protoMnemonic = "SAR", protoOperands = [OpRM32,Op1]}
                                          ;[(EncModrm_rm,OperandReadWrite)
                                           ,(Enc1,OperandReadWrite)]
                                          ;64bit: True
                                          ;legacy: True
                                          ;Signed divide* r/m32 by 2, once.} */
             
             ERASM_DECODER_DO_ACTION (1,
                                      Sar,
                                      Just<OpRM32>,
                                      Just<EncModrm_rm>,
                                      Just<Op1>,
                                      Just<EncImplicit>,
                                      Nothing,
                                      Nothing);
         }
      
   }
   case (0xd2):
   switch (modrm_reg_op (p)) {
      case (0):
      {
          /* EncodedInstructionDefinition {{[]
                                        ;D2 
                                        ;Just (ModrmDigit 0)
                                        ;Just RMBoth
                                        ;Nothing
                                        ;[]
                                        ;Nothing
                                        ;Nothing}
                                       ;Prototype {protoMnemonic = "ROL", protoOperands = [OpRM8,OpCL]}
                                       ;[(EncModrm_rm,OperandReadWrite)
                                        ,(EncImplicit,OperandReadOnly)]
                                       ;64bit: True
                                       ;legacy: True
                                       ;Rotate 8 bits r/m8 left CL times.} */
          
          ERASM_DECODER_DO_ACTION (1,
                                   Rol,
                                   Just<OpRM8>,
                                   Just<EncModrm_rm>,
                                   Just<OpCL>,
                                   Just<EncImplicit>,
                                   Nothing,
                                   Nothing);
      }
      case (1):
      {
          /* EncodedInstructionDefinition {{[]
                                        ;D2 
                                        ;Just (ModrmDigit 1)
                                        ;Just RMBoth
                                        ;Nothing
                                        ;[]
                                        ;Nothing
                                        ;Nothing}
                                       ;Prototype {protoMnemonic = "ROR", protoOperands = [OpRM8,OpCL]}
                                       ;[(EncModrm_rm,OperandReadWrite)
                                        ,(EncImplicit,OperandReadOnly)]
                                       ;64bit: True
                                       ;legacy: True
                                       ;Rotate 8 bits r/m8 right CL times.} */
          
          ERASM_DECODER_DO_ACTION (1,
                                   Ror,
                                   Just<OpRM8>,
                                   Just<EncModrm_rm>,
                                   Just<OpCL>,
                                   Just<EncImplicit>,
                                   Nothing,
                                   Nothing);
      }
      case (2):
      {
          /* EncodedInstructionDefinition {{[]
                                        ;D2 
                                        ;Just (ModrmDigit 2)
                                        ;Just RMBoth
                                        ;Nothing
                                        ;[]
                                        ;Nothing
                                        ;Nothing}
                                       ;Prototype {protoMnemonic = "RCL", protoOperands = [OpRM8,OpCL]}
                                       ;[(EncModrm_rm,OperandReadWrite)
                                        ,(EncImplicit,OperandReadOnly)]
                                       ;64bit: True
                                       ;legacy: True
                                       ;Rotate 9 bits (CF, r/m8) left CL times.} */
          
          ERASM_DECODER_DO_ACTION (1,
                                   Rcl,
                                   Just<OpRM8>,
                                   Just<EncModrm_rm>,
                                   Just<OpCL>,
                                   Just<EncImplicit>,
                                   Nothing,
                                   Nothing);
      }
      case (3):
      {
          /* EncodedInstructionDefinition {{[]
                                        ;D2 
                                        ;Just (ModrmDigit 3)
                                        ;Just RMBoth
                                        ;Nothing
                                        ;[]
                                        ;Nothing
                                        ;Nothing}
                                       ;Prototype {protoMnemonic = "RCR", protoOperands = [OpRM8,OpCL]}
                                       ;[(EncModrm_rm,OperandReadWrite)
                                        ,(EncImplicit,OperandReadOnly)]
                                       ;64bit: True
                                       ;legacy: True
                                       ;Rotate 9 bits (CF, r/m8) right CL times.} */
          
          ERASM_DECODER_DO_ACTION (1,
                                   Rcr,
                                   Just<OpRM8>,
                                   Just<EncModrm_rm>,
                                   Just<OpCL>,
                                   Just<EncImplicit>,
                                   Nothing,
                                   Nothing);
      }
      case (4):
      {
          /* EncodedInstructionDefinition {{[]
                                        ;D2 
                                        ;Just (ModrmDigit 4)
                                        ;Just RMBoth
                                        ;Nothing
                                        ;[]
                                        ;Nothing
                                        ;Nothing}
                                       ;Prototype {protoMnemonic = "SAL", protoOperands = [OpRM8,OpCL]}
                                       ;[(EncModrm_rm,OperandReadWrite)
                                        ,(EncImplicit,OperandReadOnly)]
                                       ;64bit: True
                                       ;legacy: True
                                       ;Multiply r/m8 by 2, CL times.} */
          
          ERASM_DECODER_DO_ACTION (1,
                                   Sal,
                                   Just<OpRM8>,
                                   Just<EncModrm_rm>,
                                   Just<OpCL>,
                                   Just<EncImplicit>,
                                   Nothing,
                                   Nothing);
      }
      case (5):
      {
          /* EncodedInstructionDefinition {{[]
                                        ;D2 
                                        ;Just (ModrmDigit 5)
                                        ;Just RMBoth
                                        ;Nothing
                                        ;[]
                                        ;Nothing
                                        ;Nothing}
                                       ;Prototype {protoMnemonic = "SHR", protoOperands = [OpRM8,OpCL]}
                                       ;[(EncModrm_rm,OperandReadWrite)
                                        ,(EncImplicit,OperandReadOnly)]
                                       ;64bit: True
                                       ;legacy: True
                                       ;Unsigned divide r/m8 by 2, CL times.} */
          
          ERASM_DECODER_DO_ACTION (1,
                                   Shr,
                                   Just<OpRM8>,
                                   Just<EncModrm_rm>,
                                   Just<OpCL>,
                                   Just<EncImplicit>,
                                   Nothing,
                                   Nothing);
      }
      case (7):
      {
          /* EncodedInstructionDefinition {{[]
                                        ;D2 
                                        ;Just (ModrmDigit 7)
                                        ;Just RMBoth
                                        ;Nothing
                                        ;[]
                                        ;Nothing
                                        ;Nothing}
                                       ;Prototype {protoMnemonic = "SAR", protoOperands = [OpRM8,OpCL]}
                                       ;[(EncModrm_rm,OperandReadWrite)
                                        ,(EncImplicit,OperandReadOnly)]
                                       ;64bit: True
                                       ;legacy: True
                                       ;Signed divide* r/m8 by 2, CL times.} */
          
          ERASM_DECODER_DO_ACTION (1,
                                   Sar,
                                   Just<OpRM8>,
                                   Just<EncModrm_rm>,
                                   Just<OpCL>,
                                   Just<EncImplicit>,
                                   Nothing,
                                   Nothing);
      }
      
   }
   case (0xd3):
   switch (modrm_reg_op (p)) {
      case (0):
      if (is_data16)
         {
             /* EncodedInstructionDefinition {{[]
                                           ;D3 
                                           ;Just (ModrmDigit 0)
                                           ;Just RMBoth
                                           ;Nothing
                                           ;[]
                                           ;Just Op16
                                           ;Nothing}
                                          ;Prototype {protoMnemonic = "ROL", protoOperands = [OpRM16,OpCL]}
                                          ;[(EncModrm_rm,OperandReadWrite)
                                           ,(EncImplicit,OperandReadOnly)]
                                          ;64bit: True
                                          ;legacy: True
                                          ;Rotate 16 bits r/m16 left CL times.} */
             
             ERASM_DECODER_DO_ACTION (1,
                                      Rol,
                                      Just<OpRM16>,
                                      Just<EncModrm_rm>,
                                      Just<OpCL>,
                                      Just<EncImplicit>,
                                      Nothing,
                                      Nothing);
         }
      else
         {
             /* EncodedInstructionDefinition {{[]
                                           ;D3 
                                           ;Just (ModrmDigit 0)
                                           ;Just RMBoth
                                           ;Nothing
                                           ;[]
                                           ;Just Op32
                                           ;Nothing}
                                          ;Prototype {protoMnemonic = "ROL", protoOperands = [OpRM32,OpCL]}
                                          ;[(EncModrm_rm,OperandReadWrite)
                                           ,(EncImplicit,OperandReadOnly)]
                                          ;64bit: True
                                          ;legacy: True
                                          ;Rotate 32 bits r/m32 left CL times.} */
             
             ERASM_DECODER_DO_ACTION (1,
                                      Rol,
                                      Just<OpRM32>,
                                      Just<EncModrm_rm>,
                                      Just<OpCL>,
                                      Just<EncImplicit>,
                                      Nothing,
                                      Nothing);
         }
      case (1):
      if (is_data16)
         {
             /* EncodedInstructionDefinition {{[]
                                           ;D3 
                                           ;Just (ModrmDigit 1)
                                           ;Just RMBoth
                                           ;Nothing
                                           ;[]
                                           ;Just Op16
                                           ;Nothing}
                                          ;Prototype {protoMnemonic = "ROR", protoOperands = [OpRM16,OpCL]}
                                          ;[(EncModrm_rm,OperandReadWrite)
                                           ,(EncImplicit,OperandReadOnly)]
                                          ;64bit: True
                                          ;legacy: True
                                          ;Rotate 16 bits r/m16 right CL times.} */
             
             ERASM_DECODER_DO_ACTION (1,
                                      Ror,
                                      Just<OpRM16>,
                                      Just<EncModrm_rm>,
                                      Just<OpCL>,
                                      Just<EncImplicit>,
                                      Nothing,
                                      Nothing);
         }
      else
         {
             /* EncodedInstructionDefinition {{[]
                                           ;D3 
                                           ;Just (ModrmDigit 1)
                                           ;Just RMBoth
                                           ;Nothing
                                           ;[]
                                           ;Just Op32
                                           ;Nothing}
                                          ;Prototype {protoMnemonic = "ROR", protoOperands = [OpRM32,OpCL]}
                                          ;[(EncModrm_rm,OperandReadWrite)
                                           ,(EncImplicit,OperandReadOnly)]
                                          ;64bit: True
                                          ;legacy: True
                                          ;Rotate 32 bits r/m32 right CL times.} */
             
             ERASM_DECODER_DO_ACTION (1,
                                      Ror,
                                      Just<OpRM32>,
                                      Just<EncModrm_rm>,
                                      Just<OpCL>,
                                      Just<EncImplicit>,
                                      Nothing,
                                      Nothing);
         }
      case (2):
      if (is_data16)
         {
             /* EncodedInstructionDefinition {{[]
                                           ;D3 
                                           ;Just (ModrmDigit 2)
                                           ;Just RMBoth
                                           ;Nothing
                                           ;[]
                                           ;Just Op16
                                           ;Nothing}
                                          ;Prototype {protoMnemonic = "RCL", protoOperands = [OpRM16,OpCL]}
                                          ;[(EncModrm_rm,OperandReadWrite)
                                           ,(EncImplicit,OperandReadOnly)]
                                          ;64bit: True
                                          ;legacy: True
                                          ;Rotate 17 bits (CF, r/m16) left CL times.} */
             
             ERASM_DECODER_DO_ACTION (1,
                                      Rcl,
                                      Just<OpRM16>,
                                      Just<EncModrm_rm>,
                                      Just<OpCL>,
                                      Just<EncImplicit>,
                                      Nothing,
                                      Nothing);
         }
      else
         {
             /* EncodedInstructionDefinition {{[]
                                           ;D3 
                                           ;Just (ModrmDigit 2)
                                           ;Just RMBoth
                                           ;Nothing
                                           ;[]
                                           ;Just Op32
                                           ;Nothing}
                                          ;Prototype {protoMnemonic = "RCL", protoOperands = [OpRM32,OpCL]}
                                          ;[(EncModrm_rm,OperandReadWrite)
                                           ,(EncImplicit,OperandReadOnly)]
                                          ;64bit: True
                                          ;legacy: True
                                          ;Rotate 33 bits (CF, r/m32) left CL times.} */
             
             ERASM_DECODER_DO_ACTION (1,
                                      Rcl,
                                      Just<OpRM32>,
                                      Just<EncModrm_rm>,
                                      Just<OpCL>,
                                      Just<EncImplicit>,
                                      Nothing,
                                      Nothing);
         }
      case (3):
      if (is_data16)
         {
             /* EncodedInstructionDefinition {{[]
                                           ;D3 
                                           ;Just (ModrmDigit 3)
                                           ;Just RMBoth
                                           ;Nothing
                                           ;[]
                                           ;Just Op16
                                           ;Nothing}
                                          ;Prototype {protoMnemonic = "RCR", protoOperands = [OpRM16,OpCL]}
                                          ;[(EncModrm_rm,OperandReadWrite)
                                           ,(EncImplicit,OperandReadOnly)]
                                          ;64bit: True
                                          ;legacy: True
                                          ;Rotate 17 bits (CF, r/m16) right CL times.} */
             
             ERASM_DECODER_DO_ACTION (1,
                                      Rcr,
                                      Just<OpRM16>,
                                      Just<EncModrm_rm>,
                                      Just<OpCL>,
                                      Just<EncImplicit>,
                                      Nothing,
                                      Nothing);
         }
      else
         {
             /* EncodedInstructionDefinition {{[]
                                           ;D3 
                                           ;Just (ModrmDigit 3)
                                           ;Just RMBoth
                                           ;Nothing
                                           ;[]
                                           ;Just Op32
                                           ;Nothing}
                                          ;Prototype {protoMnemonic = "RCR", protoOperands = [OpRM32,OpCL]}
                                          ;[(EncModrm_rm,OperandReadWrite)
                                           ,(EncImplicit,OperandReadOnly)]
                                          ;64bit: True
                                          ;legacy: True
                                          ;Rotate 33 bits (CF, r/m32) right CL times.} */
             
             ERASM_DECODER_DO_ACTION (1,
                                      Rcr,
                                      Just<OpRM32>,
                                      Just<EncModrm_rm>,
                                      Just<OpCL>,
                                      Just<EncImplicit>,
                                      Nothing,
                                      Nothing);
         }
      case (4):
      if (is_data16)
         {
             /* EncodedInstructionDefinition {{[]
                                           ;D3 
                                           ;Just (ModrmDigit 4)
                                           ;Just RMBoth
                                           ;Nothing
                                           ;[]
                                           ;Just Op16
                                           ;Nothing}
                                          ;Prototype {protoMnemonic = "SAL", protoOperands = [OpRM16,OpCL]}
                                          ;[(EncModrm_rm,OperandReadWrite)
                                           ,(EncImplicit,OperandReadOnly)]
                                          ;64bit: True
                                          ;legacy: True
                                          ;Multiply r/m16 by 2, CL times.} */
             
             ERASM_DECODER_DO_ACTION (1,
                                      Sal,
                                      Just<OpRM16>,
                                      Just<EncModrm_rm>,
                                      Just<OpCL>,
                                      Just<EncImplicit>,
                                      Nothing,
                                      Nothing);
         }
      else
         {
             /* EncodedInstructionDefinition {{[]
                                           ;D3 
                                           ;Just (ModrmDigit 4)
                                           ;Just RMBoth
                                           ;Nothing
                                           ;[]
                                           ;Just Op32
                                           ;Nothing}
                                          ;Prototype {protoMnemonic = "SAL", protoOperands = [OpRM32,OpCL]}
                                          ;[(EncModrm_rm,OperandReadWrite)
                                           ,(EncImplicit,OperandReadOnly)]
                                          ;64bit: True
                                          ;legacy: True
                                          ;Multiply r/m32 by 2, CL times.} */
             
             ERASM_DECODER_DO_ACTION (1,
                                      Sal,
                                      Just<OpRM32>,
                                      Just<EncModrm_rm>,
                                      Just<OpCL>,
                                      Just<EncImplicit>,
                                      Nothing,
                                      Nothing);
         }
      case (5):
      if (is_data16)
         {
             /* EncodedInstructionDefinition {{[]
                                           ;D3 
                                           ;Just (ModrmDigit 5)
                                           ;Just RMBoth
                                           ;Nothing
                                           ;[]
                                           ;Just Op16
                                           ;Nothing}
                                          ;Prototype {protoMnemonic = "SHR", protoOperands = [OpRM16,OpCL]}
                                          ;[(EncModrm_rm,OperandReadWrite)
                                           ,(EncImplicit,OperandReadOnly)]
                                          ;64bit: True
                                          ;legacy: True
                                          ;Unsigned divide r/m16 by 2, CL times} */
             
             ERASM_DECODER_DO_ACTION (1,
                                      Shr,
                                      Just<OpRM16>,
                                      Just<EncModrm_rm>,
                                      Just<OpCL>,
                                      Just<EncImplicit>,
                                      Nothing,
                                      Nothing);
         }
      else
         {
             /* EncodedInstructionDefinition {{[]
                                           ;D3 
                                           ;Just (ModrmDigit 5)
                                           ;Just RMBoth
                                           ;Nothing
                                           ;[]
                                           ;Just Op32
                                           ;Nothing}
                                          ;Prototype {protoMnemonic = "SHR", protoOperands = [OpRM32,OpCL]}
                                          ;[(EncModrm_rm,OperandReadWrite)
                                           ,(EncImplicit,OperandReadOnly)]
                                          ;64bit: True
                                          ;legacy: True
                                          ;Unsigned divide r/m32 by 2, CL times.} */
             
             ERASM_DECODER_DO_ACTION (1,
                                      Shr,
                                      Just<OpRM32>,
                                      Just<EncModrm_rm>,
                                      Just<OpCL>,
                                      Just<EncImplicit>,
                                      Nothing,
                                      Nothing);
         }
      case (7):
      if (is_data16)
         {
             /* EncodedInstructionDefinition {{[]
                                           ;D3 
                                           ;Just (ModrmDigit 7)
                                           ;Just RMBoth
                                           ;Nothing
                                           ;[]
                                           ;Just Op16
                                           ;Nothing}
                                          ;Prototype {protoMnemonic = "SAR", protoOperands = [OpRM16,OpCL]}
                                          ;[(EncModrm_rm,OperandReadWrite)
                                           ,(EncImplicit,OperandReadOnly)]
                                          ;64bit: True
                                          ;legacy: True
                                          ;Signed divide* r/m16 by 2, CL times.} */
             
             ERASM_DECODER_DO_ACTION (1,
                                      Sar,
                                      Just<OpRM16>,
                                      Just<EncModrm_rm>,
                                      Just<OpCL>,
                                      Just<EncImplicit>,
                                      Nothing,
                                      Nothing);
         }
      else
         {
             /* EncodedInstructionDefinition {{[]
                                           ;D3 
                                           ;Just (ModrmDigit 7)
                                           ;Just RMBoth
                                           ;Nothing
                                           ;[]
                                           ;Just Op32
                                           ;Nothing}
                                          ;Prototype {protoMnemonic = "SAR", protoOperands = [OpRM32,OpCL]}
                                          ;[(EncModrm_rm,OperandReadWrite)
                                           ,(EncImplicit,OperandReadOnly)]
                                          ;64bit: True
                                          ;legacy: True
                                          ;Signed divide* r/m32 by 2, CL times.} */
             
             ERASM_DECODER_DO_ACTION (1,
                                      Sar,
                                      Just<OpRM32>,
                                      Just<EncModrm_rm>,
                                      Just<OpCL>,
                                      Just<EncImplicit>,
                                      Nothing,
                                      Nothing);
         }
      
   }
   case (0xd4):
   switch (*p++) {
      case (0xa):
      {
          /* EncodedInstructionDefinition {{[]
                                        ;D4 0A 
                                        ;Nothing
                                        ;Nothing
                                        ;Nothing
                                        ;[]
                                        ;Nothing
                                        ;Nothing}
                                       ;Prototype {protoMnemonic = "AAM", protoOperands = []}
                                       ;[]
                                       ;64bit: False
                                       ;legacy: True
                                       ;ASCII adjust AX after multiply.} */
          
          ERASM_DECODER_DO_ACTION (2,
                                   Aam,
                                   Nothing,
                                   Nothing,
                                   Nothing,
                                   Nothing,
                                   Nothing,
                                   Nothing);
      }
      default:
      {
          p--;
          {
              /* EncodedInstructionDefinition {{[]
                                            ;D4 
                                            ;Nothing
                                            ;Nothing
                                            ;Nothing
                                            ;[IMM_IB]
                                            ;Nothing
                                            ;Nothing}
                                           ;Prototype {protoMnemonic = "AAM", protoOperands = [OpIMM8]}
                                           ;[(EncIMM,OperandReadWrite)]
                                           ;64bit: False
                                           ;legacy: True
                                           ;Adjust AX after multiply to number base imm8.} */
              
              ERASM_DECODER_DO_ACTION (1,
                                       Aam,
                                       Just<OpIMM8>,
                                       Just<EncIMM>,
                                       Nothing,
                                       Nothing,
                                       Nothing,
                                       Nothing);
          }
      }
   }
   case (0xd5):
   switch (*p++) {
      case (0xa):
      {
          /* EncodedInstructionDefinition {{[]
                                        ;D5 0A 
                                        ;Nothing
                                        ;Nothing
                                        ;Nothing
                                        ;[]
                                        ;Nothing
                                        ;Nothing}
                                       ;Prototype {protoMnemonic = "AAD", protoOperands = []}
                                       ;[]
                                       ;64bit: False
                                       ;legacy: True
                                       ;ASCII adjust AX before division.} */
          
          ERASM_DECODER_DO_ACTION (2,
                                   Aad,
                                   Nothing,
                                   Nothing,
                                   Nothing,
                                   Nothing,
                                   Nothing,
                                   Nothing);
      }
      default:
      {
          p--;
          {
              /* EncodedInstructionDefinition {{[]
                                            ;D5 
                                            ;Nothing
                                            ;Nothing
                                            ;Nothing
                                            ;[IMM_IB]
                                            ;Nothing
                                            ;Nothing}
                                           ;Prototype {protoMnemonic = "AAD", protoOperands = [OpIMM8]}
                                           ;[(EncIMM,OperandReadWrite)]
                                           ;64bit: False
                                           ;legacy: True
                                           ;Adjust AX before division to number base imm8.} */
              
              ERASM_DECODER_DO_ACTION (1,
                                       Aad,
                                       Just<OpIMM8>,
                                       Just<EncIMM>,
                                       Nothing,
                                       Nothing,
                                       Nothing,
                                       Nothing);
          }
      }
   }
   case (0xd7):
   {
       /* EncodedInstructionDefinition {{[]
                                     ;D7 
                                     ;Nothing
                                     ;Nothing
                                     ;Nothing
                                     ;[]
                                     ;Nothing
                                     ;Nothing}
                                    ;Prototype {protoMnemonic = "XLAT", protoOperands = [OpM8_DS_BX_EBX_RBX]}
                                    ;[(EncDS_SI_ESI_RSI
                                      ,OperandReadOnly)]
                                    ;64bit: True
                                    ;legacy: True
                                    ;Set AL to memory byte DS:[(E)BX + unsigned AL].} */
       
       ERASM_DECODER_DO_ACTION (1,
                                Xlat,
                                Just<OpM8_DS_BX_EBX_RBX>,
                                Just<EncDS_SI_ESI_RSI>,
                                Nothing,
                                Nothing,
                                Nothing,
                                Nothing);
   }
   case (0xd8):
   if (modrm_mod3 (p))
      switch (modrm_reg_op (p)) {
         case (0):
         {
             /* EncodedInstructionDefinition {{[]
                                           ;D8 C0 
                                           ;Nothing
                                           ;Nothing
                                           ;Just RaddI
                                           ;[]
                                           ;Nothing
                                           ;Nothing}
                                          ;Prototype {protoMnemonic = "FADD", protoOperands = [OpST0,OpST]}
                                          ;[(EncImplicit,OperandReadWrite)
                                           ,(EncReg,OperandReadWrite)]
                                          ;64bit: True
                                          ;legacy: True
                                          ;Add ST(0) to ST(i) and store result in ST(0).} */
             
             ERASM_DECODER_DO_ACTION (2,
                                      Fadd,
                                      Just<OpST0>,
                                      Just<EncImplicit>,
                                      Just<OpST>,
                                      Just<EncReg>,
                                      Nothing,
                                      Nothing);
         }
         case (1):
         {
             /* EncodedInstructionDefinition {{[]
                                           ;D8 C8 
                                           ;Nothing
                                           ;Nothing
                                           ;Just RaddI
                                           ;[]
                                           ;Nothing
                                           ;Nothing}
                                          ;Prototype {protoMnemonic = "FMUL", protoOperands = [OpST0,OpST]}
                                          ;[(EncImplicit,OperandReadWrite)
                                           ,(EncReg,OperandReadWrite)]
                                          ;64bit: True
                                          ;legacy: True
                                          ;Multiply ST(0) by ST(i) and store result in ST(0).} */
             
             ERASM_DECODER_DO_ACTION (2,
                                      Fmul,
                                      Just<OpST0>,
                                      Just<EncImplicit>,
                                      Just<OpST>,
                                      Just<EncReg>,
                                      Nothing,
                                      Nothing);
         }
         case (2):
         if (modrm_rm (p) == 0x1)
            {
                /* EncodedInstructionDefinition {{[]
                                              ;D8 D1 
                                              ;Nothing
                                              ;Nothing
                                              ;Nothing
                                              ;[]
                                              ;Nothing
                                              ;Nothing}
                                             ;Prototype {protoMnemonic = "FCOM", protoOperands = []}
                                             ;[]
                                             ;64bit: True
                                             ;legacy: True
                                             ;Compare ST(0) with ST(1).} */
                
                ERASM_DECODER_DO_ACTION (2,
                                         Fcom,
                                         Nothing,
                                         Nothing,
                                         Nothing,
                                         Nothing,
                                         Nothing,
                                         Nothing);
            }
         else
            {
                /* EncodedInstructionDefinition {{[]
                                              ;D8 D0 
                                              ;Nothing
                                              ;Nothing
                                              ;Just RaddI
                                              ;[]
                                              ;Nothing
                                              ;Nothing}
                                             ;Prototype {protoMnemonic = "FCOM", protoOperands = [OpST]}
                                             ;[(EncReg,OperandReadWrite)]
                                             ;64bit: True
                                             ;legacy: True
                                             ;Compare ST(0) with ST(i).} */
                
                ERASM_DECODER_DO_ACTION (2,
                                         Fcom,
                                         Just<OpST>,
                                         Just<EncReg>,
                                         Nothing,
                                         Nothing,
                                         Nothing,
                                         Nothing);
            }
         case (3):
         if (modrm_rm (p) == 0x1)
            {
                /* EncodedInstructionDefinition {{[]
                                              ;D8 D9 
                                              ;Nothing
                                              ;Nothing
                                              ;Nothing
                                              ;[]
                                              ;Nothing
                                              ;Nothing}
                                             ;Prototype {protoMnemonic = "FCOMP", protoOperands = []}
                                             ;[]
                                             ;64bit: True
                                             ;legacy: True
                                             ;Compare ST(0) with ST(1) and pop register stack.} */
                
                ERASM_DECODER_DO_ACTION (2,
                                         Fcomp,
                                         Nothing,
                                         Nothing,
                                         Nothing,
                                         Nothing,
                                         Nothing,
                                         Nothing);
            }
         else
            {
                /* EncodedInstructionDefinition {{[]
                                              ;D8 D8 
                                              ;Nothing
                                              ;Nothing
                                              ;Just RaddI
                                              ;[]
                                              ;Nothing
                                              ;Nothing}
                                             ;Prototype {protoMnemonic = "FCOMP", protoOperands = [OpST]}
                                             ;[(EncReg,OperandReadWrite)]
                                             ;64bit: True
                                             ;legacy: True
                                             ;Compare ST(0) with ST(i) and pop register stack.} */
                
                ERASM_DECODER_DO_ACTION (2,
                                         Fcomp,
                                         Just<OpST>,
                                         Just<EncReg>,
                                         Nothing,
                                         Nothing,
                                         Nothing,
                                         Nothing);
            }
         case (4):
         {
             /* EncodedInstructionDefinition {{[]
                                           ;D8 E0 
                                           ;Nothing
                                           ;Nothing
                                           ;Just RaddI
                                           ;[]
                                           ;Nothing
                                           ;Nothing}
                                          ;Prototype {protoMnemonic = "FSUB", protoOperands = [OpST0,OpST]}
                                          ;[(EncImplicit,OperandReadWrite)
                                           ,(EncReg,OperandReadWrite)]
                                          ;64bit: True
                                          ;legacy: True
                                          ;Subtract ST(i) from ST(0) and store result in ST(0).} */
             
             ERASM_DECODER_DO_ACTION (2,
                                      Fsub,
                                      Just<OpST0>,
                                      Just<EncImplicit>,
                                      Just<OpST>,
                                      Just<EncReg>,
                                      Nothing,
                                      Nothing);
         }
         case (5):
         {
             /* EncodedInstructionDefinition {{[]
                                           ;D8 E8 
                                           ;Nothing
                                           ;Nothing
                                           ;Just RaddI
                                           ;[]
                                           ;Nothing
                                           ;Nothing}
                                          ;Prototype {protoMnemonic = "FSUBR", protoOperands = [OpST0,OpST]}
                                          ;[(EncImplicit,OperandReadWrite)
                                           ,(EncReg,OperandReadWrite)]
                                          ;64bit: True
                                          ;legacy: True
                                          ;Subtract ST(0) from ST(i) and store result in ST(0).} */
             
             ERASM_DECODER_DO_ACTION (2,
                                      Fsubr,
                                      Just<OpST0>,
                                      Just<EncImplicit>,
                                      Just<OpST>,
                                      Just<EncReg>,
                                      Nothing,
                                      Nothing);
         }
         case (6):
         {
             /* EncodedInstructionDefinition {{[]
                                           ;D8 F0 
                                           ;Nothing
                                           ;Nothing
                                           ;Just RaddI
                                           ;[]
                                           ;Nothing
                                           ;Nothing}
                                          ;Prototype {protoMnemonic = "FDIV", protoOperands = [OpST0,OpST]}
                                          ;[(EncImplicit,OperandReadWrite)
                                           ,(EncReg,OperandReadWrite)]
                                          ;64bit: True
                                          ;legacy: True
                                          ;Divide ST(0) by ST(i) and store result in ST(0).} */
             
             ERASM_DECODER_DO_ACTION (2,
                                      Fdiv,
                                      Just<OpST0>,
                                      Just<EncImplicit>,
                                      Just<OpST>,
                                      Just<EncReg>,
                                      Nothing,
                                      Nothing);
         }
         case (7):
         {
             /* EncodedInstructionDefinition {{[]
                                           ;D8 F8 
                                           ;Nothing
                                           ;Nothing
                                           ;Just RaddI
                                           ;[]
                                           ;Nothing
                                           ;Nothing}
                                          ;Prototype {protoMnemonic = "FDIVR", protoOperands = [OpST0,OpST]}
                                          ;[(EncImplicit,OperandReadWrite)
                                           ,(EncReg,OperandReadWrite)]
                                          ;64bit: True
                                          ;legacy: True
                                          ;Divide ST(i) by ST(0) and store result in ST(0).} */
             
             ERASM_DECODER_DO_ACTION (2,
                                      Fdivr,
                                      Just<OpST0>,
                                      Just<EncImplicit>,
                                      Just<OpST>,
                                      Just<EncReg>,
                                      Nothing,
                                      Nothing);
         }
         
      }
   else
      switch (modrm_reg_op (p)) {
         case (0):
         {
             /* EncodedInstructionDefinition {{[]
                                           ;D8 
                                           ;Just (ModrmDigit 0)
                                           ;Just RMMemOnly
                                           ;Nothing
                                           ;[]
                                           ;Nothing
                                           ;Nothing}
                                          ;Prototype {protoMnemonic = "FADD", protoOperands = [OpM32FP]}
                                          ;[(EncModrm_rm
                                            ,OperandReadWrite)]
                                          ;64bit: True
                                          ;legacy: True
                                          ;Add m32fp to ST(0) and store result in ST(0).} */
             
             ERASM_DECODER_DO_ACTION (1,
                                      Fadd,
                                      Just<OpM32FP>,
                                      Just<EncModrm_rm_mem>,
                                      Nothing,
                                      Nothing,
                                      Nothing,
                                      Nothing);
         }
         case (1):
         {
             /* EncodedInstructionDefinition {{[]
                                           ;D8 
                                           ;Just (ModrmDigit 1)
                                           ;Just RMMemOnly
                                           ;Nothing
                                           ;[]
                                           ;Nothing
                                           ;Nothing}
                                          ;Prototype {protoMnemonic = "FMUL", protoOperands = [OpM32FP]}
                                          ;[(EncModrm_rm
                                            ,OperandReadWrite)]
                                          ;64bit: True
                                          ;legacy: True
                                          ;Multiply ST(0) by m32fp and store result in ST(0).} */
             
             ERASM_DECODER_DO_ACTION (1,
                                      Fmul,
                                      Just<OpM32FP>,
                                      Just<EncModrm_rm_mem>,
                                      Nothing,
                                      Nothing,
                                      Nothing,
                                      Nothing);
         }
         case (2):
         {
             /* EncodedInstructionDefinition {{[]
                                           ;D8 
                                           ;Just (ModrmDigit 2)
                                           ;Just RMMemOnly
                                           ;Nothing
                                           ;[]
                                           ;Nothing
                                           ;Nothing}
                                          ;Prototype {protoMnemonic = "FCOM", protoOperands = [OpM32FP]}
                                          ;[(EncModrm_rm
                                            ,OperandReadWrite)]
                                          ;64bit: True
                                          ;legacy: True
                                          ;Compare ST(0) with m32fp.} */
             
             ERASM_DECODER_DO_ACTION (1,
                                      Fcom,
                                      Just<OpM32FP>,
                                      Just<EncModrm_rm_mem>,
                                      Nothing,
                                      Nothing,
                                      Nothing,
                                      Nothing);
         }
         case (3):
         {
             /* EncodedInstructionDefinition {{[]
                                           ;D8 
                                           ;Just (ModrmDigit 3)
                                           ;Just RMMemOnly
                                           ;Nothing
                                           ;[]
                                           ;Nothing
                                           ;Nothing}
                                          ;Prototype {protoMnemonic = "FCOMP", protoOperands = [OpM32FP]}
                                          ;[(EncModrm_rm
                                            ,OperandReadWrite)]
                                          ;64bit: True
                                          ;legacy: True
                                          ;Compare ST(0) with m32fp and pop register stack.} */
             
             ERASM_DECODER_DO_ACTION (1,
                                      Fcomp,
                                      Just<OpM32FP>,
                                      Just<EncModrm_rm_mem>,
                                      Nothing,
                                      Nothing,
                                      Nothing,
                                      Nothing);
         }
         case (4):
         {
             /* EncodedInstructionDefinition {{[]
                                           ;D8 
                                           ;Just (ModrmDigit 4)
                                           ;Just RMMemOnly
                                           ;Nothing
                                           ;[]
                                           ;Nothing
                                           ;Nothing}
                                          ;Prototype {protoMnemonic = "FSUB", protoOperands = [OpM32FP]}
                                          ;[(EncModrm_rm
                                            ,OperandReadWrite)]
                                          ;64bit: True
                                          ;legacy: True
                                          ;Subtract m32fp from ST(0) and store result in ST(0).} */
             
             ERASM_DECODER_DO_ACTION (1,
                                      Fsub,
                                      Just<OpM32FP>,
                                      Just<EncModrm_rm_mem>,
                                      Nothing,
                                      Nothing,
                                      Nothing,
                                      Nothing);
         }
         case (5):
         {
             /* EncodedInstructionDefinition {{[]
                                           ;D8 
                                           ;Just (ModrmDigit 5)
                                           ;Just RMMemOnly
                                           ;Nothing
                                           ;[]
                                           ;Nothing
                                           ;Nothing}
                                          ;Prototype {protoMnemonic = "FSUBR", protoOperands = [OpM32FP]}
                                          ;[(EncModrm_rm
                                            ,OperandReadWrite)]
                                          ;64bit: True
                                          ;legacy: True
                                          ;Subtract ST(0) from m32fp and store result in ST(0).} */
             
             ERASM_DECODER_DO_ACTION (1,
                                      Fsubr,
                                      Just<OpM32FP>,
                                      Just<EncModrm_rm_mem>,
                                      Nothing,
                                      Nothing,
                                      Nothing,
                                      Nothing);
         }
         case (6):
         {
             /* EncodedInstructionDefinition {{[]
                                           ;D8 
                                           ;Just (ModrmDigit 6)
                                           ;Just RMMemOnly
                                           ;Nothing
                                           ;[]
                                           ;Nothing
                                           ;Nothing}
                                          ;Prototype {protoMnemonic = "FDIV", protoOperands = [OpM32FP]}
                                          ;[(EncModrm_rm
                                            ,OperandReadWrite)]
                                          ;64bit: True
                                          ;legacy: True
                                          ;Divide ST(0) by m32fp and store result in ST(0).} */
             
             ERASM_DECODER_DO_ACTION (1,
                                      Fdiv,
                                      Just<OpM32FP>,
                                      Just<EncModrm_rm_mem>,
                                      Nothing,
                                      Nothing,
                                      Nothing,
                                      Nothing);
         }
         case (7):
         {
             /* EncodedInstructionDefinition {{[]
                                           ;D8 
                                           ;Just (ModrmDigit 7)
                                           ;Just RMMemOnly
                                           ;Nothing
                                           ;[]
                                           ;Nothing
                                           ;Nothing}
                                          ;Prototype {protoMnemonic = "FDIVR", protoOperands = [OpM32FP]}
                                          ;[(EncModrm_rm
                                            ,OperandReadWrite)]
                                          ;64bit: True
                                          ;legacy: True
                                          ;Divide m32fp by ST(0) and store result in ST(0).} */
             
             ERASM_DECODER_DO_ACTION (1,
                                      Fdivr,
                                      Just<OpM32FP>,
                                      Just<EncModrm_rm_mem>,
                                      Nothing,
                                      Nothing,
                                      Nothing,
                                      Nothing);
         }
         
      }
   case (0xd9):
   if (modrm_mod3 (p))
      switch (modrm_reg_op (p)) {
         case (0):
         {
             /* EncodedInstructionDefinition {{[]
                                           ;D9 C0 
                                           ;Nothing
                                           ;Nothing
                                           ;Just RaddI
                                           ;[]
                                           ;Nothing
                                           ;Nothing}
                                          ;Prototype {protoMnemonic = "FLD", protoOperands = [OpST]}
                                          ;[(EncReg,OperandReadWrite)]
                                          ;64bit: True
                                          ;legacy: True
                                          ;Push ST(i) onto the FPU register stack.} */
             
             ERASM_DECODER_DO_ACTION (2,
                                      Fld,
                                      Just<OpST>,
                                      Just<EncReg>,
                                      Nothing,
                                      Nothing,
                                      Nothing,
                                      Nothing);
         }
         case (1):
         if (modrm_rm (p) == 0x1)
            {
                /* EncodedInstructionDefinition {{[]
                                              ;D9 C9 
                                              ;Nothing
                                              ;Nothing
                                              ;Nothing
                                              ;[]
                                              ;Nothing
                                              ;Nothing}
                                             ;Prototype {protoMnemonic = "FXCH", protoOperands = []}
                                             ;[]
                                             ;64bit: True
                                             ;legacy: True
                                             ;Exchange the contents of ST(0) and ST(1).} */
                
                ERASM_DECODER_DO_ACTION (2,
                                         Fxch,
                                         Nothing,
                                         Nothing,
                                         Nothing,
                                         Nothing,
                                         Nothing,
                                         Nothing);
            }
         else
            {
                /* EncodedInstructionDefinition {{[]
                                              ;D9 C8 
                                              ;Nothing
                                              ;Nothing
                                              ;Just RaddI
                                              ;[]
                                              ;Nothing
                                              ;Nothing}
                                             ;Prototype {protoMnemonic = "FXCH", protoOperands = [OpST]}
                                             ;[(EncReg,OperandReadWrite)]
                                             ;64bit: True
                                             ;legacy: True
                                             ;Exchange the contents of ST(0) and ST(i).} */
                
                ERASM_DECODER_DO_ACTION (2,
                                         Fxch,
                                         Just<OpST>,
                                         Just<EncReg>,
                                         Nothing,
                                         Nothing,
                                         Nothing,
                                         Nothing);
            }
         case (2):
         switch (modrm_rm (p)) {
            case (0):
            {
                /* EncodedInstructionDefinition {{[]
                                              ;D9 D0 
                                              ;Nothing
                                              ;Nothing
                                              ;Nothing
                                              ;[]
                                              ;Nothing
                                              ;Nothing}
                                             ;Prototype {protoMnemonic = "FNOP", protoOperands = []}
                                             ;[]
                                             ;64bit: True
                                             ;legacy: True
                                             ;No operation is performed.} */
                
                ERASM_DECODER_DO_ACTION (2,
                                         Fnop,
                                         Nothing,
                                         Nothing,
                                         Nothing,
                                         Nothing,
                                         Nothing,
                                         Nothing);
            }
            default:
            goto decode_error;
         }
         case (4):
         switch (modrm_rm (p)) {
            case (0):
            {
                /* EncodedInstructionDefinition {{[]
                                              ;D9 E0 
                                              ;Nothing
                                              ;Nothing
                                              ;Nothing
                                              ;[]
                                              ;Nothing
                                              ;Nothing}
                                             ;Prototype {protoMnemonic = "FCHS", protoOperands = []}
                                             ;[]
                                             ;64bit: True
                                             ;legacy: True
                                             ;Complements sign of ST(0).} */
                
                ERASM_DECODER_DO_ACTION (2,
                                         Fchs,
                                         Nothing,
                                         Nothing,
                                         Nothing,
                                         Nothing,
                                         Nothing,
                                         Nothing);
            }
            case (1):
            {
                /* EncodedInstructionDefinition {{[]
                                              ;D9 E1 
                                              ;Nothing
                                              ;Nothing
                                              ;Nothing
                                              ;[]
                                              ;Nothing
                                              ;Nothing}
                                             ;Prototype {protoMnemonic = "FABS", protoOperands = []}
                                             ;[]
                                             ;64bit: True
                                             ;legacy: True
                                             ;Replace ST with its absolute value.} */
                
                ERASM_DECODER_DO_ACTION (2,
                                         Fabs,
                                         Nothing,
                                         Nothing,
                                         Nothing,
                                         Nothing,
                                         Nothing,
                                         Nothing);
            }
            case (4):
            {
                /* EncodedInstructionDefinition {{[]
                                              ;D9 E4 
                                              ;Nothing
                                              ;Nothing
                                              ;Nothing
                                              ;[]
                                              ;Nothing
                                              ;Nothing}
                                             ;Prototype {protoMnemonic = "FTST", protoOperands = []}
                                             ;[]
                                             ;64bit: True
                                             ;legacy: True
                                             ;Compare ST(0) with 0.0.} */
                
                ERASM_DECODER_DO_ACTION (2,
                                         Ftst,
                                         Nothing,
                                         Nothing,
                                         Nothing,
                                         Nothing,
                                         Nothing,
                                         Nothing);
            }
            case (5):
            {
                /* EncodedInstructionDefinition {{[]
                                              ;D9 E5 
                                              ;Nothing
                                              ;Nothing
                                              ;Nothing
                                              ;[]
                                              ;Nothing
                                              ;Nothing}
                                             ;Prototype {protoMnemonic = "FXAM", protoOperands = []}
                                             ;[]
                                             ;64bit: True
                                             ;legacy: True
                                             ;Classify value or number in ST(0).} */
                
                ERASM_DECODER_DO_ACTION (2,
                                         Fxam,
                                         Nothing,
                                         Nothing,
                                         Nothing,
                                         Nothing,
                                         Nothing,
                                         Nothing);
            }
            default:
            goto decode_error;
         }
         case (5):
         switch (modrm_rm (p)) {
            case (0):
            {
                /* EncodedInstructionDefinition {{[]
                                              ;D9 E8 
                                              ;Nothing
                                              ;Nothing
                                              ;Nothing
                                              ;[]
                                              ;Nothing
                                              ;Nothing}
                                             ;Prototype {protoMnemonic = "FLD1", protoOperands = []}
                                             ;[]
                                             ;64bit: True
                                             ;legacy: True
                                             ;Push +1.0 onto the FPU register stack.} */
                
                ERASM_DECODER_DO_ACTION (2,
                                         Fld1,
                                         Nothing,
                                         Nothing,
                                         Nothing,
                                         Nothing,
                                         Nothing,
                                         Nothing);
            }
            case (1):
            {
                /* EncodedInstructionDefinition {{[]
                                              ;D9 E9 
                                              ;Nothing
                                              ;Nothing
                                              ;Nothing
                                              ;[]
                                              ;Nothing
                                              ;Nothing}
                                             ;Prototype {protoMnemonic = "FLDL2T", protoOperands = []}
                                             ;[]
                                             ;64bit: True
                                             ;legacy: True
                                             ;Push log210 onto the FPU register stack.} */
                
                ERASM_DECODER_DO_ACTION (2,
                                         Fldl2t,
                                         Nothing,
                                         Nothing,
                                         Nothing,
                                         Nothing,
                                         Nothing,
                                         Nothing);
            }
            case (2):
            {
                /* EncodedInstructionDefinition {{[]
                                              ;D9 EA 
                                              ;Nothing
                                              ;Nothing
                                              ;Nothing
                                              ;[]
                                              ;Nothing
                                              ;Nothing}
                                             ;Prototype {protoMnemonic = "FLDL2E", protoOperands = []}
                                             ;[]
                                             ;64bit: True
                                             ;legacy: True
                                             ;Push log2e onto the FPU register stack.} */
                
                ERASM_DECODER_DO_ACTION (2,
                                         Fldl2e,
                                         Nothing,
                                         Nothing,
                                         Nothing,
                                         Nothing,
                                         Nothing,
                                         Nothing);
            }
            case (3):
            {
                /* EncodedInstructionDefinition {{[]
                                              ;D9 EB 
                                              ;Nothing
                                              ;Nothing
                                              ;Nothing
                                              ;[]
                                              ;Nothing
                                              ;Nothing}
                                             ;Prototype {protoMnemonic = "FLDPI", protoOperands = []}
                                             ;[]
                                             ;64bit: True
                                             ;legacy: True
                                             ;Push π onto the FPU register stack.} */
                
                ERASM_DECODER_DO_ACTION (2,
                                         Fldpi,
                                         Nothing,
                                         Nothing,
                                         Nothing,
                                         Nothing,
                                         Nothing,
                                         Nothing);
            }
            case (4):
            {
                /* EncodedInstructionDefinition {{[]
                                              ;D9 EC 
                                              ;Nothing
                                              ;Nothing
                                              ;Nothing
                                              ;[]
                                              ;Nothing
                                              ;Nothing}
                                             ;Prototype {protoMnemonic = "FLDLG2", protoOperands = []}
                                             ;[]
                                             ;64bit: True
                                             ;legacy: True
                                             ;Push log102 onto the FPU register stack.} */
                
                ERASM_DECODER_DO_ACTION (2,
                                         Fldlg2,
                                         Nothing,
                                         Nothing,
                                         Nothing,
                                         Nothing,
                                         Nothing,
                                         Nothing);
            }
            case (5):
            {
                /* EncodedInstructionDefinition {{[]
                                              ;D9 ED 
                                              ;Nothing
                                              ;Nothing
                                              ;Nothing
                                              ;[]
                                              ;Nothing
                                              ;Nothing}
                                             ;Prototype {protoMnemonic = "FLDLN2", protoOperands = []}
                                             ;[]
                                             ;64bit: True
                                             ;legacy: True
                                             ;Push loge2 onto the FPU register stack.} */
                
                ERASM_DECODER_DO_ACTION (2,
                                         Fldln2,
                                         Nothing,
                                         Nothing,
                                         Nothing,
                                         Nothing,
                                         Nothing,
                                         Nothing);
            }
            case (6):
            {
                /* EncodedInstructionDefinition {{[]
                                              ;D9 EE 
                                              ;Nothing
                                              ;Nothing
                                              ;Nothing
                                              ;[]
                                              ;Nothing
                                              ;Nothing}
                                             ;Prototype {protoMnemonic = "FLDZ", protoOperands = []}
                                             ;[]
                                             ;64bit: True
                                             ;legacy: True
                                             ;Push +0.0 onto the FPU register stack.} */
                
                ERASM_DECODER_DO_ACTION (2,
                                         Fldz,
                                         Nothing,
                                         Nothing,
                                         Nothing,
                                         Nothing,
                                         Nothing,
                                         Nothing);
            }
            default:
            goto decode_error;
         }
         case (6):
         switch (modrm_rm (p)) {
            case (0):
            {
                /* EncodedInstructionDefinition {{[]
                                              ;D9 F0 
                                              ;Nothing
                                              ;Nothing
                                              ;Nothing
                                              ;[]
                                              ;Nothing
                                              ;Nothing}
                                             ;Prototype {protoMnemonic = "F2XM1", protoOperands = []}
                                             ;[]
                                             ;64bit: True
                                             ;legacy: True
                                             ;Replace ST(0) with (2ST(0) – 1).} */
                
                ERASM_DECODER_DO_ACTION (2,
                                         F2xm1,
                                         Nothing,
                                         Nothing,
                                         Nothing,
                                         Nothing,
                                         Nothing,
                                         Nothing);
            }
            case (1):
            {
                /* EncodedInstructionDefinition {{[]
                                              ;D9 F1 
                                              ;Nothing
                                              ;Nothing
                                              ;Nothing
                                              ;[]
                                              ;Nothing
                                              ;Nothing}
                                             ;Prototype {protoMnemonic = "FYL2X", protoOperands = []}
                                             ;[]
                                             ;64bit: True
                                             ;legacy: True
                                             ;Replace ST(1) with (ST(1) ∗ log2ST(0)) and pop the register stack.} */
                
                ERASM_DECODER_DO_ACTION (2,
                                         Fyl2x,
                                         Nothing,
                                         Nothing,
                                         Nothing,
                                         Nothing,
                                         Nothing,
                                         Nothing);
            }
            case (2):
            {
                /* EncodedInstructionDefinition {{[]
                                              ;D9 F2 
                                              ;Nothing
                                              ;Nothing
                                              ;Nothing
                                              ;[]
                                              ;Nothing
                                              ;Nothing}
                                             ;Prototype {protoMnemonic = "FPTAN", protoOperands = []}
                                             ;[]
                                             ;64bit: True
                                             ;legacy: True
                                             ;Replace ST(0) with its tangent and push 1 onto the FPU stack.} */
                
                ERASM_DECODER_DO_ACTION (2,
                                         Fptan,
                                         Nothing,
                                         Nothing,
                                         Nothing,
                                         Nothing,
                                         Nothing,
                                         Nothing);
            }
            case (3):
            {
                /* EncodedInstructionDefinition {{[]
                                              ;D9 F3 
                                              ;Nothing
                                              ;Nothing
                                              ;Nothing
                                              ;[]
                                              ;Nothing
                                              ;Nothing}
                                             ;Prototype {protoMnemonic = "FPATAN", protoOperands = []}
                                             ;[]
                                             ;64bit: True
                                             ;legacy: True
                                             ;Replace ST(1) with arctan(ST(1)/ST(0)) and pop the register stack.} */
                
                ERASM_DECODER_DO_ACTION (2,
                                         Fpatan,
                                         Nothing,
                                         Nothing,
                                         Nothing,
                                         Nothing,
                                         Nothing,
                                         Nothing);
            }
            case (4):
            {
                /* EncodedInstructionDefinition {{[]
                                              ;D9 F4 
                                              ;Nothing
                                              ;Nothing
                                              ;Nothing
                                              ;[]
                                              ;Nothing
                                              ;Nothing}
                                             ;Prototype {protoMnemonic = "FXTRACT", protoOperands = []}
                                             ;[]
                                             ;64bit: True
                                             ;legacy: True
                                             ;Separate value in ST(0) into exponent and significand, store exponent in ST(0), and push the significand onto the register stack.} */
                
                ERASM_DECODER_DO_ACTION (2,
                                         Fxtract,
                                         Nothing,
                                         Nothing,
                                         Nothing,
                                         Nothing,
                                         Nothing,
                                         Nothing);
            }
            case (5):
            {
                /* EncodedInstructionDefinition {{[]
                                              ;D9 F5 
                                              ;Nothing
                                              ;Nothing
                                              ;Nothing
                                              ;[]
                                              ;Nothing
                                              ;Nothing}
                                             ;Prototype {protoMnemonic = "FPREM1", protoOperands = []}
                                             ;[]
                                             ;64bit: True
                                             ;legacy: True
                                             ;Replace ST(0) with the IEEE remainder obtained from dividing ST(0) by ST(1).} */
                
                ERASM_DECODER_DO_ACTION (2,
                                         Fprem1,
                                         Nothing,
                                         Nothing,
                                         Nothing,
                                         Nothing,
                                         Nothing,
                                         Nothing);
            }
            case (6):
            {
                /* EncodedInstructionDefinition {{[]
                                              ;D9 F6 
                                              ;Nothing
                                              ;Nothing
                                              ;Nothing
                                              ;[]
                                              ;Nothing
                                              ;Nothing}
                                             ;Prototype {protoMnemonic = "FDECSTP", protoOperands = []}
                                             ;[]
                                             ;64bit: True
                                             ;legacy: True
                                             ;Decrement TOP field in FPU status word.} */
                
                ERASM_DECODER_DO_ACTION (2,
                                         Fdecstp,
                                         Nothing,
                                         Nothing,
                                         Nothing,
                                         Nothing,
                                         Nothing,
                                         Nothing);
            }
            case (7):
            {
                /* EncodedInstructionDefinition {{[]
                                              ;D9 F7 
                                              ;Nothing
                                              ;Nothing
                                              ;Nothing
                                              ;[]
                                              ;Nothing
                                              ;Nothing}
                                             ;Prototype {protoMnemonic = "FINCSTP", protoOperands = []}
                                             ;[]
                                             ;64bit: True
                                             ;legacy: True
                                             ;Increment the TOP field in the FPU status register.} */
                
                ERASM_DECODER_DO_ACTION (2,
                                         Fincstp,
                                         Nothing,
                                         Nothing,
                                         Nothing,
                                         Nothing,
                                         Nothing,
                                         Nothing);
            }
            default:
            goto decode_error;
         }
         case (7):
         switch (modrm_rm (p)) {
            case (0):
            {
                /* EncodedInstructionDefinition {{[]
                                              ;D9 F8 
                                              ;Nothing
                                              ;Nothing
                                              ;Nothing
                                              ;[]
                                              ;Nothing
                                              ;Nothing}
                                             ;Prototype {protoMnemonic = "FPREM", protoOperands = []}
                                             ;[]
                                             ;64bit: True
                                             ;legacy: True
                                             ;Replace ST(0) with the remainder obtained from dividing ST(0) by ST(1).} */
                
                ERASM_DECODER_DO_ACTION (2,
                                         Fprem,
                                         Nothing,
                                         Nothing,
                                         Nothing,
                                         Nothing,
                                         Nothing,
                                         Nothing);
            }
            case (1):
            {
                /* EncodedInstructionDefinition {{[]
                                              ;D9 F9 
                                              ;Nothing
                                              ;Nothing
                                              ;Nothing
                                              ;[]
                                              ;Nothing
                                              ;Nothing}
                                             ;Prototype {protoMnemonic = "FYL2XP1", protoOperands = []}
                                             ;[]
                                             ;64bit: True
                                             ;legacy: True
                                             ;Replace ST(1) with ST(1) ∗ log2(ST(0) + 1.0) and pop the register stack.} */
                
                ERASM_DECODER_DO_ACTION (2,
                                         Fyl2xp1,
                                         Nothing,
                                         Nothing,
                                         Nothing,
                                         Nothing,
                                         Nothing,
                                         Nothing);
            }
            case (2):
            {
                /* EncodedInstructionDefinition {{[]
                                              ;D9 FA 
                                              ;Nothing
                                              ;Nothing
                                              ;Nothing
                                              ;[]
                                              ;Nothing
                                              ;Nothing}
                                             ;Prototype {protoMnemonic = "FSQRT", protoOperands = []}
                                             ;[]
                                             ;64bit: True
                                             ;legacy: True
                                             ;Computes square root of ST(0) and stores the result in ST(0).} */
                
                ERASM_DECODER_DO_ACTION (2,
                                         Fsqrt,
                                         Nothing,
                                         Nothing,
                                         Nothing,
                                         Nothing,
                                         Nothing,
                                         Nothing);
            }
            case (3):
            {
                /* EncodedInstructionDefinition {{[]
                                              ;D9 FB 
                                              ;Nothing
                                              ;Nothing
                                              ;Nothing
                                              ;[]
                                              ;Nothing
                                              ;Nothing}
                                             ;Prototype {protoMnemonic = "FSINCOS", protoOperands = []}
                                             ;[]
                                             ;64bit: True
                                             ;legacy: True
                                             ;Compute the sine and cosine of ST(0); replace ST(0) with the sine, and push the cosine onto the register stack.} */
                
                ERASM_DECODER_DO_ACTION (2,
                                         Fsincos,
                                         Nothing,
                                         Nothing,
                                         Nothing,
                                         Nothing,
                                         Nothing,
                                         Nothing);
            }
            case (4):
            {
                /* EncodedInstructionDefinition {{[]
                                              ;D9 FC 
                                              ;Nothing
                                              ;Nothing
                                              ;Nothing
                                              ;[]
                                              ;Nothing
                                              ;Nothing}
                                             ;Prototype {protoMnemonic = "FRNDINT", protoOperands = []}
                                             ;[]
                                             ;64bit: True
                                             ;legacy: True
                                             ;Round ST(0) to an integer.} */
                
                ERASM_DECODER_DO_ACTION (2,
                                         Frndint,
                                         Nothing,
                                         Nothing,
                                         Nothing,
                                         Nothing,
                                         Nothing,
                                         Nothing);
            }
            case (5):
            {
                /* EncodedInstructionDefinition {{[]
                                              ;D9 FD 
                                              ;Nothing
                                              ;Nothing
                                              ;Nothing
                                              ;[]
                                              ;Nothing
                                              ;Nothing}
                                             ;Prototype {protoMnemonic = "FSCALE", protoOperands = []}
                                             ;[]
                                             ;64bit: True
                                             ;legacy: True
                                             ;Scale ST(0) by ST(1).} */
                
                ERASM_DECODER_DO_ACTION (2,
                                         Fscale,
                                         Nothing,
                                         Nothing,
                                         Nothing,
                                         Nothing,
                                         Nothing,
                                         Nothing);
            }
            case (6):
            {
                /* EncodedInstructionDefinition {{[]
                                              ;D9 FE 
                                              ;Nothing
                                              ;Nothing
                                              ;Nothing
                                              ;[]
                                              ;Nothing
                                              ;Nothing}
                                             ;Prototype {protoMnemonic = "FSIN", protoOperands = []}
                                             ;[]
                                             ;64bit: True
                                             ;legacy: True
                                             ;Replace ST(0) with its sine.} */
                
                ERASM_DECODER_DO_ACTION (2,
                                         Fsin,
                                         Nothing,
                                         Nothing,
                                         Nothing,
                                         Nothing,
                                         Nothing,
                                         Nothing);
            }
            case (7):
            {
                /* EncodedInstructionDefinition {{[]
                                              ;D9 FF 
                                              ;Nothing
                                              ;Nothing
                                              ;Nothing
                                              ;[]
                                              ;Nothing
                                              ;Nothing}
                                             ;Prototype {protoMnemonic = "FCOS", protoOperands = []}
                                             ;[]
                                             ;64bit: True
                                             ;legacy: True
                                             ;Replace ST(0) with its cosine.} */
                
                ERASM_DECODER_DO_ACTION (2,
                                         Fcos,
                                         Nothing,
                                         Nothing,
                                         Nothing,
                                         Nothing,
                                         Nothing,
                                         Nothing);
            }
            default:
            goto decode_error;
         }
         
      }
   else
      switch (modrm_reg_op (p)) {
         case (0):
         {
             /* EncodedInstructionDefinition {{[]
                                           ;D9 
                                           ;Just (ModrmDigit 0)
                                           ;Just RMMemOnly
                                           ;Nothing
                                           ;[]
                                           ;Nothing
                                           ;Nothing}
                                          ;Prototype {protoMnemonic = "FLD", protoOperands = [OpM32FP]}
                                          ;[(EncModrm_rm
                                            ,OperandReadWrite)]
                                          ;64bit: True
                                          ;legacy: True
                                          ;Push m32fp onto the FPU register stack.} */
             
             ERASM_DECODER_DO_ACTION (1,
                                      Fld,
                                      Just<OpM32FP>,
                                      Just<EncModrm_rm_mem>,
                                      Nothing,
                                      Nothing,
                                      Nothing,
                                      Nothing);
         }
         case (2):
         {
             /* EncodedInstructionDefinition {{[]
                                           ;D9 
                                           ;Just (ModrmDigit 2)
                                           ;Just RMMemOnly
                                           ;Nothing
                                           ;[]
                                           ;Nothing
                                           ;Nothing}
                                          ;Prototype {protoMnemonic = "FST", protoOperands = [OpM32FP]}
                                          ;[(EncModrm_rm
                                            ,OperandReadWrite)]
                                          ;64bit: True
                                          ;legacy: True
                                          ;Copy ST(0) to m32fp.} */
             
             ERASM_DECODER_DO_ACTION (1,
                                      Fst,
                                      Just<OpM32FP>,
                                      Just<EncModrm_rm_mem>,
                                      Nothing,
                                      Nothing,
                                      Nothing,
                                      Nothing);
         }
         case (3):
         {
             /* EncodedInstructionDefinition {{[]
                                           ;D9 
                                           ;Just (ModrmDigit 3)
                                           ;Just RMMemOnly
                                           ;Nothing
                                           ;[]
                                           ;Nothing
                                           ;Nothing}
                                          ;Prototype {protoMnemonic = "FSTP", protoOperands = [OpM32FP]}
                                          ;[(EncModrm_rm
                                            ,OperandReadWrite)]
                                          ;64bit: True
                                          ;legacy: True
                                          ;Copy ST(0) to m32fp and pop register stack.} */
             
             ERASM_DECODER_DO_ACTION (1,
                                      Fstp,
                                      Just<OpM32FP>,
                                      Just<EncModrm_rm_mem>,
                                      Nothing,
                                      Nothing,
                                      Nothing,
                                      Nothing);
         }
         case (4):
         {
             /* EncodedInstructionDefinition {{[]
                                           ;D9 
                                           ;Just (ModrmDigit 4)
                                           ;Just RMMemOnly
                                           ;Nothing
                                           ;[]
                                           ;Nothing
                                           ;Nothing}
                                          ;Prototype {protoMnemonic = "FLDENV", protoOperands = [OpM14_28byte]}
                                          ;[(EncModrm_rm
                                            ,OperandReadWrite)]
                                          ;64bit: True
                                          ;legacy: True
                                          ;Load FPU environment from m14byte or m28byte.} */
             
             ERASM_DECODER_DO_ACTION (1,
                                      Fldenv,
                                      Just<OpM14_28byte>,
                                      Just<EncModrm_rm_mem>,
                                      Nothing,
                                      Nothing,
                                      Nothing,
                                      Nothing);
         }
         case (5):
         {
             /* EncodedInstructionDefinition {{[]
                                           ;D9 
                                           ;Just (ModrmDigit 5)
                                           ;Just RMMemOnly
                                           ;Nothing
                                           ;[]
                                           ;Nothing
                                           ;Nothing}
                                          ;Prototype {protoMnemonic = "FLDCW", protoOperands = [OpM2byte]}
                                          ;[(EncModrm_rm
                                            ,OperandReadWrite)]
                                          ;64bit: True
                                          ;legacy: True
                                          ;Load FPU control word from m2byte.} */
             
             ERASM_DECODER_DO_ACTION (1,
                                      Fldcw,
                                      Just<OpM2byte>,
                                      Just<EncModrm_rm_mem>,
                                      Nothing,
                                      Nothing,
                                      Nothing,
                                      Nothing);
         }
         case (6):
         {
             /* EncodedInstructionDefinition {{[]
                                           ;D9 
                                           ;Just (ModrmDigit 6)
                                           ;Just RMMemOnly
                                           ;Nothing
                                           ;[]
                                           ;Nothing
                                           ;Nothing}
                                          ;Prototype {protoMnemonic = "FNSTENV", protoOperands = [OpM14_28byte]}
                                          ;[(EncModrm_rm
                                            ,OperandReadWrite)]
                                          ;64bit: True
                                          ;legacy: True
                                          ;Store FPU environment to m14byte or m28byte without checking for pending unmasked floating-point exceptions. Then mask all floating- point exceptions.} */
             
             ERASM_DECODER_DO_ACTION (1,
                                      Fnstenv,
                                      Just<OpM14_28byte>,
                                      Just<EncModrm_rm_mem>,
                                      Nothing,
                                      Nothing,
                                      Nothing,
                                      Nothing);
         }
         case (7):
         {
             /* EncodedInstructionDefinition {{[]
                                           ;D9 
                                           ;Just (ModrmDigit 7)
                                           ;Just RMMemOnly
                                           ;Nothing
                                           ;[]
                                           ;Nothing
                                           ;Nothing}
                                          ;Prototype {protoMnemonic = "FNSTCW", protoOperands = [OpM2byte]}
                                          ;[(EncModrm_rm
                                            ,OperandReadWrite)]
                                          ;64bit: True
                                          ;legacy: True
                                          ;Store FPU control word to m2byte without checking for pending unmasked floating-point exceptions.} */
             
             ERASM_DECODER_DO_ACTION (1,
                                      Fnstcw,
                                      Just<OpM2byte>,
                                      Just<EncModrm_rm_mem>,
                                      Nothing,
                                      Nothing,
                                      Nothing,
                                      Nothing);
         }
         
      }
   case (0xda):
   if (modrm_mod3 (p))
      switch (modrm_reg_op (p)) {
         case (0):
         {
             /* EncodedInstructionDefinition {{[]
                                           ;DA C0 
                                           ;Nothing
                                           ;Nothing
                                           ;Just RaddI
                                           ;[]
                                           ;Nothing
                                           ;Nothing}
                                          ;Prototype {protoMnemonic = "FCMOVB", protoOperands = [OpST0,OpST]}
                                          ;[(EncImplicit,OperandReadWrite)
                                           ,(EncReg,OperandReadWrite)]
                                          ;64bit: True
                                          ;legacy: True
                                          ;Move if below (CF=1).} */
             
             ERASM_DECODER_DO_ACTION (2,
                                      Fcmovb,
                                      Just<OpST0>,
                                      Just<EncImplicit>,
                                      Just<OpST>,
                                      Just<EncReg>,
                                      Nothing,
                                      Nothing);
         }
         case (1):
         {
             /* EncodedInstructionDefinition {{[]
                                           ;DA C8 
                                           ;Nothing
                                           ;Nothing
                                           ;Just RaddI
                                           ;[]
                                           ;Nothing
                                           ;Nothing}
                                          ;Prototype {protoMnemonic = "FCMOVE", protoOperands = [OpST0,OpST]}
                                          ;[(EncImplicit,OperandReadWrite)
                                           ,(EncReg,OperandReadWrite)]
                                          ;64bit: True
                                          ;legacy: True
                                          ;Move if equal (ZF=1).} */
             
             ERASM_DECODER_DO_ACTION (2,
                                      Fcmove,
                                      Just<OpST0>,
                                      Just<EncImplicit>,
                                      Just<OpST>,
                                      Just<EncReg>,
                                      Nothing,
                                      Nothing);
         }
         case (2):
         {
             /* EncodedInstructionDefinition {{[]
                                           ;DA D0 
                                           ;Nothing
                                           ;Nothing
                                           ;Just RaddI
                                           ;[]
                                           ;Nothing
                                           ;Nothing}
                                          ;Prototype {protoMnemonic = "FCMOVBE", protoOperands = [OpST0,OpST]}
                                          ;[(EncImplicit,OperandReadWrite)
                                           ,(EncReg,OperandReadWrite)]
                                          ;64bit: True
                                          ;legacy: True
                                          ;Move if below or equal (CF=1 or ZF=1).} */
             
             ERASM_DECODER_DO_ACTION (2,
                                      Fcmovbe,
                                      Just<OpST0>,
                                      Just<EncImplicit>,
                                      Just<OpST>,
                                      Just<EncReg>,
                                      Nothing,
                                      Nothing);
         }
         case (3):
         {
             /* EncodedInstructionDefinition {{[]
                                           ;DA D8 
                                           ;Nothing
                                           ;Nothing
                                           ;Just RaddI
                                           ;[]
                                           ;Nothing
                                           ;Nothing}
                                          ;Prototype {protoMnemonic = "FCMOVU", protoOperands = [OpST0,OpST]}
                                          ;[(EncImplicit,OperandReadWrite)
                                           ,(EncReg,OperandReadWrite)]
                                          ;64bit: True
                                          ;legacy: True
                                          ;Move if unordered (PF=1).} */
             
             ERASM_DECODER_DO_ACTION (2,
                                      Fcmovu,
                                      Just<OpST0>,
                                      Just<EncImplicit>,
                                      Just<OpST>,
                                      Just<EncReg>,
                                      Nothing,
                                      Nothing);
         }
         case (5):
         switch (modrm_rm (p)) {
            case (1):
            {
                /* EncodedInstructionDefinition {{[]
                                              ;DA E9 
                                              ;Nothing
                                              ;Nothing
                                              ;Nothing
                                              ;[]
                                              ;Nothing
                                              ;Nothing}
                                             ;Prototype {protoMnemonic = "FUCOMPP", protoOperands = []}
                                             ;[]
                                             ;64bit: True
                                             ;legacy: True
                                             ;Compare ST(0) with ST(1) and pop register stack twice.} */
                
                ERASM_DECODER_DO_ACTION (2,
                                         Fucompp,
                                         Nothing,
                                         Nothing,
                                         Nothing,
                                         Nothing,
                                         Nothing,
                                         Nothing);
            }
            default:
            goto decode_error;
         }
         
      }
   else
      switch (modrm_reg_op (p)) {
         case (0):
         {
             /* EncodedInstructionDefinition {{[]
                                           ;DA 
                                           ;Just (ModrmDigit 0)
                                           ;Just RMMemOnly
                                           ;Nothing
                                           ;[]
                                           ;Nothing
                                           ;Nothing}
                                          ;Prototype {protoMnemonic = "FIADD", protoOperands = [OpM32Int]}
                                          ;[(EncModrm_rm
                                            ,OperandReadWrite)]
                                          ;64bit: True
                                          ;legacy: True
                                          ;Add m32int to ST(0) and store result in ST(0).} */
             
             ERASM_DECODER_DO_ACTION (1,
                                      Fiadd,
                                      Just<OpM32Int>,
                                      Just<EncModrm_rm_mem>,
                                      Nothing,
                                      Nothing,
                                      Nothing,
                                      Nothing);
         }
         case (1):
         {
             /* EncodedInstructionDefinition {{[]
                                           ;DA 
                                           ;Just (ModrmDigit 1)
                                           ;Just RMMemOnly
                                           ;Nothing
                                           ;[]
                                           ;Nothing
                                           ;Nothing}
                                          ;Prototype {protoMnemonic = "FIMUL", protoOperands = [OpM32Int]}
                                          ;[(EncModrm_rm
                                            ,OperandReadWrite)]
                                          ;64bit: True
                                          ;legacy: True
                                          ;Multiply ST(0) by m32int and store result in ST(0).} */
             
             ERASM_DECODER_DO_ACTION (1,
                                      Fimul,
                                      Just<OpM32Int>,
                                      Just<EncModrm_rm_mem>,
                                      Nothing,
                                      Nothing,
                                      Nothing,
                                      Nothing);
         }
         case (2):
         {
             /* EncodedInstructionDefinition {{[]
                                           ;DA 
                                           ;Just (ModrmDigit 2)
                                           ;Just RMMemOnly
                                           ;Nothing
                                           ;[]
                                           ;Nothing
                                           ;Nothing}
                                          ;Prototype {protoMnemonic = "FICOM", protoOperands = [OpM32Int]}
                                          ;[(EncModrm_rm
                                            ,OperandReadWrite)]
                                          ;64bit: True
                                          ;legacy: True
                                          ;Compare ST(0) with m32int.} */
             
             ERASM_DECODER_DO_ACTION (1,
                                      Ficom,
                                      Just<OpM32Int>,
                                      Just<EncModrm_rm_mem>,
                                      Nothing,
                                      Nothing,
                                      Nothing,
                                      Nothing);
         }
         case (3):
         {
             /* EncodedInstructionDefinition {{[]
                                           ;DA 
                                           ;Just (ModrmDigit 3)
                                           ;Just RMMemOnly
                                           ;Nothing
                                           ;[]
                                           ;Nothing
                                           ;Nothing}
                                          ;Prototype {protoMnemonic = "FICOMP", protoOperands = [OpM32Int]}
                                          ;[(EncModrm_rm
                                            ,OperandReadWrite)]
                                          ;64bit: True
                                          ;legacy: True
                                          ;Compare ST(0) with m32int and pop stack register.} */
             
             ERASM_DECODER_DO_ACTION (1,
                                      Ficomp,
                                      Just<OpM32Int>,
                                      Just<EncModrm_rm_mem>,
                                      Nothing,
                                      Nothing,
                                      Nothing,
                                      Nothing);
         }
         case (4):
         {
             /* EncodedInstructionDefinition {{[]
                                           ;DA 
                                           ;Just (ModrmDigit 4)
                                           ;Just RMMemOnly
                                           ;Nothing
                                           ;[]
                                           ;Nothing
                                           ;Nothing}
                                          ;Prototype {protoMnemonic = "FISUB", protoOperands = [OpM32Int]}
                                          ;[(EncModrm_rm
                                            ,OperandReadWrite)]
                                          ;64bit: True
                                          ;legacy: True
                                          ;Subtract m32int from ST(0) and store result in ST(0).} */
             
             ERASM_DECODER_DO_ACTION (1,
                                      Fisub,
                                      Just<OpM32Int>,
                                      Just<EncModrm_rm_mem>,
                                      Nothing,
                                      Nothing,
                                      Nothing,
                                      Nothing);
         }
         case (5):
         {
             /* EncodedInstructionDefinition {{[]
                                           ;DA 
                                           ;Just (ModrmDigit 5)
                                           ;Just RMMemOnly
                                           ;Nothing
                                           ;[]
                                           ;Nothing
                                           ;Nothing}
                                          ;Prototype {protoMnemonic = "FISUBR", protoOperands = [OpM32Int]}
                                          ;[(EncModrm_rm
                                            ,OperandReadWrite)]
                                          ;64bit: True
                                          ;legacy: True
                                          ;Subtract ST(0) from m32int and store result in ST(0).} */
             
             ERASM_DECODER_DO_ACTION (1,
                                      Fisubr,
                                      Just<OpM32Int>,
                                      Just<EncModrm_rm_mem>,
                                      Nothing,
                                      Nothing,
                                      Nothing,
                                      Nothing);
         }
         case (6):
         {
             /* EncodedInstructionDefinition {{[]
                                           ;DA 
                                           ;Just (ModrmDigit 6)
                                           ;Just RMMemOnly
                                           ;Nothing
                                           ;[]
                                           ;Nothing
                                           ;Nothing}
                                          ;Prototype {protoMnemonic = "FIDIV", protoOperands = [OpM32Int]}
                                          ;[(EncModrm_rm
                                            ,OperandReadWrite)]
                                          ;64bit: True
                                          ;legacy: True
                                          ;Divide ST(0) by m32int and store result in ST(0).} */
             
             ERASM_DECODER_DO_ACTION (1,
                                      Fidiv,
                                      Just<OpM32Int>,
                                      Just<EncModrm_rm_mem>,
                                      Nothing,
                                      Nothing,
                                      Nothing,
                                      Nothing);
         }
         case (7):
         {
             /* EncodedInstructionDefinition {{[]
                                           ;DA 
                                           ;Just (ModrmDigit 7)
                                           ;Just RMMemOnly
                                           ;Nothing
                                           ;[]
                                           ;Nothing
                                           ;Nothing}
                                          ;Prototype {protoMnemonic = "FIDIVR", protoOperands = [OpM32Int]}
                                          ;[(EncModrm_rm
                                            ,OperandReadWrite)]
                                          ;64bit: True
                                          ;legacy: True
                                          ;Divide m32int by ST(0) and store result in ST(0).} */
             
             ERASM_DECODER_DO_ACTION (1,
                                      Fidivr,
                                      Just<OpM32Int>,
                                      Just<EncModrm_rm_mem>,
                                      Nothing,
                                      Nothing,
                                      Nothing,
                                      Nothing);
         }
         
      }
   case (0xdb):
   if (modrm_mod3 (p))
      switch (modrm_reg_op (p)) {
         case (0):
         {
             /* EncodedInstructionDefinition {{[]
                                           ;DB C0 
                                           ;Nothing
                                           ;Nothing
                                           ;Just RaddI
                                           ;[]
                                           ;Nothing
                                           ;Nothing}
                                          ;Prototype {protoMnemonic = "FCMOVNB", protoOperands = [OpST0,OpST]}
                                          ;[(EncImplicit,OperandReadWrite)
                                           ,(EncReg,OperandReadWrite)]
                                          ;64bit: True
                                          ;legacy: True
                                          ;Move if not below (CF=0).} */
             
             ERASM_DECODER_DO_ACTION (2,
                                      Fcmovnb,
                                      Just<OpST0>,
                                      Just<EncImplicit>,
                                      Just<OpST>,
                                      Just<EncReg>,
                                      Nothing,
                                      Nothing);
         }
         case (1):
         {
             /* EncodedInstructionDefinition {{[]
                                           ;DB C8 
                                           ;Nothing
                                           ;Nothing
                                           ;Just RaddI
                                           ;[]
                                           ;Nothing
                                           ;Nothing}
                                          ;Prototype {protoMnemonic = "FCMOVNE", protoOperands = [OpST0,OpST]}
                                          ;[(EncImplicit,OperandReadWrite)
                                           ,(EncReg,OperandReadWrite)]
                                          ;64bit: True
                                          ;legacy: True
                                          ;Move if not equal (ZF=0).} */
             
             ERASM_DECODER_DO_ACTION (2,
                                      Fcmovne,
                                      Just<OpST0>,
                                      Just<EncImplicit>,
                                      Just<OpST>,
                                      Just<EncReg>,
                                      Nothing,
                                      Nothing);
         }
         case (2):
         {
             /* EncodedInstructionDefinition {{[]
                                           ;DB D0 
                                           ;Nothing
                                           ;Nothing
                                           ;Just RaddI
                                           ;[]
                                           ;Nothing
                                           ;Nothing}
                                          ;Prototype {protoMnemonic = "FCMOVNBE", protoOperands = [OpST0,OpST]}
                                          ;[(EncImplicit,OperandReadWrite)
                                           ,(EncReg,OperandReadWrite)]
                                          ;64bit: True
                                          ;legacy: True
                                          ;Move if not below or equal (CF=0 and ZF=0).} */
             
             ERASM_DECODER_DO_ACTION (2,
                                      Fcmovnbe,
                                      Just<OpST0>,
                                      Just<EncImplicit>,
                                      Just<OpST>,
                                      Just<EncReg>,
                                      Nothing,
                                      Nothing);
         }
         case (3):
         {
             /* EncodedInstructionDefinition {{[]
                                           ;DB D8 
                                           ;Nothing
                                           ;Nothing
                                           ;Just RaddI
                                           ;[]
                                           ;Nothing
                                           ;Nothing}
                                          ;Prototype {protoMnemonic = "FCMOVNU", protoOperands = [OpST0,OpST]}
                                          ;[(EncImplicit,OperandReadWrite)
                                           ,(EncReg,OperandReadWrite)]
                                          ;64bit: True
                                          ;legacy: True
                                          ;Move if not unordered (PF=0).} */
             
             ERASM_DECODER_DO_ACTION (2,
                                      Fcmovnu,
                                      Just<OpST0>,
                                      Just<EncImplicit>,
                                      Just<OpST>,
                                      Just<EncReg>,
                                      Nothing,
                                      Nothing);
         }
         case (4):
         switch (modrm_rm (p)) {
            case (2):
            {
                /* EncodedInstructionDefinition {{[]
                                              ;DB E2 
                                              ;Nothing
                                              ;Nothing
                                              ;Nothing
                                              ;[]
                                              ;Nothing
                                              ;Nothing}
                                             ;Prototype {protoMnemonic = "FNCLEX", protoOperands = []}
                                             ;[]
                                             ;64bit: True
                                             ;legacy: True
                                             ;Clear floating-point exception flags without checking for pending unmasked floating-point exceptions.} */
                
                ERASM_DECODER_DO_ACTION (2,
                                         Fnclex,
                                         Nothing,
                                         Nothing,
                                         Nothing,
                                         Nothing,
                                         Nothing,
                                         Nothing);
            }
            case (3):
            {
                /* EncodedInstructionDefinition {{[]
                                              ;DB E3 
                                              ;Nothing
                                              ;Nothing
                                              ;Nothing
                                              ;[]
                                              ;Nothing
                                              ;Nothing}
                                             ;Prototype {protoMnemonic = "FNINIT", protoOperands = []}
                                             ;[]
                                             ;64bit: True
                                             ;legacy: True
                                             ;Initialize FPU without checking for pending unmasked floating-point exceptions.} */
                
                ERASM_DECODER_DO_ACTION (2,
                                         Fninit,
                                         Nothing,
                                         Nothing,
                                         Nothing,
                                         Nothing,
                                         Nothing,
                                         Nothing);
            }
            default:
            goto decode_error;
         }
         case (5):
         {
             /* EncodedInstructionDefinition {{[]
                                           ;DB E8 
                                           ;Nothing
                                           ;Nothing
                                           ;Just RaddI
                                           ;[]
                                           ;Nothing
                                           ;Nothing}
                                          ;Prototype {protoMnemonic = "FUCOMI", protoOperands = [OpST0,OpST]}
                                          ;[(EncImplicit,OperandReadWrite)
                                           ,(EncReg,OperandReadWrite)]
                                          ;64bit: True
                                          ;legacy: True
                                          ;Compare ST(0) with ST(i), check for ordered values, and set status flags accordingly.} */
             
             ERASM_DECODER_DO_ACTION (2,
                                      Fucomi,
                                      Just<OpST0>,
                                      Just<EncImplicit>,
                                      Just<OpST>,
                                      Just<EncReg>,
                                      Nothing,
                                      Nothing);
         }
         case (6):
         {
             /* EncodedInstructionDefinition {{[]
                                           ;DB F0 
                                           ;Nothing
                                           ;Nothing
                                           ;Just RaddI
                                           ;[]
                                           ;Nothing
                                           ;Nothing}
                                          ;Prototype {protoMnemonic = "FCOMI", protoOperands = [OpST0,OpST]}
                                          ;[(EncImplicit,OperandReadWrite)
                                           ,(EncReg,OperandReadWrite)]
                                          ;64bit: True
                                          ;legacy: True
                                          ;Compare ST(0) with ST(i) and set status flags accordingly.} */
             
             ERASM_DECODER_DO_ACTION (2,
                                      Fcomi,
                                      Just<OpST0>,
                                      Just<EncImplicit>,
                                      Just<OpST>,
                                      Just<EncReg>,
                                      Nothing,
                                      Nothing);
         }
         
      }
   else
      switch (modrm_reg_op (p)) {
         case (0):
         {
             /* EncodedInstructionDefinition {{[]
                                           ;DB 
                                           ;Just (ModrmDigit 0)
                                           ;Just RMMemOnly
                                           ;Nothing
                                           ;[]
                                           ;Nothing
                                           ;Nothing}
                                          ;Prototype {protoMnemonic = "FILD", protoOperands = [OpM32Int]}
                                          ;[(EncModrm_rm
                                            ,OperandReadWrite)]
                                          ;64bit: True
                                          ;legacy: True
                                          ;Push m32int onto the FPU register stack.} */
             
             ERASM_DECODER_DO_ACTION (1,
                                      Fild,
                                      Just<OpM32Int>,
                                      Just<EncModrm_rm_mem>,
                                      Nothing,
                                      Nothing,
                                      Nothing,
                                      Nothing);
         }
         case (1):
         {
             /* EncodedInstructionDefinition {{[]
                                           ;DB 
                                           ;Just (ModrmDigit 1)
                                           ;Just RMMemOnly
                                           ;Nothing
                                           ;[]
                                           ;Nothing
                                           ;Nothing}
                                          ;Prototype {protoMnemonic = "FISTTP", protoOperands = [OpM32Int]}
                                          ;[(EncModrm_rm
                                            ,OperandReadWrite)]
                                          ;64bit: True
                                          ;legacy: True
                                          ;Store ST(0) in m32int with truncation.} */
             
             ERASM_DECODER_DO_ACTION (1,
                                      Fisttp,
                                      Just<OpM32Int>,
                                      Just<EncModrm_rm_mem>,
                                      Nothing,
                                      Nothing,
                                      Nothing,
                                      Nothing);
         }
         case (2):
         {
             /* EncodedInstructionDefinition {{[]
                                           ;DB 
                                           ;Just (ModrmDigit 2)
                                           ;Just RMMemOnly
                                           ;Nothing
                                           ;[]
                                           ;Nothing
                                           ;Nothing}
                                          ;Prototype {protoMnemonic = "FIST", protoOperands = [OpM32Int]}
                                          ;[(EncModrm_rm
                                            ,OperandReadWrite)]
                                          ;64bit: True
                                          ;legacy: True
                                          ;Store ST(0) in m32int.} */
             
             ERASM_DECODER_DO_ACTION (1,
                                      Fist,
                                      Just<OpM32Int>,
                                      Just<EncModrm_rm_mem>,
                                      Nothing,
                                      Nothing,
                                      Nothing,
                                      Nothing);
         }
         case (3):
         {
             /* EncodedInstructionDefinition {{[]
                                           ;DB 
                                           ;Just (ModrmDigit 3)
                                           ;Just RMMemOnly
                                           ;Nothing
                                           ;[]
                                           ;Nothing
                                           ;Nothing}
                                          ;Prototype {protoMnemonic = "FISTP", protoOperands = [OpM32Int]}
                                          ;[(EncModrm_rm
                                            ,OperandReadWrite)]
                                          ;64bit: True
                                          ;legacy: True
                                          ;Store ST(0) in m32int and pop register stack.} */
             
             ERASM_DECODER_DO_ACTION (1,
                                      Fistp,
                                      Just<OpM32Int>,
                                      Just<EncModrm_rm_mem>,
                                      Nothing,
                                      Nothing,
                                      Nothing,
                                      Nothing);
         }
         case (5):
         {
             /* EncodedInstructionDefinition {{[]
                                           ;DB 
                                           ;Just (ModrmDigit 5)
                                           ;Just RMMemOnly
                                           ;Nothing
                                           ;[]
                                           ;Nothing
                                           ;Nothing}
                                          ;Prototype {protoMnemonic = "FLD", protoOperands = [OpM80FP]}
                                          ;[(EncModrm_rm
                                            ,OperandReadWrite)]
                                          ;64bit: True
                                          ;legacy: True
                                          ;Push m80fp onto the FPU register stack.} */
             
             ERASM_DECODER_DO_ACTION (1,
                                      Fld,
                                      Just<OpM80FP>,
                                      Just<EncModrm_rm_mem>,
                                      Nothing,
                                      Nothing,
                                      Nothing,
                                      Nothing);
         }
         case (7):
         {
             /* EncodedInstructionDefinition {{[]
                                           ;DB 
                                           ;Just (ModrmDigit 7)
                                           ;Just RMMemOnly
                                           ;Nothing
                                           ;[]
                                           ;Nothing
                                           ;Nothing}
                                          ;Prototype {protoMnemonic = "FSTP", protoOperands = [OpM80FP]}
                                          ;[(EncModrm_rm
                                            ,OperandReadWrite)]
                                          ;64bit: True
                                          ;legacy: True
                                          ;Copy ST(0) to m80fp and pop register stack.} */
             
             ERASM_DECODER_DO_ACTION (1,
                                      Fstp,
                                      Just<OpM80FP>,
                                      Just<EncModrm_rm_mem>,
                                      Nothing,
                                      Nothing,
                                      Nothing,
                                      Nothing);
         }
         
      }
   case (0xdc):
   if (modrm_mod3 (p))
      switch (modrm_reg_op (p)) {
         case (0):
         {
             /* EncodedInstructionDefinition {{[]
                                           ;DC C0 
                                           ;Nothing
                                           ;Nothing
                                           ;Just RaddI
                                           ;[]
                                           ;Nothing
                                           ;Nothing}
                                          ;Prototype {protoMnemonic = "FADD", protoOperands = [OpST,OpST0]}
                                          ;[(EncReg,OperandReadWrite)
                                           ,(EncImplicit,OperandReadWrite)]
                                          ;64bit: True
                                          ;legacy: True
                                          ;Add ST(i) to ST(0) and store result in ST(i).} */
             
             ERASM_DECODER_DO_ACTION (2,
                                      Fadd,
                                      Just<OpST>,
                                      Just<EncReg>,
                                      Just<OpST0>,
                                      Just<EncImplicit>,
                                      Nothing,
                                      Nothing);
         }
         case (1):
         {
             /* EncodedInstructionDefinition {{[]
                                           ;DC C8 
                                           ;Nothing
                                           ;Nothing
                                           ;Just RaddI
                                           ;[]
                                           ;Nothing
                                           ;Nothing}
                                          ;Prototype {protoMnemonic = "FMUL", protoOperands = [OpST,OpST0]}
                                          ;[(EncReg,OperandReadWrite)
                                           ,(EncImplicit,OperandReadWrite)]
                                          ;64bit: True
                                          ;legacy: True
                                          ;Multiply ST(i) by ST(0) and store result in ST(i).} */
             
             ERASM_DECODER_DO_ACTION (2,
                                      Fmul,
                                      Just<OpST>,
                                      Just<EncReg>,
                                      Just<OpST0>,
                                      Just<EncImplicit>,
                                      Nothing,
                                      Nothing);
         }
         case (4):
         {
             /* EncodedInstructionDefinition {{[]
                                           ;DC E0 
                                           ;Nothing
                                           ;Nothing
                                           ;Just RaddI
                                           ;[]
                                           ;Nothing
                                           ;Nothing}
                                          ;Prototype {protoMnemonic = "FSUBR", protoOperands = [OpST,OpST0]}
                                          ;[(EncReg,OperandReadWrite)
                                           ,(EncImplicit,OperandReadWrite)]
                                          ;64bit: True
                                          ;legacy: True
                                          ;Subtract ST(i) from ST(0) and store result in ST(i).} */
             
             ERASM_DECODER_DO_ACTION (2,
                                      Fsubr,
                                      Just<OpST>,
                                      Just<EncReg>,
                                      Just<OpST0>,
                                      Just<EncImplicit>,
                                      Nothing,
                                      Nothing);
         }
         case (5):
         {
             /* EncodedInstructionDefinition {{[]
                                           ;DC E8 
                                           ;Nothing
                                           ;Nothing
                                           ;Just RaddI
                                           ;[]
                                           ;Nothing
                                           ;Nothing}
                                          ;Prototype {protoMnemonic = "FSUB", protoOperands = [OpST,OpST0]}
                                          ;[(EncReg,OperandReadWrite)
                                           ,(EncImplicit,OperandReadWrite)]
                                          ;64bit: True
                                          ;legacy: True
                                          ;Subtract ST(0) from ST(i) and store result in ST(i).} */
             
             ERASM_DECODER_DO_ACTION (2,
                                      Fsub,
                                      Just<OpST>,
                                      Just<EncReg>,
                                      Just<OpST0>,
                                      Just<EncImplicit>,
                                      Nothing,
                                      Nothing);
         }
         case (6):
         {
             /* EncodedInstructionDefinition {{[]
                                           ;DC F0 
                                           ;Nothing
                                           ;Nothing
                                           ;Just RaddI
                                           ;[]
                                           ;Nothing
                                           ;Nothing}
                                          ;Prototype {protoMnemonic = "FDIVR", protoOperands = [OpST,OpST0]}
                                          ;[(EncReg,OperandReadWrite)
                                           ,(EncImplicit,OperandReadWrite)]
                                          ;64bit: True
                                          ;legacy: True
                                          ;Divide ST(0) by ST(i) and store result in ST(i).} */
             
             ERASM_DECODER_DO_ACTION (2,
                                      Fdivr,
                                      Just<OpST>,
                                      Just<EncReg>,
                                      Just<OpST0>,
                                      Just<EncImplicit>,
                                      Nothing,
                                      Nothing);
         }
         case (7):
         {
             /* EncodedInstructionDefinition {{[]
                                           ;DC F8 
                                           ;Nothing
                                           ;Nothing
                                           ;Just RaddI
                                           ;[]
                                           ;Nothing
                                           ;Nothing}
                                          ;Prototype {protoMnemonic = "FDIV", protoOperands = [OpST,OpST0]}
                                          ;[(EncReg,OperandReadWrite)
                                           ,(EncImplicit,OperandReadWrite)]
                                          ;64bit: True
                                          ;legacy: True
                                          ;Divide ST(i) by ST(0) and store result in ST(i).} */
             
             ERASM_DECODER_DO_ACTION (2,
                                      Fdiv,
                                      Just<OpST>,
                                      Just<EncReg>,
                                      Just<OpST0>,
                                      Just<EncImplicit>,
                                      Nothing,
                                      Nothing);
         }
         
      }
   else
      switch (modrm_reg_op (p)) {
         case (0):
         {
             /* EncodedInstructionDefinition {{[]
                                           ;DC 
                                           ;Just (ModrmDigit 0)
                                           ;Just RMMemOnly
                                           ;Nothing
                                           ;[]
                                           ;Nothing
                                           ;Nothing}
                                          ;Prototype {protoMnemonic = "FADD", protoOperands = [OpM64FP]}
                                          ;[(EncModrm_rm
                                            ,OperandReadWrite)]
                                          ;64bit: True
                                          ;legacy: True
                                          ;Add m64fp to ST(0) and store result in ST(0).} */
             
             ERASM_DECODER_DO_ACTION (1,
                                      Fadd,
                                      Just<OpM64FP>,
                                      Just<EncModrm_rm_mem>,
                                      Nothing,
                                      Nothing,
                                      Nothing,
                                      Nothing);
         }
         case (1):
         {
             /* EncodedInstructionDefinition {{[]
                                           ;DC 
                                           ;Just (ModrmDigit 1)
                                           ;Just RMMemOnly
                                           ;Nothing
                                           ;[]
                                           ;Nothing
                                           ;Nothing}
                                          ;Prototype {protoMnemonic = "FMUL", protoOperands = [OpM64FP]}
                                          ;[(EncModrm_rm
                                            ,OperandReadWrite)]
                                          ;64bit: True
                                          ;legacy: True
                                          ;Multiply ST(0) by m64fp and store result in ST(0).} */
             
             ERASM_DECODER_DO_ACTION (1,
                                      Fmul,
                                      Just<OpM64FP>,
                                      Just<EncModrm_rm_mem>,
                                      Nothing,
                                      Nothing,
                                      Nothing,
                                      Nothing);
         }
         case (2):
         {
             /* EncodedInstructionDefinition {{[]
                                           ;DC 
                                           ;Just (ModrmDigit 2)
                                           ;Just RMMemOnly
                                           ;Nothing
                                           ;[]
                                           ;Nothing
                                           ;Nothing}
                                          ;Prototype {protoMnemonic = "FCOM", protoOperands = [OpM64FP]}
                                          ;[(EncModrm_rm
                                            ,OperandReadWrite)]
                                          ;64bit: True
                                          ;legacy: True
                                          ;Compare ST(0) with m64fp.} */
             
             ERASM_DECODER_DO_ACTION (1,
                                      Fcom,
                                      Just<OpM64FP>,
                                      Just<EncModrm_rm_mem>,
                                      Nothing,
                                      Nothing,
                                      Nothing,
                                      Nothing);
         }
         case (3):
         {
             /* EncodedInstructionDefinition {{[]
                                           ;DC 
                                           ;Just (ModrmDigit 3)
                                           ;Just RMMemOnly
                                           ;Nothing
                                           ;[]
                                           ;Nothing
                                           ;Nothing}
                                          ;Prototype {protoMnemonic = "FCOMP", protoOperands = [OpM64FP]}
                                          ;[(EncModrm_rm
                                            ,OperandReadWrite)]
                                          ;64bit: True
                                          ;legacy: True
                                          ;Compare ST(0) with m64fp and pop register stack.} */
             
             ERASM_DECODER_DO_ACTION (1,
                                      Fcomp,
                                      Just<OpM64FP>,
                                      Just<EncModrm_rm_mem>,
                                      Nothing,
                                      Nothing,
                                      Nothing,
                                      Nothing);
         }
         case (4):
         {
             /* EncodedInstructionDefinition {{[]
                                           ;DC 
                                           ;Just (ModrmDigit 4)
                                           ;Just RMMemOnly
                                           ;Nothing
                                           ;[]
                                           ;Nothing
                                           ;Nothing}
                                          ;Prototype {protoMnemonic = "FSUB", protoOperands = [OpM64FP]}
                                          ;[(EncModrm_rm
                                            ,OperandReadWrite)]
                                          ;64bit: True
                                          ;legacy: True
                                          ;Subtract m64fp from ST(0) and store result in ST(0).} */
             
             ERASM_DECODER_DO_ACTION (1,
                                      Fsub,
                                      Just<OpM64FP>,
                                      Just<EncModrm_rm_mem>,
                                      Nothing,
                                      Nothing,
                                      Nothing,
                                      Nothing);
         }
         case (5):
         {
             /* EncodedInstructionDefinition {{[]
                                           ;DC 
                                           ;Just (ModrmDigit 5)
                                           ;Just RMMemOnly
                                           ;Nothing
                                           ;[]
                                           ;Nothing
                                           ;Nothing}
                                          ;Prototype {protoMnemonic = "FSUBR", protoOperands = [OpM64FP]}
                                          ;[(EncModrm_rm
                                            ,OperandReadWrite)]
                                          ;64bit: True
                                          ;legacy: True
                                          ;Subtract ST(0) from m64fp and store result in ST(0).} */
             
             ERASM_DECODER_DO_ACTION (1,
                                      Fsubr,
                                      Just<OpM64FP>,
                                      Just<EncModrm_rm_mem>,
                                      Nothing,
                                      Nothing,
                                      Nothing,
                                      Nothing);
         }
         case (6):
         {
             /* EncodedInstructionDefinition {{[]
                                           ;DC 
                                           ;Just (ModrmDigit 6)
                                           ;Just RMMemOnly
                                           ;Nothing
                                           ;[]
                                           ;Nothing
                                           ;Nothing}
                                          ;Prototype {protoMnemonic = "FDIV", protoOperands = [OpM64FP]}
                                          ;[(EncModrm_rm
                                            ,OperandReadWrite)]
                                          ;64bit: True
                                          ;legacy: True
                                          ;Divide ST(0) by m64fp and store result in ST(0).} */
             
             ERASM_DECODER_DO_ACTION (1,
                                      Fdiv,
                                      Just<OpM64FP>,
                                      Just<EncModrm_rm_mem>,
                                      Nothing,
                                      Nothing,
                                      Nothing,
                                      Nothing);
         }
         case (7):
         {
             /* EncodedInstructionDefinition {{[]
                                           ;DC 
                                           ;Just (ModrmDigit 7)
                                           ;Just RMMemOnly
                                           ;Nothing
                                           ;[]
                                           ;Nothing
                                           ;Nothing}
                                          ;Prototype {protoMnemonic = "FDIVR", protoOperands = [OpM64FP]}
                                          ;[(EncModrm_rm
                                            ,OperandReadWrite)]
                                          ;64bit: True
                                          ;legacy: True
                                          ;Divide m64fp by ST(0) and store result in ST(0).} */
             
             ERASM_DECODER_DO_ACTION (1,
                                      Fdivr,
                                      Just<OpM64FP>,
                                      Just<EncModrm_rm_mem>,
                                      Nothing,
                                      Nothing,
                                      Nothing,
                                      Nothing);
         }
         
      }
   case (0xdd):
   if (modrm_mod3 (p))
      switch (modrm_reg_op (p)) {
         case (0):
         {
             /* EncodedInstructionDefinition {{[]
                                           ;DD C0 
                                           ;Nothing
                                           ;Nothing
                                           ;Just RaddI
                                           ;[]
                                           ;Nothing
                                           ;Nothing}
                                          ;Prototype {protoMnemonic = "FFREE", protoOperands = [OpST]}
                                          ;[(EncReg,OperandReadWrite)]
                                          ;64bit: True
                                          ;legacy: True
                                          ;Sets tag for ST(i) to empty.} */
             
             ERASM_DECODER_DO_ACTION (2,
                                      Ffree,
                                      Just<OpST>,
                                      Just<EncReg>,
                                      Nothing,
                                      Nothing,
                                      Nothing,
                                      Nothing);
         }
         case (2):
         {
             /* EncodedInstructionDefinition {{[]
                                           ;DD D0 
                                           ;Nothing
                                           ;Nothing
                                           ;Just RaddI
                                           ;[]
                                           ;Nothing
                                           ;Nothing}
                                          ;Prototype {protoMnemonic = "FST", protoOperands = [OpST]}
                                          ;[(EncReg,OperandReadWrite)]
                                          ;64bit: True
                                          ;legacy: True
                                          ;Copy ST(0) to ST(i).} */
             
             ERASM_DECODER_DO_ACTION (2,
                                      Fst,
                                      Just<OpST>,
                                      Just<EncReg>,
                                      Nothing,
                                      Nothing,
                                      Nothing,
                                      Nothing);
         }
         case (3):
         {
             /* EncodedInstructionDefinition {{[]
                                           ;DD D8 
                                           ;Nothing
                                           ;Nothing
                                           ;Just RaddI
                                           ;[]
                                           ;Nothing
                                           ;Nothing}
                                          ;Prototype {protoMnemonic = "FSTP", protoOperands = [OpST]}
                                          ;[(EncReg,OperandReadWrite)]
                                          ;64bit: True
                                          ;legacy: True
                                          ;Copy ST(0) to ST(i) and pop register stack.} */
             
             ERASM_DECODER_DO_ACTION (2,
                                      Fstp,
                                      Just<OpST>,
                                      Just<EncReg>,
                                      Nothing,
                                      Nothing,
                                      Nothing,
                                      Nothing);
         }
         case (4):
         if (modrm_rm (p) == 0x1)
            {
                /* EncodedInstructionDefinition {{[]
                                              ;DD E1 
                                              ;Nothing
                                              ;Nothing
                                              ;Nothing
                                              ;[]
                                              ;Nothing
                                              ;Nothing}
                                             ;Prototype {protoMnemonic = "FUCOM", protoOperands = []}
                                             ;[]
                                             ;64bit: True
                                             ;legacy: True
                                             ;Compare ST(0) with ST(1).} */
                
                ERASM_DECODER_DO_ACTION (2,
                                         Fucom,
                                         Nothing,
                                         Nothing,
                                         Nothing,
                                         Nothing,
                                         Nothing,
                                         Nothing);
            }
         else
            {
                /* EncodedInstructionDefinition {{[]
                                              ;DD E0 
                                              ;Nothing
                                              ;Nothing
                                              ;Just RaddI
                                              ;[]
                                              ;Nothing
                                              ;Nothing}
                                             ;Prototype {protoMnemonic = "FUCOM", protoOperands = [OpST]}
                                             ;[(EncReg,OperandReadWrite)]
                                             ;64bit: True
                                             ;legacy: True
                                             ;Compare ST(0) with ST(i).} */
                
                ERASM_DECODER_DO_ACTION (2,
                                         Fucom,
                                         Just<OpST>,
                                         Just<EncReg>,
                                         Nothing,
                                         Nothing,
                                         Nothing,
                                         Nothing);
            }
         case (5):
         if (modrm_rm (p) == 0x1)
            {
                /* EncodedInstructionDefinition {{[]
                                              ;DD E9 
                                              ;Nothing
                                              ;Nothing
                                              ;Nothing
                                              ;[]
                                              ;Nothing
                                              ;Nothing}
                                             ;Prototype {protoMnemonic = "FUCOMP", protoOperands = []}
                                             ;[]
                                             ;64bit: True
                                             ;legacy: True
                                             ;Compare ST(0) with ST(1) and pop register stack.} */
                
                ERASM_DECODER_DO_ACTION (2,
                                         Fucomp,
                                         Nothing,
                                         Nothing,
                                         Nothing,
                                         Nothing,
                                         Nothing,
                                         Nothing);
            }
         else
            {
                /* EncodedInstructionDefinition {{[]
                                              ;DD E8 
                                              ;Nothing
                                              ;Nothing
                                              ;Just RaddI
                                              ;[]
                                              ;Nothing
                                              ;Nothing}
                                             ;Prototype {protoMnemonic = "FUCOMP", protoOperands = [OpST]}
                                             ;[(EncReg,OperandReadWrite)]
                                             ;64bit: True
                                             ;legacy: True
                                             ;Compare ST(0) with ST(i) and pop register stack.} */
                
                ERASM_DECODER_DO_ACTION (2,
                                         Fucomp,
                                         Just<OpST>,
                                         Just<EncReg>,
                                         Nothing,
                                         Nothing,
                                         Nothing,
                                         Nothing);
            }
         
      }
   else
      switch (modrm_reg_op (p)) {
         case (0):
         {
             /* EncodedInstructionDefinition {{[]
                                           ;DD 
                                           ;Just (ModrmDigit 0)
                                           ;Just RMMemOnly
                                           ;Nothing
                                           ;[]
                                           ;Nothing
                                           ;Nothing}
                                          ;Prototype {protoMnemonic = "FLD", protoOperands = [OpM64FP]}
                                          ;[(EncModrm_rm
                                            ,OperandReadWrite)]
                                          ;64bit: True
                                          ;legacy: True
                                          ;Push m64fp onto the FPU register stack.} */
             
             ERASM_DECODER_DO_ACTION (1,
                                      Fld,
                                      Just<OpM64FP>,
                                      Just<EncModrm_rm_mem>,
                                      Nothing,
                                      Nothing,
                                      Nothing,
                                      Nothing);
         }
         case (1):
         {
             /* EncodedInstructionDefinition {{[]
                                           ;DD 
                                           ;Just (ModrmDigit 1)
                                           ;Just RMMemOnly
                                           ;Nothing
                                           ;[]
                                           ;Nothing
                                           ;Nothing}
                                          ;Prototype {protoMnemonic = "FISTTP", protoOperands = [OpM64Int]}
                                          ;[(EncModrm_rm
                                            ,OperandReadWrite)]
                                          ;64bit: True
                                          ;legacy: True
                                          ;Store ST(0) in m64int with truncation.} */
             
             ERASM_DECODER_DO_ACTION (1,
                                      Fisttp,
                                      Just<OpM64Int>,
                                      Just<EncModrm_rm_mem>,
                                      Nothing,
                                      Nothing,
                                      Nothing,
                                      Nothing);
         }
         case (2):
         {
             /* EncodedInstructionDefinition {{[]
                                           ;DD 
                                           ;Just (ModrmDigit 2)
                                           ;Just RMMemOnly
                                           ;Nothing
                                           ;[]
                                           ;Nothing
                                           ;Nothing}
                                          ;Prototype {protoMnemonic = "FST", protoOperands = [OpM64FP]}
                                          ;[(EncModrm_rm
                                            ,OperandReadWrite)]
                                          ;64bit: True
                                          ;legacy: True
                                          ;Copy ST(0) to m64fp.} */
             
             ERASM_DECODER_DO_ACTION (1,
                                      Fst,
                                      Just<OpM64FP>,
                                      Just<EncModrm_rm_mem>,
                                      Nothing,
                                      Nothing,
                                      Nothing,
                                      Nothing);
         }
         case (3):
         {
             /* EncodedInstructionDefinition {{[]
                                           ;DD 
                                           ;Just (ModrmDigit 3)
                                           ;Just RMMemOnly
                                           ;Nothing
                                           ;[]
                                           ;Nothing
                                           ;Nothing}
                                          ;Prototype {protoMnemonic = "FSTP", protoOperands = [OpM64FP]}
                                          ;[(EncModrm_rm
                                            ,OperandReadWrite)]
                                          ;64bit: True
                                          ;legacy: True
                                          ;Copy ST(0) to m64fp and pop register stack.} */
             
             ERASM_DECODER_DO_ACTION (1,
                                      Fstp,
                                      Just<OpM64FP>,
                                      Just<EncModrm_rm_mem>,
                                      Nothing,
                                      Nothing,
                                      Nothing,
                                      Nothing);
         }
         case (4):
         {
             /* EncodedInstructionDefinition {{[]
                                           ;DD 
                                           ;Just (ModrmDigit 4)
                                           ;Just RMMemOnly
                                           ;Nothing
                                           ;[]
                                           ;Nothing
                                           ;Nothing}
                                          ;Prototype {protoMnemonic = "FRSTOR", protoOperands = [OpM94_108byte]}
                                          ;[(EncModrm_rm
                                            ,OperandReadWrite)]
                                          ;64bit: True
                                          ;legacy: True
                                          ;Load FPU state from m94byte or m108byte.} */
             
             ERASM_DECODER_DO_ACTION (1,
                                      Frstor,
                                      Just<OpM94_108byte>,
                                      Just<EncModrm_rm_mem>,
                                      Nothing,
                                      Nothing,
                                      Nothing,
                                      Nothing);
         }
         case (6):
         {
             /* EncodedInstructionDefinition {{[]
                                           ;DD 
                                           ;Just (ModrmDigit 6)
                                           ;Just RMMemOnly
                                           ;Nothing
                                           ;[]
                                           ;Nothing
                                           ;Nothing}
                                          ;Prototype {protoMnemonic = "FNSAVE", protoOperands = [OpM94_108byte]}
                                          ;[(EncModrm_rm
                                            ,OperandReadWrite)]
                                          ;64bit: True
                                          ;legacy: True
                                          ;Store FPU environment to m94byte or m108byte without checking for pending unmasked floating-point exceptions. Then re-initialize the FPU.} */
             
             ERASM_DECODER_DO_ACTION (1,
                                      Fnsave,
                                      Just<OpM94_108byte>,
                                      Just<EncModrm_rm_mem>,
                                      Nothing,
                                      Nothing,
                                      Nothing,
                                      Nothing);
         }
         case (7):
         {
             /* EncodedInstructionDefinition {{[]
                                           ;DD 
                                           ;Just (ModrmDigit 7)
                                           ;Just RMMemOnly
                                           ;Nothing
                                           ;[]
                                           ;Nothing
                                           ;Nothing}
                                          ;Prototype {protoMnemonic = "FNSTSW", protoOperands = [OpM2byte]}
                                          ;[(EncModrm_rm
                                            ,OperandReadWrite)]
                                          ;64bit: True
                                          ;legacy: True
                                          ;Store FPU status word at m2byte without checking for pending unmasked floating- point exceptions.} */
             
             ERASM_DECODER_DO_ACTION (1,
                                      Fnstsw,
                                      Just<OpM2byte>,
                                      Just<EncModrm_rm_mem>,
                                      Nothing,
                                      Nothing,
                                      Nothing,
                                      Nothing);
         }
         
      }
   case (0xde):
   if (modrm_mod3 (p))
      switch (modrm_reg_op (p)) {
         case (0):
         if (modrm_rm (p) == 0x1)
            {
                /* EncodedInstructionDefinition {{[]
                                              ;DE C1 
                                              ;Nothing
                                              ;Nothing
                                              ;Nothing
                                              ;[]
                                              ;Nothing
                                              ;Nothing}
                                             ;Prototype {protoMnemonic = "FADDP", protoOperands = []}
                                             ;[]
                                             ;64bit: True
                                             ;legacy: True
                                             ;Add ST(0) to ST(1), store result in ST(1), and pop the register stack.} */
                
                ERASM_DECODER_DO_ACTION (2,
                                         Faddp,
                                         Nothing,
                                         Nothing,
                                         Nothing,
                                         Nothing,
                                         Nothing,
                                         Nothing);
            }
         else
            {
                /* EncodedInstructionDefinition {{[]
                                              ;DE C0 
                                              ;Nothing
                                              ;Nothing
                                              ;Just RaddI
                                              ;[]
                                              ;Nothing
                                              ;Nothing}
                                             ;Prototype {protoMnemonic = "FADDP", protoOperands = [OpST,OpST0]}
                                             ;[(EncReg,OperandReadWrite)
                                              ,(EncImplicit,OperandReadWrite)]
                                             ;64bit: True
                                             ;legacy: True
                                             ;Add ST(0) to ST(i), store result in ST(i), and pop the register stack.} */
                
                ERASM_DECODER_DO_ACTION (2,
                                         Faddp,
                                         Just<OpST>,
                                         Just<EncReg>,
                                         Just<OpST0>,
                                         Just<EncImplicit>,
                                         Nothing,
                                         Nothing);
            }
         case (1):
         if (modrm_rm (p) == 0x1)
            {
                /* EncodedInstructionDefinition {{[]
                                              ;DE C9 
                                              ;Nothing
                                              ;Nothing
                                              ;Nothing
                                              ;[]
                                              ;Nothing
                                              ;Nothing}
                                             ;Prototype {protoMnemonic = "FMULP", protoOperands = []}
                                             ;[]
                                             ;64bit: True
                                             ;legacy: True
                                             ;Multiply ST(1) by ST(0), store result in ST(1), and pop the register stack.} */
                
                ERASM_DECODER_DO_ACTION (2,
                                         Fmulp,
                                         Nothing,
                                         Nothing,
                                         Nothing,
                                         Nothing,
                                         Nothing,
                                         Nothing);
            }
         else
            {
                /* EncodedInstructionDefinition {{[]
                                              ;DE C8 
                                              ;Nothing
                                              ;Nothing
                                              ;Just RaddI
                                              ;[]
                                              ;Nothing
                                              ;Nothing}
                                             ;Prototype {protoMnemonic = "FMULP", protoOperands = [OpST,OpST0]}
                                             ;[(EncReg,OperandReadWrite)
                                              ,(EncImplicit,OperandReadWrite)]
                                             ;64bit: True
                                             ;legacy: True
                                             ;Multiply ST(i) by ST(0), store result in ST(i), and pop the register stack.} */
                
                ERASM_DECODER_DO_ACTION (2,
                                         Fmulp,
                                         Just<OpST>,
                                         Just<EncReg>,
                                         Just<OpST0>,
                                         Just<EncImplicit>,
                                         Nothing,
                                         Nothing);
            }
         case (3):
         switch (modrm_rm (p)) {
            case (1):
            {
                /* EncodedInstructionDefinition {{[]
                                              ;DE D9 
                                              ;Nothing
                                              ;Nothing
                                              ;Nothing
                                              ;[]
                                              ;Nothing
                                              ;Nothing}
                                             ;Prototype {protoMnemonic = "FCOMPP", protoOperands = []}
                                             ;[]
                                             ;64bit: True
                                             ;legacy: True
                                             ;Compare ST(0) with ST(1) and pop register stack twice.} */
                
                ERASM_DECODER_DO_ACTION (2,
                                         Fcompp,
                                         Nothing,
                                         Nothing,
                                         Nothing,
                                         Nothing,
                                         Nothing,
                                         Nothing);
            }
            default:
            goto decode_error;
         }
         case (4):
         if (modrm_rm (p) == 0x1)
            {
                /* EncodedInstructionDefinition {{[]
                                              ;DE E1 
                                              ;Nothing
                                              ;Nothing
                                              ;Nothing
                                              ;[]
                                              ;Nothing
                                              ;Nothing}
                                             ;Prototype {protoMnemonic = "FSUBRP", protoOperands = []}
                                             ;[]
                                             ;64bit: True
                                             ;legacy: True
                                             ;Subtract ST(1) from ST(0), store result in ST(1), and pop register stack.} */
                
                ERASM_DECODER_DO_ACTION (2,
                                         Fsubrp,
                                         Nothing,
                                         Nothing,
                                         Nothing,
                                         Nothing,
                                         Nothing,
                                         Nothing);
            }
         else
            {
                /* EncodedInstructionDefinition {{[]
                                              ;DE E0 
                                              ;Nothing
                                              ;Nothing
                                              ;Just RaddI
                                              ;[]
                                              ;Nothing
                                              ;Nothing}
                                             ;Prototype {protoMnemonic = "FSUBRP", protoOperands = [OpST,OpST0]}
                                             ;[(EncReg,OperandReadWrite)
                                              ,(EncImplicit,OperandReadWrite)]
                                             ;64bit: True
                                             ;legacy: True
                                             ;Subtract ST(i) from ST(0), store result in ST(i), and pop register stack.} */
                
                ERASM_DECODER_DO_ACTION (2,
                                         Fsubrp,
                                         Just<OpST>,
                                         Just<EncReg>,
                                         Just<OpST0>,
                                         Just<EncImplicit>,
                                         Nothing,
                                         Nothing);
            }
         case (5):
         if (modrm_rm (p) == 0x1)
            {
                /* EncodedInstructionDefinition {{[]
                                              ;DE E9 
                                              ;Nothing
                                              ;Nothing
                                              ;Nothing
                                              ;[]
                                              ;Nothing
                                              ;Nothing}
                                             ;Prototype {protoMnemonic = "FSUBP", protoOperands = []}
                                             ;[]
                                             ;64bit: True
                                             ;legacy: True
                                             ;Subtract ST(0) from ST(1), store result in ST(1), and pop register stack.} */
                
                ERASM_DECODER_DO_ACTION (2,
                                         Fsubp,
                                         Nothing,
                                         Nothing,
                                         Nothing,
                                         Nothing,
                                         Nothing,
                                         Nothing);
            }
         else
            {
                /* EncodedInstructionDefinition {{[]
                                              ;DE E8 
                                              ;Nothing
                                              ;Nothing
                                              ;Just RaddI
                                              ;[]
                                              ;Nothing
                                              ;Nothing}
                                             ;Prototype {protoMnemonic = "FSUBP", protoOperands = [OpST,OpST0]}
                                             ;[(EncReg,OperandReadWrite)
                                              ,(EncImplicit,OperandReadWrite)]
                                             ;64bit: True
                                             ;legacy: True
                                             ;Subtract ST(0) from ST(i), store result in ST(i), and pop register stack.} */
                
                ERASM_DECODER_DO_ACTION (2,
                                         Fsubp,
                                         Just<OpST>,
                                         Just<EncReg>,
                                         Just<OpST0>,
                                         Just<EncImplicit>,
                                         Nothing,
                                         Nothing);
            }
         case (6):
         if (modrm_rm (p) == 0x1)
            {
                /* EncodedInstructionDefinition {{[]
                                              ;DE F1 
                                              ;Nothing
                                              ;Nothing
                                              ;Nothing
                                              ;[]
                                              ;Nothing
                                              ;Nothing}
                                             ;Prototype {protoMnemonic = "FDIVRP", protoOperands = []}
                                             ;[]
                                             ;64bit: True
                                             ;legacy: True
                                             ;Divide ST(0) by ST(1), store result in ST(1), and pop the register stack.} */
                
                ERASM_DECODER_DO_ACTION (2,
                                         Fdivrp,
                                         Nothing,
                                         Nothing,
                                         Nothing,
                                         Nothing,
                                         Nothing,
                                         Nothing);
            }
         else
            {
                /* EncodedInstructionDefinition {{[]
                                              ;DE F0 
                                              ;Nothing
                                              ;Nothing
                                              ;Just RaddI
                                              ;[]
                                              ;Nothing
                                              ;Nothing}
                                             ;Prototype {protoMnemonic = "FDIVRP", protoOperands = [OpST,OpST0]}
                                             ;[(EncReg,OperandReadWrite)
                                              ,(EncImplicit,OperandReadWrite)]
                                             ;64bit: True
                                             ;legacy: True
                                             ;Divide ST(0) by ST(i), store result in ST(i), and pop the register stack.} */
                
                ERASM_DECODER_DO_ACTION (2,
                                         Fdivrp,
                                         Just<OpST>,
                                         Just<EncReg>,
                                         Just<OpST0>,
                                         Just<EncImplicit>,
                                         Nothing,
                                         Nothing);
            }
         case (7):
         if (modrm_rm (p) == 0x1)
            {
                /* EncodedInstructionDefinition {{[]
                                              ;DE F9 
                                              ;Nothing
                                              ;Nothing
                                              ;Nothing
                                              ;[]
                                              ;Nothing
                                              ;Nothing}
                                             ;Prototype {protoMnemonic = "FDIVP", protoOperands = []}
                                             ;[]
                                             ;64bit: True
                                             ;legacy: True
                                             ;Divide ST(1) by ST(0), store result in ST(1), and pop the register stack.} */
                
                ERASM_DECODER_DO_ACTION (2,
                                         Fdivp,
                                         Nothing,
                                         Nothing,
                                         Nothing,
                                         Nothing,
                                         Nothing,
                                         Nothing);
            }
         else
            {
                /* EncodedInstructionDefinition {{[]
                                              ;DE F8 
                                              ;Nothing
                                              ;Nothing
                                              ;Just RaddI
                                              ;[]
                                              ;Nothing
                                              ;Nothing}
                                             ;Prototype {protoMnemonic = "FDIVP", protoOperands = [OpST,OpST0]}
                                             ;[(EncReg,OperandReadWrite)
                                              ,(EncImplicit,OperandReadWrite)]
                                             ;64bit: True
                                             ;legacy: True
                                             ;Divide ST(i) by ST(0), store result in ST(i), and pop the register stack.} */
                
                ERASM_DECODER_DO_ACTION (2,
                                         Fdivp,
                                         Just<OpST>,
                                         Just<EncReg>,
                                         Just<OpST0>,
                                         Just<EncImplicit>,
                                         Nothing,
                                         Nothing);
            }
         
      }
   else
      switch (modrm_reg_op (p)) {
         case (0):
         {
             /* EncodedInstructionDefinition {{[]
                                           ;DE 
                                           ;Just (ModrmDigit 0)
                                           ;Just RMMemOnly
                                           ;Nothing
                                           ;[]
                                           ;Nothing
                                           ;Nothing}
                                          ;Prototype {protoMnemonic = "FIADD", protoOperands = [OpM16Int]}
                                          ;[(EncModrm_rm
                                            ,OperandReadWrite)]
                                          ;64bit: True
                                          ;legacy: True
                                          ;Add m16int to ST(0) and store result in ST(0).} */
             
             ERASM_DECODER_DO_ACTION (1,
                                      Fiadd,
                                      Just<OpM16Int>,
                                      Just<EncModrm_rm_mem>,
                                      Nothing,
                                      Nothing,
                                      Nothing,
                                      Nothing);
         }
         case (1):
         {
             /* EncodedInstructionDefinition {{[]
                                           ;DE 
                                           ;Just (ModrmDigit 1)
                                           ;Just RMMemOnly
                                           ;Nothing
                                           ;[]
                                           ;Nothing
                                           ;Nothing}
                                          ;Prototype {protoMnemonic = "FIMUL", protoOperands = [OpM16Int]}
                                          ;[(EncModrm_rm
                                            ,OperandReadWrite)]
                                          ;64bit: True
                                          ;legacy: True
                                          ;Multiply ST(0) by m16int and store result in ST(0).} */
             
             ERASM_DECODER_DO_ACTION (1,
                                      Fimul,
                                      Just<OpM16Int>,
                                      Just<EncModrm_rm_mem>,
                                      Nothing,
                                      Nothing,
                                      Nothing,
                                      Nothing);
         }
         case (2):
         {
             /* EncodedInstructionDefinition {{[]
                                           ;DE 
                                           ;Just (ModrmDigit 2)
                                           ;Just RMMemOnly
                                           ;Nothing
                                           ;[]
                                           ;Nothing
                                           ;Nothing}
                                          ;Prototype {protoMnemonic = "FICOM", protoOperands = [OpM16Int]}
                                          ;[(EncModrm_rm
                                            ,OperandReadWrite)]
                                          ;64bit: True
                                          ;legacy: True
                                          ;Compare ST(0) with m16int.} */
             
             ERASM_DECODER_DO_ACTION (1,
                                      Ficom,
                                      Just<OpM16Int>,
                                      Just<EncModrm_rm_mem>,
                                      Nothing,
                                      Nothing,
                                      Nothing,
                                      Nothing);
         }
         case (3):
         {
             /* EncodedInstructionDefinition {{[]
                                           ;DE 
                                           ;Just (ModrmDigit 3)
                                           ;Just RMMemOnly
                                           ;Nothing
                                           ;[]
                                           ;Nothing
                                           ;Nothing}
                                          ;Prototype {protoMnemonic = "FICOMP", protoOperands = [OpM16Int]}
                                          ;[(EncModrm_rm
                                            ,OperandReadWrite)]
                                          ;64bit: True
                                          ;legacy: True
                                          ;Compare ST(0) with m16int and pop stack register.} */
             
             ERASM_DECODER_DO_ACTION (1,
                                      Ficomp,
                                      Just<OpM16Int>,
                                      Just<EncModrm_rm_mem>,
                                      Nothing,
                                      Nothing,
                                      Nothing,
                                      Nothing);
         }
         case (4):
         {
             /* EncodedInstructionDefinition {{[]
                                           ;DE 
                                           ;Just (ModrmDigit 4)
                                           ;Just RMMemOnly
                                           ;Nothing
                                           ;[]
                                           ;Nothing
                                           ;Nothing}
                                          ;Prototype {protoMnemonic = "FISUB", protoOperands = [OpM16Int]}
                                          ;[(EncModrm_rm
                                            ,OperandReadWrite)]
                                          ;64bit: True
                                          ;legacy: True
                                          ;Subtract m16int from ST(0) and store result in ST(0).} */
             
             ERASM_DECODER_DO_ACTION (1,
                                      Fisub,
                                      Just<OpM16Int>,
                                      Just<EncModrm_rm_mem>,
                                      Nothing,
                                      Nothing,
                                      Nothing,
                                      Nothing);
         }
         case (5):
         {
             /* EncodedInstructionDefinition {{[]
                                           ;DE 
                                           ;Just (ModrmDigit 5)
                                           ;Just RMMemOnly
                                           ;Nothing
                                           ;[]
                                           ;Nothing
                                           ;Nothing}
                                          ;Prototype {protoMnemonic = "FISUBR", protoOperands = [OpM16Int]}
                                          ;[(EncModrm_rm
                                            ,OperandReadWrite)]
                                          ;64bit: True
                                          ;legacy: True
                                          ;Subtract ST(0) from m16int and store result in ST(0).} */
             
             ERASM_DECODER_DO_ACTION (1,
                                      Fisubr,
                                      Just<OpM16Int>,
                                      Just<EncModrm_rm_mem>,
                                      Nothing,
                                      Nothing,
                                      Nothing,
                                      Nothing);
         }
         case (6):
         {
             /* EncodedInstructionDefinition {{[]
                                           ;DE 
                                           ;Just (ModrmDigit 6)
                                           ;Just RMMemOnly
                                           ;Nothing
                                           ;[]
                                           ;Nothing
                                           ;Nothing}
                                          ;Prototype {protoMnemonic = "FIDIV", protoOperands = [OpM16Int]}
                                          ;[(EncModrm_rm
                                            ,OperandReadWrite)]
                                          ;64bit: True
                                          ;legacy: True
                                          ;Divide ST(0) by m64int and store result in ST(0).} */
             
             ERASM_DECODER_DO_ACTION (1,
                                      Fidiv,
                                      Just<OpM16Int>,
                                      Just<EncModrm_rm_mem>,
                                      Nothing,
                                      Nothing,
                                      Nothing,
                                      Nothing);
         }
         case (7):
         {
             /* EncodedInstructionDefinition {{[]
                                           ;DE 
                                           ;Just (ModrmDigit 7)
                                           ;Just RMMemOnly
                                           ;Nothing
                                           ;[]
                                           ;Nothing
                                           ;Nothing}
                                          ;Prototype {protoMnemonic = "FIDIVR", protoOperands = [OpM16Int]}
                                          ;[(EncModrm_rm
                                            ,OperandReadWrite)]
                                          ;64bit: True
                                          ;legacy: True
                                          ;Divide m16int by ST(0) and store result in ST(0).} */
             
             ERASM_DECODER_DO_ACTION (1,
                                      Fidivr,
                                      Just<OpM16Int>,
                                      Just<EncModrm_rm_mem>,
                                      Nothing,
                                      Nothing,
                                      Nothing,
                                      Nothing);
         }
         
      }
   case (0xdf):
   if (modrm_mod3 (p))
      switch (modrm_reg_op (p)) {
         case (4):
         switch (modrm_rm (p)) {
            case (0):
            {
                /* EncodedInstructionDefinition {{[]
                                              ;DF E0 
                                              ;Nothing
                                              ;Nothing
                                              ;Nothing
                                              ;[]
                                              ;Nothing
                                              ;Nothing}
                                             ;Prototype {protoMnemonic = "FNSTSW", protoOperands = [OpAX]}
                                             ;[(EncImplicit
                                               ,OperandReadWrite)]
                                             ;64bit: True
                                             ;legacy: True
                                             ;Store FPU status word in AX register without checking for pending unmasked floating- point exceptions.} */
                
                ERASM_DECODER_DO_ACTION (2,
                                         Fnstsw,
                                         Just<OpAX>,
                                         Just<EncImplicit>,
                                         Nothing,
                                         Nothing,
                                         Nothing,
                                         Nothing);
            }
            default:
            goto decode_error;
         }
         case (5):
         {
             /* EncodedInstructionDefinition {{[]
                                           ;DF E8 
                                           ;Nothing
                                           ;Nothing
                                           ;Just RaddI
                                           ;[]
                                           ;Nothing
                                           ;Nothing}
                                          ;Prototype {protoMnemonic = "FUCOMIP", protoOperands = [OpST0,OpST]}
                                          ;[(EncImplicit,OperandReadWrite)
                                           ,(EncReg,OperandReadWrite)]
                                          ;64bit: True
                                          ;legacy: True
                                          ;Compare ST(0) with ST(i), check for ordered values, set status flags accordingly, and pop register stack.} */
             
             ERASM_DECODER_DO_ACTION (2,
                                      Fucomip,
                                      Just<OpST0>,
                                      Just<EncImplicit>,
                                      Just<OpST>,
                                      Just<EncReg>,
                                      Nothing,
                                      Nothing);
         }
         case (6):
         {
             /* EncodedInstructionDefinition {{[]
                                           ;DF F0 
                                           ;Nothing
                                           ;Nothing
                                           ;Just RaddI
                                           ;[]
                                           ;Nothing
                                           ;Nothing}
                                          ;Prototype {protoMnemonic = "FCOMIP", protoOperands = [OpST0,OpST]}
                                          ;[(EncImplicit,OperandReadWrite)
                                           ,(EncReg,OperandReadWrite)]
                                          ;64bit: True
                                          ;legacy: True
                                          ;Compare ST(0) with ST(i), set status flags accordingly, and pop register stack.} */
             
             ERASM_DECODER_DO_ACTION (2,
                                      Fcomip,
                                      Just<OpST0>,
                                      Just<EncImplicit>,
                                      Just<OpST>,
                                      Just<EncReg>,
                                      Nothing,
                                      Nothing);
         }
         
      }
   else
      switch (modrm_reg_op (p)) {
         case (0):
         {
             /* EncodedInstructionDefinition {{[]
                                           ;DF 
                                           ;Just (ModrmDigit 0)
                                           ;Just RMMemOnly
                                           ;Nothing
                                           ;[]
                                           ;Nothing
                                           ;Nothing}
                                          ;Prototype {protoMnemonic = "FILD", protoOperands = [OpM16Int]}
                                          ;[(EncModrm_rm
                                            ,OperandReadWrite)]
                                          ;64bit: True
                                          ;legacy: True
                                          ;Push m16int onto the FPU register stack.} */
             
             ERASM_DECODER_DO_ACTION (1,
                                      Fild,
                                      Just<OpM16Int>,
                                      Just<EncModrm_rm_mem>,
                                      Nothing,
                                      Nothing,
                                      Nothing,
                                      Nothing);
         }
         case (1):
         {
             /* EncodedInstructionDefinition {{[]
                                           ;DF 
                                           ;Just (ModrmDigit 1)
                                           ;Just RMMemOnly
                                           ;Nothing
                                           ;[]
                                           ;Nothing
                                           ;Nothing}
                                          ;Prototype {protoMnemonic = "FISTTP", protoOperands = [OpM16Int]}
                                          ;[(EncModrm_rm
                                            ,OperandReadWrite)]
                                          ;64bit: True
                                          ;legacy: True
                                          ;Store ST(0) in m16int with truncation.} */
             
             ERASM_DECODER_DO_ACTION (1,
                                      Fisttp,
                                      Just<OpM16Int>,
                                      Just<EncModrm_rm_mem>,
                                      Nothing,
                                      Nothing,
                                      Nothing,
                                      Nothing);
         }
         case (2):
         {
             /* EncodedInstructionDefinition {{[]
                                           ;DF 
                                           ;Just (ModrmDigit 2)
                                           ;Just RMMemOnly
                                           ;Nothing
                                           ;[]
                                           ;Nothing
                                           ;Nothing}
                                          ;Prototype {protoMnemonic = "FIST", protoOperands = [OpM16Int]}
                                          ;[(EncModrm_rm
                                            ,OperandReadWrite)]
                                          ;64bit: True
                                          ;legacy: True
                                          ;Store ST(0) in m16int.} */
             
             ERASM_DECODER_DO_ACTION (1,
                                      Fist,
                                      Just<OpM16Int>,
                                      Just<EncModrm_rm_mem>,
                                      Nothing,
                                      Nothing,
                                      Nothing,
                                      Nothing);
         }
         case (3):
         {
             /* EncodedInstructionDefinition {{[]
                                           ;DF 
                                           ;Just (ModrmDigit 3)
                                           ;Just RMMemOnly
                                           ;Nothing
                                           ;[]
                                           ;Nothing
                                           ;Nothing}
                                          ;Prototype {protoMnemonic = "FISTP", protoOperands = [OpM16Int]}
                                          ;[(EncModrm_rm
                                            ,OperandReadWrite)]
                                          ;64bit: True
                                          ;legacy: True
                                          ;Store ST(0) in m16int and pop register stack.} */
             
             ERASM_DECODER_DO_ACTION (1,
                                      Fistp,
                                      Just<OpM16Int>,
                                      Just<EncModrm_rm_mem>,
                                      Nothing,
                                      Nothing,
                                      Nothing,
                                      Nothing);
         }
         case (4):
         {
             /* EncodedInstructionDefinition {{[]
                                           ;DF 
                                           ;Just (ModrmDigit 4)
                                           ;Just RMMemOnly
                                           ;Nothing
                                           ;[]
                                           ;Nothing
                                           ;Nothing}
                                          ;Prototype {protoMnemonic = "FBLD", protoOperands = [OpM80Dec]}
                                          ;[(EncModrm_rm
                                            ,OperandReadWrite)]
                                          ;64bit: True
                                          ;legacy: True
                                          ;Convert BCD value to floating-point and push onto the FPU stack.} */
             
             ERASM_DECODER_DO_ACTION (1,
                                      Fbld,
                                      Just<OpM80Dec>,
                                      Just<EncModrm_rm_mem>,
                                      Nothing,
                                      Nothing,
                                      Nothing,
                                      Nothing);
         }
         case (5):
         {
             /* EncodedInstructionDefinition {{[]
                                           ;DF 
                                           ;Just (ModrmDigit 5)
                                           ;Just RMMemOnly
                                           ;Nothing
                                           ;[]
                                           ;Nothing
                                           ;Nothing}
                                          ;Prototype {protoMnemonic = "FILD", protoOperands = [OpM64Int]}
                                          ;[(EncModrm_rm
                                            ,OperandReadWrite)]
                                          ;64bit: True
                                          ;legacy: True
                                          ;Push m64int onto the FPU register stack.} */
             
             ERASM_DECODER_DO_ACTION (1,
                                      Fild,
                                      Just<OpM64Int>,
                                      Just<EncModrm_rm_mem>,
                                      Nothing,
                                      Nothing,
                                      Nothing,
                                      Nothing);
         }
         case (6):
         {
             /* EncodedInstructionDefinition {{[]
                                           ;DF 
                                           ;Just (ModrmDigit 6)
                                           ;Just RMMemOnly
                                           ;Nothing
                                           ;[]
                                           ;Nothing
                                           ;Nothing}
                                          ;Prototype {protoMnemonic = "FBSTP", protoOperands = [OpM80BCD]}
                                          ;[(EncModrm_rm
                                            ,OperandReadWrite)]
                                          ;64bit: True
                                          ;legacy: True
                                          ;Store ST(0) in m80bcd and pop ST(0).} */
             
             ERASM_DECODER_DO_ACTION (1,
                                      Fbstp,
                                      Just<OpM80BCD>,
                                      Just<EncModrm_rm_mem>,
                                      Nothing,
                                      Nothing,
                                      Nothing,
                                      Nothing);
         }
         case (7):
         {
             /* EncodedInstructionDefinition {{[]
                                           ;DF 
                                           ;Just (ModrmDigit 7)
                                           ;Just RMMemOnly
                                           ;Nothing
                                           ;[]
                                           ;Nothing
                                           ;Nothing}
                                          ;Prototype {protoMnemonic = "FISTP", protoOperands = [OpM64Int]}
                                          ;[(EncModrm_rm
                                            ,OperandReadWrite)]
                                          ;64bit: True
                                          ;legacy: True
                                          ;Store ST(0) in m64int and pop register stack.} */
             
             ERASM_DECODER_DO_ACTION (1,
                                      Fistp,
                                      Just<OpM64Int>,
                                      Just<EncModrm_rm_mem>,
                                      Nothing,
                                      Nothing,
                                      Nothing,
                                      Nothing);
         }
         
      }
   case (0xe0):
   {
       /* EncodedInstructionDefinition {{[]
                                     ;E0 
                                     ;Nothing
                                     ;Nothing
                                     ;Nothing
                                     ;[IMM_CB]
                                     ;Nothing
                                     ;Nothing}
                                    ;Prototype {protoMnemonic = "LOOPNE", protoOperands = [OpRel8]}
                                    ;[(EncOffset,OperandReadWrite)]
                                    ;64bit: True
                                    ;legacy: True
                                    ;Decrement count; jump short if count ≠ 0 and ZF = 0.} */
       
       ERASM_DECODER_DO_ACTION (1,
                                Loopne,
                                Just<OpRel8>,
                                Just<EncOffset>,
                                Nothing,
                                Nothing,
                                Nothing,
                                Nothing);
   }
   case (0xe1):
   {
       /* EncodedInstructionDefinition {{[]
                                     ;E1 
                                     ;Nothing
                                     ;Nothing
                                     ;Nothing
                                     ;[IMM_CB]
                                     ;Nothing
                                     ;Nothing}
                                    ;Prototype {protoMnemonic = "LOOPE", protoOperands = [OpRel8]}
                                    ;[(EncOffset,OperandReadWrite)]
                                    ;64bit: True
                                    ;legacy: True
                                    ;Decrement count; jump short if count ≠ 0 and ZF = 1.} */
       
       ERASM_DECODER_DO_ACTION (1,
                                Loope,
                                Just<OpRel8>,
                                Just<EncOffset>,
                                Nothing,
                                Nothing,
                                Nothing,
                                Nothing);
   }
   case (0xe2):
   {
       /* EncodedInstructionDefinition {{[]
                                     ;E2 
                                     ;Nothing
                                     ;Nothing
                                     ;Nothing
                                     ;[IMM_CB]
                                     ;Nothing
                                     ;Nothing}
                                    ;Prototype {protoMnemonic = "LOOP", protoOperands = [OpRel8]}
                                    ;[(EncOffset,OperandReadWrite)]
                                    ;64bit: True
                                    ;legacy: True
                                    ;Decrement count; jump short if count ≠ 0.} */
       
       ERASM_DECODER_DO_ACTION (1,
                                Loop,
                                Just<OpRel8>,
                                Just<EncOffset>,
                                Nothing,
                                Nothing,
                                Nothing,
                                Nothing);
   }
   case (0xe3):
   if (is_addr32)
      {
          /* EncodedInstructionDefinition {{[]
                                        ;E3 
                                        ;Nothing
                                        ;Nothing
                                        ;Nothing
                                        ;[IMM_CB]
                                        ;Nothing
                                        ;Just Addr32}
                                       ;Prototype {protoMnemonic = "JECXZ", protoOperands = [OpRel8]}
                                       ;[(EncOffset,OperandReadWrite)]
                                       ;64bit: True
                                       ;legacy: True
                                       ;Jump short if ECX register is 0.} */
          
          ERASM_DECODER_DO_ACTION (1,
                                   Jecxz,
                                   Just<OpRel8>,
                                   Just<EncOffset>,
                                   Nothing,
                                   Nothing,
                                   Nothing,
                                   Nothing);
      }
   else
      {
          /* EncodedInstructionDefinition {{[]
                                        ;E3 
                                        ;Nothing
                                        ;Nothing
                                        ;Nothing
                                        ;[IMM_CB]
                                        ;Nothing
                                        ;Just Addr16}
                                       ;Prototype {protoMnemonic = "JCXZ", protoOperands = [OpRel8]}
                                       ;[(EncOffset,OperandReadWrite)]
                                       ;64bit: False
                                       ;legacy: True
                                       ;Jump short if CX register is 0.} */
          
          ERASM_DECODER_DO_ACTION (1,
                                   Jcxz,
                                   Just<OpRel8>,
                                   Just<EncOffset>,
                                   Nothing,
                                   Nothing,
                                   Nothing,
                                   Nothing);
      }
   case (0xe4):
   {
       /* EncodedInstructionDefinition {{[]
                                     ;E4 
                                     ;Nothing
                                     ;Nothing
                                     ;Nothing
                                     ;[IMM_IB]
                                     ;Nothing
                                     ;Nothing}
                                    ;Prototype {protoMnemonic = "IN", protoOperands = [OpAL,OpIMM8]}
                                    ;[(EncImplicit,OperandReadWrite)
                                     ,(EncIMM,OperandReadWrite)]
                                    ;64bit: True
                                    ;legacy: True
                                    ;Input byte from imm8 I/O port address into AL.} */
       
       ERASM_DECODER_DO_ACTION (1,
                                In,
                                Just<OpAL>,
                                Just<EncImplicit>,
                                Just<OpIMM8>,
                                Just<EncIMM>,
                                Nothing,
                                Nothing);
   }
   case (0xe5):
   if (is_data16)
      {
          /* EncodedInstructionDefinition {{[]
                                        ;E5 
                                        ;Nothing
                                        ;Nothing
                                        ;Nothing
                                        ;[IMM_IB]
                                        ;Just Op16
                                        ;Nothing}
                                       ;Prototype {protoMnemonic = "IN", protoOperands = [OpAX,OpIMM8]}
                                       ;[(EncImplicit,OperandReadWrite)
                                        ,(EncIMM,OperandReadWrite)]
                                       ;64bit: True
                                       ;legacy: True
                                       ;Input word from imm8 I/O port address into AX.} */
          
          ERASM_DECODER_DO_ACTION (1,
                                   In,
                                   Just<OpAX>,
                                   Just<EncImplicit>,
                                   Just<OpIMM8>,
                                   Just<EncIMM>,
                                   Nothing,
                                   Nothing);
      }
   else
      {
          /* EncodedInstructionDefinition {{[]
                                        ;E5 
                                        ;Nothing
                                        ;Nothing
                                        ;Nothing
                                        ;[IMM_IB]
                                        ;Just Op32
                                        ;Nothing}
                                       ;Prototype {protoMnemonic = "IN", protoOperands = [OpEAX,OpIMM8]}
                                       ;[(EncImplicit,OperandReadWrite)
                                        ,(EncIMM,OperandReadWrite)]
                                       ;64bit: True
                                       ;legacy: True
                                       ;Input dword from imm8 I/O port address into EAX.} */
          
          ERASM_DECODER_DO_ACTION (1,
                                   In,
                                   Just<OpEAX>,
                                   Just<EncImplicit>,
                                   Just<OpIMM8>,
                                   Just<EncIMM>,
                                   Nothing,
                                   Nothing);
      }
   case (0xe6):
   {
       /* EncodedInstructionDefinition {{[]
                                     ;E6 
                                     ;Nothing
                                     ;Nothing
                                     ;Nothing
                                     ;[IMM_IB]
                                     ;Nothing
                                     ;Nothing}
                                    ;Prototype {protoMnemonic = "OUT", protoOperands = [OpIMM8,OpAL]}
                                    ;[(EncIMM,OperandReadWrite)
                                     ,(EncImplicit,OperandReadWrite)]
                                    ;64bit: True
                                    ;legacy: True
                                    ;Output byte in AL to I/O port address imm8.} */
       
       ERASM_DECODER_DO_ACTION (1,
                                Out,
                                Just<OpIMM8>,
                                Just<EncIMM>,
                                Just<OpAL>,
                                Just<EncImplicit>,
                                Nothing,
                                Nothing);
   }
   case (0xe7):
   if (is_data16)
      {
          /* EncodedInstructionDefinition {{[]
                                        ;E7 
                                        ;Nothing
                                        ;Nothing
                                        ;Nothing
                                        ;[IMM_IB]
                                        ;Just Op16
                                        ;Nothing}
                                       ;Prototype {protoMnemonic = "OUT", protoOperands = [OpIMM8,OpAX]}
                                       ;[(EncIMM,OperandReadWrite)
                                        ,(EncImplicit,OperandReadWrite)]
                                       ;64bit: True
                                       ;legacy: True
                                       ;Output word in AX to I/O port address imm8.} */
          
          ERASM_DECODER_DO_ACTION (1,
                                   Out,
                                   Just<OpIMM8>,
                                   Just<EncIMM>,
                                   Just<OpAX>,
                                   Just<EncImplicit>,
                                   Nothing,
                                   Nothing);
      }
   else
      {
          /* EncodedInstructionDefinition {{[]
                                        ;E7 
                                        ;Nothing
                                        ;Nothing
                                        ;Nothing
                                        ;[IMM_IB]
                                        ;Just Op32
                                        ;Nothing}
                                       ;Prototype {protoMnemonic = "OUT", protoOperands = [OpIMM8,OpEAX]}
                                       ;[(EncIMM,OperandReadWrite)
                                        ,(EncImplicit,OperandReadWrite)]
                                       ;64bit: True
                                       ;legacy: True
                                       ;Output doubleword in EAX to I/O port address imm8.} */
          
          ERASM_DECODER_DO_ACTION (1,
                                   Out,
                                   Just<OpIMM8>,
                                   Just<EncIMM>,
                                   Just<OpEAX>,
                                   Just<EncImplicit>,
                                   Nothing,
                                   Nothing);
      }
   case (0xe8):
   if (is_data16)
      {
          /* EncodedInstructionDefinition {{[]
                                        ;E8 
                                        ;Nothing
                                        ;Nothing
                                        ;Nothing
                                        ;[IMM_CW]
                                        ;Just Op16
                                        ;Nothing}
                                       ;Prototype {protoMnemonic = "CALL", protoOperands = [OpRel16]}
                                       ;[(EncOffset,OperandReadWrite)]
                                       ;64bit: False
                                       ;legacy: True
                                       ;Call near, relative, displacement relative to next instruction.} */
          
          ERASM_DECODER_DO_ACTION (1,
                                   Call,
                                   Just<OpRel16>,
                                   Just<EncOffset>,
                                   Nothing,
                                   Nothing,
                                   Nothing,
                                   Nothing);
      }
   else
      {
          /* EncodedInstructionDefinition {{[]
                                        ;E8 
                                        ;Nothing
                                        ;Nothing
                                        ;Nothing
                                        ;[IMM_CD]
                                        ;Just Op32
                                        ;Nothing}
                                       ;Prototype {protoMnemonic = "CALL", protoOperands = [OpRel32]}
                                       ;[(EncOffset,OperandReadWrite)]
                                       ;64bit: True
                                       ;legacy: True
                                       ;Call near, relative, displacement relative to next instruction. 32-bit displacement sign extended to 64-bits in 64-bit mode.} */
          
          ERASM_DECODER_DO_ACTION (1,
                                   Call,
                                   Just<OpRel32>,
                                   Just<EncOffset>,
                                   Nothing,
                                   Nothing,
                                   Nothing,
                                   Nothing);
      }
   case (0xe9):
   if (is_data16)
      {
          /* EncodedInstructionDefinition {{[]
                                        ;E9 
                                        ;Nothing
                                        ;Nothing
                                        ;Nothing
                                        ;[IMM_CW]
                                        ;Just Op16
                                        ;Nothing}
                                       ;Prototype {protoMnemonic = "JMP", protoOperands = [OpRel16]}
                                       ;[(EncOffset,OperandReadWrite)]
                                       ;64bit: False
                                       ;legacy: True
                                       ;Jump near, relative, displacement relative to next instruction. Not supported in 64-bit mode.} */
          
          ERASM_DECODER_DO_ACTION (1,
                                   Jmp,
                                   Just<OpRel16>,
                                   Just<EncOffset>,
                                   Nothing,
                                   Nothing,
                                   Nothing,
                                   Nothing);
      }
   else
      {
          /* EncodedInstructionDefinition {{[]
                                        ;E9 
                                        ;Nothing
                                        ;Nothing
                                        ;Nothing
                                        ;[IMM_CD]
                                        ;Just Op32
                                        ;Nothing}
                                       ;Prototype {protoMnemonic = "JMP", protoOperands = [OpRel32]}
                                       ;[(EncOffset,OperandReadWrite)]
                                       ;64bit: True
                                       ;legacy: True
                                       ;Jump near, relative, RIP = RIP + 32-bit displacement sign extended to 64-bits} */
          
          ERASM_DECODER_DO_ACTION (1,
                                   Jmp,
                                   Just<OpRel32>,
                                   Just<EncOffset>,
                                   Nothing,
                                   Nothing,
                                   Nothing,
                                   Nothing);
      }
   case (0xea):
   if (is_data16)
      {
          /* EncodedInstructionDefinition {{[]
                                        ;EA 
                                        ;Nothing
                                        ;Nothing
                                        ;Nothing
                                        ;[IMM_CD]
                                        ;Just Op16
                                        ;Nothing}
                                       ;Prototype {protoMnemonic = "JMP", protoOperands = [OpFar16]}
                                       ;[(EncOffset,OperandReadWrite)]
                                       ;64bit: False
                                       ;legacy: True
                                       ;Jump far, absolute, address given in operand} */
          
          ERASM_DECODER_DO_ACTION (1,
                                   Jmp,
                                   Just<OpFar16>,
                                   Just<EncOffset>,
                                   Nothing,
                                   Nothing,
                                   Nothing,
                                   Nothing);
      }
   else
      {
          /* EncodedInstructionDefinition {{[]
                                        ;EA 
                                        ;Nothing
                                        ;Nothing
                                        ;Nothing
                                        ;[IMM_CP]
                                        ;Just Op32
                                        ;Nothing}
                                       ;Prototype {protoMnemonic = "JMP", protoOperands = [OpFar32]}
                                       ;[(EncOffset,OperandReadWrite)]
                                       ;64bit: False
                                       ;legacy: True
                                       ;Jump far, absolute, address given in operand} */
          
          ERASM_DECODER_DO_ACTION (1,
                                   Jmp,
                                   Just<OpFar32>,
                                   Just<EncOffset>,
                                   Nothing,
                                   Nothing,
                                   Nothing,
                                   Nothing);
      }
   case (0xeb):
   {
       /* EncodedInstructionDefinition {{[]
                                     ;EB 
                                     ;Nothing
                                     ;Nothing
                                     ;Nothing
                                     ;[IMM_CB]
                                     ;Nothing
                                     ;Nothing}
                                    ;Prototype {protoMnemonic = "JMP", protoOperands = [OpRel8]}
                                    ;[(EncOffset,OperandReadWrite)]
                                    ;64bit: True
                                    ;legacy: True
                                    ;Jump short, RIP = RIP + 8-bit displacement sign extended to 64-bits} */
       
       ERASM_DECODER_DO_ACTION (1,
                                Jmp,
                                Just<OpRel8>,
                                Just<EncOffset>,
                                Nothing,
                                Nothing,
                                Nothing,
                                Nothing);
   }
   case (0xec):
   {
       /* EncodedInstructionDefinition {{[]
                                     ;EC 
                                     ;Nothing
                                     ;Nothing
                                     ;Nothing
                                     ;[]
                                     ;Nothing
                                     ;Nothing}
                                    ;Prototype {protoMnemonic = "IN", protoOperands = [OpAL,OpDX]}
                                    ;[(EncImplicit,OperandReadWrite)
                                     ,(EncImplicit,OperandReadWrite)]
                                    ;64bit: True
                                    ;legacy: True
                                    ;Input byte from I/O port in DX into AL.} */
       
       ERASM_DECODER_DO_ACTION (1,
                                In,
                                Just<OpAL>,
                                Just<EncImplicit>,
                                Just<OpDX>,
                                Just<EncImplicit>,
                                Nothing,
                                Nothing);
   }
   case (0xed):
   if (is_data16)
      {
          /* EncodedInstructionDefinition {{[]
                                        ;ED 
                                        ;Nothing
                                        ;Nothing
                                        ;Nothing
                                        ;[]
                                        ;Just Op16
                                        ;Nothing}
                                       ;Prototype {protoMnemonic = "IN", protoOperands = [OpAX,OpDX]}
                                       ;[(EncImplicit,OperandReadWrite)
                                        ,(EncImplicit,OperandReadWrite)]
                                       ;64bit: True
                                       ;legacy: True
                                       ;Input word from I/O port in DX into AX.} */
          
          ERASM_DECODER_DO_ACTION (1,
                                   In,
                                   Just<OpAX>,
                                   Just<EncImplicit>,
                                   Just<OpDX>,
                                   Just<EncImplicit>,
                                   Nothing,
                                   Nothing);
      }
   else
      {
          /* EncodedInstructionDefinition {{[]
                                        ;ED 
                                        ;Nothing
                                        ;Nothing
                                        ;Nothing
                                        ;[]
                                        ;Just Op32
                                        ;Nothing}
                                       ;Prototype {protoMnemonic = "IN", protoOperands = [OpEAX,OpDX]}
                                       ;[(EncImplicit,OperandReadWrite)
                                        ,(EncImplicit,OperandReadWrite)]
                                       ;64bit: True
                                       ;legacy: True
                                       ;Input doubleword from I/O port in DX into EAX.} */
          
          ERASM_DECODER_DO_ACTION (1,
                                   In,
                                   Just<OpEAX>,
                                   Just<EncImplicit>,
                                   Just<OpDX>,
                                   Just<EncImplicit>,
                                   Nothing,
                                   Nothing);
      }
   case (0xee):
   {
       /* EncodedInstructionDefinition {{[]
                                     ;EE 
                                     ;Nothing
                                     ;Nothing
                                     ;Nothing
                                     ;[]
                                     ;Nothing
                                     ;Nothing}
                                    ;Prototype {protoMnemonic = "OUT", protoOperands = [OpDX,OpAL]}
                                    ;[(EncImplicit,OperandReadWrite)
                                     ,(EncImplicit,OperandReadWrite)]
                                    ;64bit: True
                                    ;legacy: True
                                    ;Output byte in AL to I/O port address in DX.} */
       
       ERASM_DECODER_DO_ACTION (1,
                                Out,
                                Just<OpDX>,
                                Just<EncImplicit>,
                                Just<OpAL>,
                                Just<EncImplicit>,
                                Nothing,
                                Nothing);
   }
   case (0xef):
   if (is_data16)
      {
          /* EncodedInstructionDefinition {{[]
                                        ;EF 
                                        ;Nothing
                                        ;Nothing
                                        ;Nothing
                                        ;[]
                                        ;Just Op16
                                        ;Nothing}
                                       ;Prototype {protoMnemonic = "OUT", protoOperands = [OpDX,OpAX]}
                                       ;[(EncImplicit,OperandReadWrite)
                                        ,(EncImplicit,OperandReadWrite)]
                                       ;64bit: True
                                       ;legacy: True
                                       ;Output word in AX to I/O port address in DX.} */
          
          ERASM_DECODER_DO_ACTION (1,
                                   Out,
                                   Just<OpDX>,
                                   Just<EncImplicit>,
                                   Just<OpAX>,
                                   Just<EncImplicit>,
                                   Nothing,
                                   Nothing);
      }
   else
      {
          /* EncodedInstructionDefinition {{[]
                                        ;EF 
                                        ;Nothing
                                        ;Nothing
                                        ;Nothing
                                        ;[]
                                        ;Just Op32
                                        ;Nothing}
                                       ;Prototype {protoMnemonic = "OUT", protoOperands = [OpDX,OpEAX]}
                                       ;[(EncImplicit,OperandReadWrite)
                                        ,(EncImplicit,OperandReadWrite)]
                                       ;64bit: True
                                       ;legacy: True
                                       ;Output doubleword in EAX to I/O port address in DX.} */
          
          ERASM_DECODER_DO_ACTION (1,
                                   Out,
                                   Just<OpDX>,
                                   Just<EncImplicit>,
                                   Just<OpEAX>,
                                   Just<EncImplicit>,
                                   Nothing,
                                   Nothing);
      }
   case (0xf0):
   ERASM_DECODER_PREFIX (lock);
   case (0xf2):
   ERASM_DECODER_PREFIX (repne);
   case (0xf3):
   ERASM_DECODER_PREFIX (rep);
   case (0xf4):
   {
       /* EncodedInstructionDefinition {{[]
                                     ;F4 
                                     ;Nothing
                                     ;Nothing
                                     ;Nothing
                                     ;[]
                                     ;Nothing
                                     ;Nothing}
                                    ;Prototype {protoMnemonic = "HLT", protoOperands = []}
                                    ;[]
                                    ;64bit: True
                                    ;legacy: True
                                    ;Halt} */
       
       ERASM_DECODER_DO_ACTION (1,
                                Hlt,
                                Nothing,
                                Nothing,
                                Nothing,
                                Nothing,
                                Nothing,
                                Nothing);
   }
   case (0xf5):
   {
       /* EncodedInstructionDefinition {{[]
                                     ;F5 
                                     ;Nothing
                                     ;Nothing
                                     ;Nothing
                                     ;[]
                                     ;Nothing
                                     ;Nothing}
                                    ;Prototype {protoMnemonic = "CMC", protoOperands = []}
                                    ;[]
                                    ;64bit: True
                                    ;legacy: True
                                    ;Complement CF flag.} */
       
       ERASM_DECODER_DO_ACTION (1,
                                Cmc,
                                Nothing,
                                Nothing,
                                Nothing,
                                Nothing,
                                Nothing,
                                Nothing);
   }
   case (0xf6):
   switch (modrm_reg_op (p)) {
      case (0):
      {
          /* EncodedInstructionDefinition {{[]
                                        ;F6 
                                        ;Just (ModrmDigit 0)
                                        ;Just RMBoth
                                        ;Nothing
                                        ;[IMM_IB]
                                        ;Nothing
                                        ;Nothing}
                                       ;Prototype {protoMnemonic = "TEST", protoOperands = [OpRM8,OpIMM8]}
                                       ;[(EncModrm_rm,OperandReadOnly)
                                        ,(EncIMM,OperandReadWrite)]
                                       ;64bit: True
                                       ;legacy: True
                                       ;AND imm8 with r/m8; set SF, ZF, PF according to result.} */
          
          ERASM_DECODER_DO_ACTION (1,
                                   Test,
                                   Just<OpRM8>,
                                   Just<EncModrm_rm>,
                                   Just<OpIMM8>,
                                   Just<EncIMM>,
                                   Nothing,
                                   Nothing);
      }
      case (2):
      {
          /* EncodedInstructionDefinition {{[]
                                        ;F6 
                                        ;Just (ModrmDigit 2)
                                        ;Just RMBoth
                                        ;Nothing
                                        ;[]
                                        ;Nothing
                                        ;Nothing}
                                       ;Prototype {protoMnemonic = "NOT", protoOperands = [OpRM8]}
                                       ;[(EncModrm_rm
                                         ,OperandReadWrite)]
                                       ;64bit: True
                                       ;legacy: True
                                       ;Reverse each bit of r/m8.} */
          
          ERASM_DECODER_DO_ACTION (1,
                                   Not,
                                   Just<OpRM8>,
                                   Just<EncModrm_rm>,
                                   Nothing,
                                   Nothing,
                                   Nothing,
                                   Nothing);
      }
      case (3):
      {
          /* EncodedInstructionDefinition {{[]
                                        ;F6 
                                        ;Just (ModrmDigit 3)
                                        ;Just RMBoth
                                        ;Nothing
                                        ;[]
                                        ;Nothing
                                        ;Nothing}
                                       ;Prototype {protoMnemonic = "NEG", protoOperands = [OpRM8]}
                                       ;[(EncModrm_rm
                                         ,OperandReadWrite)]
                                       ;64bit: True
                                       ;legacy: True
                                       ;Two's complement negate r/m8.} */
          
          ERASM_DECODER_DO_ACTION (1,
                                   Neg,
                                   Just<OpRM8>,
                                   Just<EncModrm_rm>,
                                   Nothing,
                                   Nothing,
                                   Nothing,
                                   Nothing);
      }
      case (4):
      {
          /* EncodedInstructionDefinition {{[]
                                        ;F6 
                                        ;Just (ModrmDigit 4)
                                        ;Just RMBoth
                                        ;Nothing
                                        ;[]
                                        ;Nothing
                                        ;Nothing}
                                       ;Prototype {protoMnemonic = "MUL", protoOperands = [OpRM8]}
                                       ;[(EncModrm_rm,OperandReadOnly)]
                                       ;64bit: True
                                       ;legacy: True
                                       ;Unsigned multiply (AX ← AL ∗ r/m8).} */
          
          ERASM_DECODER_DO_ACTION (1,
                                   Mul,
                                   Just<OpRM8>,
                                   Just<EncModrm_rm>,
                                   Nothing,
                                   Nothing,
                                   Nothing,
                                   Nothing);
      }
      case (5):
      {
          /* EncodedInstructionDefinition {{[]
                                        ;F6 
                                        ;Just (ModrmDigit 5)
                                        ;Just RMBoth
                                        ;Nothing
                                        ;[]
                                        ;Nothing
                                        ;Nothing}
                                       ;Prototype {protoMnemonic = "IMUL", protoOperands = [OpRM8]}
                                       ;[(EncModrm_rm
                                         ,OperandReadWrite)]
                                       ;64bit: True
                                       ;legacy: True
                                       ;AX← AL ∗ r/m byte.} */
          
          ERASM_DECODER_DO_ACTION (1,
                                   Imul,
                                   Just<OpRM8>,
                                   Just<EncModrm_rm>,
                                   Nothing,
                                   Nothing,
                                   Nothing,
                                   Nothing);
      }
      case (6):
      {
          /* EncodedInstructionDefinition {{[]
                                        ;F6 
                                        ;Just (ModrmDigit 6)
                                        ;Just RMBoth
                                        ;Nothing
                                        ;[]
                                        ;Nothing
                                        ;Nothing}
                                       ;Prototype {protoMnemonic = "DIV", protoOperands = [OpRM8]}
                                       ;[(EncModrm_rm
                                         ,OperandReadWrite)]
                                       ;64bit: True
                                       ;legacy: True
                                       ;Unsigned divide AX by r/m8, with result stored in AL ← Quotient, AH ← Remainder.} */
          
          ERASM_DECODER_DO_ACTION (1,
                                   Div,
                                   Just<OpRM8>,
                                   Just<EncModrm_rm>,
                                   Nothing,
                                   Nothing,
                                   Nothing,
                                   Nothing);
      }
      case (7):
      {
          /* EncodedInstructionDefinition {{[]
                                        ;F6 
                                        ;Just (ModrmDigit 7)
                                        ;Just RMBoth
                                        ;Nothing
                                        ;[]
                                        ;Nothing
                                        ;Nothing}
                                       ;Prototype {protoMnemonic = "IDIV", protoOperands = [OpRM8]}
                                       ;[(EncModrm_rm,OperandReadOnly)]
                                       ;64bit: True
                                       ;legacy: True
                                       ;Signed divide AX by r/m8, with result stored in: AL ← Quotient, AH ← Remainder.} */
          
          ERASM_DECODER_DO_ACTION (1,
                                   Idiv,
                                   Just<OpRM8>,
                                   Just<EncModrm_rm>,
                                   Nothing,
                                   Nothing,
                                   Nothing,
                                   Nothing);
      }
      
   }
   case (0xf7):
   switch (modrm_reg_op (p)) {
      case (0):
      if (is_data16)
         {
             /* EncodedInstructionDefinition {{[]
                                           ;F7 
                                           ;Just (ModrmDigit 0)
                                           ;Just RMBoth
                                           ;Nothing
                                           ;[IMM_IW]
                                           ;Just Op16
                                           ;Nothing}
                                          ;Prototype {protoMnemonic = "TEST", protoOperands = [OpRM16,OpIMM16]}
                                          ;[(EncModrm_rm,OperandReadOnly)
                                           ,(EncIMM,OperandReadWrite)]
                                          ;64bit: True
                                          ;legacy: True
                                          ;AND imm16 with r/m16; set SF, ZF, PF according to result.} */
             
             ERASM_DECODER_DO_ACTION (1,
                                      Test,
                                      Just<OpRM16>,
                                      Just<EncModrm_rm>,
                                      Just<OpIMM16>,
                                      Just<EncIMM>,
                                      Nothing,
                                      Nothing);
         }
      else
         {
             /* EncodedInstructionDefinition {{[]
                                           ;F7 
                                           ;Just (ModrmDigit 0)
                                           ;Just RMBoth
                                           ;Nothing
                                           ;[IMM_ID]
                                           ;Just Op32
                                           ;Nothing}
                                          ;Prototype {protoMnemonic = "TEST", protoOperands = [OpRM32,OpIMM32]}
                                          ;[(EncModrm_rm,OperandReadOnly)
                                           ,(EncIMM,OperandReadWrite)]
                                          ;64bit: True
                                          ;legacy: True
                                          ;AND imm32 with r/m32; set SF, ZF, PF according to result.} */
             
             ERASM_DECODER_DO_ACTION (1,
                                      Test,
                                      Just<OpRM32>,
                                      Just<EncModrm_rm>,
                                      Just<OpIMM32>,
                                      Just<EncIMM>,
                                      Nothing,
                                      Nothing);
         }
      case (2):
      if (is_data16)
         {
             /* EncodedInstructionDefinition {{[]
                                           ;F7 
                                           ;Just (ModrmDigit 2)
                                           ;Just RMBoth
                                           ;Nothing
                                           ;[]
                                           ;Just Op16
                                           ;Nothing}
                                          ;Prototype {protoMnemonic = "NOT", protoOperands = [OpRM16]}
                                          ;[(EncModrm_rm
                                            ,OperandReadWrite)]
                                          ;64bit: True
                                          ;legacy: True
                                          ;Reverse each bit of r/m16.} */
             
             ERASM_DECODER_DO_ACTION (1,
                                      Not,
                                      Just<OpRM16>,
                                      Just<EncModrm_rm>,
                                      Nothing,
                                      Nothing,
                                      Nothing,
                                      Nothing);
         }
      else
         {
             /* EncodedInstructionDefinition {{[]
                                           ;F7 
                                           ;Just (ModrmDigit 2)
                                           ;Just RMBoth
                                           ;Nothing
                                           ;[]
                                           ;Just Op32
                                           ;Nothing}
                                          ;Prototype {protoMnemonic = "NOT", protoOperands = [OpRM32]}
                                          ;[(EncModrm_rm
                                            ,OperandReadWrite)]
                                          ;64bit: True
                                          ;legacy: True
                                          ;Reverse each bit of r/m32.} */
             
             ERASM_DECODER_DO_ACTION (1,
                                      Not,
                                      Just<OpRM32>,
                                      Just<EncModrm_rm>,
                                      Nothing,
                                      Nothing,
                                      Nothing,
                                      Nothing);
         }
      case (3):
      if (is_data16)
         {
             /* EncodedInstructionDefinition {{[]
                                           ;F7 
                                           ;Just (ModrmDigit 3)
                                           ;Just RMBoth
                                           ;Nothing
                                           ;[]
                                           ;Just Op16
                                           ;Nothing}
                                          ;Prototype {protoMnemonic = "NEG", protoOperands = [OpRM16]}
                                          ;[(EncModrm_rm
                                            ,OperandReadWrite)]
                                          ;64bit: True
                                          ;legacy: True
                                          ;Two's complement negate r/m16.} */
             
             ERASM_DECODER_DO_ACTION (1,
                                      Neg,
                                      Just<OpRM16>,
                                      Just<EncModrm_rm>,
                                      Nothing,
                                      Nothing,
                                      Nothing,
                                      Nothing);
         }
      else
         {
             /* EncodedInstructionDefinition {{[]
                                           ;F7 
                                           ;Just (ModrmDigit 3)
                                           ;Just RMBoth
                                           ;Nothing
                                           ;[]
                                           ;Just Op32
                                           ;Nothing}
                                          ;Prototype {protoMnemonic = "NEG", protoOperands = [OpRM32]}
                                          ;[(EncModrm_rm
                                            ,OperandReadWrite)]
                                          ;64bit: True
                                          ;legacy: True
                                          ;Two's complement negate r/m32.} */
             
             ERASM_DECODER_DO_ACTION (1,
                                      Neg,
                                      Just<OpRM32>,
                                      Just<EncModrm_rm>,
                                      Nothing,
                                      Nothing,
                                      Nothing,
                                      Nothing);
         }
      case (4):
      if (is_data16)
         {
             /* EncodedInstructionDefinition {{[]
                                           ;F7 
                                           ;Just (ModrmDigit 4)
                                           ;Just RMBoth
                                           ;Nothing
                                           ;[]
                                           ;Just Op16
                                           ;Nothing}
                                          ;Prototype {protoMnemonic = "MUL", protoOperands = [OpRM16]}
                                          ;[(EncModrm_rm,OperandReadOnly)]
                                          ;64bit: True
                                          ;legacy: True
                                          ;Unsigned multiply (DX:AX ← AX ∗ r/m16).} */
             
             ERASM_DECODER_DO_ACTION (1,
                                      Mul,
                                      Just<OpRM16>,
                                      Just<EncModrm_rm>,
                                      Nothing,
                                      Nothing,
                                      Nothing,
                                      Nothing);
         }
      else
         {
             /* EncodedInstructionDefinition {{[]
                                           ;F7 
                                           ;Just (ModrmDigit 4)
                                           ;Just RMBoth
                                           ;Nothing
                                           ;[]
                                           ;Just Op32
                                           ;Nothing}
                                          ;Prototype {protoMnemonic = "MUL", protoOperands = [OpRM32]}
                                          ;[(EncModrm_rm,OperandReadOnly)]
                                          ;64bit: True
                                          ;legacy: True
                                          ;Unsigned multiply (EDX:EAX ← EAX ∗ r/m32).} */
             
             ERASM_DECODER_DO_ACTION (1,
                                      Mul,
                                      Just<OpRM32>,
                                      Just<EncModrm_rm>,
                                      Nothing,
                                      Nothing,
                                      Nothing,
                                      Nothing);
         }
      case (5):
      if (is_data16)
         {
             /* EncodedInstructionDefinition {{[]
                                           ;F7 
                                           ;Just (ModrmDigit 5)
                                           ;Just RMBoth
                                           ;Nothing
                                           ;[]
                                           ;Just Op16
                                           ;Nothing}
                                          ;Prototype {protoMnemonic = "IMUL", protoOperands = [OpRM16]}
                                          ;[(EncModrm_rm
                                            ,OperandReadWrite)]
                                          ;64bit: True
                                          ;legacy: True
                                          ;DX:AX ← AX ∗ r/m word.} */
             
             ERASM_DECODER_DO_ACTION (1,
                                      Imul,
                                      Just<OpRM16>,
                                      Just<EncModrm_rm>,
                                      Nothing,
                                      Nothing,
                                      Nothing,
                                      Nothing);
         }
      else
         {
             /* EncodedInstructionDefinition {{[]
                                           ;F7 
                                           ;Just (ModrmDigit 5)
                                           ;Just RMBoth
                                           ;Nothing
                                           ;[]
                                           ;Just Op32
                                           ;Nothing}
                                          ;Prototype {protoMnemonic = "IMUL", protoOperands = [OpRM32]}
                                          ;[(EncModrm_rm
                                            ,OperandReadWrite)]
                                          ;64bit: True
                                          ;legacy: True
                                          ;EDX:EAX ← EAX ∗ r/m32.} */
             
             ERASM_DECODER_DO_ACTION (1,
                                      Imul,
                                      Just<OpRM32>,
                                      Just<EncModrm_rm>,
                                      Nothing,
                                      Nothing,
                                      Nothing,
                                      Nothing);
         }
      case (6):
      if (is_data16)
         {
             /* EncodedInstructionDefinition {{[]
                                           ;F7 
                                           ;Just (ModrmDigit 6)
                                           ;Just RMBoth
                                           ;Nothing
                                           ;[]
                                           ;Just Op16
                                           ;Nothing}
                                          ;Prototype {protoMnemonic = "DIV", protoOperands = [OpRM16]}
                                          ;[(EncModrm_rm
                                            ,OperandReadWrite)]
                                          ;64bit: True
                                          ;legacy: True
                                          ;Unsigned divide DX:AX by r/m16, with result stored in AX ← Quotient, DX ← Remainder.} */
             
             ERASM_DECODER_DO_ACTION (1,
                                      Div,
                                      Just<OpRM16>,
                                      Just<EncModrm_rm>,
                                      Nothing,
                                      Nothing,
                                      Nothing,
                                      Nothing);
         }
      else
         {
             /* EncodedInstructionDefinition {{[]
                                           ;F7 
                                           ;Just (ModrmDigit 6)
                                           ;Just RMBoth
                                           ;Nothing
                                           ;[]
                                           ;Just Op32
                                           ;Nothing}
                                          ;Prototype {protoMnemonic = "DIV", protoOperands = [OpRM32]}
                                          ;[(EncModrm_rm
                                            ,OperandReadWrite)]
                                          ;64bit: True
                                          ;legacy: True
                                          ;Unsigned divide EDX:EAX by r/m32, with result stored in EAX ← Quotient, EDX ← Remainder.} */
             
             ERASM_DECODER_DO_ACTION (1,
                                      Div,
                                      Just<OpRM32>,
                                      Just<EncModrm_rm>,
                                      Nothing,
                                      Nothing,
                                      Nothing,
                                      Nothing);
         }
      case (7):
      if (is_data16)
         {
             /* EncodedInstructionDefinition {{[]
                                           ;F7 
                                           ;Just (ModrmDigit 7)
                                           ;Just RMBoth
                                           ;Nothing
                                           ;[]
                                           ;Just Op16
                                           ;Nothing}
                                          ;Prototype {protoMnemonic = "IDIV", protoOperands = [OpRM16]}
                                          ;[(EncModrm_rm,OperandReadOnly)]
                                          ;64bit: True
                                          ;legacy: True
                                          ;Signed divide DX:AX by r/m16, with result stored in AX ← Quotient, DX ← Remainder.} */
             
             ERASM_DECODER_DO_ACTION (1,
                                      Idiv,
                                      Just<OpRM16>,
                                      Just<EncModrm_rm>,
                                      Nothing,
                                      Nothing,
                                      Nothing,
                                      Nothing);
         }
      else
         {
             /* EncodedInstructionDefinition {{[]
                                           ;F7 
                                           ;Just (ModrmDigit 7)
                                           ;Just RMBoth
                                           ;Nothing
                                           ;[]
                                           ;Just Op32
                                           ;Nothing}
                                          ;Prototype {protoMnemonic = "IDIV", protoOperands = [OpRM32]}
                                          ;[(EncModrm_rm,OperandReadOnly)]
                                          ;64bit: True
                                          ;legacy: True
                                          ;Signed divide EDX:EAX by r/m32, with result stored in EAX ← Quotient, EDX ← Remainder.} */
             
             ERASM_DECODER_DO_ACTION (1,
                                      Idiv,
                                      Just<OpRM32>,
                                      Just<EncModrm_rm>,
                                      Nothing,
                                      Nothing,
                                      Nothing,
                                      Nothing);
         }
      
   }
   case (0xf8):
   {
       /* EncodedInstructionDefinition {{[]
                                     ;F8 
                                     ;Nothing
                                     ;Nothing
                                     ;Nothing
                                     ;[]
                                     ;Nothing
                                     ;Nothing}
                                    ;Prototype {protoMnemonic = "CLC", protoOperands = []}
                                    ;[]
                                    ;64bit: True
                                    ;legacy: True
                                    ;Clear CF flag.} */
       
       ERASM_DECODER_DO_ACTION (1,
                                Clc,
                                Nothing,
                                Nothing,
                                Nothing,
                                Nothing,
                                Nothing,
                                Nothing);
   }
   case (0xf9):
   {
       /* EncodedInstructionDefinition {{[]
                                     ;F9 
                                     ;Nothing
                                     ;Nothing
                                     ;Nothing
                                     ;[]
                                     ;Nothing
                                     ;Nothing}
                                    ;Prototype {protoMnemonic = "STC", protoOperands = []}
                                    ;[]
                                    ;64bit: True
                                    ;legacy: True
                                    ;Set CF flag.} */
       
       ERASM_DECODER_DO_ACTION (1,
                                Stc,
                                Nothing,
                                Nothing,
                                Nothing,
                                Nothing,
                                Nothing,
                                Nothing);
   }
   case (0xfa):
   {
       /* EncodedInstructionDefinition {{[]
                                     ;FA 
                                     ;Nothing
                                     ;Nothing
                                     ;Nothing
                                     ;[]
                                     ;Nothing
                                     ;Nothing}
                                    ;Prototype {protoMnemonic = "CLI", protoOperands = []}
                                    ;[]
                                    ;64bit: True
                                    ;legacy: True
                                    ;Clear interrupt flag; interrupts disabled when interrupt flag cleared.} */
       
       ERASM_DECODER_DO_ACTION (1,
                                Cli,
                                Nothing,
                                Nothing,
                                Nothing,
                                Nothing,
                                Nothing,
                                Nothing);
   }
   case (0xfb):
   {
       /* EncodedInstructionDefinition {{[]
                                     ;FB 
                                     ;Nothing
                                     ;Nothing
                                     ;Nothing
                                     ;[]
                                     ;Nothing
                                     ;Nothing}
                                    ;Prototype {protoMnemonic = "STI", protoOperands = []}
                                    ;[]
                                    ;64bit: True
                                    ;legacy: True
                                    ;Set interrupt flag; external, maskable interrupts enabled at the end of the next instruction.} */
       
       ERASM_DECODER_DO_ACTION (1,
                                Sti,
                                Nothing,
                                Nothing,
                                Nothing,
                                Nothing,
                                Nothing,
                                Nothing);
   }
   case (0xfc):
   {
       /* EncodedInstructionDefinition {{[]
                                     ;FC 
                                     ;Nothing
                                     ;Nothing
                                     ;Nothing
                                     ;[]
                                     ;Nothing
                                     ;Nothing}
                                    ;Prototype {protoMnemonic = "CLD", protoOperands = []}
                                    ;[]
                                    ;64bit: True
                                    ;legacy: True
                                    ;Clear DF flag.} */
       
       ERASM_DECODER_DO_ACTION (1,
                                Cld,
                                Nothing,
                                Nothing,
                                Nothing,
                                Nothing,
                                Nothing,
                                Nothing);
   }
   case (0xfd):
   {
       /* EncodedInstructionDefinition {{[]
                                     ;FD 
                                     ;Nothing
                                     ;Nothing
                                     ;Nothing
                                     ;[]
                                     ;Nothing
                                     ;Nothing}
                                    ;Prototype {protoMnemonic = "STD", protoOperands = []}
                                    ;[]
                                    ;64bit: True
                                    ;legacy: True
                                    ;Set DF flag.} */
       
       ERASM_DECODER_DO_ACTION (1,
                                Std,
                                Nothing,
                                Nothing,
                                Nothing,
                                Nothing,
                                Nothing,
                                Nothing);
   }
   case (0xfe):
   switch (modrm_reg_op (p)) {
      case (0):
      {
          /* EncodedInstructionDefinition {{[]
                                        ;FE 
                                        ;Just (ModrmDigit 0)
                                        ;Just RMBoth
                                        ;Nothing
                                        ;[]
                                        ;Nothing
                                        ;Nothing}
                                       ;Prototype {protoMnemonic = "INC", protoOperands = [OpRM8]}
                                       ;[(EncModrm_rm
                                         ,OperandReadWrite)]
                                       ;64bit: True
                                       ;legacy: True
                                       ;Increment r/m byte by 1.} */
          
          ERASM_DECODER_DO_ACTION (1,
                                   Inc,
                                   Just<OpRM8>,
                                   Just<EncModrm_rm>,
                                   Nothing,
                                   Nothing,
                                   Nothing,
                                   Nothing);
      }
      case (1):
      {
          /* EncodedInstructionDefinition {{[]
                                        ;FE 
                                        ;Just (ModrmDigit 1)
                                        ;Just RMBoth
                                        ;Nothing
                                        ;[]
                                        ;Nothing
                                        ;Nothing}
                                       ;Prototype {protoMnemonic = "DEC", protoOperands = [OpRM8]}
                                       ;[(EncModrm_rm
                                         ,OperandReadWrite)]
                                       ;64bit: True
                                       ;legacy: True
                                       ;Decrement r/m8 by 1.} */
          
          ERASM_DECODER_DO_ACTION (1,
                                   Dec,
                                   Just<OpRM8>,
                                   Just<EncModrm_rm>,
                                   Nothing,
                                   Nothing,
                                   Nothing,
                                   Nothing);
      }
      
   }
   case (0xff):
   if (modrm_mod3 (p))
      switch (modrm_reg_op (p)) {
         case (0):
         if (is_data16)
            {
                /* EncodedInstructionDefinition {{[]
                                              ;FF 
                                              ;Just (ModrmDigit 0)
                                              ;Just RMBoth
                                              ;Nothing
                                              ;[]
                                              ;Just Op16
                                              ;Nothing}
                                             ;Prototype {protoMnemonic = "INC", protoOperands = [OpRM16]}
                                             ;[(EncModrm_rm
                                               ,OperandReadWrite)]
                                             ;64bit: True
                                             ;legacy: True
                                             ;Increment r/m word by 1.} */
                
                ERASM_DECODER_DO_ACTION (1,
                                         Inc,
                                         Just<OpRM16>,
                                         Just<EncModrm_rm>,
                                         Nothing,
                                         Nothing,
                                         Nothing,
                                         Nothing);
            }
         else
            {
                /* EncodedInstructionDefinition {{[]
                                              ;FF 
                                              ;Just (ModrmDigit 0)
                                              ;Just RMBoth
                                              ;Nothing
                                              ;[]
                                              ;Just Op32
                                              ;Nothing}
                                             ;Prototype {protoMnemonic = "INC", protoOperands = [OpRM32]}
                                             ;[(EncModrm_rm
                                               ,OperandReadWrite)]
                                             ;64bit: True
                                             ;legacy: True
                                             ;Increment r/m doubleword by 1.} */
                
                ERASM_DECODER_DO_ACTION (1,
                                         Inc,
                                         Just<OpRM32>,
                                         Just<EncModrm_rm>,
                                         Nothing,
                                         Nothing,
                                         Nothing,
                                         Nothing);
            }
         case (1):
         if (is_data16)
            {
                /* EncodedInstructionDefinition {{[]
                                              ;FF 
                                              ;Just (ModrmDigit 1)
                                              ;Just RMBoth
                                              ;Nothing
                                              ;[]
                                              ;Just Op16
                                              ;Nothing}
                                             ;Prototype {protoMnemonic = "DEC", protoOperands = [OpRM16]}
                                             ;[(EncModrm_rm
                                               ,OperandReadWrite)]
                                             ;64bit: True
                                             ;legacy: True
                                             ;Decrement r/m16 by 1.} */
                
                ERASM_DECODER_DO_ACTION (1,
                                         Dec,
                                         Just<OpRM16>,
                                         Just<EncModrm_rm>,
                                         Nothing,
                                         Nothing,
                                         Nothing,
                                         Nothing);
            }
         else
            {
                /* EncodedInstructionDefinition {{[]
                                              ;FF 
                                              ;Just (ModrmDigit 1)
                                              ;Just RMBoth
                                              ;Nothing
                                              ;[]
                                              ;Just Op32
                                              ;Nothing}
                                             ;Prototype {protoMnemonic = "DEC", protoOperands = [OpRM32]}
                                             ;[(EncModrm_rm
                                               ,OperandReadWrite)]
                                             ;64bit: True
                                             ;legacy: True
                                             ;Decrement r/m32 by 1.} */
                
                ERASM_DECODER_DO_ACTION (1,
                                         Dec,
                                         Just<OpRM32>,
                                         Just<EncModrm_rm>,
                                         Nothing,
                                         Nothing,
                                         Nothing,
                                         Nothing);
            }
         case (2):
         if (is_data16)
            {
                /* EncodedInstructionDefinition {{[]
                                              ;FF 
                                              ;Just (ModrmDigit 2)
                                              ;Just RMBoth
                                              ;Nothing
                                              ;[]
                                              ;Just Op16
                                              ;Nothing}
                                             ;Prototype {protoMnemonic = "CALL", protoOperands = [OpRM16]}
                                             ;[(EncModrm_rm,OperandReadOnly)]
                                             ;64bit: False
                                             ;legacy: True
                                             ;Call near, absolute indirect, address given in r/m16.} */
                
                ERASM_DECODER_DO_ACTION (1,
                                         Call,
                                         Just<OpRM16>,
                                         Just<EncModrm_rm>,
                                         Nothing,
                                         Nothing,
                                         Nothing,
                                         Nothing);
            }
         else
            {
                /* EncodedInstructionDefinition {{[]
                                              ;FF 
                                              ;Just (ModrmDigit 2)
                                              ;Just RMBoth
                                              ;Nothing
                                              ;[]
                                              ;Just Op32
                                              ;Nothing}
                                             ;Prototype {protoMnemonic = "CALL", protoOperands = [OpRM32]}
                                             ;[(EncModrm_rm,OperandReadOnly)]
                                             ;64bit: False
                                             ;legacy: True
                                             ;Call near, absolute indirect, address given in r/m32.} */
                
                ERASM_DECODER_DO_ACTION (1,
                                         Call,
                                         Just<OpRM32>,
                                         Just<EncModrm_rm>,
                                         Nothing,
                                         Nothing,
                                         Nothing,
                                         Nothing);
            }
         case (4):
         if (is_data16)
            {
                /* EncodedInstructionDefinition {{[]
                                              ;FF 
                                              ;Just (ModrmDigit 4)
                                              ;Just RMBoth
                                              ;Nothing
                                              ;[]
                                              ;Just Op16
                                              ;Nothing}
                                             ;Prototype {protoMnemonic = "JMP", protoOperands = [OpRM16]}
                                             ;[(EncModrm_rm,OperandReadOnly)]
                                             ;64bit: False
                                             ;legacy: True
                                             ;Jump near, absolute indirect, address = zero-extended r/m16. Not supported in 64- bit mode.} */
                
                ERASM_DECODER_DO_ACTION (1,
                                         Jmp,
                                         Just<OpRM16>,
                                         Just<EncModrm_rm>,
                                         Nothing,
                                         Nothing,
                                         Nothing,
                                         Nothing);
            }
         else
            {
                /* EncodedInstructionDefinition {{[]
                                              ;FF 
                                              ;Just (ModrmDigit 4)
                                              ;Just RMBoth
                                              ;Nothing
                                              ;[]
                                              ;Just Op32
                                              ;Nothing}
                                             ;Prototype {protoMnemonic = "JMP", protoOperands = [OpRM32]}
                                             ;[(EncModrm_rm,OperandReadOnly)]
                                             ;64bit: False
                                             ;legacy: True
                                             ;Jump near, absolute indirect, address given in r/m32. Not supported in 64-bit mode.} */
                
                ERASM_DECODER_DO_ACTION (1,
                                         Jmp,
                                         Just<OpRM32>,
                                         Just<EncModrm_rm>,
                                         Nothing,
                                         Nothing,
                                         Nothing,
                                         Nothing);
            }
         case (6):
         if (is_data16)
            {
                /* EncodedInstructionDefinition {{[]
                                              ;FF 
                                              ;Just (ModrmDigit 6)
                                              ;Just RMBoth
                                              ;Nothing
                                              ;[]
                                              ;Just Op16
                                              ;Nothing}
                                             ;Prototype {protoMnemonic = "PUSH", protoOperands = [OpRM16]}
                                             ;[(EncModrm_rm,OperandReadOnly)]
                                             ;64bit: True
                                             ;legacy: True
                                             ;Push r/m16.} */
                
                ERASM_DECODER_DO_ACTION (1,
                                         Push,
                                         Just<OpRM16>,
                                         Just<EncModrm_rm>,
                                         Nothing,
                                         Nothing,
                                         Nothing,
                                         Nothing);
            }
         else
            {
                /* EncodedInstructionDefinition {{[]
                                              ;FF 
                                              ;Just (ModrmDigit 6)
                                              ;Just RMBoth
                                              ;Nothing
                                              ;[]
                                              ;Just Op32
                                              ;Nothing}
                                             ;Prototype {protoMnemonic = "PUSH", protoOperands = [OpRM32]}
                                             ;[(EncModrm_rm,OperandReadOnly)]
                                             ;64bit: False
                                             ;legacy: True
                                             ;Push r/m32.} */
                
                ERASM_DECODER_DO_ACTION (1,
                                         Push,
                                         Just<OpRM32>,
                                         Just<EncModrm_rm>,
                                         Nothing,
                                         Nothing,
                                         Nothing,
                                         Nothing);
            }
         
      }
   else
      switch (modrm_reg_op (p)) {
         case (0):
         if (is_data16)
            {
                /* EncodedInstructionDefinition {{[]
                                              ;FF 
                                              ;Just (ModrmDigit 0)
                                              ;Just RMBoth
                                              ;Nothing
                                              ;[]
                                              ;Just Op16
                                              ;Nothing}
                                             ;Prototype {protoMnemonic = "INC", protoOperands = [OpRM16]}
                                             ;[(EncModrm_rm
                                               ,OperandReadWrite)]
                                             ;64bit: True
                                             ;legacy: True
                                             ;Increment r/m word by 1.} */
                
                ERASM_DECODER_DO_ACTION (1,
                                         Inc,
                                         Just<OpRM16>,
                                         Just<EncModrm_rm>,
                                         Nothing,
                                         Nothing,
                                         Nothing,
                                         Nothing);
            }
         else
            {
                /* EncodedInstructionDefinition {{[]
                                              ;FF 
                                              ;Just (ModrmDigit 0)
                                              ;Just RMBoth
                                              ;Nothing
                                              ;[]
                                              ;Just Op32
                                              ;Nothing}
                                             ;Prototype {protoMnemonic = "INC", protoOperands = [OpRM32]}
                                             ;[(EncModrm_rm
                                               ,OperandReadWrite)]
                                             ;64bit: True
                                             ;legacy: True
                                             ;Increment r/m doubleword by 1.} */
                
                ERASM_DECODER_DO_ACTION (1,
                                         Inc,
                                         Just<OpRM32>,
                                         Just<EncModrm_rm>,
                                         Nothing,
                                         Nothing,
                                         Nothing,
                                         Nothing);
            }
         case (1):
         if (is_data16)
            {
                /* EncodedInstructionDefinition {{[]
                                              ;FF 
                                              ;Just (ModrmDigit 1)
                                              ;Just RMBoth
                                              ;Nothing
                                              ;[]
                                              ;Just Op16
                                              ;Nothing}
                                             ;Prototype {protoMnemonic = "DEC", protoOperands = [OpRM16]}
                                             ;[(EncModrm_rm
                                               ,OperandReadWrite)]
                                             ;64bit: True
                                             ;legacy: True
                                             ;Decrement r/m16 by 1.} */
                
                ERASM_DECODER_DO_ACTION (1,
                                         Dec,
                                         Just<OpRM16>,
                                         Just<EncModrm_rm>,
                                         Nothing,
                                         Nothing,
                                         Nothing,
                                         Nothing);
            }
         else
            {
                /* EncodedInstructionDefinition {{[]
                                              ;FF 
                                              ;Just (ModrmDigit 1)
                                              ;Just RMBoth
                                              ;Nothing
                                              ;[]
                                              ;Just Op32
                                              ;Nothing}
                                             ;Prototype {protoMnemonic = "DEC", protoOperands = [OpRM32]}
                                             ;[(EncModrm_rm
                                               ,OperandReadWrite)]
                                             ;64bit: True
                                             ;legacy: True
                                             ;Decrement r/m32 by 1.} */
                
                ERASM_DECODER_DO_ACTION (1,
                                         Dec,
                                         Just<OpRM32>,
                                         Just<EncModrm_rm>,
                                         Nothing,
                                         Nothing,
                                         Nothing,
                                         Nothing);
            }
         case (2):
         if (is_data16)
            {
                /* EncodedInstructionDefinition {{[]
                                              ;FF 
                                              ;Just (ModrmDigit 2)
                                              ;Just RMBoth
                                              ;Nothing
                                              ;[]
                                              ;Just Op16
                                              ;Nothing}
                                             ;Prototype {protoMnemonic = "CALL", protoOperands = [OpRM16]}
                                             ;[(EncModrm_rm,OperandReadOnly)]
                                             ;64bit: False
                                             ;legacy: True
                                             ;Call near, absolute indirect, address given in r/m16.} */
                
                ERASM_DECODER_DO_ACTION (1,
                                         Call,
                                         Just<OpRM16>,
                                         Just<EncModrm_rm>,
                                         Nothing,
                                         Nothing,
                                         Nothing,
                                         Nothing);
            }
         else
            {
                /* EncodedInstructionDefinition {{[]
                                              ;FF 
                                              ;Just (ModrmDigit 2)
                                              ;Just RMBoth
                                              ;Nothing
                                              ;[]
                                              ;Just Op32
                                              ;Nothing}
                                             ;Prototype {protoMnemonic = "CALL", protoOperands = [OpRM32]}
                                             ;[(EncModrm_rm,OperandReadOnly)]
                                             ;64bit: False
                                             ;legacy: True
                                             ;Call near, absolute indirect, address given in r/m32.} */
                
                ERASM_DECODER_DO_ACTION (1,
                                         Call,
                                         Just<OpRM32>,
                                         Just<EncModrm_rm>,
                                         Nothing,
                                         Nothing,
                                         Nothing,
                                         Nothing);
            }
         case (3):
         if (is_data16)
            {
                /* EncodedInstructionDefinition {{[]
                                              ;FF 
                                              ;Just (ModrmDigit 3)
                                              ;Just RMMemOnly
                                              ;Nothing
                                              ;[]
                                              ;Just Op16
                                              ;Nothing}
                                             ;Prototype {protoMnemonic = "CALL", protoOperands = [OpMFar16]}
                                             ;[(EncModrm_rm,OperandReadOnly)]
                                             ;64bit: True
                                             ;legacy: True
                                             ;Call far, absolute indirect address given in m16:16. In 32-bit mode: if selector points to a gate, then RIP = 32-bit zero extended displacement taken from gate; else RIP = zero extended 16-bit offset from far pointer referenced in the instruction.} */
                
                ERASM_DECODER_DO_ACTION (1,
                                         Call,
                                         Just<OpMFar16>,
                                         Just<EncModrm_rm_mem>,
                                         Nothing,
                                         Nothing,
                                         Nothing,
                                         Nothing);
            }
         else
            {
                /* EncodedInstructionDefinition {{[]
                                              ;FF 
                                              ;Just (ModrmDigit 3)
                                              ;Just RMMemOnly
                                              ;Nothing
                                              ;[]
                                              ;Just Op32
                                              ;Nothing}
                                             ;Prototype {protoMnemonic = "CALL", protoOperands = [OpMFar32]}
                                             ;[(EncModrm_rm,OperandReadOnly)]
                                             ;64bit: True
                                             ;legacy: True
                                             ;In 64-bit mode: If selector points to a gate, then RIP = 64-bit displacement taken from gate; else RIP = zero extended 32-bit offset from far pointer referenced in the instruction.} */
                
                ERASM_DECODER_DO_ACTION (1,
                                         Call,
                                         Just<OpMFar32>,
                                         Just<EncModrm_rm_mem>,
                                         Nothing,
                                         Nothing,
                                         Nothing,
                                         Nothing);
            }
         case (4):
         if (is_data16)
            {
                /* EncodedInstructionDefinition {{[]
                                              ;FF 
                                              ;Just (ModrmDigit 4)
                                              ;Just RMBoth
                                              ;Nothing
                                              ;[]
                                              ;Just Op16
                                              ;Nothing}
                                             ;Prototype {protoMnemonic = "JMP", protoOperands = [OpRM16]}
                                             ;[(EncModrm_rm,OperandReadOnly)]
                                             ;64bit: False
                                             ;legacy: True
                                             ;Jump near, absolute indirect, address = zero-extended r/m16. Not supported in 64- bit mode.} */
                
                ERASM_DECODER_DO_ACTION (1,
                                         Jmp,
                                         Just<OpRM16>,
                                         Just<EncModrm_rm>,
                                         Nothing,
                                         Nothing,
                                         Nothing,
                                         Nothing);
            }
         else
            {
                /* EncodedInstructionDefinition {{[]
                                              ;FF 
                                              ;Just (ModrmDigit 4)
                                              ;Just RMBoth
                                              ;Nothing
                                              ;[]
                                              ;Just Op32
                                              ;Nothing}
                                             ;Prototype {protoMnemonic = "JMP", protoOperands = [OpRM32]}
                                             ;[(EncModrm_rm,OperandReadOnly)]
                                             ;64bit: False
                                             ;legacy: True
                                             ;Jump near, absolute indirect, address given in r/m32. Not supported in 64-bit mode.} */
                
                ERASM_DECODER_DO_ACTION (1,
                                         Jmp,
                                         Just<OpRM32>,
                                         Just<EncModrm_rm>,
                                         Nothing,
                                         Nothing,
                                         Nothing,
                                         Nothing);
            }
         case (5):
         if (is_data16)
            {
                /* EncodedInstructionDefinition {{[]
                                              ;FF 
                                              ;Just (ModrmDigit 5)
                                              ;Just RMMemOnly
                                              ;Nothing
                                              ;[]
                                              ;Just Op16
                                              ;Nothing}
                                             ;Prototype {protoMnemonic = "JMP", protoOperands = [OpMFar16]}
                                             ;[(EncModrm_rm,OperandReadOnly)]
                                             ;64bit: True
                                             ;legacy: True
                                             ;Jump far, absolute indirect, address given in m16:16} */
                
                ERASM_DECODER_DO_ACTION (1,
                                         Jmp,
                                         Just<OpMFar16>,
                                         Just<EncModrm_rm_mem>,
                                         Nothing,
                                         Nothing,
                                         Nothing,
                                         Nothing);
            }
         else
            {
                /* EncodedInstructionDefinition {{[]
                                              ;FF 
                                              ;Just (ModrmDigit 5)
                                              ;Just RMMemOnly
                                              ;Nothing
                                              ;[]
                                              ;Just Op32
                                              ;Nothing}
                                             ;Prototype {protoMnemonic = "JMP", protoOperands = [OpMFar32]}
                                             ;[(EncModrm_rm,OperandReadOnly)]
                                             ;64bit: True
                                             ;legacy: True
                                             ;Jump far, absolute indirect, address given in m16:32.} */
                
                ERASM_DECODER_DO_ACTION (1,
                                         Jmp,
                                         Just<OpMFar32>,
                                         Just<EncModrm_rm_mem>,
                                         Nothing,
                                         Nothing,
                                         Nothing,
                                         Nothing);
            }
         case (6):
         if (is_data16)
            {
                /* EncodedInstructionDefinition {{[]
                                              ;FF 
                                              ;Just (ModrmDigit 6)
                                              ;Just RMBoth
                                              ;Nothing
                                              ;[]
                                              ;Just Op16
                                              ;Nothing}
                                             ;Prototype {protoMnemonic = "PUSH", protoOperands = [OpRM16]}
                                             ;[(EncModrm_rm,OperandReadOnly)]
                                             ;64bit: True
                                             ;legacy: True
                                             ;Push r/m16.} */
                
                ERASM_DECODER_DO_ACTION (1,
                                         Push,
                                         Just<OpRM16>,
                                         Just<EncModrm_rm>,
                                         Nothing,
                                         Nothing,
                                         Nothing,
                                         Nothing);
            }
         else
            {
                /* EncodedInstructionDefinition {{[]
                                              ;FF 
                                              ;Just (ModrmDigit 6)
                                              ;Just RMBoth
                                              ;Nothing
                                              ;[]
                                              ;Just Op32
                                              ;Nothing}
                                             ;Prototype {protoMnemonic = "PUSH", protoOperands = [OpRM32]}
                                             ;[(EncModrm_rm,OperandReadOnly)]
                                             ;64bit: False
                                             ;legacy: True
                                             ;Push r/m32.} */
                
                ERASM_DECODER_DO_ACTION (1,
                                         Push,
                                         Just<OpRM32>,
                                         Just<EncModrm_rm>,
                                         Nothing,
                                         Nothing,
                                         Nothing,
                                         Nothing);
            }
         
      }
   case (0x40):
   {
       
   }
   case (0x41):
   {
       
   }
   case (0x42):
   {
       
   }
   case (0x43):
   {
       
   }
   case (0x44):
   {
       
   }
   case (0x45):
   {
       
   }
   case (0x46):
   {
       
   }
   case (0x47):
   if (is_data16)
      {
          /* EncodedInstructionDefinition {{[]
                                        ;40 
                                        ;Nothing
                                        ;Nothing
                                        ;Just RaddW
                                        ;[]
                                        ;Just Op16
                                        ;Nothing}
                                       ;Prototype {protoMnemonic = "INC", protoOperands = [OpR16]}
                                       ;[(EncReg,OperandReadWrite)]
                                       ;64bit: False
                                       ;legacy: True
                                       ;Increment word register by 1.} */
          
          ERASM_DECODER_DO_ACTION (1,
                                   Inc,
                                   Just<OpR16>,
                                   Just<EncReg>,
                                   Nothing,
                                   Nothing,
                                   Nothing,
                                   Nothing);
      }
   else
      {
          /* EncodedInstructionDefinition {{[]
                                        ;40 
                                        ;Nothing
                                        ;Nothing
                                        ;Just RaddD
                                        ;[]
                                        ;Just Op32
                                        ;Nothing}
                                       ;Prototype {protoMnemonic = "INC", protoOperands = [OpR32]}
                                       ;[(EncReg,OperandReadWrite)]
                                       ;64bit: False
                                       ;legacy: True
                                       ;Increment doubleword register by 1.} */
          
          ERASM_DECODER_DO_ACTION (1,
                                   Inc,
                                   Just<OpR32>,
                                   Just<EncReg>,
                                   Nothing,
                                   Nothing,
                                   Nothing,
                                   Nothing);
      }
   case (0x48):
   {
       
   }
   case (0x49):
   {
       
   }
   case (0x4a):
   {
       
   }
   case (0x4b):
   {
       
   }
   case (0x4c):
   {
       
   }
   case (0x4d):
   {
       
   }
   case (0x4e):
   {
       
   }
   case (0x4f):
   if (is_data16)
      {
          /* EncodedInstructionDefinition {{[]
                                        ;48 
                                        ;Nothing
                                        ;Nothing
                                        ;Just RaddW
                                        ;[]
                                        ;Just Op16
                                        ;Nothing}
                                       ;Prototype {protoMnemonic = "DEC", protoOperands = [OpR16]}
                                       ;[(EncReg,OperandReadWrite)]
                                       ;64bit: False
                                       ;legacy: True
                                       ;Decrement r16 by 1.} */
          
          ERASM_DECODER_DO_ACTION (1,
                                   Dec,
                                   Just<OpR16>,
                                   Just<EncReg>,
                                   Nothing,
                                   Nothing,
                                   Nothing,
                                   Nothing);
      }
   else
      {
          /* EncodedInstructionDefinition {{[]
                                        ;48 
                                        ;Nothing
                                        ;Nothing
                                        ;Just RaddD
                                        ;[]
                                        ;Just Op32
                                        ;Nothing}
                                       ;Prototype {protoMnemonic = "DEC", protoOperands = [OpR32]}
                                       ;[(EncReg,OperandReadWrite)]
                                       ;64bit: False
                                       ;legacy: True
                                       ;Decrement r32 by 1.} */
          
          ERASM_DECODER_DO_ACTION (1,
                                   Dec,
                                   Just<OpR32>,
                                   Just<EncReg>,
                                   Nothing,
                                   Nothing,
                                   Nothing,
                                   Nothing);
      }
   case (0x50):
   {
       
   }
   case (0x51):
   {
       
   }
   case (0x52):
   {
       
   }
   case (0x53):
   {
       
   }
   case (0x54):
   {
       
   }
   case (0x55):
   {
       
   }
   case (0x56):
   {
       
   }
   case (0x57):
   if (is_data16)
      {
          /* EncodedInstructionDefinition {{[]
                                        ;50 
                                        ;Nothing
                                        ;Nothing
                                        ;Just RaddW
                                        ;[]
                                        ;Just Op16
                                        ;Nothing}
                                       ;Prototype {protoMnemonic = "PUSH", protoOperands = [OpR16]}
                                       ;[(EncReg,OperandReadOnly)]
                                       ;64bit: True
                                       ;legacy: True
                                       ;Push r16.} */
          
          ERASM_DECODER_DO_ACTION (1,
                                   Push,
                                   Just<OpR16>,
                                   Just<EncReg>,
                                   Nothing,
                                   Nothing,
                                   Nothing,
                                   Nothing);
      }
   else
      {
          /* EncodedInstructionDefinition {{[]
                                        ;50 
                                        ;Nothing
                                        ;Nothing
                                        ;Just RaddD
                                        ;[]
                                        ;Just Op32
                                        ;Nothing}
                                       ;Prototype {protoMnemonic = "PUSH", protoOperands = [OpR32]}
                                       ;[(EncReg,OperandReadOnly)]
                                       ;64bit: False
                                       ;legacy: True
                                       ;Push r32.} */
          
          ERASM_DECODER_DO_ACTION (1,
                                   Push,
                                   Just<OpR32>,
                                   Just<EncReg>,
                                   Nothing,
                                   Nothing,
                                   Nothing,
                                   Nothing);
      }
   case (0x58):
   {
       
   }
   case (0x59):
   {
       
   }
   case (0x5a):
   {
       
   }
   case (0x5b):
   {
       
   }
   case (0x5c):
   {
       
   }
   case (0x5d):
   {
       
   }
   case (0x5e):
   {
       
   }
   case (0x5f):
   if (is_data16)
      {
          /* EncodedInstructionDefinition {{[]
                                        ;58 
                                        ;Nothing
                                        ;Nothing
                                        ;Just RaddW
                                        ;[]
                                        ;Just Op16
                                        ;Nothing}
                                       ;Prototype {protoMnemonic = "POP", protoOperands = [OpR16]}
                                       ;[(EncReg,OperandReadWrite)]
                                       ;64bit: True
                                       ;legacy: True
                                       ;Pop top of stack into r16; increment stack pointer.} */
          
          ERASM_DECODER_DO_ACTION (1,
                                   Pop,
                                   Just<OpR16>,
                                   Just<EncReg>,
                                   Nothing,
                                   Nothing,
                                   Nothing,
                                   Nothing);
      }
   else
      {
          /* EncodedInstructionDefinition {{[]
                                        ;58 
                                        ;Nothing
                                        ;Nothing
                                        ;Just RaddD
                                        ;[]
                                        ;Just Op32
                                        ;Nothing}
                                       ;Prototype {protoMnemonic = "POP", protoOperands = [OpR32]}
                                       ;[(EncReg,OperandReadWrite)]
                                       ;64bit: False
                                       ;legacy: True
                                       ;Pop top of stack into r32; increment stack pointer.} */
          
          ERASM_DECODER_DO_ACTION (1,
                                   Pop,
                                   Just<OpR32>,
                                   Just<EncReg>,
                                   Nothing,
                                   Nothing,
                                   Nothing,
                                   Nothing);
      }
   case (0x91):
   {
       
   }
   case (0x92):
   {
       
   }
   case (0x93):
   {
       
   }
   case (0x94):
   {
       
   }
   case (0x95):
   {
       
   }
   case (0x96):
   {
       
   }
   case (0x97):
   if (is_data16)
      {
          /* EncodedInstructionDefinition {{[]
                                        ;90 
                                        ;Nothing
                                        ;Nothing
                                        ;Just RaddW
                                        ;[]
                                        ;Just Op16
                                        ;Nothing}
                                       ;Prototype {protoMnemonic = "XCHG", protoOperands = [OpR16,OpAX]}
                                       ;[(EncReg,OperandReadWrite)
                                        ,(EncImplicit,OperandReadWrite)]
                                       ;64bit: True
                                       ;legacy: True
                                       ;Exchange AX with r16.} */
          
          ERASM_DECODER_DO_ACTION (1,
                                   Xchg,
                                   Just<OpR16>,
                                   Just<EncReg>,
                                   Just<OpAX>,
                                   Just<EncImplicit>,
                                   Nothing,
                                   Nothing);
      }
   else
      {
          /* EncodedInstructionDefinition {{[]
                                        ;90 
                                        ;Nothing
                                        ;Nothing
                                        ;Just RaddD
                                        ;[]
                                        ;Just Op32
                                        ;Nothing}
                                       ;Prototype {protoMnemonic = "XCHG", protoOperands = [OpR32,OpEAX]}
                                       ;[(EncReg,OperandReadWrite)
                                        ,(EncImplicit,OperandReadWrite)]
                                       ;64bit: True
                                       ;legacy: True
                                       ;Exchange EAX with r32.} */
          
          ERASM_DECODER_DO_ACTION (1,
                                   Xchg,
                                   Just<OpR32>,
                                   Just<EncReg>,
                                   Just<OpEAX>,
                                   Just<EncImplicit>,
                                   Nothing,
                                   Nothing);
      }
   case (0xb0):
   {
       
   }
   case (0xb1):
   {
       
   }
   case (0xb2):
   {
       
   }
   case (0xb3):
   {
       
   }
   case (0xb4):
   {
       
   }
   case (0xb5):
   {
       
   }
   case (0xb6):
   {
       
   }
   case (0xb7):
   {
       /* EncodedInstructionDefinition {{[]
                                     ;B0 
                                     ;Nothing
                                     ;Nothing
                                     ;Just RaddB
                                     ;[IMM_IB]
                                     ;Nothing
                                     ;Nothing}
                                    ;Prototype {protoMnemonic = "MOV", protoOperands = [OpR8,OpIMM8]}
                                    ;[(EncReg,OperandReadWrite)
                                     ,(EncIMM,OperandReadWrite)]
                                    ;64bit: True
                                    ;legacy: True
                                    ;Move imm8 to r8.} */
       
       ERASM_DECODER_DO_ACTION (1,
                                Mov,
                                Just<OpR8>,
                                Just<EncReg>,
                                Just<OpIMM8>,
                                Just<EncIMM>,
                                Nothing,
                                Nothing);
   }
   case (0xb8):
   {
       
   }
   case (0xb9):
   {
       
   }
   case (0xba):
   {
       
   }
   case (0xbb):
   {
       
   }
   case (0xbc):
   {
       
   }
   case (0xbd):
   {
       
   }
   case (0xbe):
   {
       
   }
   case (0xbf):
   if (is_data16)
      {
          /* EncodedInstructionDefinition {{[]
                                        ;B8 
                                        ;Nothing
                                        ;Nothing
                                        ;Just RaddW
                                        ;[IMM_IW]
                                        ;Just Op16
                                        ;Nothing}
                                       ;Prototype {protoMnemonic = "MOV", protoOperands = [OpR16,OpIMM16]}
                                       ;[(EncReg,OperandReadWrite)
                                        ,(EncIMM,OperandReadWrite)]
                                       ;64bit: True
                                       ;legacy: True
                                       ;Move imm16 to r16.} */
          
          ERASM_DECODER_DO_ACTION (1,
                                   Mov,
                                   Just<OpR16>,
                                   Just<EncReg>,
                                   Just<OpIMM16>,
                                   Just<EncIMM>,
                                   Nothing,
                                   Nothing);
      }
   else
      {
          /* EncodedInstructionDefinition {{[]
                                        ;B8 
                                        ;Nothing
                                        ;Nothing
                                        ;Just RaddD
                                        ;[IMM_ID]
                                        ;Just Op32
                                        ;Nothing}
                                       ;Prototype {protoMnemonic = "MOV", protoOperands = [OpR32,OpIMM32]}
                                       ;[(EncReg,OperandReadWrite)
                                        ,(EncIMM,OperandReadWrite)]
                                       ;64bit: True
                                       ;legacy: True
                                       ;Move imm32 to r32.} */
          
          ERASM_DECODER_DO_ACTION (1,
                                   Mov,
                                   Just<OpR32>,
                                   Just<EncReg>,
                                   Just<OpIMM32>,
                                   Just<EncIMM>,
                                   Nothing,
                                   Nothing);
      }
   
}