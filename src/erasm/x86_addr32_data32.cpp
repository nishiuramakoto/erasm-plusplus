/* DO NOT EDIT! 
Copyright (C) 2011,2012 Makoto Nishiura.

This file is part of ERASM++.

ERASM++ is free software; you can redistribute it and/or modify it under
the terms of the GNU General Public License as published by the Free
Software Foundation; either version 3, or (at your option) any later
version.

ERASM++ is distributed in the hope that it will be useful, but WITHOUT ANY
WARRANTY; without even the implied warranty of MERCHANTABILITY or
FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
for more details.

You should have received a copy of the GNU General Public License
along with ERASM++; see the file COPYING3.  If not see
 <http://www.gnu.org/licenses/>. */

#ifndef ERASM_NO_META_ASSERT
#define ERASM_NO_META_ASSERT
#else

#endif
#include "erasm/x86_addr32_data32.hpp"
#include "erasm/x86_assembler_impl.hpp"
namespace erasm {
namespace x86 {
namespace addr32 {
namespace data32 {
using namespace erasm::x86::impl;
using namespace erasm::x86::addr32::data32::impl;
/*  37        | ASCII adjust AL after addition. */
inline int aaa (code_ptr p)
{
    return encode_instruction (p,
                               Prefix (OpNothing,AddrNothing),
                               Code (0x37));
}
/*  D5 0A        | ASCII adjust AX before division. */
inline int aad (code_ptr p)
{
    return encode_instruction (p,
                               Prefix (OpNothing,AddrNothing),
                               Code (0xd5,0xa));
}
/*  D5     ib   | Adjust AX before division to number base imm8. */
inline int aad (code_ptr p,imm8_t imm)
{
    return encode_instruction (p,
                               Prefix (OpNothing,AddrNothing),
                               Code (0xd5),
                               make_imm (imm));
}
/*  D4 0A        | ASCII adjust AX after multiply. */
inline int aam (code_ptr p)
{
    return encode_instruction (p,
                               Prefix (OpNothing,AddrNothing),
                               Code (0xd4,0xa));
}
/*  D4     ib   | Adjust AX after multiply to number base imm8. */
inline int aam (code_ptr p,imm8_t imm)
{
    return encode_instruction (p,
                               Prefix (OpNothing,AddrNothing),
                               Code (0xd4),
                               make_imm (imm));
}
/*  3F        | ASCII adjust AL after subtraction. */
inline int aas (code_ptr p)
{
    return encode_instruction (p,
                               Prefix (OpNothing,AddrNothing),
                               Code (0x3f));
}
/*  15     id op32  | Add with carry imm32 to EAX. */
inline int adc (code_ptr p,
         const RegEAX (&   unused),
         imm32_t imm)
{
    return encode_instruction (p,
                               Prefix (Op32,AddrNothing),
                               Code (0x15),
                               make_imm (imm));
}
/*  83  /2 RMBoth  ib op32  | Add with CF sign-extended imm8 into r/m32. */
inline int adc (code_ptr p,
         const DwordReg_m_EAX (&   modrm_rm),
         imm8_t imm)
{
    return encode_instruction (p,
                               Prefix (Op32,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm)),
                               Code (0x83),
                               make_modrm (modrm_rm,2),
                               make_imm (imm));
}
/*  81  /2 RMBoth  id op32  | Add with CF imm32 to r/m32. */
inline int adc (code_ptr p,
         const DwordReg_m_EAX (&   modrm_rm),
         imm32_t imm)
{
    return encode_instruction (p,
                               Prefix (Op32,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm)),
                               Code (0x81),
                               make_modrm (modrm_rm,2),
                               make_imm (imm));
}
/*  81  /2 RMBoth  id op32  | Add with CF imm32 to r/m32. */
inline int adc (code_ptr p,
         const DwordPtr (&   modrm_rm),
         imm32_t imm)
{
    return encode_instruction (p,
                               Prefix (Op32,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm)),
                               Code (0x81),
                               make_modrm (modrm_rm,2),
                               make_imm (imm));
}
/*  83  /2 RMBoth  ib op32  | Add with CF sign-extended imm8 into r/m32. */
inline int adc (code_ptr p,
         const RegEAX (&   modrm_rm),
         imm8_t imm)
{
    return encode_instruction (p,
                               Prefix (Op32,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm)),
                               Code (0x83),
                               make_modrm (modrm_rm,2),
                               make_imm (imm));
}
/*  83  /2 RMBoth  ib op32  | Add with CF sign-extended imm8 into r/m32. */
inline int adc (code_ptr p,
         const DwordPtr (&   modrm_rm),
         imm8_t imm)
{
    return encode_instruction (p,
                               Prefix (Op32,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm)),
                               Code (0x83),
                               make_modrm (modrm_rm,2),
                               make_imm (imm));
}
/*  15     iw op16  | Add with carry imm16 to AX. */
inline int adc (code_ptr p,
         const RegAX (&   unused),
         imm16_t imm)
{
    return encode_instruction (p,
                               Prefix (Op16,AddrNothing),
                               Code (0x15),
                               make_imm (imm));
}
/*  83  /2 RMBoth  ib op16  | Add with CF sign-extended imm8 to r/m16. */
inline int adc (code_ptr p,
         const WordReg_m_AX (&   modrm_rm),
         imm8_t imm)
{
    return encode_instruction (p,
                               Prefix (Op16,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm)),
                               Code (0x83),
                               make_modrm (modrm_rm,2),
                               make_imm (imm));
}
/*  81  /2 RMBoth  iw op16  | Add with carry imm16 to r/m16. */
inline int adc (code_ptr p,
         const WordReg_m_AX (&   modrm_rm),
         imm16_t imm)
{
    return encode_instruction (p,
                               Prefix (Op16,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm)),
                               Code (0x81),
                               make_modrm (modrm_rm,2),
                               make_imm (imm));
}
/*  81  /2 RMBoth  iw op16  | Add with carry imm16 to r/m16. */
inline int adc (code_ptr p,
         const WordPtr (&   modrm_rm),
         imm16_t imm)
{
    return encode_instruction (p,
                               Prefix (Op16,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm)),
                               Code (0x81),
                               make_modrm (modrm_rm,2),
                               make_imm (imm));
}
/*  83  /2 RMBoth  ib op16  | Add with CF sign-extended imm8 to r/m16. */
inline int adc (code_ptr p,
         const RegAX (&   modrm_rm),
         imm8_t imm)
{
    return encode_instruction (p,
                               Prefix (Op16,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm)),
                               Code (0x83),
                               make_modrm (modrm_rm,2),
                               make_imm (imm));
}
/*  83  /2 RMBoth  ib op16  | Add with CF sign-extended imm8 to r/m16. */
inline int adc (code_ptr p,
         const WordPtr (&   modrm_rm),
         imm8_t imm)
{
    return encode_instruction (p,
                               Prefix (Op16,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm)),
                               Code (0x83),
                               make_modrm (modrm_rm,2),
                               make_imm (imm));
}
/*  13  /r RMBoth   op32  | Add with CF r/m32 to r32. */
inline int adc (code_ptr p,
         const DwordReg (&   modrm_reg),
         const DwordReg (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (Op32,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0x13),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/*  13  /r RMBoth   op32  | Add with CF r/m32 to r32. */
inline int adc (code_ptr p,
         const DwordReg (&   modrm_reg),
         const DwordPtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (Op32,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0x13),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/*  11  /r RMBoth   op32  | Add with CF r32 to r/m32. */
inline int adc (code_ptr p,
         const DwordPtr (&   modrm_rm),
         const DwordReg (&   modrm_reg))
{
    return encode_instruction (p,
                               Prefix (Op32,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0x11),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/*  13  /r RMBoth   op16  | Add with carry r/m16 to r16. */
inline int adc (code_ptr p,
         const WordReg (&   modrm_reg),
         const WordReg (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (Op16,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0x13),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/*  13  /r RMBoth   op16  | Add with carry r/m16 to r16. */
inline int adc (code_ptr p,
         const WordReg (&   modrm_reg),
         const WordPtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (Op16,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0x13),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/*  11  /r RMBoth   op16  | Add with carry r16 to r/m16. */
inline int adc (code_ptr p,
         const WordPtr (&   modrm_rm),
         const WordReg (&   modrm_reg))
{
    return encode_instruction (p,
                               Prefix (Op16,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0x11),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/*  12  /r RMBoth     | Add with carry r/m8 to byte register. */
inline int adc (code_ptr p,
         const ByteReg (&   modrm_reg),
         const ByteReg (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0x12),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/*  12  /r RMBoth     | Add with carry r/m8 to byte register. */
inline int adc (code_ptr p,
         const ByteReg (&   modrm_reg),
         const BytePtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0x12),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/*  10  /r RMBoth     | Add with carry byte register to r/m8. */
inline int adc (code_ptr p,
         const BytePtr (&   modrm_rm),
         const ByteReg (&   modrm_reg))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0x10),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/*  14     ib   | Add with carry imm8 to AL. */
inline int adc (code_ptr p,
         const RegAL (&   unused),
         imm8_t imm)
{
    return encode_instruction (p,
                               Prefix (OpNothing,AddrNothing),
                               Code (0x14),
                               make_imm (imm));
}
/*  80  /2 RMBoth  ib   | Add with carry imm8 to r/m8. */
inline int adc (code_ptr p,
         const ByteReg (&   modrm_rm),
         imm8_t imm)
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm)),
                               Code (0x80),
                               make_modrm (modrm_rm,2),
                               make_imm (imm));
}
/*  80  /2 RMBoth  ib   | Add with carry imm8 to r/m8. */
inline int adc (code_ptr p,
         const BytePtr (&   modrm_rm),
         imm8_t imm)
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm)),
                               Code (0x80),
                               make_modrm (modrm_rm,2),
                               make_imm (imm));
}
/*  05     id op32  | Add imm32 to EAX. */
inline int add (code_ptr p,
         const RegEAX (&   unused),
         imm32_t imm)
{
    return encode_instruction (p,
                               Prefix (Op32,AddrNothing),
                               Code (0x5),
                               make_imm (imm));
}
/*  83  /0 RMBoth  ib op32  | Add sign-extended imm8 to r/m32. */
inline int add (code_ptr p,
         const DwordReg_m_EAX (&   modrm_rm),
         imm8_t imm)
{
    return encode_instruction (p,
                               Prefix (Op32,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm)),
                               Code (0x83),
                               make_modrm (modrm_rm,0),
                               make_imm (imm));
}
/*  81  /0 RMBoth  id op32  | Add imm32 to r/m32. */
inline int add (code_ptr p,
         const DwordReg_m_EAX (&   modrm_rm),
         imm32_t imm)
{
    return encode_instruction (p,
                               Prefix (Op32,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm)),
                               Code (0x81),
                               make_modrm (modrm_rm,0),
                               make_imm (imm));
}
/*  81  /0 RMBoth  id op32  | Add imm32 to r/m32. */
inline int add (code_ptr p,
         const DwordPtr (&   modrm_rm),
         imm32_t imm)
{
    return encode_instruction (p,
                               Prefix (Op32,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm)),
                               Code (0x81),
                               make_modrm (modrm_rm,0),
                               make_imm (imm));
}
/*  83  /0 RMBoth  ib op32  | Add sign-extended imm8 to r/m32. */
inline int add (code_ptr p,
         const RegEAX (&   modrm_rm),
         imm8_t imm)
{
    return encode_instruction (p,
                               Prefix (Op32,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm)),
                               Code (0x83),
                               make_modrm (modrm_rm,0),
                               make_imm (imm));
}
/*  83  /0 RMBoth  ib op32  | Add sign-extended imm8 to r/m32. */
inline int add (code_ptr p,
         const DwordPtr (&   modrm_rm),
         imm8_t imm)
{
    return encode_instruction (p,
                               Prefix (Op32,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm)),
                               Code (0x83),
                               make_modrm (modrm_rm,0),
                               make_imm (imm));
}
/*  05     iw op16  | Add imm16 to AX. */
inline int add (code_ptr p,
         const RegAX (&   unused),
         imm16_t imm)
{
    return encode_instruction (p,
                               Prefix (Op16,AddrNothing),
                               Code (0x5),
                               make_imm (imm));
}
/*  83  /0 RMBoth  ib op16  | Add sign-extended imm8 to r/m16. */
inline int add (code_ptr p,
         const WordReg_m_AX (&   modrm_rm),
         imm8_t imm)
{
    return encode_instruction (p,
                               Prefix (Op16,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm)),
                               Code (0x83),
                               make_modrm (modrm_rm,0),
                               make_imm (imm));
}
/*  81  /0 RMBoth  iw op16  | Add imm16 to r/m16. */
inline int add (code_ptr p,
         const WordReg_m_AX (&   modrm_rm),
         imm16_t imm)
{
    return encode_instruction (p,
                               Prefix (Op16,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm)),
                               Code (0x81),
                               make_modrm (modrm_rm,0),
                               make_imm (imm));
}
/*  81  /0 RMBoth  iw op16  | Add imm16 to r/m16. */
inline int add (code_ptr p,
         const WordPtr (&   modrm_rm),
         imm16_t imm)
{
    return encode_instruction (p,
                               Prefix (Op16,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm)),
                               Code (0x81),
                               make_modrm (modrm_rm,0),
                               make_imm (imm));
}
/*  83  /0 RMBoth  ib op16  | Add sign-extended imm8 to r/m16. */
inline int add (code_ptr p,
         const RegAX (&   modrm_rm),
         imm8_t imm)
{
    return encode_instruction (p,
                               Prefix (Op16,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm)),
                               Code (0x83),
                               make_modrm (modrm_rm,0),
                               make_imm (imm));
}
/*  83  /0 RMBoth  ib op16  | Add sign-extended imm8 to r/m16. */
inline int add (code_ptr p,
         const WordPtr (&   modrm_rm),
         imm8_t imm)
{
    return encode_instruction (p,
                               Prefix (Op16,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm)),
                               Code (0x83),
                               make_modrm (modrm_rm,0),
                               make_imm (imm));
}
/*  03  /r RMBoth   op32  | Add r/m32 to r32. */
inline int add (code_ptr p,
         const DwordReg (&   modrm_reg),
         const DwordReg (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (Op32,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0x3),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/*  03  /r RMBoth   op32  | Add r/m32 to r32. */
inline int add (code_ptr p,
         const DwordReg (&   modrm_reg),
         const DwordPtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (Op32,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0x3),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/*  01  /r RMBoth   op32  | Add r32 to r/m32. */
inline int add (code_ptr p,
         const DwordPtr (&   modrm_rm),
         const DwordReg (&   modrm_reg))
{
    return encode_instruction (p,
                               Prefix (Op32,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0x1),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/*  03  /r RMBoth   op16  | Add r/m16 to r16. */
inline int add (code_ptr p,
         const WordReg (&   modrm_reg),
         const WordReg (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (Op16,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0x3),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/*  03  /r RMBoth   op16  | Add r/m16 to r16. */
inline int add (code_ptr p,
         const WordReg (&   modrm_reg),
         const WordPtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (Op16,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0x3),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/*  01  /r RMBoth   op16  | Add r16 to r/m16. */
inline int add (code_ptr p,
         const WordPtr (&   modrm_rm),
         const WordReg (&   modrm_reg))
{
    return encode_instruction (p,
                               Prefix (Op16,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0x1),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/*  02  /r RMBoth     | Add r/m8 to r8. */
inline int add (code_ptr p,
         const ByteReg (&   modrm_reg),
         const ByteReg (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0x2),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/*  02  /r RMBoth     | Add r/m8 to r8. */
inline int add (code_ptr p,
         const ByteReg (&   modrm_reg),
         const BytePtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0x2),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/*  00  /r RMBoth     | Add r8 to r/m8. */
inline int add (code_ptr p,
         const BytePtr (&   modrm_rm),
         const ByteReg (&   modrm_reg))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0x0),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/*  04     ib   | Add imm8 to AL. */
inline int add (code_ptr p,
         const RegAL (&   unused),
         imm8_t imm)
{
    return encode_instruction (p,
                               Prefix (OpNothing,AddrNothing),
                               Code (0x4),
                               make_imm (imm));
}
/*  80  /0 RMBoth  ib   | Add imm8 to r/m8. */
inline int add (code_ptr p,
         const ByteReg (&   modrm_rm),
         imm8_t imm)
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm)),
                               Code (0x80),
                               make_modrm (modrm_rm,0),
                               make_imm (imm));
}
/*  80  /0 RMBoth  ib   | Add imm8 to r/m8. */
inline int add (code_ptr p,
         const BytePtr (&   modrm_rm),
         imm8_t imm)
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm)),
                               Code (0x80),
                               make_modrm (modrm_rm,0),
                               make_imm (imm));
}
/* 66 0F 58  /r RMBoth     | Add packed double-precision floating-point values from xmm2/m128 to xmm1. */
inline int addpd (code_ptr p,
           const XmmReg (&   modrm_reg),
           const XmmReg (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm,
                                       Prefix_OPERAND_SIZE),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x58),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/* 66 0F 58  /r RMBoth     | Add packed double-precision floating-point values from xmm2/m128 to xmm1. */
inline int addpd (code_ptr p,
           const XmmReg (&   modrm_reg),
           const XmmWordPtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm,
                                       Prefix_OPERAND_SIZE),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x58),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/*  0F 58  /r RMBoth     | Add packed single-precision floating-point values from xmm2/m128 to xmm1. */
inline int addps (code_ptr p,
           const XmmReg (&   modrm_reg),
           const XmmReg (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x58),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/*  0F 58  /r RMBoth     | Add packed single-precision floating-point values from xmm2/m128 to xmm1. */
inline int addps (code_ptr p,
           const XmmReg (&   modrm_reg),
           const XmmWordPtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x58),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/* F2 0F 58  /r RMBoth     | Add the low double- precision floating-point value from xmm2/m64 to xmm1. */
inline int addsd (code_ptr p,
           const XmmReg (&   modrm_reg),
           const XmmReg (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm,
                                       Prefix_REPNE),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x58),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/* F2 0F 58  /r RMBoth     | Add the low double- precision floating-point value from xmm2/m64 to xmm1. */
inline int addsd (code_ptr p,
           const XmmReg (&   modrm_reg),
           const QwordPtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm,
                                       Prefix_REPNE),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x58),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/* F3 0F 58  /r RMBoth     | Add the low single-precision floating-point value from xmm2/m32 to xmm1. */
inline int addss (code_ptr p,
           const XmmReg (&   modrm_reg),
           const XmmReg (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm,
                                       Prefix_REP),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x58),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/* F3 0F 58  /r RMBoth     | Add the low single-precision floating-point value from xmm2/m32 to xmm1. */
inline int addss (code_ptr p,
           const XmmReg (&   modrm_reg),
           const DwordPtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm,
                                       Prefix_REP),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x58),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/* 66 0F D0  /r RMBoth     | Add/subtract double- precision floating-point values from xmm2/m128 to xmm1. */
inline int addsubpd (code_ptr p,
              const XmmReg (&   modrm_reg),
              const XmmReg (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm,
                                       Prefix_OPERAND_SIZE),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0xd0),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/* 66 0F D0  /r RMBoth     | Add/subtract double- precision floating-point values from xmm2/m128 to xmm1. */
inline int addsubpd (code_ptr p,
              const XmmReg (&   modrm_reg),
              const XmmWordPtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm,
                                       Prefix_OPERAND_SIZE),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0xd0),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/* F2 0F D0  /r RMBoth     | Add/subtract single- precision floating-point values from xmm2/m128 to xmm1. */
inline int addsubps (code_ptr p,
              const XmmReg (&   modrm_reg),
              const XmmReg (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm,
                                       Prefix_REPNE),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0xd0),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/* F2 0F D0  /r RMBoth     | Add/subtract single- precision floating-point values from xmm2/m128 to xmm1. */
inline int addsubps (code_ptr p,
              const XmmReg (&   modrm_reg),
              const XmmWordPtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm,
                                       Prefix_REPNE),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0xd0),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/* 66 0F 38 DE  /r RMBoth     | Perform one round of an AES decryption flow, using the Equivalent Inverse Cipher, operating on a 128- bit data (state) from xmm1 with a 128-bit round key from xmm2/m128. */
inline int aesdec (code_ptr p,
            const XmmReg (&   modrm_reg),
            const XmmReg (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm,
                                       Prefix_OPERAND_SIZE),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x38,0xde),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/* 66 0F 38 DE  /r RMBoth     | Perform one round of an AES decryption flow, using the Equivalent Inverse Cipher, operating on a 128- bit data (state) from xmm1 with a 128-bit round key from xmm2/m128. */
inline int aesdec (code_ptr p,
            const XmmReg (&   modrm_reg),
            const XmmWordPtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm,
                                       Prefix_OPERAND_SIZE),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x38,0xde),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/* 66 0F 38 DF  /r RMBoth     | Perform the last round of an AES decryption flow, using the Equivalent Inverse Cipher, operating on a 128- bit data (state) from xmm1 with a 128-bit round key from xmm2/m128. */
inline int aesdeclast (code_ptr p,
                const XmmReg (&   modrm_reg),
                const XmmReg (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm,
                                       Prefix_OPERAND_SIZE),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x38,0xdf),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/* 66 0F 38 DF  /r RMBoth     | Perform the last round of an AES decryption flow, using the Equivalent Inverse Cipher, operating on a 128- bit data (state) from xmm1 with a 128-bit round key from xmm2/m128. */
inline int aesdeclast (code_ptr p,
                const XmmReg (&   modrm_reg),
                const XmmWordPtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm,
                                       Prefix_OPERAND_SIZE),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x38,0xdf),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/* 66 0F 38 DC  /r RMBoth     | Perform one round of an AES encryption flow, operat- ing on a 128-bit data (state) from xmm1 with a 128-bit round key from xmm2/m128. */
inline int aesenc (code_ptr p,
            const XmmReg (&   modrm_reg),
            const XmmReg (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm,
                                       Prefix_OPERAND_SIZE),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x38,0xdc),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/* 66 0F 38 DC  /r RMBoth     | Perform one round of an AES encryption flow, operat- ing on a 128-bit data (state) from xmm1 with a 128-bit round key from xmm2/m128. */
inline int aesenc (code_ptr p,
            const XmmReg (&   modrm_reg),
            const XmmWordPtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm,
                                       Prefix_OPERAND_SIZE),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x38,0xdc),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/* 66 0F 38 DD  /r RMBoth     | Perform the last round of an AES encryption flow, operat- ing on a 128-bit data (state) from xmm1 with a 128-bit round key from xmm2/m128. */
inline int aesenclast (code_ptr p,
                const XmmReg (&   modrm_reg),
                const XmmReg (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm,
                                       Prefix_OPERAND_SIZE),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x38,0xdd),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/* 66 0F 38 DD  /r RMBoth     | Perform the last round of an AES encryption flow, operat- ing on a 128-bit data (state) from xmm1 with a 128-bit round key from xmm2/m128. */
inline int aesenclast (code_ptr p,
                const XmmReg (&   modrm_reg),
                const XmmWordPtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm,
                                       Prefix_OPERAND_SIZE),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x38,0xdd),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/* 66 0F 38 DB  /r RMBoth     | Perform the InvMixColumn transformation on a 128-bit round key from xmm2/m128 and store the result in xmm1. */
inline int aesimc (code_ptr p,
            const XmmReg (&   modrm_reg),
            const XmmReg (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm,
                                       Prefix_OPERAND_SIZE),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x38,0xdb),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/* 66 0F 38 DB  /r RMBoth     | Perform the InvMixColumn transformation on a 128-bit round key from xmm2/m128 and store the result in xmm1. */
inline int aesimc (code_ptr p,
            const XmmReg (&   modrm_reg),
            const XmmWordPtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm,
                                       Prefix_OPERAND_SIZE),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x38,0xdb),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/* 66 0F 3A DF  /r RMBoth  ib   | Assist in AES round key gen- eration using an 8 bits Round Constant (RCON) specified in the immediate byte, operating on 128 bits of data specified in xmm2/m128 and stores the result in xmm1. */
inline int aeskeygenassist (code_ptr p,
                     const XmmReg (&   modrm_reg),
                     const XmmReg (&   modrm_rm),
                     imm8_t imm)
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm,
                                       Prefix_OPERAND_SIZE),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x3a,0xdf),
                               make_modrm (modrm_rm,modrm_reg),
                               make_imm (imm));
}
/* 66 0F 3A DF  /r RMBoth  ib   | Assist in AES round key gen- eration using an 8 bits Round Constant (RCON) specified in the immediate byte, operating on 128 bits of data specified in xmm2/m128 and stores the result in xmm1. */
inline int aeskeygenassist (code_ptr p,
                     const XmmReg (&   modrm_reg),
                     const XmmWordPtr (&   modrm_rm),
                     imm8_t imm)
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm,
                                       Prefix_OPERAND_SIZE),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x3a,0xdf),
                               make_modrm (modrm_rm,modrm_reg),
                               make_imm (imm));
}
/*  25     id op32  | EAX AND imm32. */
inline int and_ (code_ptr p,
          const RegEAX (&   unused),
          imm32_t imm)
{
    return encode_instruction (p,
                               Prefix (Op32,AddrNothing),
                               Code (0x25),
                               make_imm (imm));
}
/*  83  /4 RMBoth  ib op32  | r/m32 AND imm8 (sign- extended). */
inline int and_ (code_ptr p,
          const DwordReg_m_EAX (&   modrm_rm),
          imm8_t imm)
{
    return encode_instruction (p,
                               Prefix (Op32,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm)),
                               Code (0x83),
                               make_modrm (modrm_rm,4),
                               make_imm (imm));
}
/*  81  /4 RMBoth  id op32  | r/m32 AND imm32. */
inline int and_ (code_ptr p,
          const DwordReg_m_EAX (&   modrm_rm),
          imm32_t imm)
{
    return encode_instruction (p,
                               Prefix (Op32,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm)),
                               Code (0x81),
                               make_modrm (modrm_rm,4),
                               make_imm (imm));
}
/*  81  /4 RMBoth  id op32  | r/m32 AND imm32. */
inline int and_ (code_ptr p,
          const DwordPtr (&   modrm_rm),
          imm32_t imm)
{
    return encode_instruction (p,
                               Prefix (Op32,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm)),
                               Code (0x81),
                               make_modrm (modrm_rm,4),
                               make_imm (imm));
}
/*  83  /4 RMBoth  ib op32  | r/m32 AND imm8 (sign- extended). */
inline int and_ (code_ptr p,
          const RegEAX (&   modrm_rm),
          imm8_t imm)
{
    return encode_instruction (p,
                               Prefix (Op32,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm)),
                               Code (0x83),
                               make_modrm (modrm_rm,4),
                               make_imm (imm));
}
/*  83  /4 RMBoth  ib op32  | r/m32 AND imm8 (sign- extended). */
inline int and_ (code_ptr p,
          const DwordPtr (&   modrm_rm),
          imm8_t imm)
{
    return encode_instruction (p,
                               Prefix (Op32,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm)),
                               Code (0x83),
                               make_modrm (modrm_rm,4),
                               make_imm (imm));
}
/*  25     iw op16  | AX AND imm16. */
inline int and_ (code_ptr p,
          const RegAX (&   unused),
          imm16_t imm)
{
    return encode_instruction (p,
                               Prefix (Op16,AddrNothing),
                               Code (0x25),
                               make_imm (imm));
}
/*  83  /4 RMBoth  ib op16  | r/m16 AND imm8 (sign- extended). */
inline int and_ (code_ptr p,
          const WordReg_m_AX (&   modrm_rm),
          imm8_t imm)
{
    return encode_instruction (p,
                               Prefix (Op16,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm)),
                               Code (0x83),
                               make_modrm (modrm_rm,4),
                               make_imm (imm));
}
/*  81  /4 RMBoth  iw op16  | r/m16 AND imm16. */
inline int and_ (code_ptr p,
          const WordReg_m_AX (&   modrm_rm),
          imm16_t imm)
{
    return encode_instruction (p,
                               Prefix (Op16,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm)),
                               Code (0x81),
                               make_modrm (modrm_rm,4),
                               make_imm (imm));
}
/*  81  /4 RMBoth  iw op16  | r/m16 AND imm16. */
inline int and_ (code_ptr p,
          const WordPtr (&   modrm_rm),
          imm16_t imm)
{
    return encode_instruction (p,
                               Prefix (Op16,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm)),
                               Code (0x81),
                               make_modrm (modrm_rm,4),
                               make_imm (imm));
}
/*  83  /4 RMBoth  ib op16  | r/m16 AND imm8 (sign- extended). */
inline int and_ (code_ptr p,
          const RegAX (&   modrm_rm),
          imm8_t imm)
{
    return encode_instruction (p,
                               Prefix (Op16,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm)),
                               Code (0x83),
                               make_modrm (modrm_rm,4),
                               make_imm (imm));
}
/*  83  /4 RMBoth  ib op16  | r/m16 AND imm8 (sign- extended). */
inline int and_ (code_ptr p,
          const WordPtr (&   modrm_rm),
          imm8_t imm)
{
    return encode_instruction (p,
                               Prefix (Op16,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm)),
                               Code (0x83),
                               make_modrm (modrm_rm,4),
                               make_imm (imm));
}
/*  23  /r RMBoth   op32  | r32 AND r/m32. */
inline int and_ (code_ptr p,
          const DwordReg (&   modrm_reg),
          const DwordReg (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (Op32,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0x23),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/*  23  /r RMBoth   op32  | r32 AND r/m32. */
inline int and_ (code_ptr p,
          const DwordReg (&   modrm_reg),
          const DwordPtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (Op32,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0x23),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/*  21  /r RMBoth   op32  | r/m32 AND r32. */
inline int and_ (code_ptr p,
          const DwordPtr (&   modrm_rm),
          const DwordReg (&   modrm_reg))
{
    return encode_instruction (p,
                               Prefix (Op32,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0x21),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/*  23  /r RMBoth   op16  | r16 AND r/m16. */
inline int and_ (code_ptr p,
          const WordReg (&   modrm_reg),
          const WordReg (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (Op16,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0x23),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/*  23  /r RMBoth   op16  | r16 AND r/m16. */
inline int and_ (code_ptr p,
          const WordReg (&   modrm_reg),
          const WordPtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (Op16,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0x23),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/*  21  /r RMBoth   op16  | r/m16 AND r16. */
inline int and_ (code_ptr p,
          const WordPtr (&   modrm_rm),
          const WordReg (&   modrm_reg))
{
    return encode_instruction (p,
                               Prefix (Op16,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0x21),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/*  22  /r RMBoth     | r8 AND r/m8. */
inline int and_ (code_ptr p,
          const ByteReg (&   modrm_reg),
          const ByteReg (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0x22),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/*  22  /r RMBoth     | r8 AND r/m8. */
inline int and_ (code_ptr p,
          const ByteReg (&   modrm_reg),
          const BytePtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0x22),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/*  20  /r RMBoth     | r/m8 AND r8. */
inline int and_ (code_ptr p,
          const BytePtr (&   modrm_rm),
          const ByteReg (&   modrm_reg))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0x20),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/*  24     ib   | AL AND imm8. */
inline int and_ (code_ptr p,
          const RegAL (&   unused),
          imm8_t imm)
{
    return encode_instruction (p,
                               Prefix (OpNothing,AddrNothing),
                               Code (0x24),
                               make_imm (imm));
}
/*  80  /4 RMBoth  ib   | r/m8 AND imm8. */
inline int and_ (code_ptr p,
          const ByteReg (&   modrm_rm),
          imm8_t imm)
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm)),
                               Code (0x80),
                               make_modrm (modrm_rm,4),
                               make_imm (imm));
}
/*  80  /4 RMBoth  ib   | r/m8 AND imm8. */
inline int and_ (code_ptr p,
          const BytePtr (&   modrm_rm),
          imm8_t imm)
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm)),
                               Code (0x80),
                               make_modrm (modrm_rm,4),
                               make_imm (imm));
}
/* 66 0F 55  /r RMBoth     | Bitwise logical AND NOT of xmm2/m128 and xmm1. */
inline int andnpd (code_ptr p,
            const XmmReg (&   modrm_reg),
            const XmmReg (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm,
                                       Prefix_OPERAND_SIZE),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x55),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/* 66 0F 55  /r RMBoth     | Bitwise logical AND NOT of xmm2/m128 and xmm1. */
inline int andnpd (code_ptr p,
            const XmmReg (&   modrm_reg),
            const XmmWordPtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm,
                                       Prefix_OPERAND_SIZE),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x55),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/*  0F 55  /r RMBoth     | Bitwise logical AND NOT of xmm2/m128 and xmm1. */
inline int andnps (code_ptr p,
            const XmmReg (&   modrm_reg),
            const XmmReg (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x55),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/*  0F 55  /r RMBoth     | Bitwise logical AND NOT of xmm2/m128 and xmm1. */
inline int andnps (code_ptr p,
            const XmmReg (&   modrm_reg),
            const XmmWordPtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x55),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/* 66 0F 54  /r RMBoth     | Bitwise logical AND of xmm2/m128 and xmm1. */
inline int andpd (code_ptr p,
           const XmmReg (&   modrm_reg),
           const XmmReg (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm,
                                       Prefix_OPERAND_SIZE),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x54),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/* 66 0F 54  /r RMBoth     | Bitwise logical AND of xmm2/m128 and xmm1. */
inline int andpd (code_ptr p,
           const XmmReg (&   modrm_reg),
           const XmmWordPtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm,
                                       Prefix_OPERAND_SIZE),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x54),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/*  0F 54  /r RMBoth     | Bitwise logical AND of xmm2/m128 and xmm1. */
inline int andps (code_ptr p,
           const XmmReg (&   modrm_reg),
           const XmmReg (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x54),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/*  0F 54  /r RMBoth     | Bitwise logical AND of xmm2/m128 and xmm1. */
inline int andps (code_ptr p,
           const XmmReg (&   modrm_reg),
           const XmmWordPtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x54),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/*  63  /r RMBoth     | Adjust RPL of r/m16 to not less than RPL of r16. */
inline int arpl (code_ptr p,
          const WordReg (&   modrm_rm),
          const WordReg (&   modrm_reg))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0x63),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/*  63  /r RMBoth     | Adjust RPL of r/m16 to not less than RPL of r16. */
inline int arpl (code_ptr p,
          const WordPtr (&   modrm_rm),
          const WordReg (&   modrm_reg))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0x63),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/* 66 0F 3A 0D  /r RMBoth  ib   | Select packed DP-FP values from xmm1 and xmm2/m128 from mask specified in imm8 and store the values into xmm1. */
inline int blendpd (code_ptr p,
             const XmmReg (&   modrm_reg),
             const XmmReg (&   modrm_rm),
             imm8_t imm)
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm,
                                       Prefix_OPERAND_SIZE),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x3a,0xd),
                               make_modrm (modrm_rm,modrm_reg),
                               make_imm (imm));
}
/* 66 0F 3A 0D  /r RMBoth  ib   | Select packed DP-FP values from xmm1 and xmm2/m128 from mask specified in imm8 and store the values into xmm1. */
inline int blendpd (code_ptr p,
             const XmmReg (&   modrm_reg),
             const XmmWordPtr (&   modrm_rm),
             imm8_t imm)
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm,
                                       Prefix_OPERAND_SIZE),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x3a,0xd),
                               make_modrm (modrm_rm,modrm_reg),
                               make_imm (imm));
}
/* 66 0F 3A 0C  /r RMBoth  ib   | Select packed single precision floating-point values from xmm1 and xmm2/m128 from mask specified in imm8 and store the values into xmm1. */
inline int blendps (code_ptr p,
             const XmmReg (&   modrm_reg),
             const XmmReg (&   modrm_rm),
             imm8_t imm)
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm,
                                       Prefix_OPERAND_SIZE),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x3a,0xc),
                               make_modrm (modrm_rm,modrm_reg),
                               make_imm (imm));
}
/* 66 0F 3A 0C  /r RMBoth  ib   | Select packed single precision floating-point values from xmm1 and xmm2/m128 from mask specified in imm8 and store the values into xmm1. */
inline int blendps (code_ptr p,
             const XmmReg (&   modrm_reg),
             const XmmWordPtr (&   modrm_rm),
             imm8_t imm)
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm,
                                       Prefix_OPERAND_SIZE),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x3a,0xc),
                               make_modrm (modrm_rm,modrm_reg),
                               make_imm (imm));
}
/* 66 0F 38 15  /r RMBoth     | Select packed DP FP values from xmm1 and xmm2 from mask specified in XMM0 and store the values in xmm1. */
inline int blendvpd (code_ptr p,
              const XmmReg (&   modrm_reg),
              const XmmReg (&   modrm_rm),
              const RegXMM0 (&   unused))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm,
                                       Prefix_OPERAND_SIZE),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x38,0x15),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/* 66 0F 38 15  /r RMBoth     | Select packed DP FP values from xmm1 and xmm2 from mask specified in XMM0 and store the values in xmm1. */
inline int blendvpd (code_ptr p,
              const XmmReg (&   modrm_reg),
              const XmmWordPtr (&   modrm_rm),
              const RegXMM0 (&   unused))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm,
                                       Prefix_OPERAND_SIZE),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x38,0x15),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/* 66 0F 38 14  /r RMBoth     | Select packed single precision floating-point values from xmm1 and xmm2/m128 from mask specified in XMM0 and store the values into xmm1. */
inline int blendvps (code_ptr p,
              const XmmReg (&   modrm_reg),
              const XmmReg (&   modrm_rm),
              const RegXMM0 (&   unused))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm,
                                       Prefix_OPERAND_SIZE),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x38,0x14),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/* 66 0F 38 14  /r RMBoth     | Select packed single precision floating-point values from xmm1 and xmm2/m128 from mask specified in XMM0 and store the values into xmm1. */
inline int blendvps (code_ptr p,
              const XmmReg (&   modrm_reg),
              const XmmWordPtr (&   modrm_rm),
              const RegXMM0 (&   unused))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm,
                                       Prefix_OPERAND_SIZE),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x38,0x14),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/*  62  /r RMMemOnly   op16  | Check if r16 (array index) is within bounds specified by m16&16. */
inline int bound (code_ptr p,
           const WordReg (&   modrm_reg),
           const DwordPtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (Op16,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0x62),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/*  62  /r RMMemOnly   op32  | Check if r32 (array index) is within bounds specified by m16&16. */
inline int bound (code_ptr p,
           const DwordReg (&   modrm_reg),
           const QwordPtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (Op32,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0x62),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/*  0F BC  /r RMBoth   op16  | Bit scan forward on r/m16. */
inline int bsf (code_ptr p,
         const WordReg (&   modrm_reg),
         const WordReg (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (Op16,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0xbc),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/*  0F BC  /r RMBoth   op16  | Bit scan forward on r/m16. */
inline int bsf (code_ptr p,
         const WordReg (&   modrm_reg),
         const WordPtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (Op16,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0xbc),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/*  0F BC  /r RMBoth   op32  | Bit scan forward on r/m32. */
inline int bsf (code_ptr p,
         const DwordReg (&   modrm_reg),
         const DwordReg (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (Op32,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0xbc),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/*  0F BC  /r RMBoth   op32  | Bit scan forward on r/m32. */
inline int bsf (code_ptr p,
         const DwordReg (&   modrm_reg),
         const DwordPtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (Op32,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0xbc),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/*  0F BD  /r RMBoth   op16  | Bit scan reverse on r/m16. */
inline int bsr (code_ptr p,
         const WordReg (&   modrm_reg),
         const WordReg (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (Op16,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0xbd),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/*  0F BD  /r RMBoth   op16  | Bit scan reverse on r/m16. */
inline int bsr (code_ptr p,
         const WordReg (&   modrm_reg),
         const WordPtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (Op16,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0xbd),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/*  0F BD  /r RMBoth   op32  | Bit scan reverse on r/m32. */
inline int bsr (code_ptr p,
         const DwordReg (&   modrm_reg),
         const DwordReg (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (Op32,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0xbd),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/*  0F BD  /r RMBoth   op32  | Bit scan reverse on r/m32. */
inline int bsr (code_ptr p,
         const DwordReg (&   modrm_reg),
         const DwordPtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (Op32,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0xbd),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/*  0F C8    +rd    | Reverses the byte order of a 32-bit register. */
inline int bswap (code_ptr p,
           const DwordReg (&   radd))
{
    return encode_instruction (p,
                               Prefix (OpNothing,AddrNothing),
                               rexByte (rex_regadd (RegAdd (radd))),
                               Code (0xf,0xc8,RegAdd (radd)));
}
/*  0F BA  /4 RMBoth  ib op16  | Store selected bit in CF flag. */
inline int bt (code_ptr p,
        const WordReg (&   modrm_rm),
        imm8_t imm)
{
    return encode_instruction (p,
                               Prefix (Op16,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm)),
                               Code (0xf,0xba),
                               make_modrm (modrm_rm,4),
                               make_imm (imm));
}
/*  0F BA  /4 RMBoth  ib op16  | Store selected bit in CF flag. */
inline int bt (code_ptr p,
        const WordPtr (&   modrm_rm),
        imm8_t imm)
{
    return encode_instruction (p,
                               Prefix (Op16,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm)),
                               Code (0xf,0xba),
                               make_modrm (modrm_rm,4),
                               make_imm (imm));
}
/*  0F A3  /r RMBoth   op16  | Store selected bit in CF flag. */
inline int bt (code_ptr p,
        const WordReg (&   modrm_rm),
        const WordReg (&   modrm_reg))
{
    return encode_instruction (p,
                               Prefix (Op16,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0xa3),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/*  0F A3  /r RMBoth   op16  | Store selected bit in CF flag. */
inline int bt (code_ptr p,
        const WordPtr (&   modrm_rm),
        const WordReg (&   modrm_reg))
{
    return encode_instruction (p,
                               Prefix (Op16,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0xa3),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/*  0F BA  /4 RMBoth  ib op32  | Store selected bit in CF flag. */
inline int bt (code_ptr p,
        const DwordReg (&   modrm_rm),
        imm8_t imm)
{
    return encode_instruction (p,
                               Prefix (Op32,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm)),
                               Code (0xf,0xba),
                               make_modrm (modrm_rm,4),
                               make_imm (imm));
}
/*  0F BA  /4 RMBoth  ib op32  | Store selected bit in CF flag. */
inline int bt (code_ptr p,
        const DwordPtr (&   modrm_rm),
        imm8_t imm)
{
    return encode_instruction (p,
                               Prefix (Op32,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm)),
                               Code (0xf,0xba),
                               make_modrm (modrm_rm,4),
                               make_imm (imm));
}
/*  0F A3  /r RMBoth   op32  | Store selected bit in CF flag. */
inline int bt (code_ptr p,
        const DwordReg (&   modrm_rm),
        const DwordReg (&   modrm_reg))
{
    return encode_instruction (p,
                               Prefix (Op32,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0xa3),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/*  0F A3  /r RMBoth   op32  | Store selected bit in CF flag. */
inline int bt (code_ptr p,
        const DwordPtr (&   modrm_rm),
        const DwordReg (&   modrm_reg))
{
    return encode_instruction (p,
                               Prefix (Op32,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0xa3),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/*  0F BA  /7 RMBoth  ib op16  | Store selected bit in CF flag and complement. */
inline int btc (code_ptr p,
         const WordReg (&   modrm_rm),
         imm8_t imm)
{
    return encode_instruction (p,
                               Prefix (Op16,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm)),
                               Code (0xf,0xba),
                               make_modrm (modrm_rm,7),
                               make_imm (imm));
}
/*  0F BA  /7 RMBoth  ib op16  | Store selected bit in CF flag and complement. */
inline int btc (code_ptr p,
         const WordPtr (&   modrm_rm),
         imm8_t imm)
{
    return encode_instruction (p,
                               Prefix (Op16,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm)),
                               Code (0xf,0xba),
                               make_modrm (modrm_rm,7),
                               make_imm (imm));
}
/*  0F BB  /r RMBoth   op16  | Store selected bit in CF flag and complement. */
inline int btc (code_ptr p,
         const WordReg (&   modrm_rm),
         const WordReg (&   modrm_reg))
{
    return encode_instruction (p,
                               Prefix (Op16,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0xbb),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/*  0F BB  /r RMBoth   op16  | Store selected bit in CF flag and complement. */
inline int btc (code_ptr p,
         const WordPtr (&   modrm_rm),
         const WordReg (&   modrm_reg))
{
    return encode_instruction (p,
                               Prefix (Op16,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0xbb),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/*  0F BA  /7 RMBoth  ib op32  | Store selected bit in CF flag and complement. */
inline int btc (code_ptr p,
         const DwordReg (&   modrm_rm),
         imm8_t imm)
{
    return encode_instruction (p,
                               Prefix (Op32,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm)),
                               Code (0xf,0xba),
                               make_modrm (modrm_rm,7),
                               make_imm (imm));
}
/*  0F BA  /7 RMBoth  ib op32  | Store selected bit in CF flag and complement. */
inline int btc (code_ptr p,
         const DwordPtr (&   modrm_rm),
         imm8_t imm)
{
    return encode_instruction (p,
                               Prefix (Op32,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm)),
                               Code (0xf,0xba),
                               make_modrm (modrm_rm,7),
                               make_imm (imm));
}
/*  0F BB  /r RMBoth   op32  | Store selected bit in CF flag and complement. */
inline int btc (code_ptr p,
         const DwordReg (&   modrm_rm),
         const DwordReg (&   modrm_reg))
{
    return encode_instruction (p,
                               Prefix (Op32,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0xbb),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/*  0F BB  /r RMBoth   op32  | Store selected bit in CF flag and complement. */
inline int btc (code_ptr p,
         const DwordPtr (&   modrm_rm),
         const DwordReg (&   modrm_reg))
{
    return encode_instruction (p,
                               Prefix (Op32,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0xbb),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/*  0F BA  /6 RMBoth  ib op16  | Store selected bit in CF flag and clear. */
inline int btr (code_ptr p,
         const WordReg (&   modrm_rm),
         imm8_t imm)
{
    return encode_instruction (p,
                               Prefix (Op16,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm)),
                               Code (0xf,0xba),
                               make_modrm (modrm_rm,6),
                               make_imm (imm));
}
/*  0F BA  /6 RMBoth  ib op16  | Store selected bit in CF flag and clear. */
inline int btr (code_ptr p,
         const WordPtr (&   modrm_rm),
         imm8_t imm)
{
    return encode_instruction (p,
                               Prefix (Op16,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm)),
                               Code (0xf,0xba),
                               make_modrm (modrm_rm,6),
                               make_imm (imm));
}
/*  0F B3  /r RMBoth   op16  | Store selected bit in CF flag and clear. */
inline int btr (code_ptr p,
         const WordReg (&   modrm_rm),
         const WordReg (&   modrm_reg))
{
    return encode_instruction (p,
                               Prefix (Op16,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0xb3),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/*  0F B3  /r RMBoth   op16  | Store selected bit in CF flag and clear. */
inline int btr (code_ptr p,
         const WordPtr (&   modrm_rm),
         const WordReg (&   modrm_reg))
{
    return encode_instruction (p,
                               Prefix (Op16,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0xb3),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/*  0F BA  /6 RMBoth  ib op32  | Store selected bit in CF flag and clear. */
inline int btr (code_ptr p,
         const DwordReg (&   modrm_rm),
         imm8_t imm)
{
    return encode_instruction (p,
                               Prefix (Op32,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm)),
                               Code (0xf,0xba),
                               make_modrm (modrm_rm,6),
                               make_imm (imm));
}
/*  0F BA  /6 RMBoth  ib op32  | Store selected bit in CF flag and clear. */
inline int btr (code_ptr p,
         const DwordPtr (&   modrm_rm),
         imm8_t imm)
{
    return encode_instruction (p,
                               Prefix (Op32,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm)),
                               Code (0xf,0xba),
                               make_modrm (modrm_rm,6),
                               make_imm (imm));
}
/*  0F B3  /r RMBoth   op32  | Store selected bit in CF flag and clear. */
inline int btr (code_ptr p,
         const DwordReg (&   modrm_rm),
         const DwordReg (&   modrm_reg))
{
    return encode_instruction (p,
                               Prefix (Op32,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0xb3),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/*  0F B3  /r RMBoth   op32  | Store selected bit in CF flag and clear. */
inline int btr (code_ptr p,
         const DwordPtr (&   modrm_rm),
         const DwordReg (&   modrm_reg))
{
    return encode_instruction (p,
                               Prefix (Op32,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0xb3),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/*  0F BA  /5 RMBoth  ib op16  | Store selected bit in CF flag and set. */
inline int bts (code_ptr p,
         const WordReg (&   modrm_rm),
         imm8_t imm)
{
    return encode_instruction (p,
                               Prefix (Op16,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm)),
                               Code (0xf,0xba),
                               make_modrm (modrm_rm,5),
                               make_imm (imm));
}
/*  0F BA  /5 RMBoth  ib op16  | Store selected bit in CF flag and set. */
inline int bts (code_ptr p,
         const WordPtr (&   modrm_rm),
         imm8_t imm)
{
    return encode_instruction (p,
                               Prefix (Op16,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm)),
                               Code (0xf,0xba),
                               make_modrm (modrm_rm,5),
                               make_imm (imm));
}
/*  0F AB  /r RMBoth   op16  | Store selected bit in CF flag and set. */
inline int bts (code_ptr p,
         const WordReg (&   modrm_rm),
         const WordReg (&   modrm_reg))
{
    return encode_instruction (p,
                               Prefix (Op16,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0xab),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/*  0F AB  /r RMBoth   op16  | Store selected bit in CF flag and set. */
inline int bts (code_ptr p,
         const WordPtr (&   modrm_rm),
         const WordReg (&   modrm_reg))
{
    return encode_instruction (p,
                               Prefix (Op16,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0xab),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/*  0F BA  /5 RMBoth  ib op32  | Store selected bit in CF flag and set. */
inline int bts (code_ptr p,
         const DwordReg (&   modrm_rm),
         imm8_t imm)
{
    return encode_instruction (p,
                               Prefix (Op32,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm)),
                               Code (0xf,0xba),
                               make_modrm (modrm_rm,5),
                               make_imm (imm));
}
/*  0F BA  /5 RMBoth  ib op32  | Store selected bit in CF flag and set. */
inline int bts (code_ptr p,
         const DwordPtr (&   modrm_rm),
         imm8_t imm)
{
    return encode_instruction (p,
                               Prefix (Op32,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm)),
                               Code (0xf,0xba),
                               make_modrm (modrm_rm,5),
                               make_imm (imm));
}
/*  0F AB  /r RMBoth   op32  | Store selected bit in CF flag and set. */
inline int bts (code_ptr p,
         const DwordReg (&   modrm_rm),
         const DwordReg (&   modrm_reg))
{
    return encode_instruction (p,
                               Prefix (Op32,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0xab),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/*  0F AB  /r RMBoth   op32  | Store selected bit in CF flag and set. */
inline int bts (code_ptr p,
         const DwordPtr (&   modrm_rm),
         const DwordReg (&   modrm_reg))
{
    return encode_instruction (p,
                               Prefix (Op32,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0xab),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/*  E8     cw op16  | Call near, relative, displacement relative to next instruction. */
inline int call (code_ptr p,
          rel16_t imm)
{
    return encode_instruction (p,
                               Prefix (Op16,AddrNothing),
                               Code (0xe8),
                               make_imm (imm));
}
/*  E8     cd op32  | Call near, relative, displacement relative to next instruction. 32-bit displacement sign extended to 64-bits in 64-bit mode. */
inline int call (code_ptr p,
          rel32_t imm)
{
    return encode_instruction (p,
                               Prefix (Op32,AddrNothing),
                               Code (0xe8),
                               make_imm (imm));
}
/*  9A     cd op16  | Call far, absolute, address given in operand. */
inline int call (code_ptr p,
          const FarPtr16 (&   imm))
{
    return encode_instruction (p,
                               Prefix (Op16,AddrNothing),
                               Code (0x9a),
                               make_imm (imm));
}
/*  9A     cp op32  | Call far, absolute, address given in operand. */
inline int call (code_ptr p,
          const FarPtr32 (&   imm))
{
    return encode_instruction (p,
                               Prefix (Op32,AddrNothing),
                               Code (0x9a),
                               make_imm (imm));
}
/*  FF  /2 RMBoth   op16  | Call near, absolute indirect, address given in r/m16. */
inline int call (code_ptr p,
          const WordReg (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (Op16,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm)),
                               Code (0xff),
                               make_modrm (modrm_rm,2));
}
/*  FF  /2 RMBoth   op16  | Call near, absolute indirect, address given in r/m16. */
inline int call (code_ptr p,
          const WordPtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (Op16,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm)),
                               Code (0xff),
                               make_modrm (modrm_rm,2));
}
/*  FF  /2 RMBoth   op32  | Call near, absolute indirect, address given in r/m32. */
inline int call (code_ptr p,
          const DwordReg (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (Op32,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm)),
                               Code (0xff),
                               make_modrm (modrm_rm,2));
}
/*  FF  /2 RMBoth   op32  | Call near, absolute indirect, address given in r/m32. */
inline int call (code_ptr p,
          const DwordPtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (Op32,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm)),
                               Code (0xff),
                               make_modrm (modrm_rm,2));
}
/*  FF  /3 RMMemOnly   op16  | Call far, absolute indirect address given in m16:16. In 32-bit mode: if selector points to a gate, then RIP = 32-bit zero extended displacement taken from gate; else RIP = zero extended 16-bit offset from far pointer referenced in the instruction. */
inline int call (code_ptr p,
          const Far16Ptr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (Op16,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm)),
                               Code (0xff),
                               make_modrm (modrm_rm,3));
}
/*  FF  /3 RMMemOnly   op32  | In 64-bit mode: If selector points to a gate, then RIP = 64-bit displacement taken from gate; else RIP = zero extended 32-bit offset from far pointer referenced in the instruction. */
inline int call (code_ptr p,
          const Far32Ptr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (Op32,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm)),
                               Code (0xff),
                               make_modrm (modrm_rm,3));
}
/*  98      op16  | AX ← sign-extend of AL. */
inline int cbw (code_ptr p)
{
    return encode_instruction (p,
                               Prefix (Op16,AddrNothing),
                               Code (0x98));
}
/*  99      op32  | EDX:EAX ← sign-extend of EAX. */
inline int cdq (code_ptr p)
{
    return encode_instruction (p,
                               Prefix (Op32,AddrNothing),
                               Code (0x99));
}
/*  F8        | Clear CF flag. */
inline int clc (code_ptr p)
{
    return encode_instruction (p,
                               Prefix (OpNothing,AddrNothing),
                               Code (0xf8));
}
/*  FC        | Clear DF flag. */
inline int cld (code_ptr p)
{
    return encode_instruction (p,
                               Prefix (OpNothing,AddrNothing),
                               Code (0xfc));
}
/*  0F AE  /7 RMMemOnly     | Flushes cache line containing m8. */
inline int clflush (code_ptr p,
             const BytePtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm)),
                               Code (0xf,0xae),
                               make_modrm (modrm_rm,7));
}
/*  FA        | Clear interrupt flag; interrupts disabled when interrupt flag cleared. */
inline int cli (code_ptr p)
{
    return encode_instruction (p,
                               Prefix (OpNothing,AddrNothing),
                               Code (0xfa));
}
/*  0F 06        | Clears TS flag in CR0. */
inline int clts (code_ptr p)
{
    return encode_instruction (p,
                               Prefix (OpNothing,AddrNothing),
                               Code (0xf,0x6));
}
/*  F5        | Complement CF flag. */
inline int cmc (code_ptr p)
{
    return encode_instruction (p,
                               Prefix (OpNothing,AddrNothing),
                               Code (0xf5));
}
/*  0F 47  /r RMBoth   op16  | Move if above (CF=0 and ZF=0). */
inline int cmova (code_ptr p,
           const WordReg (&   modrm_reg),
           const WordReg (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (Op16,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x47),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/*  0F 47  /r RMBoth   op16  | Move if above (CF=0 and ZF=0). */
inline int cmova (code_ptr p,
           const WordReg (&   modrm_reg),
           const WordPtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (Op16,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x47),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/*  0F 47  /r RMBoth   op32  | Move if above (CF=0 and ZF=0). */
inline int cmova (code_ptr p,
           const DwordReg (&   modrm_reg),
           const DwordReg (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (Op32,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x47),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/*  0F 47  /r RMBoth   op32  | Move if above (CF=0 and ZF=0). */
inline int cmova (code_ptr p,
           const DwordReg (&   modrm_reg),
           const DwordPtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (Op32,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x47),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/*  0F 43  /r RMBoth   op16  | Move if above or equal (CF=0). */
inline int cmovae (code_ptr p,
            const WordReg (&   modrm_reg),
            const WordReg (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (Op16,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x43),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/*  0F 43  /r RMBoth   op16  | Move if above or equal (CF=0). */
inline int cmovae (code_ptr p,
            const WordReg (&   modrm_reg),
            const WordPtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (Op16,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x43),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/*  0F 43  /r RMBoth   op32  | Move if above or equal (CF=0). */
inline int cmovae (code_ptr p,
            const DwordReg (&   modrm_reg),
            const DwordReg (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (Op32,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x43),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/*  0F 43  /r RMBoth   op32  | Move if above or equal (CF=0). */
inline int cmovae (code_ptr p,
            const DwordReg (&   modrm_reg),
            const DwordPtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (Op32,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x43),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/*  0F 42  /r RMBoth   op16  | Move if below (CF=1). */
inline int cmovb (code_ptr p,
           const WordReg (&   modrm_reg),
           const WordReg (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (Op16,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x42),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/*  0F 42  /r RMBoth   op16  | Move if below (CF=1). */
inline int cmovb (code_ptr p,
           const WordReg (&   modrm_reg),
           const WordPtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (Op16,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x42),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/*  0F 42  /r RMBoth   op32  | Move if below (CF=1). */
inline int cmovb (code_ptr p,
           const DwordReg (&   modrm_reg),
           const DwordReg (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (Op32,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x42),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/*  0F 42  /r RMBoth   op32  | Move if below (CF=1). */
inline int cmovb (code_ptr p,
           const DwordReg (&   modrm_reg),
           const DwordPtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (Op32,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x42),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/*  0F 46  /r RMBoth   op16  | Move if below or equal (CF=1 or ZF=1). */
inline int cmovbe (code_ptr p,
            const WordReg (&   modrm_reg),
            const WordReg (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (Op16,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x46),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/*  0F 46  /r RMBoth   op16  | Move if below or equal (CF=1 or ZF=1). */
inline int cmovbe (code_ptr p,
            const WordReg (&   modrm_reg),
            const WordPtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (Op16,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x46),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/*  0F 46  /r RMBoth   op32  | Move if below or equal (CF=1 or ZF=1). */
inline int cmovbe (code_ptr p,
            const DwordReg (&   modrm_reg),
            const DwordReg (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (Op32,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x46),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/*  0F 46  /r RMBoth   op32  | Move if below or equal (CF=1 or ZF=1). */
inline int cmovbe (code_ptr p,
            const DwordReg (&   modrm_reg),
            const DwordPtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (Op32,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x46),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/*  0F 42  /r RMBoth   op16  | Move if carry (CF=1). */
inline int cmovc (code_ptr p,
           const WordReg (&   modrm_reg),
           const WordReg (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (Op16,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x42),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/*  0F 42  /r RMBoth   op16  | Move if carry (CF=1). */
inline int cmovc (code_ptr p,
           const WordReg (&   modrm_reg),
           const WordPtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (Op16,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x42),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/*  0F 42  /r RMBoth   op32  | Move if carry (CF=1). */
inline int cmovc (code_ptr p,
           const DwordReg (&   modrm_reg),
           const DwordReg (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (Op32,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x42),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/*  0F 42  /r RMBoth   op32  | Move if carry (CF=1). */
inline int cmovc (code_ptr p,
           const DwordReg (&   modrm_reg),
           const DwordPtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (Op32,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x42),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/*  0F 44  /r RMBoth   op16  | Move if equal (ZF=1). */
inline int cmove (code_ptr p,
           const WordReg (&   modrm_reg),
           const WordReg (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (Op16,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x44),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/*  0F 44  /r RMBoth   op16  | Move if equal (ZF=1). */
inline int cmove (code_ptr p,
           const WordReg (&   modrm_reg),
           const WordPtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (Op16,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x44),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/*  0F 44  /r RMBoth   op32  | Move if equal (ZF=1). */
inline int cmove (code_ptr p,
           const DwordReg (&   modrm_reg),
           const DwordReg (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (Op32,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x44),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/*  0F 44  /r RMBoth   op32  | Move if equal (ZF=1). */
inline int cmove (code_ptr p,
           const DwordReg (&   modrm_reg),
           const DwordPtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (Op32,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x44),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/*  0F 4F  /r RMBoth   op16  | Move if greater (ZF=0 and SF=OF). */
inline int cmovg (code_ptr p,
           const WordReg (&   modrm_reg),
           const WordReg (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (Op16,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x4f),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/*  0F 4F  /r RMBoth   op16  | Move if greater (ZF=0 and SF=OF). */
inline int cmovg (code_ptr p,
           const WordReg (&   modrm_reg),
           const WordPtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (Op16,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x4f),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/*  0F 4F  /r RMBoth   op32  | Move if greater (ZF=0 and SF=OF). */
inline int cmovg (code_ptr p,
           const DwordReg (&   modrm_reg),
           const DwordReg (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (Op32,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x4f),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/*  0F 4F  /r RMBoth   op32  | Move if greater (ZF=0 and SF=OF). */
inline int cmovg (code_ptr p,
           const DwordReg (&   modrm_reg),
           const DwordPtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (Op32,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x4f),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/*  0F 4D  /r RMBoth   op16  | Move if greater or equal (SF=OF). */
inline int cmovge (code_ptr p,
            const WordReg (&   modrm_reg),
            const WordReg (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (Op16,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x4d),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/*  0F 4D  /r RMBoth   op16  | Move if greater or equal (SF=OF). */
inline int cmovge (code_ptr p,
            const WordReg (&   modrm_reg),
            const WordPtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (Op16,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x4d),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/*  0F 4D  /r RMBoth   op32  | Move if greater or equal (SF=OF). */
inline int cmovge (code_ptr p,
            const DwordReg (&   modrm_reg),
            const DwordReg (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (Op32,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x4d),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/*  0F 4D  /r RMBoth   op32  | Move if greater or equal (SF=OF). */
inline int cmovge (code_ptr p,
            const DwordReg (&   modrm_reg),
            const DwordPtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (Op32,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x4d),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/*  0F 4C  /r RMBoth   op16  | Move if less (SF≠ OF). */
inline int cmovl (code_ptr p,
           const WordReg (&   modrm_reg),
           const WordReg (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (Op16,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x4c),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/*  0F 4C  /r RMBoth   op16  | Move if less (SF≠ OF). */
inline int cmovl (code_ptr p,
           const WordReg (&   modrm_reg),
           const WordPtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (Op16,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x4c),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/*  0F 4C  /r RMBoth   op32  | Move if less (SF≠ OF). */
inline int cmovl (code_ptr p,
           const DwordReg (&   modrm_reg),
           const DwordReg (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (Op32,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x4c),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/*  0F 4C  /r RMBoth   op32  | Move if less (SF≠ OF). */
inline int cmovl (code_ptr p,
           const DwordReg (&   modrm_reg),
           const DwordPtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (Op32,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x4c),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/*  0F 4E  /r RMBoth   op16  | Move if less or equal (ZF=1 or SF≠ OF). */
inline int cmovle (code_ptr p,
            const WordReg (&   modrm_reg),
            const WordReg (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (Op16,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x4e),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/*  0F 4E  /r RMBoth   op16  | Move if less or equal (ZF=1 or SF≠ OF). */
inline int cmovle (code_ptr p,
            const WordReg (&   modrm_reg),
            const WordPtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (Op16,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x4e),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/*  0F 4E  /r RMBoth   op32  | Move if less or equal (ZF=1 or SF≠ OF). */
inline int cmovle (code_ptr p,
            const DwordReg (&   modrm_reg),
            const DwordReg (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (Op32,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x4e),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/*  0F 4E  /r RMBoth   op32  | Move if less or equal (ZF=1 or SF≠ OF). */
inline int cmovle (code_ptr p,
            const DwordReg (&   modrm_reg),
            const DwordPtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (Op32,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x4e),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/*  0F 46  /r RMBoth   op16  | Move if not above (CF=1 or ZF=1). */
inline int cmovna (code_ptr p,
            const WordReg (&   modrm_reg),
            const WordReg (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (Op16,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x46),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/*  0F 46  /r RMBoth   op16  | Move if not above (CF=1 or ZF=1). */
inline int cmovna (code_ptr p,
            const WordReg (&   modrm_reg),
            const WordPtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (Op16,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x46),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/*  0F 46  /r RMBoth   op32  | Move if not above (CF=1 or ZF=1). */
inline int cmovna (code_ptr p,
            const DwordReg (&   modrm_reg),
            const DwordReg (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (Op32,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x46),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/*  0F 46  /r RMBoth   op32  | Move if not above (CF=1 or ZF=1). */
inline int cmovna (code_ptr p,
            const DwordReg (&   modrm_reg),
            const DwordPtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (Op32,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x46),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/*  0F 42  /r RMBoth   op16  | Move if not above or equal (CF=1). */
inline int cmovnae (code_ptr p,
             const WordReg (&   modrm_reg),
             const WordReg (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (Op16,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x42),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/*  0F 42  /r RMBoth   op16  | Move if not above or equal (CF=1). */
inline int cmovnae (code_ptr p,
             const WordReg (&   modrm_reg),
             const WordPtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (Op16,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x42),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/*  0F 42  /r RMBoth   op32  | Move if not above or equal (CF=1). */
inline int cmovnae (code_ptr p,
             const DwordReg (&   modrm_reg),
             const DwordReg (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (Op32,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x42),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/*  0F 42  /r RMBoth   op32  | Move if not above or equal (CF=1). */
inline int cmovnae (code_ptr p,
             const DwordReg (&   modrm_reg),
             const DwordPtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (Op32,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x42),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/*  0F 43  /r RMBoth   op16  | Move if not below (CF=0). */
inline int cmovnb (code_ptr p,
            const WordReg (&   modrm_reg),
            const WordReg (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (Op16,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x43),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/*  0F 43  /r RMBoth   op16  | Move if not below (CF=0). */
inline int cmovnb (code_ptr p,
            const WordReg (&   modrm_reg),
            const WordPtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (Op16,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x43),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/*  0F 43  /r RMBoth   op32  | Move if not below (CF=0). */
inline int cmovnb (code_ptr p,
            const DwordReg (&   modrm_reg),
            const DwordReg (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (Op32,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x43),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/*  0F 43  /r RMBoth   op32  | Move if not below (CF=0). */
inline int cmovnb (code_ptr p,
            const DwordReg (&   modrm_reg),
            const DwordPtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (Op32,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x43),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/*  0F 47  /r RMBoth   op16  | Move if not below or equal (CF=0 and ZF=0). */
inline int cmovnbe (code_ptr p,
             const WordReg (&   modrm_reg),
             const WordReg (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (Op16,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x47),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/*  0F 47  /r RMBoth   op16  | Move if not below or equal (CF=0 and ZF=0). */
inline int cmovnbe (code_ptr p,
             const WordReg (&   modrm_reg),
             const WordPtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (Op16,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x47),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/*  0F 47  /r RMBoth   op32  | Move if not below or equal (CF=0 and ZF=0). */
inline int cmovnbe (code_ptr p,
             const DwordReg (&   modrm_reg),
             const DwordReg (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (Op32,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x47),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/*  0F 47  /r RMBoth   op32  | Move if not below or equal (CF=0 and ZF=0). */
inline int cmovnbe (code_ptr p,
             const DwordReg (&   modrm_reg),
             const DwordPtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (Op32,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x47),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/*  0F 43  /r RMBoth   op16  | Move if not carry (CF=0). */
inline int cmovnc (code_ptr p,
            const WordReg (&   modrm_reg),
            const WordReg (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (Op16,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x43),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/*  0F 43  /r RMBoth   op16  | Move if not carry (CF=0). */
inline int cmovnc (code_ptr p,
            const WordReg (&   modrm_reg),
            const WordPtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (Op16,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x43),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/*  0F 43  /r RMBoth   op32  | Move if not carry (CF=0). */
inline int cmovnc (code_ptr p,
            const DwordReg (&   modrm_reg),
            const DwordReg (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (Op32,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x43),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/*  0F 43  /r RMBoth   op32  | Move if not carry (CF=0). */
inline int cmovnc (code_ptr p,
            const DwordReg (&   modrm_reg),
            const DwordPtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (Op32,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x43),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/*  0F 45  /r RMBoth   op16  | Move if not equal (ZF=0). */
inline int cmovne (code_ptr p,
            const WordReg (&   modrm_reg),
            const WordReg (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (Op16,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x45),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/*  0F 45  /r RMBoth   op16  | Move if not equal (ZF=0). */
inline int cmovne (code_ptr p,
            const WordReg (&   modrm_reg),
            const WordPtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (Op16,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x45),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/*  0F 45  /r RMBoth   op32  | Move if not equal (ZF=0). */
inline int cmovne (code_ptr p,
            const DwordReg (&   modrm_reg),
            const DwordReg (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (Op32,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x45),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/*  0F 45  /r RMBoth   op32  | Move if not equal (ZF=0). */
inline int cmovne (code_ptr p,
            const DwordReg (&   modrm_reg),
            const DwordPtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (Op32,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x45),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/*  0F 4E  /r RMBoth   op16  | Move if not greater (ZF=1 or SF≠ OF). */
inline int cmovng (code_ptr p,
            const WordReg (&   modrm_reg),
            const WordReg (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (Op16,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x4e),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/*  0F 4E  /r RMBoth   op16  | Move if not greater (ZF=1 or SF≠ OF). */
inline int cmovng (code_ptr p,
            const WordReg (&   modrm_reg),
            const WordPtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (Op16,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x4e),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/*  0F 4E  /r RMBoth   op32  | Move if not greater (ZF=1 or SF≠ OF). */
inline int cmovng (code_ptr p,
            const DwordReg (&   modrm_reg),
            const DwordReg (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (Op32,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x4e),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/*  0F 4E  /r RMBoth   op32  | Move if not greater (ZF=1 or SF≠ OF). */
inline int cmovng (code_ptr p,
            const DwordReg (&   modrm_reg),
            const DwordPtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (Op32,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x4e),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/*  0F 4C  /r RMBoth   op16  | Move if not greater or equal (SF≠ OF). */
inline int cmovnge (code_ptr p,
             const WordReg (&   modrm_reg),
             const WordReg (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (Op16,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x4c),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/*  0F 4C  /r RMBoth   op16  | Move if not greater or equal (SF≠ OF). */
inline int cmovnge (code_ptr p,
             const WordReg (&   modrm_reg),
             const WordPtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (Op16,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x4c),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/*  0F 4C  /r RMBoth   op32  | Move if not greater or equal (SF≠ OF). */
inline int cmovnge (code_ptr p,
             const DwordReg (&   modrm_reg),
             const DwordReg (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (Op32,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x4c),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/*  0F 4C  /r RMBoth   op32  | Move if not greater or equal (SF≠ OF). */
inline int cmovnge (code_ptr p,
             const DwordReg (&   modrm_reg),
             const DwordPtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (Op32,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x4c),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/*  0F 4D  /r RMBoth   op16  | Move if not less (SF=OF). */
inline int cmovnl (code_ptr p,
            const WordReg (&   modrm_reg),
            const WordReg (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (Op16,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x4d),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/*  0F 4D  /r RMBoth   op16  | Move if not less (SF=OF). */
inline int cmovnl (code_ptr p,
            const WordReg (&   modrm_reg),
            const WordPtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (Op16,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x4d),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/*  0F 4D  /r RMBoth   op32  | Move if not less (SF=OF). */
inline int cmovnl (code_ptr p,
            const DwordReg (&   modrm_reg),
            const DwordReg (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (Op32,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x4d),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/*  0F 4D  /r RMBoth   op32  | Move if not less (SF=OF). */
inline int cmovnl (code_ptr p,
            const DwordReg (&   modrm_reg),
            const DwordPtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (Op32,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x4d),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/*  0F 4F  /r RMBoth   op16  | Move if not less or equal (ZF=0 and SF=OF). */
inline int cmovnle (code_ptr p,
             const WordReg (&   modrm_reg),
             const WordReg (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (Op16,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x4f),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/*  0F 4F  /r RMBoth   op16  | Move if not less or equal (ZF=0 and SF=OF). */
inline int cmovnle (code_ptr p,
             const WordReg (&   modrm_reg),
             const WordPtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (Op16,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x4f),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/*  0F 4F  /r RMBoth   op32  | Move if not less or equal (ZF=0 and SF=OF). */
inline int cmovnle (code_ptr p,
             const DwordReg (&   modrm_reg),
             const DwordReg (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (Op32,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x4f),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/*  0F 4F  /r RMBoth   op32  | Move if not less or equal (ZF=0 and SF=OF). */
inline int cmovnle (code_ptr p,
             const DwordReg (&   modrm_reg),
             const DwordPtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (Op32,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x4f),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/*  0F 41  /r RMBoth   op16  | Move if not overflow (OF=0). */
inline int cmovno (code_ptr p,
            const WordReg (&   modrm_reg),
            const WordReg (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (Op16,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x41),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/*  0F 41  /r RMBoth   op16  | Move if not overflow (OF=0). */
inline int cmovno (code_ptr p,
            const WordReg (&   modrm_reg),
            const WordPtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (Op16,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x41),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/*  0F 41  /r RMBoth   op32  | Move if not overflow (OF=0). */
inline int cmovno (code_ptr p,
            const DwordReg (&   modrm_reg),
            const DwordReg (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (Op32,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x41),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/*  0F 41  /r RMBoth   op32  | Move if not overflow (OF=0). */
inline int cmovno (code_ptr p,
            const DwordReg (&   modrm_reg),
            const DwordPtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (Op32,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x41),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/*  0F 4B  /r RMBoth   op16  | Move if not parity (PF=0). */
inline int cmovnp (code_ptr p,
            const WordReg (&   modrm_reg),
            const WordReg (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (Op16,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x4b),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/*  0F 4B  /r RMBoth   op16  | Move if not parity (PF=0). */
inline int cmovnp (code_ptr p,
            const WordReg (&   modrm_reg),
            const WordPtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (Op16,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x4b),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/*  0F 4B  /r RMBoth   op32  | Move if not parity (PF=0). */
inline int cmovnp (code_ptr p,
            const DwordReg (&   modrm_reg),
            const DwordReg (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (Op32,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x4b),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/*  0F 4B  /r RMBoth   op32  | Move if not parity (PF=0). */
inline int cmovnp (code_ptr p,
            const DwordReg (&   modrm_reg),
            const DwordPtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (Op32,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x4b),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/*  0F 49  /r RMBoth   op16  | Move if not sign (SF=0). */
inline int cmovns (code_ptr p,
            const WordReg (&   modrm_reg),
            const WordReg (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (Op16,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x49),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/*  0F 49  /r RMBoth   op16  | Move if not sign (SF=0). */
inline int cmovns (code_ptr p,
            const WordReg (&   modrm_reg),
            const WordPtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (Op16,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x49),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/*  0F 49  /r RMBoth   op32  | Move if not sign (SF=0). */
inline int cmovns (code_ptr p,
            const DwordReg (&   modrm_reg),
            const DwordReg (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (Op32,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x49),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/*  0F 49  /r RMBoth   op32  | Move if not sign (SF=0). */
inline int cmovns (code_ptr p,
            const DwordReg (&   modrm_reg),
            const DwordPtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (Op32,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x49),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/*  0F 45  /r RMBoth   op16  | Move if not zero (ZF=0). */
inline int cmovnz (code_ptr p,
            const WordReg (&   modrm_reg),
            const WordReg (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (Op16,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x45),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/*  0F 45  /r RMBoth   op16  | Move if not zero (ZF=0). */
inline int cmovnz (code_ptr p,
            const WordReg (&   modrm_reg),
            const WordPtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (Op16,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x45),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/*  0F 45  /r RMBoth   op32  | Move if not zero (ZF=0). */
inline int cmovnz (code_ptr p,
            const DwordReg (&   modrm_reg),
            const DwordReg (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (Op32,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x45),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/*  0F 45  /r RMBoth   op32  | Move if not zero (ZF=0). */
inline int cmovnz (code_ptr p,
            const DwordReg (&   modrm_reg),
            const DwordPtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (Op32,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x45),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/*  0F 40  /r RMBoth   op16  | Move if overflow (OF=0). */
inline int cmovo (code_ptr p,
           const WordReg (&   modrm_reg),
           const WordReg (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (Op16,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x40),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/*  0F 40  /r RMBoth   op16  | Move if overflow (OF=0). */
inline int cmovo (code_ptr p,
           const WordReg (&   modrm_reg),
           const WordPtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (Op16,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x40),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/*  0F 40  /r RMBoth   op32  | Move if overflow (OF=0). */
inline int cmovo (code_ptr p,
           const DwordReg (&   modrm_reg),
           const DwordReg (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (Op32,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x40),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/*  0F 40  /r RMBoth   op32  | Move if overflow (OF=0). */
inline int cmovo (code_ptr p,
           const DwordReg (&   modrm_reg),
           const DwordPtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (Op32,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x40),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/*  0F 4A  /r RMBoth   op16  | Move if parity (PF=1). */
inline int cmovp (code_ptr p,
           const WordReg (&   modrm_reg),
           const WordReg (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (Op16,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x4a),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/*  0F 4A  /r RMBoth   op16  | Move if parity (PF=1). */
inline int cmovp (code_ptr p,
           const WordReg (&   modrm_reg),
           const WordPtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (Op16,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x4a),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/*  0F 4A  /r RMBoth   op32  | Move if parity (PF=1). */
inline int cmovp (code_ptr p,
           const DwordReg (&   modrm_reg),
           const DwordReg (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (Op32,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x4a),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/*  0F 4A  /r RMBoth   op32  | Move if parity (PF=1). */
inline int cmovp (code_ptr p,
           const DwordReg (&   modrm_reg),
           const DwordPtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (Op32,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x4a),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/*  0F 4A  /r RMBoth   op16  | Move if parity even (PF=1). */
inline int cmovpe (code_ptr p,
            const WordReg (&   modrm_reg),
            const WordReg (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (Op16,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x4a),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/*  0F 4A  /r RMBoth   op16  | Move if parity even (PF=1). */
inline int cmovpe (code_ptr p,
            const WordReg (&   modrm_reg),
            const WordPtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (Op16,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x4a),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/*  0F 4A  /r RMBoth   op32  | Move if parity even (PF=1). */
inline int cmovpe (code_ptr p,
            const DwordReg (&   modrm_reg),
            const DwordReg (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (Op32,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x4a),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/*  0F 4A  /r RMBoth   op32  | Move if parity even (PF=1). */
inline int cmovpe (code_ptr p,
            const DwordReg (&   modrm_reg),
            const DwordPtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (Op32,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x4a),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/*  0F 4B  /r RMBoth   op16  | Move if parity odd (PF=0). */
inline int cmovpo (code_ptr p,
            const WordReg (&   modrm_reg),
            const WordReg (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (Op16,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x4b),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/*  0F 4B  /r RMBoth   op16  | Move if parity odd (PF=0). */
inline int cmovpo (code_ptr p,
            const WordReg (&   modrm_reg),
            const WordPtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (Op16,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x4b),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/*  0F 4B  /r RMBoth   op32  | Move if parity odd (PF=0). */
inline int cmovpo (code_ptr p,
            const DwordReg (&   modrm_reg),
            const DwordReg (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (Op32,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x4b),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/*  0F 4B  /r RMBoth   op32  | Move if parity odd (PF=0). */
inline int cmovpo (code_ptr p,
            const DwordReg (&   modrm_reg),
            const DwordPtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (Op32,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x4b),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/*  0F 48  /r RMBoth   op16  | Move if sign (SF=1). */
inline int cmovs (code_ptr p,
           const WordReg (&   modrm_reg),
           const WordReg (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (Op16,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x48),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/*  0F 48  /r RMBoth   op16  | Move if sign (SF=1). */
inline int cmovs (code_ptr p,
           const WordReg (&   modrm_reg),
           const WordPtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (Op16,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x48),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/*  0F 48  /r RMBoth   op32  | Move if sign (SF=1). */
inline int cmovs (code_ptr p,
           const DwordReg (&   modrm_reg),
           const DwordReg (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (Op32,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x48),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/*  0F 48  /r RMBoth   op32  | Move if sign (SF=1). */
inline int cmovs (code_ptr p,
           const DwordReg (&   modrm_reg),
           const DwordPtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (Op32,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x48),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/*  0F 44  /r RMBoth   op16  | Move if zero (ZF=1). */
inline int cmovz (code_ptr p,
           const WordReg (&   modrm_reg),
           const WordReg (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (Op16,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x44),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/*  0F 44  /r RMBoth   op16  | Move if zero (ZF=1). */
inline int cmovz (code_ptr p,
           const WordReg (&   modrm_reg),
           const WordPtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (Op16,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x44),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/*  0F 44  /r RMBoth   op32  | Move if zero (ZF=1). */
inline int cmovz (code_ptr p,
           const DwordReg (&   modrm_reg),
           const DwordReg (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (Op32,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x44),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/*  0F 44  /r RMBoth   op32  | Move if zero (ZF=1). */
inline int cmovz (code_ptr p,
           const DwordReg (&   modrm_reg),
           const DwordPtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (Op32,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x44),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/*  3D     id op32  | Compare imm32 with EAX. */
inline int cmp (code_ptr p,
         const RegEAX (&   unused),
         imm32_t imm)
{
    return encode_instruction (p,
                               Prefix (Op32,AddrNothing),
                               Code (0x3d),
                               make_imm (imm));
}
/*  83  /7 RMBoth  ib op32  | Compare imm8 with r/m32. */
inline int cmp (code_ptr p,
         const DwordReg_m_EAX (&   modrm_rm),
         imm8_t imm)
{
    return encode_instruction (p,
                               Prefix (Op32,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm)),
                               Code (0x83),
                               make_modrm (modrm_rm,7),
                               make_imm (imm));
}
/*  81  /7 RMBoth  id op32  | Compare imm32 with r/m32. */
inline int cmp (code_ptr p,
         const DwordReg_m_EAX (&   modrm_rm),
         imm32_t imm)
{
    return encode_instruction (p,
                               Prefix (Op32,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm)),
                               Code (0x81),
                               make_modrm (modrm_rm,7),
                               make_imm (imm));
}
/*  81  /7 RMBoth  id op32  | Compare imm32 with r/m32. */
inline int cmp (code_ptr p,
         const DwordPtr (&   modrm_rm),
         imm32_t imm)
{
    return encode_instruction (p,
                               Prefix (Op32,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm)),
                               Code (0x81),
                               make_modrm (modrm_rm,7),
                               make_imm (imm));
}
/*  83  /7 RMBoth  ib op32  | Compare imm8 with r/m32. */
inline int cmp (code_ptr p,
         const RegEAX (&   modrm_rm),
         imm8_t imm)
{
    return encode_instruction (p,
                               Prefix (Op32,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm)),
                               Code (0x83),
                               make_modrm (modrm_rm,7),
                               make_imm (imm));
}
/*  83  /7 RMBoth  ib op32  | Compare imm8 with r/m32. */
inline int cmp (code_ptr p,
         const DwordPtr (&   modrm_rm),
         imm8_t imm)
{
    return encode_instruction (p,
                               Prefix (Op32,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm)),
                               Code (0x83),
                               make_modrm (modrm_rm,7),
                               make_imm (imm));
}
/*  3D     iw op16  | Compare imm16 with AX. */
inline int cmp (code_ptr p,
         const RegAX (&   unused),
         imm16_t imm)
{
    return encode_instruction (p,
                               Prefix (Op16,AddrNothing),
                               Code (0x3d),
                               make_imm (imm));
}
/*  83  /7 RMBoth  ib op16  | Compare imm8 with r/m16. */
inline int cmp (code_ptr p,
         const WordReg_m_AX (&   modrm_rm),
         imm8_t imm)
{
    return encode_instruction (p,
                               Prefix (Op16,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm)),
                               Code (0x83),
                               make_modrm (modrm_rm,7),
                               make_imm (imm));
}
/*  81  /7 RMBoth  iw op16  | Compare imm16 with r/m16. */
inline int cmp (code_ptr p,
         const WordReg_m_AX (&   modrm_rm),
         imm16_t imm)
{
    return encode_instruction (p,
                               Prefix (Op16,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm)),
                               Code (0x81),
                               make_modrm (modrm_rm,7),
                               make_imm (imm));
}
/*  81  /7 RMBoth  iw op16  | Compare imm16 with r/m16. */
inline int cmp (code_ptr p,
         const WordPtr (&   modrm_rm),
         imm16_t imm)
{
    return encode_instruction (p,
                               Prefix (Op16,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm)),
                               Code (0x81),
                               make_modrm (modrm_rm,7),
                               make_imm (imm));
}
/*  83  /7 RMBoth  ib op16  | Compare imm8 with r/m16. */
inline int cmp (code_ptr p,
         const RegAX (&   modrm_rm),
         imm8_t imm)
{
    return encode_instruction (p,
                               Prefix (Op16,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm)),
                               Code (0x83),
                               make_modrm (modrm_rm,7),
                               make_imm (imm));
}
/*  83  /7 RMBoth  ib op16  | Compare imm8 with r/m16. */
inline int cmp (code_ptr p,
         const WordPtr (&   modrm_rm),
         imm8_t imm)
{
    return encode_instruction (p,
                               Prefix (Op16,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm)),
                               Code (0x83),
                               make_modrm (modrm_rm,7),
                               make_imm (imm));
}
/*  3B  /r RMBoth   op32  | Compare r/m32 with r32. */
inline int cmp (code_ptr p,
         const DwordReg (&   modrm_reg),
         const DwordReg (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (Op32,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0x3b),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/*  3B  /r RMBoth   op32  | Compare r/m32 with r32. */
inline int cmp (code_ptr p,
         const DwordReg (&   modrm_reg),
         const DwordPtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (Op32,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0x3b),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/*  39  /r RMBoth   op32  | Compare r32 with r/m32. */
inline int cmp (code_ptr p,
         const DwordPtr (&   modrm_rm),
         const DwordReg (&   modrm_reg))
{
    return encode_instruction (p,
                               Prefix (Op32,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0x39),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/*  3B  /r RMBoth   op16  | Compare r/m16 with r16. */
inline int cmp (code_ptr p,
         const WordReg (&   modrm_reg),
         const WordReg (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (Op16,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0x3b),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/*  3B  /r RMBoth   op16  | Compare r/m16 with r16. */
inline int cmp (code_ptr p,
         const WordReg (&   modrm_reg),
         const WordPtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (Op16,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0x3b),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/*  39  /r RMBoth   op16  | Compare r16 with r/m16. */
inline int cmp (code_ptr p,
         const WordPtr (&   modrm_rm),
         const WordReg (&   modrm_reg))
{
    return encode_instruction (p,
                               Prefix (Op16,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0x39),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/*  3A  /r RMBoth     | Compare r/m8 with r8. */
inline int cmp (code_ptr p,
         const ByteReg (&   modrm_reg),
         const ByteReg (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0x3a),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/*  3A  /r RMBoth     | Compare r/m8 with r8. */
inline int cmp (code_ptr p,
         const ByteReg (&   modrm_reg),
         const BytePtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0x3a),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/*  38  /r RMBoth     | Compare r8 with r/m8. */
inline int cmp (code_ptr p,
         const BytePtr (&   modrm_rm),
         const ByteReg (&   modrm_reg))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0x38),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/*  3C     ib   | Compare imm8 with AL. */
inline int cmp (code_ptr p,
         const RegAL (&   unused),
         imm8_t imm)
{
    return encode_instruction (p,
                               Prefix (OpNothing,AddrNothing),
                               Code (0x3c),
                               make_imm (imm));
}
/*  80  /7 RMBoth  ib   | Compare imm8 with r/m8. */
inline int cmp (code_ptr p,
         const ByteReg (&   modrm_rm),
         imm8_t imm)
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm)),
                               Code (0x80),
                               make_modrm (modrm_rm,7),
                               make_imm (imm));
}
/*  80  /7 RMBoth  ib   | Compare imm8 with r/m8. */
inline int cmp (code_ptr p,
         const BytePtr (&   modrm_rm),
         imm8_t imm)
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm)),
                               Code (0x80),
                               make_modrm (modrm_rm,7),
                               make_imm (imm));
}
/* 66 0F C2  /r RMBoth  0   | alias for CMPPD */
inline int cmpeqpd (code_ptr p,
             const XmmReg (&   modrm_reg),
             const XmmReg (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm,
                                       Prefix_OPERAND_SIZE),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0xc2),
                               make_modrm (modrm_rm,modrm_reg),
                               make_imm ((imm8_t) 0));
}
/* 66 0F C2  /r RMBoth  0   | alias for CMPPD */
inline int cmpeqpd (code_ptr p,
             const XmmReg (&   modrm_reg),
             const XmmWordPtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm,
                                       Prefix_OPERAND_SIZE),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0xc2),
                               make_modrm (modrm_rm,modrm_reg),
                               make_imm ((imm8_t) 0));
}
/*  0F C2  /r RMBoth  0   | alias for CMPPS */
inline int cmpeqps (code_ptr p,
             const XmmReg (&   modrm_reg),
             const XmmReg (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0xc2),
                               make_modrm (modrm_rm,modrm_reg),
                               make_imm ((imm8_t) 0));
}
/*  0F C2  /r RMBoth  0   | alias for CMPPS */
inline int cmpeqps (code_ptr p,
             const XmmReg (&   modrm_reg),
             const XmmWordPtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0xc2),
                               make_modrm (modrm_rm,modrm_reg),
                               make_imm ((imm8_t) 0));
}
/* F2 0F C2  /r RMBoth  0   | alias for CMPSD */
inline int cmpeqsd (code_ptr p,
             const XmmReg (&   modrm_reg),
             const XmmReg (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm,
                                       Prefix_REPNE),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0xc2),
                               make_modrm (modrm_rm,modrm_reg),
                               make_imm ((imm8_t) 0));
}
/* F2 0F C2  /r RMBoth  0   | alias for CMPSD */
inline int cmpeqsd (code_ptr p,
             const XmmReg (&   modrm_reg),
             const QwordPtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm,
                                       Prefix_REPNE),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0xc2),
                               make_modrm (modrm_rm,modrm_reg),
                               make_imm ((imm8_t) 0));
}
/* F3 0F C2  /r RMBoth  0   | alias for CMPSS */
inline int cmpeqss (code_ptr p,
             const XmmReg (&   modrm_reg),
             const XmmReg (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm,
                                       Prefix_REP),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0xc2),
                               make_modrm (modrm_rm,modrm_reg),
                               make_imm ((imm8_t) 0));
}
/* F3 0F C2  /r RMBoth  0   | alias for CMPSS */
inline int cmpeqss (code_ptr p,
             const XmmReg (&   modrm_reg),
             const DwordPtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm,
                                       Prefix_REP),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0xc2),
                               make_modrm (modrm_rm,modrm_reg),
                               make_imm ((imm8_t) 0));
}
/* 66 0F C2  /r RMBoth  2   | alias for CMPPD */
inline int cmplepd (code_ptr p,
             const XmmReg (&   modrm_reg),
             const XmmReg (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm,
                                       Prefix_OPERAND_SIZE),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0xc2),
                               make_modrm (modrm_rm,modrm_reg),
                               make_imm ((imm8_t) 2));
}
/* 66 0F C2  /r RMBoth  2   | alias for CMPPD */
inline int cmplepd (code_ptr p,
             const XmmReg (&   modrm_reg),
             const XmmWordPtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm,
                                       Prefix_OPERAND_SIZE),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0xc2),
                               make_modrm (modrm_rm,modrm_reg),
                               make_imm ((imm8_t) 2));
}
/*  0F C2  /r RMBoth  2   | alias for CMPPS */
inline int cmpleps (code_ptr p,
             const XmmReg (&   modrm_reg),
             const XmmReg (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0xc2),
                               make_modrm (modrm_rm,modrm_reg),
                               make_imm ((imm8_t) 2));
}
/*  0F C2  /r RMBoth  2   | alias for CMPPS */
inline int cmpleps (code_ptr p,
             const XmmReg (&   modrm_reg),
             const XmmWordPtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0xc2),
                               make_modrm (modrm_rm,modrm_reg),
                               make_imm ((imm8_t) 2));
}
/* F2 0F C2  /r RMBoth  2   | alias for CMPSD */
inline int cmplesd (code_ptr p,
             const XmmReg (&   modrm_reg),
             const XmmReg (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm,
                                       Prefix_REPNE),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0xc2),
                               make_modrm (modrm_rm,modrm_reg),
                               make_imm ((imm8_t) 2));
}
/* F2 0F C2  /r RMBoth  2   | alias for CMPSD */
inline int cmplesd (code_ptr p,
             const XmmReg (&   modrm_reg),
             const QwordPtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm,
                                       Prefix_REPNE),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0xc2),
                               make_modrm (modrm_rm,modrm_reg),
                               make_imm ((imm8_t) 2));
}
/* F3 0F C2  /r RMBoth  2   | alias for CMPSS */
inline int cmpless (code_ptr p,
             const XmmReg (&   modrm_reg),
             const XmmReg (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm,
                                       Prefix_REP),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0xc2),
                               make_modrm (modrm_rm,modrm_reg),
                               make_imm ((imm8_t) 2));
}
/* F3 0F C2  /r RMBoth  2   | alias for CMPSS */
inline int cmpless (code_ptr p,
             const XmmReg (&   modrm_reg),
             const DwordPtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm,
                                       Prefix_REP),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0xc2),
                               make_modrm (modrm_rm,modrm_reg),
                               make_imm ((imm8_t) 2));
}
/* 66 0F C2  /r RMBoth  1   | alias for CMPPD */
inline int cmpltpd (code_ptr p,
             const XmmReg (&   modrm_reg),
             const XmmReg (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm,
                                       Prefix_OPERAND_SIZE),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0xc2),
                               make_modrm (modrm_rm,modrm_reg),
                               make_imm ((imm8_t) 1));
}
/* 66 0F C2  /r RMBoth  1   | alias for CMPPD */
inline int cmpltpd (code_ptr p,
             const XmmReg (&   modrm_reg),
             const XmmWordPtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm,
                                       Prefix_OPERAND_SIZE),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0xc2),
                               make_modrm (modrm_rm,modrm_reg),
                               make_imm ((imm8_t) 1));
}
/*  0F C2  /r RMBoth  1   | alias for CMPPS */
inline int cmpltps (code_ptr p,
             const XmmReg (&   modrm_reg),
             const XmmReg (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0xc2),
                               make_modrm (modrm_rm,modrm_reg),
                               make_imm ((imm8_t) 1));
}
/*  0F C2  /r RMBoth  1   | alias for CMPPS */
inline int cmpltps (code_ptr p,
             const XmmReg (&   modrm_reg),
             const XmmWordPtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0xc2),
                               make_modrm (modrm_rm,modrm_reg),
                               make_imm ((imm8_t) 1));
}
/* F2 0F C2  /r RMBoth  1   | alias for CMPSD */
inline int cmpltsd (code_ptr p,
             const XmmReg (&   modrm_reg),
             const XmmReg (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm,
                                       Prefix_REPNE),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0xc2),
                               make_modrm (modrm_rm,modrm_reg),
                               make_imm ((imm8_t) 1));
}
/* F2 0F C2  /r RMBoth  1   | alias for CMPSD */
inline int cmpltsd (code_ptr p,
             const XmmReg (&   modrm_reg),
             const QwordPtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm,
                                       Prefix_REPNE),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0xc2),
                               make_modrm (modrm_rm,modrm_reg),
                               make_imm ((imm8_t) 1));
}
/* F3 0F C2  /r RMBoth  1   | alias for CMPSS */
inline int cmpltss (code_ptr p,
             const XmmReg (&   modrm_reg),
             const XmmReg (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm,
                                       Prefix_REP),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0xc2),
                               make_modrm (modrm_rm,modrm_reg),
                               make_imm ((imm8_t) 1));
}
/* F3 0F C2  /r RMBoth  1   | alias for CMPSS */
inline int cmpltss (code_ptr p,
             const XmmReg (&   modrm_reg),
             const DwordPtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm,
                                       Prefix_REP),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0xc2),
                               make_modrm (modrm_rm,modrm_reg),
                               make_imm ((imm8_t) 1));
}
/* 66 0F C2  /r RMBoth  4   | alias for CMPPD */
inline int cmpneqpd (code_ptr p,
              const XmmReg (&   modrm_reg),
              const XmmReg (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm,
                                       Prefix_OPERAND_SIZE),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0xc2),
                               make_modrm (modrm_rm,modrm_reg),
                               make_imm ((imm8_t) 4));
}
/* 66 0F C2  /r RMBoth  4   | alias for CMPPD */
inline int cmpneqpd (code_ptr p,
              const XmmReg (&   modrm_reg),
              const XmmWordPtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm,
                                       Prefix_OPERAND_SIZE),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0xc2),
                               make_modrm (modrm_rm,modrm_reg),
                               make_imm ((imm8_t) 4));
}
/*  0F C2  /r RMBoth  4   | alias for CMPPS */
inline int cmpneqps (code_ptr p,
              const XmmReg (&   modrm_reg),
              const XmmReg (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0xc2),
                               make_modrm (modrm_rm,modrm_reg),
                               make_imm ((imm8_t) 4));
}
/*  0F C2  /r RMBoth  4   | alias for CMPPS */
inline int cmpneqps (code_ptr p,
              const XmmReg (&   modrm_reg),
              const XmmWordPtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0xc2),
                               make_modrm (modrm_rm,modrm_reg),
                               make_imm ((imm8_t) 4));
}
/* F2 0F C2  /r RMBoth  4   | alias for CMPSD */
inline int cmpneqsd (code_ptr p,
              const XmmReg (&   modrm_reg),
              const XmmReg (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm,
                                       Prefix_REPNE),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0xc2),
                               make_modrm (modrm_rm,modrm_reg),
                               make_imm ((imm8_t) 4));
}
/* F2 0F C2  /r RMBoth  4   | alias for CMPSD */
inline int cmpneqsd (code_ptr p,
              const XmmReg (&   modrm_reg),
              const QwordPtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm,
                                       Prefix_REPNE),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0xc2),
                               make_modrm (modrm_rm,modrm_reg),
                               make_imm ((imm8_t) 4));
}
/* F3 0F C2  /r RMBoth  4   | alias for CMPSS */
inline int cmpneqss (code_ptr p,
              const XmmReg (&   modrm_reg),
              const XmmReg (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm,
                                       Prefix_REP),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0xc2),
                               make_modrm (modrm_rm,modrm_reg),
                               make_imm ((imm8_t) 4));
}
/* F3 0F C2  /r RMBoth  4   | alias for CMPSS */
inline int cmpneqss (code_ptr p,
              const XmmReg (&   modrm_reg),
              const DwordPtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm,
                                       Prefix_REP),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0xc2),
                               make_modrm (modrm_rm,modrm_reg),
                               make_imm ((imm8_t) 4));
}
/* 66 0F C2  /r RMBoth  6   | alias for CMPPD */
inline int cmpnlepd (code_ptr p,
              const XmmReg (&   modrm_reg),
              const XmmReg (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm,
                                       Prefix_OPERAND_SIZE),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0xc2),
                               make_modrm (modrm_rm,modrm_reg),
                               make_imm ((imm8_t) 6));
}
/* 66 0F C2  /r RMBoth  6   | alias for CMPPD */
inline int cmpnlepd (code_ptr p,
              const XmmReg (&   modrm_reg),
              const XmmWordPtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm,
                                       Prefix_OPERAND_SIZE),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0xc2),
                               make_modrm (modrm_rm,modrm_reg),
                               make_imm ((imm8_t) 6));
}
/*  0F C2  /r RMBoth  6   | alias for CMPPS */
inline int cmpnleps (code_ptr p,
              const XmmReg (&   modrm_reg),
              const XmmReg (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0xc2),
                               make_modrm (modrm_rm,modrm_reg),
                               make_imm ((imm8_t) 6));
}
/*  0F C2  /r RMBoth  6   | alias for CMPPS */
inline int cmpnleps (code_ptr p,
              const XmmReg (&   modrm_reg),
              const XmmWordPtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0xc2),
                               make_modrm (modrm_rm,modrm_reg),
                               make_imm ((imm8_t) 6));
}
/* F2 0F C2  /r RMBoth  6   | alias for CMPSD */
inline int cmpnlesd (code_ptr p,
              const XmmReg (&   modrm_reg),
              const XmmReg (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm,
                                       Prefix_REPNE),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0xc2),
                               make_modrm (modrm_rm,modrm_reg),
                               make_imm ((imm8_t) 6));
}
/* F2 0F C2  /r RMBoth  6   | alias for CMPSD */
inline int cmpnlesd (code_ptr p,
              const XmmReg (&   modrm_reg),
              const QwordPtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm,
                                       Prefix_REPNE),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0xc2),
                               make_modrm (modrm_rm,modrm_reg),
                               make_imm ((imm8_t) 6));
}
/* F3 0F C2  /r RMBoth  6   | alias for CMPSS */
inline int cmpnless (code_ptr p,
              const XmmReg (&   modrm_reg),
              const XmmReg (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm,
                                       Prefix_REP),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0xc2),
                               make_modrm (modrm_rm,modrm_reg),
                               make_imm ((imm8_t) 6));
}
/* F3 0F C2  /r RMBoth  6   | alias for CMPSS */
inline int cmpnless (code_ptr p,
              const XmmReg (&   modrm_reg),
              const DwordPtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm,
                                       Prefix_REP),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0xc2),
                               make_modrm (modrm_rm,modrm_reg),
                               make_imm ((imm8_t) 6));
}
/* 66 0F C2  /r RMBoth  5   | alias for CMPPD */
inline int cmpnltpd (code_ptr p,
              const XmmReg (&   modrm_reg),
              const XmmReg (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm,
                                       Prefix_OPERAND_SIZE),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0xc2),
                               make_modrm (modrm_rm,modrm_reg),
                               make_imm ((imm8_t) 5));
}
/* 66 0F C2  /r RMBoth  5   | alias for CMPPD */
inline int cmpnltpd (code_ptr p,
              const XmmReg (&   modrm_reg),
              const XmmWordPtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm,
                                       Prefix_OPERAND_SIZE),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0xc2),
                               make_modrm (modrm_rm,modrm_reg),
                               make_imm ((imm8_t) 5));
}
/*  0F C2  /r RMBoth  5   | alias for CMPPS */
inline int cmpnltps (code_ptr p,
              const XmmReg (&   modrm_reg),
              const XmmReg (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0xc2),
                               make_modrm (modrm_rm,modrm_reg),
                               make_imm ((imm8_t) 5));
}
/*  0F C2  /r RMBoth  5   | alias for CMPPS */
inline int cmpnltps (code_ptr p,
              const XmmReg (&   modrm_reg),
              const XmmWordPtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0xc2),
                               make_modrm (modrm_rm,modrm_reg),
                               make_imm ((imm8_t) 5));
}
/* F2 0F C2  /r RMBoth  5   | alias for CMPSD */
inline int cmpnltsd (code_ptr p,
              const XmmReg (&   modrm_reg),
              const XmmReg (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm,
                                       Prefix_REPNE),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0xc2),
                               make_modrm (modrm_rm,modrm_reg),
                               make_imm ((imm8_t) 5));
}
/* F2 0F C2  /r RMBoth  5   | alias for CMPSD */
inline int cmpnltsd (code_ptr p,
              const XmmReg (&   modrm_reg),
              const QwordPtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm,
                                       Prefix_REPNE),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0xc2),
                               make_modrm (modrm_rm,modrm_reg),
                               make_imm ((imm8_t) 5));
}
/* F3 0F C2  /r RMBoth  5   | alias for CMPSS */
inline int cmpnltss (code_ptr p,
              const XmmReg (&   modrm_reg),
              const XmmReg (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm,
                                       Prefix_REP),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0xc2),
                               make_modrm (modrm_rm,modrm_reg),
                               make_imm ((imm8_t) 5));
}
/* F3 0F C2  /r RMBoth  5   | alias for CMPSS */
inline int cmpnltss (code_ptr p,
              const XmmReg (&   modrm_reg),
              const DwordPtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm,
                                       Prefix_REP),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0xc2),
                               make_modrm (modrm_rm,modrm_reg),
                               make_imm ((imm8_t) 5));
}
/* 66 0F C2  /r RMBoth  7   | alias for CMPPD */
inline int cmpordpd (code_ptr p,
              const XmmReg (&   modrm_reg),
              const XmmReg (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm,
                                       Prefix_OPERAND_SIZE),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0xc2),
                               make_modrm (modrm_rm,modrm_reg),
                               make_imm ((imm8_t) 7));
}
/* 66 0F C2  /r RMBoth  7   | alias for CMPPD */
inline int cmpordpd (code_ptr p,
              const XmmReg (&   modrm_reg),
              const XmmWordPtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm,
                                       Prefix_OPERAND_SIZE),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0xc2),
                               make_modrm (modrm_rm,modrm_reg),
                               make_imm ((imm8_t) 7));
}
/*  0F C2  /r RMBoth  7   | alias for CMPPS */
inline int cmpordps (code_ptr p,
              const XmmReg (&   modrm_reg),
              const XmmReg (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0xc2),
                               make_modrm (modrm_rm,modrm_reg),
                               make_imm ((imm8_t) 7));
}
/*  0F C2  /r RMBoth  7   | alias for CMPPS */
inline int cmpordps (code_ptr p,
              const XmmReg (&   modrm_reg),
              const XmmWordPtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0xc2),
                               make_modrm (modrm_rm,modrm_reg),
                               make_imm ((imm8_t) 7));
}
/* F2 0F C2  /r RMBoth  7   | alias for CMPSD */
inline int cmpordsd (code_ptr p,
              const XmmReg (&   modrm_reg),
              const XmmReg (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm,
                                       Prefix_REPNE),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0xc2),
                               make_modrm (modrm_rm,modrm_reg),
                               make_imm ((imm8_t) 7));
}
/* F2 0F C2  /r RMBoth  7   | alias for CMPSD */
inline int cmpordsd (code_ptr p,
              const XmmReg (&   modrm_reg),
              const QwordPtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm,
                                       Prefix_REPNE),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0xc2),
                               make_modrm (modrm_rm,modrm_reg),
                               make_imm ((imm8_t) 7));
}
/* F3 0F C2  /r RMBoth  7   | alias for CMPSS */
inline int cmpordss (code_ptr p,
              const XmmReg (&   modrm_reg),
              const XmmReg (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm,
                                       Prefix_REP),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0xc2),
                               make_modrm (modrm_rm,modrm_reg),
                               make_imm ((imm8_t) 7));
}
/* F3 0F C2  /r RMBoth  7   | alias for CMPSS */
inline int cmpordss (code_ptr p,
              const XmmReg (&   modrm_reg),
              const DwordPtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm,
                                       Prefix_REP),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0xc2),
                               make_modrm (modrm_rm,modrm_reg),
                               make_imm ((imm8_t) 7));
}
/* 66 0F C2  /r RMBoth  ib   | Compare packed double- precision floating-point values in xmm2/m128 and xmm1 using imm8 as comparison predicate. */
inline int cmppd (code_ptr p,
           const XmmReg (&   modrm_reg),
           const XmmReg (&   modrm_rm),
           imm8_t imm)
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm,
                                       Prefix_OPERAND_SIZE),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0xc2),
                               make_modrm (modrm_rm,modrm_reg),
                               make_imm (imm));
}
/* 66 0F C2  /r RMBoth  ib   | Compare packed double- precision floating-point values in xmm2/m128 and xmm1 using imm8 as comparison predicate. */
inline int cmppd (code_ptr p,
           const XmmReg (&   modrm_reg),
           const XmmWordPtr (&   modrm_rm),
           imm8_t imm)
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm,
                                       Prefix_OPERAND_SIZE),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0xc2),
                               make_modrm (modrm_rm,modrm_reg),
                               make_imm (imm));
}
/*  0F C2  /r RMBoth  ib   | Compare packed single- precision floating-point values in xmm2/mem and xmm1 using imm8 as comparison predicate. */
inline int cmpps (code_ptr p,
           const XmmReg (&   modrm_reg),
           const XmmReg (&   modrm_rm),
           imm8_t imm)
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0xc2),
                               make_modrm (modrm_rm,modrm_reg),
                               make_imm (imm));
}
/*  0F C2  /r RMBoth  ib   | Compare packed single- precision floating-point values in xmm2/mem and xmm1 using imm8 as comparison predicate. */
inline int cmpps (code_ptr p,
           const XmmReg (&   modrm_reg),
           const XmmWordPtr (&   modrm_rm),
           imm8_t imm)
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0xc2),
                               make_modrm (modrm_rm,modrm_reg),
                               make_imm (imm));
}
/*  A6        | For legacy mode, compare byte at address DS:(E)SI with byte at address ES:(E)DI; For 64-bit mode compare byte at address (R|E)SI to byte at address (R|E)DI. The status flags are set accordingly. */
inline int cmps (code_ptr p,
          const BytePtr_ESI (&   ptr),
          const BytePtr_ES_EDI (&   unused))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       Addr32,
                                       ptr.get_segment ()),
                               Code (0xa6));
}
/*  A6        | For legacy mode, compare byte at address DS:(E)SI with byte at address ES:(E)DI; For 64-bit mode compare byte at address (R|E)SI to byte at address (R|E)DI. The status flags are set accordingly. */
inline int cmps (code_ptr p,
          const BytePtr_SI (&   ptr),
          const BytePtr_ES_DI (&   unused))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       Addr16,
                                       ptr.get_segment ()),
                               Code (0xa6));
}
/*  A7      op16  | For legacy mode, compare word at address DS:(E)SI with word at address ES:(E)DI; For 64-bit mode compare word at address (R|E)SI with word at address (R|E)DI. The status flags are set accordingly. */
inline int cmps (code_ptr p,
          const WordPtr_ESI (&   ptr),
          const WordPtr_ES_EDI (&   unused))
{
    return encode_instruction (p,
                               Prefix (Op16,
                                       Addr32,
                                       ptr.get_segment ()),
                               Code (0xa7));
}
/*  A7      op16  | For legacy mode, compare word at address DS:(E)SI with word at address ES:(E)DI; For 64-bit mode compare word at address (R|E)SI with word at address (R|E)DI. The status flags are set accordingly. */
inline int cmps (code_ptr p,
          const WordPtr_SI (&   ptr),
          const WordPtr_ES_DI (&   unused))
{
    return encode_instruction (p,
                               Prefix (Op16,
                                       Addr16,
                                       ptr.get_segment ()),
                               Code (0xa7));
}
/*  A7      op32  | For legacy mode, compare dword at address DS:(E)SI at dword at address ES:(E)DI; For 64-bit mode compare dword at address (R|E)SI at dword at address (R|E)DI. The status flags are set accordingly. */
inline int cmps (code_ptr p,
          const DwordPtr_ESI (&   ptr),
          const DwordPtr_ES_EDI (&   unused))
{
    return encode_instruction (p,
                               Prefix (Op32,
                                       Addr32,
                                       ptr.get_segment ()),
                               Code (0xa7));
}
/*  A7      op32  | For legacy mode, compare dword at address DS:(E)SI at dword at address ES:(E)DI; For 64-bit mode compare dword at address (R|E)SI at dword at address (R|E)DI. The status flags are set accordingly. */
inline int cmps (code_ptr p,
          const DwordPtr_SI (&   ptr),
          const DwordPtr_ES_DI (&   unused))
{
    return encode_instruction (p,
                               Prefix (Op32,
                                       Addr16,
                                       ptr.get_segment ()),
                               Code (0xa7));
}
/*  A6        | For legacy mode, compare byte at address DS:(E)SI with byte at address ES:(E)DI; For 64-bit mode compare byte at address (R|E)SI with byte at address (R|E)DI. The status flags are set accordingly. */
inline int cmpsb (code_ptr p)
{
    return encode_instruction (p,
                               Prefix (OpNothing,AddrNothing),
                               Code (0xa6));
}
/*  A7      op32  | For legacy mode, compare dword at address DS:(E)SI with dword at address ES:(E)DI; For 64-bit mode compare dword at address (R|E)SI with dword at address (R|E)DI. The status flags are set accordingly. */
inline int cmpsd (code_ptr p)
{
    return encode_instruction (p,
                               Prefix (Op32,AddrNothing),
                               Code (0xa7));
}
/* F2 0F C2  /r RMBoth  ib   | Compare low double- precision floating-point value in xmm2/m64 and xmm1 using imm8 as comparison predicate. */
inline int cmpsd (code_ptr p,
           const XmmReg (&   modrm_reg),
           const XmmReg (&   modrm_rm),
           imm8_t imm)
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm,
                                       Prefix_REPNE),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0xc2),
                               make_modrm (modrm_rm,modrm_reg),
                               make_imm (imm));
}
/* F2 0F C2  /r RMBoth  ib   | Compare low double- precision floating-point value in xmm2/m64 and xmm1 using imm8 as comparison predicate. */
inline int cmpsd (code_ptr p,
           const XmmReg (&   modrm_reg),
           const QwordPtr (&   modrm_rm),
           imm8_t imm)
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm,
                                       Prefix_REPNE),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0xc2),
                               make_modrm (modrm_rm,modrm_reg),
                               make_imm (imm));
}
/* F3 0F C2  /r RMBoth  ib   | Compare low single- precision floating-point value in xmm2/m32 and xmm1 using imm8 as comparison predicate. */
inline int cmpss (code_ptr p,
           const XmmReg (&   modrm_reg),
           const XmmReg (&   modrm_rm),
           imm8_t imm)
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm,
                                       Prefix_REP),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0xc2),
                               make_modrm (modrm_rm,modrm_reg),
                               make_imm (imm));
}
/* F3 0F C2  /r RMBoth  ib   | Compare low single- precision floating-point value in xmm2/m32 and xmm1 using imm8 as comparison predicate. */
inline int cmpss (code_ptr p,
           const XmmReg (&   modrm_reg),
           const DwordPtr (&   modrm_rm),
           imm8_t imm)
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm,
                                       Prefix_REP),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0xc2),
                               make_modrm (modrm_rm,modrm_reg),
                               make_imm (imm));
}
/*  A7      op16  | For legacy mode, compare word at address DS:(E)SI with word at address ES:(E)DI; For 64-bit mode compare word at address (R|E)SI with word at address (R|E)DI. The status flags are set accordingly. */
inline int cmpsw (code_ptr p)
{
    return encode_instruction (p,
                               Prefix (Op16,AddrNothing),
                               Code (0xa7));
}
/* 66 0F C2  /r RMBoth  3   | alias for CMPPD */
inline int cmpunordpd (code_ptr p,
                const XmmReg (&   modrm_reg),
                const XmmReg (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm,
                                       Prefix_OPERAND_SIZE),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0xc2),
                               make_modrm (modrm_rm,modrm_reg),
                               make_imm ((imm8_t) 3));
}
/* 66 0F C2  /r RMBoth  3   | alias for CMPPD */
inline int cmpunordpd (code_ptr p,
                const XmmReg (&   modrm_reg),
                const XmmWordPtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm,
                                       Prefix_OPERAND_SIZE),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0xc2),
                               make_modrm (modrm_rm,modrm_reg),
                               make_imm ((imm8_t) 3));
}
/*  0F C2  /r RMBoth  3   | alias for CMPPS */
inline int cmpunordps (code_ptr p,
                const XmmReg (&   modrm_reg),
                const XmmReg (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0xc2),
                               make_modrm (modrm_rm,modrm_reg),
                               make_imm ((imm8_t) 3));
}
/*  0F C2  /r RMBoth  3   | alias for CMPPS */
inline int cmpunordps (code_ptr p,
                const XmmReg (&   modrm_reg),
                const XmmWordPtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0xc2),
                               make_modrm (modrm_rm,modrm_reg),
                               make_imm ((imm8_t) 3));
}
/* F2 0F C2  /r RMBoth  3   | alias for CMPSD */
inline int cmpunordsd (code_ptr p,
                const XmmReg (&   modrm_reg),
                const XmmReg (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm,
                                       Prefix_REPNE),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0xc2),
                               make_modrm (modrm_rm,modrm_reg),
                               make_imm ((imm8_t) 3));
}
/* F2 0F C2  /r RMBoth  3   | alias for CMPSD */
inline int cmpunordsd (code_ptr p,
                const XmmReg (&   modrm_reg),
                const QwordPtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm,
                                       Prefix_REPNE),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0xc2),
                               make_modrm (modrm_rm,modrm_reg),
                               make_imm ((imm8_t) 3));
}
/* F3 0F C2  /r RMBoth  3   | alias for CMPSS */
inline int cmpunordss (code_ptr p,
                const XmmReg (&   modrm_reg),
                const XmmReg (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm,
                                       Prefix_REP),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0xc2),
                               make_modrm (modrm_rm,modrm_reg),
                               make_imm ((imm8_t) 3));
}
/* F3 0F C2  /r RMBoth  3   | alias for CMPSS */
inline int cmpunordss (code_ptr p,
                const XmmReg (&   modrm_reg),
                const DwordPtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm,
                                       Prefix_REP),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0xc2),
                               make_modrm (modrm_rm,modrm_reg),
                               make_imm ((imm8_t) 3));
}
/*  0F B0  /r RMBoth     | Compare AL with r/m8. If equal, ZF is set and r8 is loaded into r/m8. Else, clear ZF and load r/m8 into AL. */
inline int cmpxchg (code_ptr p,
             const ByteReg (&   modrm_rm),
             const ByteReg (&   modrm_reg))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0xb0),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/*  0F B0  /r RMBoth     | Compare AL with r/m8. If equal, ZF is set and r8 is loaded into r/m8. Else, clear ZF and load r/m8 into AL. */
inline int cmpxchg (code_ptr p,
             const BytePtr (&   modrm_rm),
             const ByteReg (&   modrm_reg))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0xb0),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/*  0F B1  /r RMBoth   op16  | Compare AX with r/m16. If equal, ZF is set and r16 is loaded into r/m16. Else, clear ZF and load r/m16 into AX. */
inline int cmpxchg (code_ptr p,
             const WordReg (&   modrm_rm),
             const WordReg (&   modrm_reg))
{
    return encode_instruction (p,
                               Prefix (Op16,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0xb1),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/*  0F B1  /r RMBoth   op16  | Compare AX with r/m16. If equal, ZF is set and r16 is loaded into r/m16. Else, clear ZF and load r/m16 into AX. */
inline int cmpxchg (code_ptr p,
             const WordPtr (&   modrm_rm),
             const WordReg (&   modrm_reg))
{
    return encode_instruction (p,
                               Prefix (Op16,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0xb1),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/*  0F B1  /r RMBoth   op32  | Compare EAX with r/m32. If equal, ZF is set and r32 is loaded into r/m32. Else, clear ZF and load r/m32 into EAX. */
inline int cmpxchg (code_ptr p,
             const DwordReg (&   modrm_rm),
             const DwordReg (&   modrm_reg))
{
    return encode_instruction (p,
                               Prefix (Op32,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0xb1),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/*  0F B1  /r RMBoth   op32  | Compare EAX with r/m32. If equal, ZF is set and r32 is loaded into r/m32. Else, clear ZF and load r/m32 into EAX. */
inline int cmpxchg (code_ptr p,
             const DwordPtr (&   modrm_rm),
             const DwordReg (&   modrm_reg))
{
    return encode_instruction (p,
                               Prefix (Op32,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0xb1),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/*  0F C7  /1 RMMemOnly     | Compare EDX:EAX with m64. If equal, set ZF and load ECX:EBX into m64. Else, clear ZF and load m64 into EDX:EAX. */
inline int cmpxchg8b (code_ptr p,
               const QwordPtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm)),
                               Code (0xf,0xc7),
                               make_modrm (modrm_rm,1));
}
/* 66 0F 2F  /r RMBoth     | Compare low double- precision floating-point values in xmm1 and xmm2/mem64 and set the EFLAGS flags accordingly. */
inline int comisd (code_ptr p,
            const XmmReg (&   modrm_reg),
            const XmmReg (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm,
                                       Prefix_OPERAND_SIZE),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x2f),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/* 66 0F 2F  /r RMBoth     | Compare low double- precision floating-point values in xmm1 and xmm2/mem64 and set the EFLAGS flags accordingly. */
inline int comisd (code_ptr p,
            const XmmReg (&   modrm_reg),
            const QwordPtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm,
                                       Prefix_OPERAND_SIZE),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x2f),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/*  0F 2F  /r RMBoth     | Compare low single- precision floating-point values in xmm1 and xmm2/mem32 and set the EFLAGS flags accordingly. */
inline int comiss (code_ptr p,
            const XmmReg (&   modrm_reg),
            const XmmReg (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x2f),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/*  0F 2F  /r RMBoth     | Compare low single- precision floating-point values in xmm1 and xmm2/mem32 and set the EFLAGS flags accordingly. */
inline int comiss (code_ptr p,
            const XmmReg (&   modrm_reg),
            const DwordPtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x2f),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/*  0F A2        | Returns processor identification and feature information to the EAX, EBX, ECX, and EDX registers, as determined by input entered in EAX (in some cases, ECX as well). */
inline int cpuid (code_ptr p)
{
    return encode_instruction (p,
                               Prefix (OpNothing,AddrNothing),
                               Code (0xf,0xa2));
}
/* F2 0F 38 F0  /r RMBoth     | Accumulate CRC32 on r/m8. */
inline int crc32 (code_ptr p,
           const DwordReg (&   modrm_reg),
           const ByteReg (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm,
                                       Prefix_REPNE),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x38,0xf0),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/* F2 0F 38 F0  /r RMBoth     | Accumulate CRC32 on r/m8. */
inline int crc32 (code_ptr p,
           const DwordReg (&   modrm_reg),
           const BytePtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm,
                                       Prefix_REPNE),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x38,0xf0),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/* F2 0F 38 F1  /r RMBoth   op16  | Accumulate CRC32 on r/m16. */
inline int crc32 (code_ptr p,
           const DwordReg (&   modrm_reg),
           const WordReg (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (Op16,
                                       AddrNothing,
                                       modrm_rm,
                                       Prefix_REPNE),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x38,0xf1),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/* F2 0F 38 F1  /r RMBoth   op16  | Accumulate CRC32 on r/m16. */
inline int crc32 (code_ptr p,
           const DwordReg (&   modrm_reg),
           const WordPtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (Op16,
                                       AddrNothing,
                                       modrm_rm,
                                       Prefix_REPNE),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x38,0xf1),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/* F2 0F 38 F1  /r RMBoth   op32  | Accumulate CRC32 on r/m32. */
inline int crc32 (code_ptr p,
           const DwordReg (&   modrm_reg),
           const DwordReg (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (Op32,
                                       AddrNothing,
                                       modrm_rm,
                                       Prefix_REPNE),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x38,0xf1),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/* F2 0F 38 F1  /r RMBoth   op32  | Accumulate CRC32 on r/m32. */
inline int crc32 (code_ptr p,
           const DwordReg (&   modrm_reg),
           const DwordPtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (Op32,
                                       AddrNothing,
                                       modrm_rm,
                                       Prefix_REPNE),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x38,0xf1),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/* F3 0F E6  /r RMBoth     | Convert two packed signed doubleword integers from xmm2/m128 to two packed double-precision floating- point values in xmm1. */
inline int cvtdq2pd (code_ptr p,
              const XmmReg (&   modrm_reg),
              const XmmReg (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm,
                                       Prefix_REP),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0xe6),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/* F3 0F E6  /r RMBoth     | Convert two packed signed doubleword integers from xmm2/m128 to two packed double-precision floating- point values in xmm1. */
inline int cvtdq2pd (code_ptr p,
              const XmmReg (&   modrm_reg),
              const QwordPtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm,
                                       Prefix_REP),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0xe6),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/*  0F 5B  /r RMBoth     | Convert four packed signed doubleword integers from xmm2/m128 to four packed single-precision floating- point values in xmm1. */
inline int cvtdq2ps (code_ptr p,
              const XmmReg (&   modrm_reg),
              const XmmReg (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x5b),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/*  0F 5B  /r RMBoth     | Convert four packed signed doubleword integers from xmm2/m128 to four packed single-precision floating- point values in xmm1. */
inline int cvtdq2ps (code_ptr p,
              const XmmReg (&   modrm_reg),
              const XmmWordPtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x5b),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/* F2 0F E6  /r RMBoth     | Convert two packed double- precision floating-point values from xmm2/m128 to two packed signed doubleword integers in xmm1. */
inline int cvtpd2dq (code_ptr p,
              const XmmReg (&   modrm_reg),
              const XmmReg (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm,
                                       Prefix_REPNE),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0xe6),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/* F2 0F E6  /r RMBoth     | Convert two packed double- precision floating-point values from xmm2/m128 to two packed signed doubleword integers in xmm1. */
inline int cvtpd2dq (code_ptr p,
              const XmmReg (&   modrm_reg),
              const XmmWordPtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm,
                                       Prefix_REPNE),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0xe6),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/* 66 0F 2D  /r RMBoth     | Convert two packed double- precision floating-point values from xmm/m128 to two packed signed doubleword integers in mm. */
inline int cvtpd2pi (code_ptr p,
              const MmReg (&   modrm_reg),
              const XmmReg (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm,
                                       Prefix_OPERAND_SIZE),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x2d),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/* 66 0F 2D  /r RMBoth     | Convert two packed double- precision floating-point values from xmm/m128 to two packed signed doubleword integers in mm. */
inline int cvtpd2pi (code_ptr p,
              const MmReg (&   modrm_reg),
              const XmmWordPtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm,
                                       Prefix_OPERAND_SIZE),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x2d),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/* 66 0F 5A  /r RMBoth     | Convert two packed double- precision floating-point values in xmm2/m128 to two packed single-precision floating-point values in xmm1. */
inline int cvtpd2ps (code_ptr p,
              const XmmReg (&   modrm_reg),
              const XmmReg (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm,
                                       Prefix_OPERAND_SIZE),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x5a),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/* 66 0F 5A  /r RMBoth     | Convert two packed double- precision floating-point values in xmm2/m128 to two packed single-precision floating-point values in xmm1. */
inline int cvtpd2ps (code_ptr p,
              const XmmReg (&   modrm_reg),
              const XmmWordPtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm,
                                       Prefix_OPERAND_SIZE),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x5a),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/* 66 0F 2A  /r RMBoth     | Convert two packed signed doubleword integers from mm/mem64 to two packed double-precision floating- point values in xmm. */
inline int cvtpi2pd (code_ptr p,
              const XmmReg (&   modrm_reg),
              const MmReg (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm,
                                       Prefix_OPERAND_SIZE),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x2a),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/* 66 0F 2A  /r RMBoth     | Convert two packed signed doubleword integers from mm/mem64 to two packed double-precision floating- point values in xmm. */
inline int cvtpi2pd (code_ptr p,
              const XmmReg (&   modrm_reg),
              const QwordPtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm,
                                       Prefix_OPERAND_SIZE),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x2a),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/*  0F 2A  /r RMBoth     | Convert two signed doubleword integers from mm/m64 to two single- precision floating-point values in xmm. */
inline int cvtpi2ps (code_ptr p,
              const XmmReg (&   modrm_reg),
              const MmReg (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x2a),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/*  0F 2A  /r RMBoth     | Convert two signed doubleword integers from mm/m64 to two single- precision floating-point values in xmm. */
inline int cvtpi2ps (code_ptr p,
              const XmmReg (&   modrm_reg),
              const QwordPtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x2a),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/* 66 0F 5B  /r RMBoth     | Convert four packed single- precision floating-point values from xmm2/m128 to four packed signed doubleword integers in xmm1. */
inline int cvtps2dq (code_ptr p,
              const XmmReg (&   modrm_reg),
              const XmmReg (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm,
                                       Prefix_OPERAND_SIZE),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x5b),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/* 66 0F 5B  /r RMBoth     | Convert four packed single- precision floating-point values from xmm2/m128 to four packed signed doubleword integers in xmm1. */
inline int cvtps2dq (code_ptr p,
              const XmmReg (&   modrm_reg),
              const XmmWordPtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm,
                                       Prefix_OPERAND_SIZE),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x5b),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/*  0F 5A  /r RMBoth     | Convert two packed single- precision floating-point values in xmm2/m64 to two packed double-precision floating-point values in xmm1. */
inline int cvtps2pd (code_ptr p,
              const XmmReg (&   modrm_reg),
              const XmmReg (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x5a),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/*  0F 5A  /r RMBoth     | Convert two packed single- precision floating-point values in xmm2/m64 to two packed double-precision floating-point values in xmm1. */
inline int cvtps2pd (code_ptr p,
              const XmmReg (&   modrm_reg),
              const QwordPtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x5a),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/*  0F 2D  /r RMBoth     | Convert two packed single- precision floating-point values from xmm/m64 to two packed signed doubleword integers in mm. */
inline int cvtps2pi (code_ptr p,
              const MmReg (&   modrm_reg),
              const XmmReg (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x2d),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/*  0F 2D  /r RMBoth     | Convert two packed single- precision floating-point values from xmm/m64 to two packed signed doubleword integers in mm. */
inline int cvtps2pi (code_ptr p,
              const MmReg (&   modrm_reg),
              const QwordPtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x2d),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/* F2 0F 2D  /r RMBoth     | Convert one double- precision floating-point value from xmm/m64 to one signed doubleword integer r32. */
inline int cvtsd2si (code_ptr p,
              const DwordReg (&   modrm_reg),
              const XmmReg (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm,
                                       Prefix_REPNE),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x2d),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/* F2 0F 2D  /r RMBoth     | Convert one double- precision floating-point value from xmm/m64 to one signed doubleword integer r32. */
inline int cvtsd2si (code_ptr p,
              const DwordReg (&   modrm_reg),
              const QwordPtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm,
                                       Prefix_REPNE),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x2d),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/* F2 0F 5A  /r RMBoth     | Convert one double- precision floating-point value in xmm2/m64 to one single-precision floating- point value in xmm1. */
inline int cvtsd2ss (code_ptr p,
              const XmmReg (&   modrm_reg),
              const XmmReg (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm,
                                       Prefix_REPNE),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x5a),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/* F2 0F 5A  /r RMBoth     | Convert one double- precision floating-point value in xmm2/m64 to one single-precision floating- point value in xmm1. */
inline int cvtsd2ss (code_ptr p,
              const XmmReg (&   modrm_reg),
              const QwordPtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm,
                                       Prefix_REPNE),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x5a),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/* F2 0F 2A  /r RMBoth     | Convert one signed doubleword integer from r/m32 to one double- precision floating-point value in xmm. */
inline int cvtsi2sd (code_ptr p,
              const XmmReg (&   modrm_reg),
              const DwordReg (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm,
                                       Prefix_REPNE),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x2a),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/* F2 0F 2A  /r RMBoth     | Convert one signed doubleword integer from r/m32 to one double- precision floating-point value in xmm. */
inline int cvtsi2sd (code_ptr p,
              const XmmReg (&   modrm_reg),
              const DwordPtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm,
                                       Prefix_REPNE),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x2a),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/* F3 0F 2A  /r RMBoth     | Convert one signed doubleword integer from r/m32 to one single- precision floating-point value in xmm. */
inline int cvtsi2ss (code_ptr p,
              const XmmReg (&   modrm_reg),
              const DwordReg (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm,
                                       Prefix_REP),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x2a),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/* F3 0F 2A  /r RMBoth     | Convert one signed doubleword integer from r/m32 to one single- precision floating-point value in xmm. */
inline int cvtsi2ss (code_ptr p,
              const XmmReg (&   modrm_reg),
              const DwordPtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm,
                                       Prefix_REP),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x2a),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/* F3 0F 5A  /r RMBoth     | Convert one single-precision floating-point value in xmm2/m32 to one double- precision floating-point value in xmm1. */
inline int cvtss2sd (code_ptr p,
              const XmmReg (&   modrm_reg),
              const XmmReg (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm,
                                       Prefix_REP),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x5a),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/* F3 0F 5A  /r RMBoth     | Convert one single-precision floating-point value in xmm2/m32 to one double- precision floating-point value in xmm1. */
inline int cvtss2sd (code_ptr p,
              const XmmReg (&   modrm_reg),
              const DwordPtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm,
                                       Prefix_REP),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x5a),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/* F3 0F 2D  /r RMBoth     | Convert one single-precision floating-point value from xmm/m32 to one signed doubleword integer in r32. */
inline int cvtss2si (code_ptr p,
              const DwordReg (&   modrm_reg),
              const XmmReg (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm,
                                       Prefix_REP),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x2d),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/* F3 0F 2D  /r RMBoth     | Convert one single-precision floating-point value from xmm/m32 to one signed doubleword integer in r32. */
inline int cvtss2si (code_ptr p,
              const DwordReg (&   modrm_reg),
              const DwordPtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm,
                                       Prefix_REP),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x2d),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/* 66 0F E6  /r RMBoth     | Convert two packed double- precision floating-point values from xmm2/m128 to two packed signed doubleword integers in xmm1 using truncation. */
inline int cvttpd2dq (code_ptr p,
               const XmmReg (&   modrm_reg),
               const XmmReg (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm,
                                       Prefix_OPERAND_SIZE),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0xe6),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/* 66 0F E6  /r RMBoth     | Convert two packed double- precision floating-point values from xmm2/m128 to two packed signed doubleword integers in xmm1 using truncation. */
inline int cvttpd2dq (code_ptr p,
               const XmmReg (&   modrm_reg),
               const XmmWordPtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm,
                                       Prefix_OPERAND_SIZE),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0xe6),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/* 66 0F 2C  /r RMBoth     | Convert two packer double- precision floating-point values from xmm/m128 to two packed signed doubleword integers in mm using truncation. */
inline int cvttpd2pi (code_ptr p,
               const MmReg (&   modrm_reg),
               const XmmReg (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm,
                                       Prefix_OPERAND_SIZE),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x2c),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/* 66 0F 2C  /r RMBoth     | Convert two packer double- precision floating-point values from xmm/m128 to two packed signed doubleword integers in mm using truncation. */
inline int cvttpd2pi (code_ptr p,
               const MmReg (&   modrm_reg),
               const XmmWordPtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm,
                                       Prefix_OPERAND_SIZE),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x2c),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/* F3 0F 5B  /r RMBoth     | Convert four single- precision floating-point values from xmm2/m128 to four signed doubleword integers in xmm1 using truncation. */
inline int cvttps2dq (code_ptr p,
               const XmmReg (&   modrm_reg),
               const XmmReg (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm,
                                       Prefix_REP),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x5b),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/* F3 0F 5B  /r RMBoth     | Convert four single- precision floating-point values from xmm2/m128 to four signed doubleword integers in xmm1 using truncation. */
inline int cvttps2dq (code_ptr p,
               const XmmReg (&   modrm_reg),
               const XmmWordPtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm,
                                       Prefix_REP),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x5b),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/*  0F 2C  /r RMBoth     | Convert two single- precision floating-point values from xmm/m64 to two signed doubleword signed integers in mm using truncation. */
inline int cvttps2pi (code_ptr p,
               const MmReg (&   modrm_reg),
               const XmmReg (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x2c),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/*  0F 2C  /r RMBoth     | Convert two single- precision floating-point values from xmm/m64 to two signed doubleword signed integers in mm using truncation. */
inline int cvttps2pi (code_ptr p,
               const MmReg (&   modrm_reg),
               const QwordPtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x2c),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/* F2 0F 2C  /r RMBoth     | Convert one double- precision floating-point value from xmm/m64 to one signed doubleword integer in r32 using truncation. */
inline int cvttsd2si (code_ptr p,
               const DwordReg (&   modrm_reg),
               const XmmReg (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm,
                                       Prefix_REPNE),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x2c),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/* F2 0F 2C  /r RMBoth     | Convert one double- precision floating-point value from xmm/m64 to one signed doubleword integer in r32 using truncation. */
inline int cvttsd2si (code_ptr p,
               const DwordReg (&   modrm_reg),
               const QwordPtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm,
                                       Prefix_REPNE),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x2c),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/* F3 0F 2C  /r RMBoth     | Convert one single-precision floating-point value from xmm/m32 to one signed doubleword integer in r32 using truncation. */
inline int cvttss2si (code_ptr p,
               const DwordReg (&   modrm_reg),
               const XmmReg (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm,
                                       Prefix_REP),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x2c),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/* F3 0F 2C  /r RMBoth     | Convert one single-precision floating-point value from xmm/m32 to one signed doubleword integer in r32 using truncation. */
inline int cvttss2si (code_ptr p,
               const DwordReg (&   modrm_reg),
               const DwordPtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm,
                                       Prefix_REP),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x2c),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/*  99      op16  | DX:AX ← sign-extend of AX. */
inline int cwd (code_ptr p)
{
    return encode_instruction (p,
                               Prefix (Op16,AddrNothing),
                               Code (0x99));
}
/*  98      op32  | EAX ← sign-extend of AX. */
inline int cwde (code_ptr p)
{
    return encode_instruction (p,
                               Prefix (Op32,AddrNothing),
                               Code (0x98));
}
/*  27        | Decimal adjust AL after addition. */
inline int daa (code_ptr p)
{
    return encode_instruction (p,
                               Prefix (OpNothing,AddrNothing),
                               Code (0x27));
}
/*  2F        | Decimal adjust AL after subtraction. */
inline int das (code_ptr p)
{
    return encode_instruction (p,
                               Prefix (OpNothing,AddrNothing),
                               Code (0x2f));
}
/*  48    +rd  op32  | Decrement r32 by 1. */
inline int dec (code_ptr p,
         const DwordReg (&   radd))
{
    return encode_instruction (p,
                               Prefix (Op32,AddrNothing),
                               rexByte (rex_regadd (RegAdd (radd))),
                               Code (0x48,RegAdd (radd)));
}
/*  FF  /1 RMBoth   op32  | Decrement r/m32 by 1. */
inline int dec (code_ptr p,
         const DwordPtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (Op32,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm)),
                               Code (0xff),
                               make_modrm (modrm_rm,1));
}
/*  48    +rw  op16  | Decrement r16 by 1. */
inline int dec (code_ptr p,
         const WordReg (&   radd))
{
    return encode_instruction (p,
                               Prefix (Op16,AddrNothing),
                               rexByte (rex_regadd (RegAdd (radd))),
                               Code (0x48,RegAdd (radd)));
}
/*  FF  /1 RMBoth   op16  | Decrement r/m16 by 1. */
inline int dec (code_ptr p,
         const WordPtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (Op16,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm)),
                               Code (0xff),
                               make_modrm (modrm_rm,1));
}
/*  FE  /1 RMBoth     | Decrement r/m8 by 1. */
inline int dec (code_ptr p,
         const ByteReg (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm)),
                               Code (0xfe),
                               make_modrm (modrm_rm,1));
}
/*  FE  /1 RMBoth     | Decrement r/m8 by 1. */
inline int dec (code_ptr p,
         const BytePtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm)),
                               Code (0xfe),
                               make_modrm (modrm_rm,1));
}
/*  F6  /6 RMBoth     | Unsigned divide AX by r/m8, with result stored in AL ← Quotient, AH ← Remainder. */
inline int div (code_ptr p,
         const ByteReg (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm)),
                               Code (0xf6),
                               make_modrm (modrm_rm,6));
}
/*  F6  /6 RMBoth     | Unsigned divide AX by r/m8, with result stored in AL ← Quotient, AH ← Remainder. */
inline int div (code_ptr p,
         const BytePtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm)),
                               Code (0xf6),
                               make_modrm (modrm_rm,6));
}
/*  F7  /6 RMBoth   op16  | Unsigned divide DX:AX by r/m16, with result stored in AX ← Quotient, DX ← Remainder. */
inline int div (code_ptr p,
         const WordReg (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (Op16,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm)),
                               Code (0xf7),
                               make_modrm (modrm_rm,6));
}
/*  F7  /6 RMBoth   op16  | Unsigned divide DX:AX by r/m16, with result stored in AX ← Quotient, DX ← Remainder. */
inline int div (code_ptr p,
         const WordPtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (Op16,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm)),
                               Code (0xf7),
                               make_modrm (modrm_rm,6));
}
/*  F7  /6 RMBoth   op32  | Unsigned divide EDX:EAX by r/m32, with result stored in EAX ← Quotient, EDX ← Remainder. */
inline int div (code_ptr p,
         const DwordReg (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (Op32,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm)),
                               Code (0xf7),
                               make_modrm (modrm_rm,6));
}
/*  F7  /6 RMBoth   op32  | Unsigned divide EDX:EAX by r/m32, with result stored in EAX ← Quotient, EDX ← Remainder. */
inline int div (code_ptr p,
         const DwordPtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (Op32,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm)),
                               Code (0xf7),
                               make_modrm (modrm_rm,6));
}
/* 66 0F 5E  /r RMBoth     | Divide packed double- precision floating-point values in xmm1 by packed double-precision floating- point values xmm2/m128. */
inline int divpd (code_ptr p,
           const XmmReg (&   modrm_reg),
           const XmmReg (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm,
                                       Prefix_OPERAND_SIZE),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x5e),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/* 66 0F 5E  /r RMBoth     | Divide packed double- precision floating-point values in xmm1 by packed double-precision floating- point values xmm2/m128. */
inline int divpd (code_ptr p,
           const XmmReg (&   modrm_reg),
           const XmmWordPtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm,
                                       Prefix_OPERAND_SIZE),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x5e),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/*  0F 5E  /r RMBoth     | Divide packed single- precision floating-point values in xmm1 by packed single-precision floating- point values xmm2/m128. */
inline int divps (code_ptr p,
           const XmmReg (&   modrm_reg),
           const XmmReg (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x5e),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/*  0F 5E  /r RMBoth     | Divide packed single- precision floating-point values in xmm1 by packed single-precision floating- point values xmm2/m128. */
inline int divps (code_ptr p,
           const XmmReg (&   modrm_reg),
           const XmmWordPtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x5e),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/* F2 0F 5E  /r RMBoth     | Divide low double-precision floating-point value n xmm1 by low double-precision floating-point value in xmm2/mem64. */
inline int divsd (code_ptr p,
           const XmmReg (&   modrm_reg),
           const XmmReg (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm,
                                       Prefix_REPNE),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x5e),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/* F2 0F 5E  /r RMBoth     | Divide low double-precision floating-point value n xmm1 by low double-precision floating-point value in xmm2/mem64. */
inline int divsd (code_ptr p,
           const XmmReg (&   modrm_reg),
           const QwordPtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm,
                                       Prefix_REPNE),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x5e),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/* F3 0F 5E  /r RMBoth     | Divide low single-precision floating-point value in xmm1 by low single- precision floating-point value in xmm2/m32. */
inline int divss (code_ptr p,
           const XmmReg (&   modrm_reg),
           const XmmReg (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm,
                                       Prefix_REP),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x5e),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/* F3 0F 5E  /r RMBoth     | Divide low single-precision floating-point value in xmm1 by low single- precision floating-point value in xmm2/m32. */
inline int divss (code_ptr p,
           const XmmReg (&   modrm_reg),
           const DwordPtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm,
                                       Prefix_REP),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x5e),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/* 66 0F 3A 41  /r RMBoth  ib   | Selectively multiply packed DP floating-point values from xmm1 with packed DP floating-point values from xmm2, add and selectively store the packed DP floating-point values to xmm1. */
inline int dppd (code_ptr p,
          const XmmReg (&   modrm_reg),
          const XmmReg (&   modrm_rm),
          imm8_t imm)
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm,
                                       Prefix_OPERAND_SIZE),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x3a,0x41),
                               make_modrm (modrm_rm,modrm_reg),
                               make_imm (imm));
}
/* 66 0F 3A 41  /r RMBoth  ib   | Selectively multiply packed DP floating-point values from xmm1 with packed DP floating-point values from xmm2, add and selectively store the packed DP floating-point values to xmm1. */
inline int dppd (code_ptr p,
          const XmmReg (&   modrm_reg),
          const XmmWordPtr (&   modrm_rm),
          imm8_t imm)
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm,
                                       Prefix_OPERAND_SIZE),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x3a,0x41),
                               make_modrm (modrm_rm,modrm_reg),
                               make_imm (imm));
}
/* 66 0F 3A 40  /r RMBoth  ib   | Selectively multiply packed SP floating-point values from xmm1 with packed SP floating-point values from xmm2, add and selectively store the packed SP floating-point values or zero values to xmm1. */
inline int dpps (code_ptr p,
          const XmmReg (&   modrm_reg),
          const XmmReg (&   modrm_rm),
          imm8_t imm)
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm,
                                       Prefix_OPERAND_SIZE),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x3a,0x40),
                               make_modrm (modrm_rm,modrm_reg),
                               make_imm (imm));
}
/* 66 0F 3A 40  /r RMBoth  ib   | Selectively multiply packed SP floating-point values from xmm1 with packed SP floating-point values from xmm2, add and selectively store the packed SP floating-point values or zero values to xmm1. */
inline int dpps (code_ptr p,
          const XmmReg (&   modrm_reg),
          const XmmWordPtr (&   modrm_rm),
          imm8_t imm)
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm,
                                       Prefix_OPERAND_SIZE),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x3a,0x40),
                               make_modrm (modrm_rm,modrm_reg),
                               make_imm (imm));
}
/*  0F 77        | Set the x87 FPU tag word to empty. */
inline int emms (code_ptr p)
{
    return encode_instruction (p,
                               Prefix (OpNothing,AddrNothing),
                               Code (0xf,0x77));
}
/*  C8     iw ib   | Create a nested stack frame for a procedure. */
inline int enter (code_ptr p,
           imm16_t imm1,
           imm8_t imm2)
{
    return encode_instruction (p,
                               Prefix (OpNothing,AddrNothing),
                               Code (0xc8),
                               make_imm (imm1),
                               make_imm (imm2));
}
/* 66 0F 3A 17  /r RMBoth  ib   | Extract a single-precision floating-point value from xmm2 at the source offset specified by imm8 and store the result to reg or m32. The upper 32 bits of r64 is zeroed if reg is r64. */
inline int extractps (code_ptr p,
               const DwordReg (&   modrm_rm),
               const XmmReg (&   modrm_reg),
               imm8_t imm)
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm,
                                       Prefix_OPERAND_SIZE),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x3a,0x17),
                               make_modrm (modrm_rm,modrm_reg),
                               make_imm (imm));
}
/* 66 0F 3A 17  /r RMBoth  ib   | Extract a single-precision floating-point value from xmm2 at the source offset specified by imm8 and store the result to reg or m32. The upper 32 bits of r64 is zeroed if reg is r64. */
inline int extractps (code_ptr p,
               const DwordPtr (&   modrm_rm),
               const XmmReg (&   modrm_reg),
               imm8_t imm)
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm,
                                       Prefix_OPERAND_SIZE),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x3a,0x17),
                               make_modrm (modrm_rm,modrm_reg),
                               make_imm (imm));
}
/*  D9 F0        | Replace ST(0) with (2ST(0) – 1). */
inline int f2xm1 (code_ptr p)
{
    return encode_instruction (p,
                               Prefix (OpNothing,AddrNothing),
                               Code (0xd9,0xf0));
}
/*  D9 E1        | Replace ST with its absolute value. */
inline int fabs (code_ptr p)
{
    return encode_instruction (p,
                               Prefix (OpNothing,AddrNothing),
                               Code (0xd9,0xe1));
}
/*  D8  /0 RMMemOnly     | Add m32fp to ST(0) and store result in ST(0). */
inline int fadd (code_ptr p,
          const DwordPtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm)),
                               Code (0xd8),
                               make_modrm (modrm_rm,0));
}
/*  DC  /0 RMMemOnly     | Add m64fp to ST(0) and store result in ST(0). */
inline int fadd (code_ptr p,
          const QwordPtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm)),
                               Code (0xdc),
                               make_modrm (modrm_rm,0));
}
/*  D8 C0    +i    | Add ST(0) to ST(i) and store result in ST(0). */
inline int fadd (code_ptr p,
          const RegST0 (&   unused),
          const StReg (&   radd))
{
    return encode_instruction (p,
                               Prefix (OpNothing,AddrNothing),
                               rexByte (rex_regadd (RegAdd (radd))),
                               Code (0xd8,0xc0,RegAdd (radd)));
}
/*  DC C0    +i    | Add ST(i) to ST(0) and store result in ST(i). */
inline int fadd (code_ptr p,
          const StReg_m_ST0 (&   radd),
          const RegST0 (&   unused))
{
    return encode_instruction (p,
                               Prefix (OpNothing,AddrNothing),
                               rexByte (rex_regadd (RegAdd (radd))),
                               Code (0xdc,0xc0,RegAdd (radd)));
}
/*  DE C1        | Add ST(0) to ST(1), store result in ST(1), and pop the register stack. */
inline int faddp (code_ptr p)
{
    return encode_instruction (p,
                               Prefix (OpNothing,AddrNothing),
                               Code (0xde,0xc1));
}
/*  DE C0    +i    | Add ST(0) to ST(i), store result in ST(i), and pop the register stack. */
inline int faddp (code_ptr p,
           const StReg (&   radd),
           const RegST0 (&   unused))
{
    return encode_instruction (p,
                               Prefix (OpNothing,AddrNothing),
                               rexByte (rex_regadd (RegAdd (radd))),
                               Code (0xde,0xc0,RegAdd (radd)));
}
/*  DF  /4 RMMemOnly     | Convert BCD value to floating-point and push onto the FPU stack. */
inline int fbld (code_ptr p,
          const TbytePtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm)),
                               Code (0xdf),
                               make_modrm (modrm_rm,4));
}
/*  DF  /6 RMMemOnly     | Store ST(0) in m80bcd and pop ST(0). */
inline int fbstp (code_ptr p,
           const TbytePtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm)),
                               Code (0xdf),
                               make_modrm (modrm_rm,6));
}
/*  D9 E0        | Complements sign of ST(0). */
inline int fchs (code_ptr p)
{
    return encode_instruction (p,
                               Prefix (OpNothing,AddrNothing),
                               Code (0xd9,0xe0));
}
/*  9B DB E2        | Clear floating-point exception flags after checking for pending unmasked floating- point exceptions. */
inline int fclex (code_ptr p)
{
    return encode_instruction (p,
                               Prefix (OpNothing,AddrNothing),
                               Code (0x9b,0xdb,0xe2));
}
/*  DA C0    +i    | Move if below (CF=1). */
inline int fcmovb (code_ptr p,
            const RegST0 (&   unused),
            const StReg (&   radd))
{
    return encode_instruction (p,
                               Prefix (OpNothing,AddrNothing),
                               rexByte (rex_regadd (RegAdd (radd))),
                               Code (0xda,0xc0,RegAdd (radd)));
}
/*  DA D0    +i    | Move if below or equal (CF=1 or ZF=1). */
inline int fcmovbe (code_ptr p,
             const RegST0 (&   unused),
             const StReg (&   radd))
{
    return encode_instruction (p,
                               Prefix (OpNothing,AddrNothing),
                               rexByte (rex_regadd (RegAdd (radd))),
                               Code (0xda,0xd0,RegAdd (radd)));
}
/*  DA C8    +i    | Move if equal (ZF=1). */
inline int fcmove (code_ptr p,
            const RegST0 (&   unused),
            const StReg (&   radd))
{
    return encode_instruction (p,
                               Prefix (OpNothing,AddrNothing),
                               rexByte (rex_regadd (RegAdd (radd))),
                               Code (0xda,0xc8,RegAdd (radd)));
}
/*  DB C0    +i    | Move if not below (CF=0). */
inline int fcmovnb (code_ptr p,
             const RegST0 (&   unused),
             const StReg (&   radd))
{
    return encode_instruction (p,
                               Prefix (OpNothing,AddrNothing),
                               rexByte (rex_regadd (RegAdd (radd))),
                               Code (0xdb,0xc0,RegAdd (radd)));
}
/*  DB D0    +i    | Move if not below or equal (CF=0 and ZF=0). */
inline int fcmovnbe (code_ptr p,
              const RegST0 (&   unused),
              const StReg (&   radd))
{
    return encode_instruction (p,
                               Prefix (OpNothing,AddrNothing),
                               rexByte (rex_regadd (RegAdd (radd))),
                               Code (0xdb,0xd0,RegAdd (radd)));
}
/*  DB C8    +i    | Move if not equal (ZF=0). */
inline int fcmovne (code_ptr p,
             const RegST0 (&   unused),
             const StReg (&   radd))
{
    return encode_instruction (p,
                               Prefix (OpNothing,AddrNothing),
                               rexByte (rex_regadd (RegAdd (radd))),
                               Code (0xdb,0xc8,RegAdd (radd)));
}
/*  DB D8    +i    | Move if not unordered (PF=0). */
inline int fcmovnu (code_ptr p,
             const RegST0 (&   unused),
             const StReg (&   radd))
{
    return encode_instruction (p,
                               Prefix (OpNothing,AddrNothing),
                               rexByte (rex_regadd (RegAdd (radd))),
                               Code (0xdb,0xd8,RegAdd (radd)));
}
/*  DA D8    +i    | Move if unordered (PF=1). */
inline int fcmovu (code_ptr p,
            const RegST0 (&   unused),
            const StReg (&   radd))
{
    return encode_instruction (p,
                               Prefix (OpNothing,AddrNothing),
                               rexByte (rex_regadd (RegAdd (radd))),
                               Code (0xda,0xd8,RegAdd (radd)));
}
/*  D8 D1        | Compare ST(0) with ST(1). */
inline int fcom (code_ptr p)
{
    return encode_instruction (p,
                               Prefix (OpNothing,AddrNothing),
                               Code (0xd8,0xd1));
}
/*  D8 D0    +i    | Compare ST(0) with ST(i). */
inline int fcom (code_ptr p,
          const StReg (&   radd))
{
    return encode_instruction (p,
                               Prefix (OpNothing,AddrNothing),
                               rexByte (rex_regadd (RegAdd (radd))),
                               Code (0xd8,0xd0,RegAdd (radd)));
}
/*  D8  /2 RMMemOnly     | Compare ST(0) with m32fp. */
inline int fcom (code_ptr p,
          const DwordPtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm)),
                               Code (0xd8),
                               make_modrm (modrm_rm,2));
}
/*  DC  /2 RMMemOnly     | Compare ST(0) with m64fp. */
inline int fcom (code_ptr p,
          const QwordPtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm)),
                               Code (0xdc),
                               make_modrm (modrm_rm,2));
}
/*  DB F0    +i    | Compare ST(0) with ST(i) and set status flags accordingly. */
inline int fcomi (code_ptr p,
           const RegST0 (&   unused),
           const StReg (&   radd))
{
    return encode_instruction (p,
                               Prefix (OpNothing,AddrNothing),
                               rexByte (rex_regadd (RegAdd (radd))),
                               Code (0xdb,0xf0,RegAdd (radd)));
}
/*  DF F0    +i    | Compare ST(0) with ST(i), set status flags accordingly, and pop register stack. */
inline int fcomip (code_ptr p,
            const RegST0 (&   unused),
            const StReg (&   radd))
{
    return encode_instruction (p,
                               Prefix (OpNothing,AddrNothing),
                               rexByte (rex_regadd (RegAdd (radd))),
                               Code (0xdf,0xf0,RegAdd (radd)));
}
/*  D8 D9        | Compare ST(0) with ST(1) and pop register stack. */
inline int fcomp (code_ptr p)
{
    return encode_instruction (p,
                               Prefix (OpNothing,AddrNothing),
                               Code (0xd8,0xd9));
}
/*  D8 D8    +i    | Compare ST(0) with ST(i) and pop register stack. */
inline int fcomp (code_ptr p,
           const StReg (&   radd))
{
    return encode_instruction (p,
                               Prefix (OpNothing,AddrNothing),
                               rexByte (rex_regadd (RegAdd (radd))),
                               Code (0xd8,0xd8,RegAdd (radd)));
}
/*  D8  /3 RMMemOnly     | Compare ST(0) with m32fp and pop register stack. */
inline int fcomp (code_ptr p,
           const DwordPtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm)),
                               Code (0xd8),
                               make_modrm (modrm_rm,3));
}
/*  DC  /3 RMMemOnly     | Compare ST(0) with m64fp and pop register stack. */
inline int fcomp (code_ptr p,
           const QwordPtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm)),
                               Code (0xdc),
                               make_modrm (modrm_rm,3));
}
/*  DE D9        | Compare ST(0) with ST(1) and pop register stack twice. */
inline int fcompp (code_ptr p)
{
    return encode_instruction (p,
                               Prefix (OpNothing,AddrNothing),
                               Code (0xde,0xd9));
}
/*  D9 FF        | Replace ST(0) with its cosine. */
inline int fcos (code_ptr p)
{
    return encode_instruction (p,
                               Prefix (OpNothing,AddrNothing),
                               Code (0xd9,0xff));
}
/*  D9 F6        | Decrement TOP field in FPU status word. */
inline int fdecstp (code_ptr p)
{
    return encode_instruction (p,
                               Prefix (OpNothing,AddrNothing),
                               Code (0xd9,0xf6));
}
/*  D8  /6 RMMemOnly     | Divide ST(0) by m32fp and store result in ST(0). */
inline int fdiv (code_ptr p,
          const DwordPtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm)),
                               Code (0xd8),
                               make_modrm (modrm_rm,6));
}
/*  DC  /6 RMMemOnly     | Divide ST(0) by m64fp and store result in ST(0). */
inline int fdiv (code_ptr p,
          const QwordPtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm)),
                               Code (0xdc),
                               make_modrm (modrm_rm,6));
}
/*  D8 F0    +i    | Divide ST(0) by ST(i) and store result in ST(0). */
inline int fdiv (code_ptr p,
          const RegST0 (&   unused),
          const StReg (&   radd))
{
    return encode_instruction (p,
                               Prefix (OpNothing,AddrNothing),
                               rexByte (rex_regadd (RegAdd (radd))),
                               Code (0xd8,0xf0,RegAdd (radd)));
}
/*  DC F8    +i    | Divide ST(i) by ST(0) and store result in ST(i). */
inline int fdiv (code_ptr p,
          const StReg_m_ST0 (&   radd),
          const RegST0 (&   unused))
{
    return encode_instruction (p,
                               Prefix (OpNothing,AddrNothing),
                               rexByte (rex_regadd (RegAdd (radd))),
                               Code (0xdc,0xf8,RegAdd (radd)));
}
/*  DE F9        | Divide ST(1) by ST(0), store result in ST(1), and pop the register stack. */
inline int fdivp (code_ptr p)
{
    return encode_instruction (p,
                               Prefix (OpNothing,AddrNothing),
                               Code (0xde,0xf9));
}
/*  DE F8    +i    | Divide ST(i) by ST(0), store result in ST(i), and pop the register stack. */
inline int fdivp (code_ptr p,
           const StReg (&   radd),
           const RegST0 (&   unused))
{
    return encode_instruction (p,
                               Prefix (OpNothing,AddrNothing),
                               rexByte (rex_regadd (RegAdd (radd))),
                               Code (0xde,0xf8,RegAdd (radd)));
}
/*  D8  /7 RMMemOnly     | Divide m32fp by ST(0) and store result in ST(0). */
inline int fdivr (code_ptr p,
           const DwordPtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm)),
                               Code (0xd8),
                               make_modrm (modrm_rm,7));
}
/*  DC  /7 RMMemOnly     | Divide m64fp by ST(0) and store result in ST(0). */
inline int fdivr (code_ptr p,
           const QwordPtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm)),
                               Code (0xdc),
                               make_modrm (modrm_rm,7));
}
/*  D8 F8    +i    | Divide ST(i) by ST(0) and store result in ST(0). */
inline int fdivr (code_ptr p,
           const RegST0 (&   unused),
           const StReg (&   radd))
{
    return encode_instruction (p,
                               Prefix (OpNothing,AddrNothing),
                               rexByte (rex_regadd (RegAdd (radd))),
                               Code (0xd8,0xf8,RegAdd (radd)));
}
/*  DC F0    +i    | Divide ST(0) by ST(i) and store result in ST(i). */
inline int fdivr (code_ptr p,
           const StReg_m_ST0 (&   radd),
           const RegST0 (&   unused))
{
    return encode_instruction (p,
                               Prefix (OpNothing,AddrNothing),
                               rexByte (rex_regadd (RegAdd (radd))),
                               Code (0xdc,0xf0,RegAdd (radd)));
}
/*  DE F1        | Divide ST(0) by ST(1), store result in ST(1), and pop the register stack. */
inline int fdivrp (code_ptr p)
{
    return encode_instruction (p,
                               Prefix (OpNothing,AddrNothing),
                               Code (0xde,0xf1));
}
/*  DE F0    +i    | Divide ST(0) by ST(i), store result in ST(i), and pop the register stack. */
inline int fdivrp (code_ptr p,
            const StReg (&   radd),
            const RegST0 (&   unused))
{
    return encode_instruction (p,
                               Prefix (OpNothing,AddrNothing),
                               rexByte (rex_regadd (RegAdd (radd))),
                               Code (0xde,0xf0,RegAdd (radd)));
}
/*  DD C0    +i    | Sets tag for ST(i) to empty. */
inline int ffree (code_ptr p,
           const StReg (&   radd))
{
    return encode_instruction (p,
                               Prefix (OpNothing,AddrNothing),
                               rexByte (rex_regadd (RegAdd (radd))),
                               Code (0xdd,0xc0,RegAdd (radd)));
}
/*  DE  /0 RMMemOnly     | Add m16int to ST(0) and store result in ST(0). */
inline int fiadd (code_ptr p,
           const WordPtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm)),
                               Code (0xde),
                               make_modrm (modrm_rm,0));
}
/*  DA  /0 RMMemOnly     | Add m32int to ST(0) and store result in ST(0). */
inline int fiadd (code_ptr p,
           const DwordPtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm)),
                               Code (0xda),
                               make_modrm (modrm_rm,0));
}
/*  DE  /2 RMMemOnly     | Compare ST(0) with m16int. */
inline int ficom (code_ptr p,
           const WordPtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm)),
                               Code (0xde),
                               make_modrm (modrm_rm,2));
}
/*  DA  /2 RMMemOnly     | Compare ST(0) with m32int. */
inline int ficom (code_ptr p,
           const DwordPtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm)),
                               Code (0xda),
                               make_modrm (modrm_rm,2));
}
/*  DE  /3 RMMemOnly     | Compare ST(0) with m16int and pop stack register. */
inline int ficomp (code_ptr p,
            const WordPtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm)),
                               Code (0xde),
                               make_modrm (modrm_rm,3));
}
/*  DA  /3 RMMemOnly     | Compare ST(0) with m32int and pop stack register. */
inline int ficomp (code_ptr p,
            const DwordPtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm)),
                               Code (0xda),
                               make_modrm (modrm_rm,3));
}
/*  DE  /6 RMMemOnly     | Divide ST(0) by m64int and store result in ST(0). */
inline int fidiv (code_ptr p,
           const WordPtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm)),
                               Code (0xde),
                               make_modrm (modrm_rm,6));
}
/*  DA  /6 RMMemOnly     | Divide ST(0) by m32int and store result in ST(0). */
inline int fidiv (code_ptr p,
           const DwordPtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm)),
                               Code (0xda),
                               make_modrm (modrm_rm,6));
}
/*  DE  /7 RMMemOnly     | Divide m16int by ST(0) and store result in ST(0). */
inline int fidivr (code_ptr p,
            const WordPtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm)),
                               Code (0xde),
                               make_modrm (modrm_rm,7));
}
/*  DA  /7 RMMemOnly     | Divide m32int by ST(0) and store result in ST(0). */
inline int fidivr (code_ptr p,
            const DwordPtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm)),
                               Code (0xda),
                               make_modrm (modrm_rm,7));
}
/*  DF  /0 RMMemOnly     | Push m16int onto the FPU register stack. */
inline int fild (code_ptr p,
          const WordPtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm)),
                               Code (0xdf),
                               make_modrm (modrm_rm,0));
}
/*  DB  /0 RMMemOnly     | Push m32int onto the FPU register stack. */
inline int fild (code_ptr p,
          const DwordPtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm)),
                               Code (0xdb),
                               make_modrm (modrm_rm,0));
}
/*  DF  /5 RMMemOnly     | Push m64int onto the FPU register stack. */
inline int fild (code_ptr p,
          const QwordPtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm)),
                               Code (0xdf),
                               make_modrm (modrm_rm,5));
}
/*  DE  /1 RMMemOnly     | Multiply ST(0) by m16int and store result in ST(0). */
inline int fimul (code_ptr p,
           const WordPtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm)),
                               Code (0xde),
                               make_modrm (modrm_rm,1));
}
/*  DA  /1 RMMemOnly     | Multiply ST(0) by m32int and store result in ST(0). */
inline int fimul (code_ptr p,
           const DwordPtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm)),
                               Code (0xda),
                               make_modrm (modrm_rm,1));
}
/*  D9 F7        | Increment the TOP field in the FPU status register. */
inline int fincstp (code_ptr p)
{
    return encode_instruction (p,
                               Prefix (OpNothing,AddrNothing),
                               Code (0xd9,0xf7));
}
/*  9B DB E3        | Initialize FPU after checking for pending unmasked floating-point exceptions. */
inline int finit (code_ptr p)
{
    return encode_instruction (p,
                               Prefix (OpNothing,AddrNothing),
                               Code (0x9b,0xdb,0xe3));
}
/*  DF  /2 RMMemOnly     | Store ST(0) in m16int. */
inline int fist (code_ptr p,
          const WordPtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm)),
                               Code (0xdf),
                               make_modrm (modrm_rm,2));
}
/*  DB  /2 RMMemOnly     | Store ST(0) in m32int. */
inline int fist (code_ptr p,
          const DwordPtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm)),
                               Code (0xdb),
                               make_modrm (modrm_rm,2));
}
/*  DF  /3 RMMemOnly     | Store ST(0) in m16int and pop register stack. */
inline int fistp (code_ptr p,
           const WordPtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm)),
                               Code (0xdf),
                               make_modrm (modrm_rm,3));
}
/*  DB  /3 RMMemOnly     | Store ST(0) in m32int and pop register stack. */
inline int fistp (code_ptr p,
           const DwordPtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm)),
                               Code (0xdb),
                               make_modrm (modrm_rm,3));
}
/*  DF  /7 RMMemOnly     | Store ST(0) in m64int and pop register stack. */
inline int fistp (code_ptr p,
           const QwordPtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm)),
                               Code (0xdf),
                               make_modrm (modrm_rm,7));
}
/*  DF  /1 RMMemOnly     | Store ST(0) in m16int with truncation. */
inline int fisttp (code_ptr p,
            const WordPtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm)),
                               Code (0xdf),
                               make_modrm (modrm_rm,1));
}
/*  DB  /1 RMMemOnly     | Store ST(0) in m32int with truncation. */
inline int fisttp (code_ptr p,
            const DwordPtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm)),
                               Code (0xdb),
                               make_modrm (modrm_rm,1));
}
/*  DD  /1 RMMemOnly     | Store ST(0) in m64int with truncation. */
inline int fisttp (code_ptr p,
            const QwordPtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm)),
                               Code (0xdd),
                               make_modrm (modrm_rm,1));
}
/*  DE  /4 RMMemOnly     | Subtract m16int from ST(0) and store result in ST(0). */
inline int fisub (code_ptr p,
           const WordPtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm)),
                               Code (0xde),
                               make_modrm (modrm_rm,4));
}
/*  DA  /4 RMMemOnly     | Subtract m32int from ST(0) and store result in ST(0). */
inline int fisub (code_ptr p,
           const DwordPtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm)),
                               Code (0xda),
                               make_modrm (modrm_rm,4));
}
/*  DE  /5 RMMemOnly     | Subtract ST(0) from m16int and store result in ST(0). */
inline int fisubr (code_ptr p,
            const WordPtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm)),
                               Code (0xde),
                               make_modrm (modrm_rm,5));
}
/*  DA  /5 RMMemOnly     | Subtract ST(0) from m32int and store result in ST(0). */
inline int fisubr (code_ptr p,
            const DwordPtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm)),
                               Code (0xda),
                               make_modrm (modrm_rm,5));
}
/*  D9 C0    +i    | Push ST(i) onto the FPU register stack. */
inline int fld (code_ptr p,
         const StReg (&   radd))
{
    return encode_instruction (p,
                               Prefix (OpNothing,AddrNothing),
                               rexByte (rex_regadd (RegAdd (radd))),
                               Code (0xd9,0xc0,RegAdd (radd)));
}
/*  D9  /0 RMMemOnly     | Push m32fp onto the FPU register stack. */
inline int fld (code_ptr p,
         const DwordPtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm)),
                               Code (0xd9),
                               make_modrm (modrm_rm,0));
}
/*  DD  /0 RMMemOnly     | Push m64fp onto the FPU register stack. */
inline int fld (code_ptr p,
         const QwordPtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm)),
                               Code (0xdd),
                               make_modrm (modrm_rm,0));
}
/*  DB  /5 RMMemOnly     | Push m80fp onto the FPU register stack. */
inline int fld (code_ptr p,
         const TbytePtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm)),
                               Code (0xdb),
                               make_modrm (modrm_rm,5));
}
/*  D9 E8        | Push +1.0 onto the FPU register stack. */
inline int fld1 (code_ptr p)
{
    return encode_instruction (p,
                               Prefix (OpNothing,AddrNothing),
                               Code (0xd9,0xe8));
}
/*  D9  /5 RMMemOnly     | Load FPU control word from m2byte. */
inline int fldcw (code_ptr p,
           const WordPtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm)),
                               Code (0xd9),
                               make_modrm (modrm_rm,5));
}
/*  D9  /4 RMMemOnly     | Load FPU environment from m14byte or m28byte. */
inline int fldenv (code_ptr p,
            const VoidPtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm)),
                               Code (0xd9),
                               make_modrm (modrm_rm,4));
}
/*  D9 EA        | Push log2e onto the FPU register stack. */
inline int fldl2e (code_ptr p)
{
    return encode_instruction (p,
                               Prefix (OpNothing,AddrNothing),
                               Code (0xd9,0xea));
}
/*  D9 E9        | Push log210 onto the FPU register stack. */
inline int fldl2t (code_ptr p)
{
    return encode_instruction (p,
                               Prefix (OpNothing,AddrNothing),
                               Code (0xd9,0xe9));
}
/*  D9 EC        | Push log102 onto the FPU register stack. */
inline int fldlg2 (code_ptr p)
{
    return encode_instruction (p,
                               Prefix (OpNothing,AddrNothing),
                               Code (0xd9,0xec));
}
/*  D9 ED        | Push loge2 onto the FPU register stack. */
inline int fldln2 (code_ptr p)
{
    return encode_instruction (p,
                               Prefix (OpNothing,AddrNothing),
                               Code (0xd9,0xed));
}
/*  D9 EB        | Push π onto the FPU register stack. */
inline int fldpi (code_ptr p)
{
    return encode_instruction (p,
                               Prefix (OpNothing,AddrNothing),
                               Code (0xd9,0xeb));
}
/*  D9 EE        | Push +0.0 onto the FPU register stack. */
inline int fldz (code_ptr p)
{
    return encode_instruction (p,
                               Prefix (OpNothing,AddrNothing),
                               Code (0xd9,0xee));
}
/*  D8  /1 RMMemOnly     | Multiply ST(0) by m32fp and store result in ST(0). */
inline int fmul (code_ptr p,
          const DwordPtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm)),
                               Code (0xd8),
                               make_modrm (modrm_rm,1));
}
/*  DC  /1 RMMemOnly     | Multiply ST(0) by m64fp and store result in ST(0). */
inline int fmul (code_ptr p,
          const QwordPtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm)),
                               Code (0xdc),
                               make_modrm (modrm_rm,1));
}
/*  D8 C8    +i    | Multiply ST(0) by ST(i) and store result in ST(0). */
inline int fmul (code_ptr p,
          const RegST0 (&   unused),
          const StReg (&   radd))
{
    return encode_instruction (p,
                               Prefix (OpNothing,AddrNothing),
                               rexByte (rex_regadd (RegAdd (radd))),
                               Code (0xd8,0xc8,RegAdd (radd)));
}
/*  DC C8    +i    | Multiply ST(i) by ST(0) and store result in ST(i). */
inline int fmul (code_ptr p,
          const StReg_m_ST0 (&   radd),
          const RegST0 (&   unused))
{
    return encode_instruction (p,
                               Prefix (OpNothing,AddrNothing),
                               rexByte (rex_regadd (RegAdd (radd))),
                               Code (0xdc,0xc8,RegAdd (radd)));
}
/*  DE C9        | Multiply ST(1) by ST(0), store result in ST(1), and pop the register stack. */
inline int fmulp (code_ptr p)
{
    return encode_instruction (p,
                               Prefix (OpNothing,AddrNothing),
                               Code (0xde,0xc9));
}
/*  DE C8    +i    | Multiply ST(i) by ST(0), store result in ST(i), and pop the register stack. */
inline int fmulp (code_ptr p,
           const StReg (&   radd),
           const RegST0 (&   unused))
{
    return encode_instruction (p,
                               Prefix (OpNothing,AddrNothing),
                               rexByte (rex_regadd (RegAdd (radd))),
                               Code (0xde,0xc8,RegAdd (radd)));
}
/*  DB E2        | Clear floating-point exception flags without checking for pending unmasked floating-point exceptions. */
inline int fnclex (code_ptr p)
{
    return encode_instruction (p,
                               Prefix (OpNothing,AddrNothing),
                               Code (0xdb,0xe2));
}
/*  DB E3        | Initialize FPU without checking for pending unmasked floating-point exceptions. */
inline int fninit (code_ptr p)
{
    return encode_instruction (p,
                               Prefix (OpNothing,AddrNothing),
                               Code (0xdb,0xe3));
}
/*  D9 D0        | No operation is performed. */
inline int fnop (code_ptr p)
{
    return encode_instruction (p,
                               Prefix (OpNothing,AddrNothing),
                               Code (0xd9,0xd0));
}
/*  DD  /6 RMMemOnly     | Store FPU environment to m94byte or m108byte without checking for pending unmasked floating-point exceptions. Then re-initialize the FPU. */
inline int fnsave (code_ptr p,
            const VoidPtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm)),
                               Code (0xdd),
                               make_modrm (modrm_rm,6));
}
/*  D9  /7 RMMemOnly     | Store FPU control word to m2byte without checking for pending unmasked floating-point exceptions. */
inline int fnstcw (code_ptr p,
            const WordPtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm)),
                               Code (0xd9),
                               make_modrm (modrm_rm,7));
}
/*  D9  /6 RMMemOnly     | Store FPU environment to m14byte or m28byte without checking for pending unmasked floating-point exceptions. Then mask all floating- point exceptions. */
inline int fnstenv (code_ptr p,
             const VoidPtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm)),
                               Code (0xd9),
                               make_modrm (modrm_rm,6));
}
/*  DF E0        | Store FPU status word in AX register without checking for pending unmasked floating- point exceptions. */
inline int fnstsw (code_ptr p,
            const RegAX (&   unused))
{
    return encode_instruction (p,
                               Prefix (OpNothing,AddrNothing),
                               Code (0xdf,0xe0));
}
/*  DD  /7 RMMemOnly     | Store FPU status word at m2byte without checking for pending unmasked floating- point exceptions. */
inline int fnstsw (code_ptr p,
            const WordPtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm)),
                               Code (0xdd),
                               make_modrm (modrm_rm,7));
}
/*  D9 F3        | Replace ST(1) with arctan(ST(1)/ST(0)) and pop the register stack. */
inline int fpatan (code_ptr p)
{
    return encode_instruction (p,
                               Prefix (OpNothing,AddrNothing),
                               Code (0xd9,0xf3));
}
/*  D9 F8        | Replace ST(0) with the remainder obtained from dividing ST(0) by ST(1). */
inline int fprem (code_ptr p)
{
    return encode_instruction (p,
                               Prefix (OpNothing,AddrNothing),
                               Code (0xd9,0xf8));
}
/*  D9 F5        | Replace ST(0) with the IEEE remainder obtained from dividing ST(0) by ST(1). */
inline int fprem1 (code_ptr p)
{
    return encode_instruction (p,
                               Prefix (OpNothing,AddrNothing),
                               Code (0xd9,0xf5));
}
/*  D9 F2        | Replace ST(0) with its tangent and push 1 onto the FPU stack. */
inline int fptan (code_ptr p)
{
    return encode_instruction (p,
                               Prefix (OpNothing,AddrNothing),
                               Code (0xd9,0xf2));
}
/*  D9 FC        | Round ST(0) to an integer. */
inline int frndint (code_ptr p)
{
    return encode_instruction (p,
                               Prefix (OpNothing,AddrNothing),
                               Code (0xd9,0xfc));
}
/*  DD  /4 RMMemOnly     | Load FPU state from m94byte or m108byte. */
inline int frstor (code_ptr p,
            const VoidPtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm)),
                               Code (0xdd),
                               make_modrm (modrm_rm,4));
}
/*  9B DD  /6 RMMemOnly     | Store FPU state to m94byte or m108byte after checking for pending unmasked floating- point exceptions. Then re- initialize the FPU. */
inline int fsave (code_ptr p,
           const VoidPtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm)),
                               Code (0x9b,0xdd),
                               make_modrm (modrm_rm,6));
}
/*  D9 FD        | Scale ST(0) by ST(1). */
inline int fscale (code_ptr p)
{
    return encode_instruction (p,
                               Prefix (OpNothing,AddrNothing),
                               Code (0xd9,0xfd));
}
/*  D9 FE        | Replace ST(0) with its sine. */
inline int fsin (code_ptr p)
{
    return encode_instruction (p,
                               Prefix (OpNothing,AddrNothing),
                               Code (0xd9,0xfe));
}
/*  D9 FB        | Compute the sine and cosine of ST(0); replace ST(0) with the sine, and push the cosine onto the register stack. */
inline int fsincos (code_ptr p)
{
    return encode_instruction (p,
                               Prefix (OpNothing,AddrNothing),
                               Code (0xd9,0xfb));
}
/*  D9 FA        | Computes square root of ST(0) and stores the result in ST(0). */
inline int fsqrt (code_ptr p)
{
    return encode_instruction (p,
                               Prefix (OpNothing,AddrNothing),
                               Code (0xd9,0xfa));
}
/*  DD D0    +i    | Copy ST(0) to ST(i). */
inline int fst (code_ptr p,
         const StReg (&   radd))
{
    return encode_instruction (p,
                               Prefix (OpNothing,AddrNothing),
                               rexByte (rex_regadd (RegAdd (radd))),
                               Code (0xdd,0xd0,RegAdd (radd)));
}
/*  D9  /2 RMMemOnly     | Copy ST(0) to m32fp. */
inline int fst (code_ptr p,
         const DwordPtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm)),
                               Code (0xd9),
                               make_modrm (modrm_rm,2));
}
/*  DD  /2 RMMemOnly     | Copy ST(0) to m64fp. */
inline int fst (code_ptr p,
         const QwordPtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm)),
                               Code (0xdd),
                               make_modrm (modrm_rm,2));
}
/*  9B D9  /7 RMMemOnly     | Store FPU control word to m2byte after checking for pending unmasked floating-point exceptions. */
inline int fstcw (code_ptr p,
           const WordPtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm)),
                               Code (0x9b,0xd9),
                               make_modrm (modrm_rm,7));
}
/*  9B D9  /6 RMMemOnly     | Store FPU environment to m14byte or m28byte after checking for pending unmasked floating-point exceptions. Then mask all floating- point exceptions. */
inline int fstenv (code_ptr p,
            const VoidPtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm)),
                               Code (0x9b,0xd9),
                               make_modrm (modrm_rm,6));
}
/*  DD D8    +i    | Copy ST(0) to ST(i) and pop register stack. */
inline int fstp (code_ptr p,
          const StReg (&   radd))
{
    return encode_instruction (p,
                               Prefix (OpNothing,AddrNothing),
                               rexByte (rex_regadd (RegAdd (radd))),
                               Code (0xdd,0xd8,RegAdd (radd)));
}
/*  D9  /3 RMMemOnly     | Copy ST(0) to m32fp and pop register stack. */
inline int fstp (code_ptr p,
          const DwordPtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm)),
                               Code (0xd9),
                               make_modrm (modrm_rm,3));
}
/*  DD  /3 RMMemOnly     | Copy ST(0) to m64fp and pop register stack. */
inline int fstp (code_ptr p,
          const QwordPtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm)),
                               Code (0xdd),
                               make_modrm (modrm_rm,3));
}
/*  DB  /7 RMMemOnly     | Copy ST(0) to m80fp and pop register stack. */
inline int fstp (code_ptr p,
          const TbytePtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm)),
                               Code (0xdb),
                               make_modrm (modrm_rm,7));
}
/*  9B DF E0        | Store FPU status word in AX register after checking for pending unmasked floating- point exceptions. */
inline int fstsw (code_ptr p,
           const RegAX (&   unused))
{
    return encode_instruction (p,
                               Prefix (OpNothing,AddrNothing),
                               Code (0x9b,0xdf,0xe0));
}
/*  9B DD  /7 RMMemOnly     | Store FPU status word at m2byte after checking for pending unmasked floating- point exceptions. */
inline int fstsw (code_ptr p,
           const WordPtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm)),
                               Code (0x9b,0xdd),
                               make_modrm (modrm_rm,7));
}
/*  D8  /4 RMMemOnly     | Subtract m32fp from ST(0) and store result in ST(0). */
inline int fsub (code_ptr p,
          const DwordPtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm)),
                               Code (0xd8),
                               make_modrm (modrm_rm,4));
}
/*  DC  /4 RMMemOnly     | Subtract m64fp from ST(0) and store result in ST(0). */
inline int fsub (code_ptr p,
          const QwordPtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm)),
                               Code (0xdc),
                               make_modrm (modrm_rm,4));
}
/*  D8 E0    +i    | Subtract ST(i) from ST(0) and store result in ST(0). */
inline int fsub (code_ptr p,
          const RegST0 (&   unused),
          const StReg (&   radd))
{
    return encode_instruction (p,
                               Prefix (OpNothing,AddrNothing),
                               rexByte (rex_regadd (RegAdd (radd))),
                               Code (0xd8,0xe0,RegAdd (radd)));
}
/*  DC E8    +i    | Subtract ST(0) from ST(i) and store result in ST(i). */
inline int fsub (code_ptr p,
          const StReg_m_ST0 (&   radd),
          const RegST0 (&   unused))
{
    return encode_instruction (p,
                               Prefix (OpNothing,AddrNothing),
                               rexByte (rex_regadd (RegAdd (radd))),
                               Code (0xdc,0xe8,RegAdd (radd)));
}
/*  DE E9        | Subtract ST(0) from ST(1), store result in ST(1), and pop register stack. */
inline int fsubp (code_ptr p)
{
    return encode_instruction (p,
                               Prefix (OpNothing,AddrNothing),
                               Code (0xde,0xe9));
}
/*  DE E8    +i    | Subtract ST(0) from ST(i), store result in ST(i), and pop register stack. */
inline int fsubp (code_ptr p,
           const StReg (&   radd),
           const RegST0 (&   unused))
{
    return encode_instruction (p,
                               Prefix (OpNothing,AddrNothing),
                               rexByte (rex_regadd (RegAdd (radd))),
                               Code (0xde,0xe8,RegAdd (radd)));
}
/*  D8  /5 RMMemOnly     | Subtract ST(0) from m32fp and store result in ST(0). */
inline int fsubr (code_ptr p,
           const DwordPtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm)),
                               Code (0xd8),
                               make_modrm (modrm_rm,5));
}
/*  DC  /5 RMMemOnly     | Subtract ST(0) from m64fp and store result in ST(0). */
inline int fsubr (code_ptr p,
           const QwordPtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm)),
                               Code (0xdc),
                               make_modrm (modrm_rm,5));
}
/*  D8 E8    +i    | Subtract ST(0) from ST(i) and store result in ST(0). */
inline int fsubr (code_ptr p,
           const RegST0 (&   unused),
           const StReg (&   radd))
{
    return encode_instruction (p,
                               Prefix (OpNothing,AddrNothing),
                               rexByte (rex_regadd (RegAdd (radd))),
                               Code (0xd8,0xe8,RegAdd (radd)));
}
/*  DC E0    +i    | Subtract ST(i) from ST(0) and store result in ST(i). */
inline int fsubr (code_ptr p,
           const StReg_m_ST0 (&   radd),
           const RegST0 (&   unused))
{
    return encode_instruction (p,
                               Prefix (OpNothing,AddrNothing),
                               rexByte (rex_regadd (RegAdd (radd))),
                               Code (0xdc,0xe0,RegAdd (radd)));
}
/*  DE E1        | Subtract ST(1) from ST(0), store result in ST(1), and pop register stack. */
inline int fsubrp (code_ptr p)
{
    return encode_instruction (p,
                               Prefix (OpNothing,AddrNothing),
                               Code (0xde,0xe1));
}
/*  DE E0    +i    | Subtract ST(i) from ST(0), store result in ST(i), and pop register stack. */
inline int fsubrp (code_ptr p,
            const StReg (&   radd),
            const RegST0 (&   unused))
{
    return encode_instruction (p,
                               Prefix (OpNothing,AddrNothing),
                               rexByte (rex_regadd (RegAdd (radd))),
                               Code (0xde,0xe0,RegAdd (radd)));
}
/*  D9 E4        | Compare ST(0) with 0.0. */
inline int ftst (code_ptr p)
{
    return encode_instruction (p,
                               Prefix (OpNothing,AddrNothing),
                               Code (0xd9,0xe4));
}
/*  DD E1        | Compare ST(0) with ST(1). */
inline int fucom (code_ptr p)
{
    return encode_instruction (p,
                               Prefix (OpNothing,AddrNothing),
                               Code (0xdd,0xe1));
}
/*  DD E0    +i    | Compare ST(0) with ST(i). */
inline int fucom (code_ptr p,
           const StReg (&   radd))
{
    return encode_instruction (p,
                               Prefix (OpNothing,AddrNothing),
                               rexByte (rex_regadd (RegAdd (radd))),
                               Code (0xdd,0xe0,RegAdd (radd)));
}
/*  DB E8    +i    | Compare ST(0) with ST(i), check for ordered values, and set status flags accordingly. */
inline int fucomi (code_ptr p,
            const RegST0 (&   unused),
            const StReg (&   radd))
{
    return encode_instruction (p,
                               Prefix (OpNothing,AddrNothing),
                               rexByte (rex_regadd (RegAdd (radd))),
                               Code (0xdb,0xe8,RegAdd (radd)));
}
/*  DF E8    +i    | Compare ST(0) with ST(i), check for ordered values, set status flags accordingly, and pop register stack. */
inline int fucomip (code_ptr p,
             const RegST0 (&   unused),
             const StReg (&   radd))
{
    return encode_instruction (p,
                               Prefix (OpNothing,AddrNothing),
                               rexByte (rex_regadd (RegAdd (radd))),
                               Code (0xdf,0xe8,RegAdd (radd)));
}
/*  DD E9        | Compare ST(0) with ST(1) and pop register stack. */
inline int fucomp (code_ptr p)
{
    return encode_instruction (p,
                               Prefix (OpNothing,AddrNothing),
                               Code (0xdd,0xe9));
}
/*  DD E8    +i    | Compare ST(0) with ST(i) and pop register stack. */
inline int fucomp (code_ptr p,
            const StReg (&   radd))
{
    return encode_instruction (p,
                               Prefix (OpNothing,AddrNothing),
                               rexByte (rex_regadd (RegAdd (radd))),
                               Code (0xdd,0xe8,RegAdd (radd)));
}
/*  DA E9        | Compare ST(0) with ST(1) and pop register stack twice. */
inline int fucompp (code_ptr p)
{
    return encode_instruction (p,
                               Prefix (OpNothing,AddrNothing),
                               Code (0xda,0xe9));
}
/*  9B        | Check pending unmasked floating-point exceptions. */
inline int fwait (code_ptr p)
{
    return encode_instruction (p,
                               Prefix (OpNothing,AddrNothing),
                               Code (0x9b));
}
/*  D9 E5        | Classify value or number in ST(0). */
inline int fxam (code_ptr p)
{
    return encode_instruction (p,
                               Prefix (OpNothing,AddrNothing),
                               Code (0xd9,0xe5));
}
/*  D9 C9        | Exchange the contents of ST(0) and ST(1). */
inline int fxch (code_ptr p)
{
    return encode_instruction (p,
                               Prefix (OpNothing,AddrNothing),
                               Code (0xd9,0xc9));
}
/*  D9 C8    +i    | Exchange the contents of ST(0) and ST(i). */
inline int fxch (code_ptr p,
          const StReg (&   radd))
{
    return encode_instruction (p,
                               Prefix (OpNothing,AddrNothing),
                               rexByte (rex_regadd (RegAdd (radd))),
                               Code (0xd9,0xc8,RegAdd (radd)));
}
/*  0F AE  /1 RMMemOnly     | Restore the x87 FPU, MMX, XMM, and MXCSR register state from m512byte. */
inline int fxrstor (code_ptr p,
             const VoidPtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm)),
                               Code (0xf,0xae),
                               make_modrm (modrm_rm,1));
}
/*  0F AE  /0 RMMemOnly     | Save the x87 FPU, MMX, XMM, and MXCSR register state to m512byte. */
inline int fxsave (code_ptr p,
            const VoidPtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm)),
                               Code (0xf,0xae),
                               make_modrm (modrm_rm,0));
}
/*  D9 F4        | Separate value in ST(0) into exponent and significand, store exponent in ST(0), and push the significand onto the register stack. */
inline int fxtract (code_ptr p)
{
    return encode_instruction (p,
                               Prefix (OpNothing,AddrNothing),
                               Code (0xd9,0xf4));
}
/*  D9 F1        | Replace ST(1) with (ST(1) ∗ log2ST(0)) and pop the register stack. */
inline int fyl2x (code_ptr p)
{
    return encode_instruction (p,
                               Prefix (OpNothing,AddrNothing),
                               Code (0xd9,0xf1));
}
/*  D9 F9        | Replace ST(1) with ST(1) ∗ log2(ST(0) + 1.0) and pop the register stack. */
inline int fyl2xp1 (code_ptr p)
{
    return encode_instruction (p,
                               Prefix (OpNothing,AddrNothing),
                               Code (0xd9,0xf9));
}
/*  0F 37        | See Intel Instruction Set Reference, Chapter 6 for details. */
inline int getsec (code_ptr p)
{
    return encode_instruction (p,
                               Prefix (OpNothing,AddrNothing),
                               Code (0xf,0x37));
}
/* 66 0F 7C  /r RMBoth     | Horizontal add packed double-precision floating- point values from xmm2/m128 to xmm1. */
inline int haddpd (code_ptr p,
            const XmmReg (&   modrm_reg),
            const XmmReg (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm,
                                       Prefix_OPERAND_SIZE),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x7c),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/* 66 0F 7C  /r RMBoth     | Horizontal add packed double-precision floating- point values from xmm2/m128 to xmm1. */
inline int haddpd (code_ptr p,
            const XmmReg (&   modrm_reg),
            const XmmWordPtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm,
                                       Prefix_OPERAND_SIZE),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x7c),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/* F2 0F 7C  /r RMBoth     | Horizontal add packed single-precision floating- point values from xmm2/m128 to xmm1. */
inline int haddps (code_ptr p,
            const XmmReg (&   modrm_reg),
            const XmmReg (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm,
                                       Prefix_REPNE),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x7c),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/* F2 0F 7C  /r RMBoth     | Horizontal add packed single-precision floating- point values from xmm2/m128 to xmm1. */
inline int haddps (code_ptr p,
            const XmmReg (&   modrm_reg),
            const XmmWordPtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm,
                                       Prefix_REPNE),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x7c),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/*  F4        | Halt */
inline int hlt (code_ptr p)
{
    return encode_instruction (p,
                               Prefix (OpNothing,AddrNothing),
                               Code (0xf4));
}
/* 66 0F 7D  /r RMBoth     | Horizontal subtract packed double-precision floating- point values from xmm2/m128 to xmm1. */
inline int hsubpd (code_ptr p,
            const XmmReg (&   modrm_reg),
            const XmmReg (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm,
                                       Prefix_OPERAND_SIZE),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x7d),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/* 66 0F 7D  /r RMBoth     | Horizontal subtract packed double-precision floating- point values from xmm2/m128 to xmm1. */
inline int hsubpd (code_ptr p,
            const XmmReg (&   modrm_reg),
            const XmmWordPtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm,
                                       Prefix_OPERAND_SIZE),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x7d),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/* F2 0F 7D  /r RMBoth     | Horizontal subtract packed single-precision floating- point values from xmm2/m128 to xmm1. */
inline int hsubps (code_ptr p,
            const XmmReg (&   modrm_reg),
            const XmmReg (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm,
                                       Prefix_REPNE),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x7d),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/* F2 0F 7D  /r RMBoth     | Horizontal subtract packed single-precision floating- point values from xmm2/m128 to xmm1. */
inline int hsubps (code_ptr p,
            const XmmReg (&   modrm_reg),
            const XmmWordPtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm,
                                       Prefix_REPNE),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x7d),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/*  F6  /7 RMBoth     | Signed divide AX by r/m8, with result stored in: AL ← Quotient, AH ← Remainder. */
inline int idiv (code_ptr p,
          const ByteReg (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm)),
                               Code (0xf6),
                               make_modrm (modrm_rm,7));
}
/*  F6  /7 RMBoth     | Signed divide AX by r/m8, with result stored in: AL ← Quotient, AH ← Remainder. */
inline int idiv (code_ptr p,
          const BytePtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm)),
                               Code (0xf6),
                               make_modrm (modrm_rm,7));
}
/*  F7  /7 RMBoth   op16  | Signed divide DX:AX by r/m16, with result stored in AX ← Quotient, DX ← Remainder. */
inline int idiv (code_ptr p,
          const WordReg (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (Op16,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm)),
                               Code (0xf7),
                               make_modrm (modrm_rm,7));
}
/*  F7  /7 RMBoth   op16  | Signed divide DX:AX by r/m16, with result stored in AX ← Quotient, DX ← Remainder. */
inline int idiv (code_ptr p,
          const WordPtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (Op16,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm)),
                               Code (0xf7),
                               make_modrm (modrm_rm,7));
}
/*  F7  /7 RMBoth   op32  | Signed divide EDX:EAX by r/m32, with result stored in EAX ← Quotient, EDX ← Remainder. */
inline int idiv (code_ptr p,
          const DwordReg (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (Op32,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm)),
                               Code (0xf7),
                               make_modrm (modrm_rm,7));
}
/*  F7  /7 RMBoth   op32  | Signed divide EDX:EAX by r/m32, with result stored in EAX ← Quotient, EDX ← Remainder. */
inline int idiv (code_ptr p,
          const DwordPtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (Op32,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm)),
                               Code (0xf7),
                               make_modrm (modrm_rm,7));
}
/*  F6  /5 RMBoth     | AX← AL ∗ r/m byte. */
inline int imul (code_ptr p,
          const ByteReg (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm)),
                               Code (0xf6),
                               make_modrm (modrm_rm,5));
}
/*  F6  /5 RMBoth     | AX← AL ∗ r/m byte. */
inline int imul (code_ptr p,
          const BytePtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm)),
                               Code (0xf6),
                               make_modrm (modrm_rm,5));
}
/*  F7  /5 RMBoth   op16  | DX:AX ← AX ∗ r/m word. */
inline int imul (code_ptr p,
          const WordReg (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (Op16,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm)),
                               Code (0xf7),
                               make_modrm (modrm_rm,5));
}
/*  F7  /5 RMBoth   op16  | DX:AX ← AX ∗ r/m word. */
inline int imul (code_ptr p,
          const WordPtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (Op16,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm)),
                               Code (0xf7),
                               make_modrm (modrm_rm,5));
}
/*  F7  /5 RMBoth   op32  | EDX:EAX ← EAX ∗ r/m32. */
inline int imul (code_ptr p,
          const DwordReg (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (Op32,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm)),
                               Code (0xf7),
                               make_modrm (modrm_rm,5));
}
/*  F7  /5 RMBoth   op32  | EDX:EAX ← EAX ∗ r/m32. */
inline int imul (code_ptr p,
          const DwordPtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (Op32,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm)),
                               Code (0xf7),
                               make_modrm (modrm_rm,5));
}
/*  0F AF  /r RMBoth   op16  | word register ← word register ∗ r/m16. */
inline int imul (code_ptr p,
          const WordReg (&   modrm_reg),
          const WordReg (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (Op16,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0xaf),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/*  0F AF  /r RMBoth   op16  | word register ← word register ∗ r/m16. */
inline int imul (code_ptr p,
          const WordReg (&   modrm_reg),
          const WordPtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (Op16,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0xaf),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/*  0F AF  /r RMBoth   op32  | doubleword register ← doubleword register ∗ r/m32. */
inline int imul (code_ptr p,
          const DwordReg (&   modrm_reg),
          const DwordReg (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (Op32,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0xaf),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/*  0F AF  /r RMBoth   op32  | doubleword register ← doubleword register ∗ r/m32. */
inline int imul (code_ptr p,
          const DwordReg (&   modrm_reg),
          const DwordPtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (Op32,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0xaf),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/*  6B  /r RMBoth  ib op16  | word register ← r/m16 ∗ sign-extended immediate byte. */
inline int imul (code_ptr p,
          const WordReg (&   modrm_reg),
          const WordReg (&   modrm_rm),
          imm8_t imm)
{
    return encode_instruction (p,
                               Prefix (Op16,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0x6b),
                               make_modrm (modrm_rm,modrm_reg),
                               make_imm (imm));
}
/*  6B  /r RMBoth  ib op16  | word register ← r/m16 ∗ sign-extended immediate byte. */
inline int imul (code_ptr p,
          const WordReg (&   modrm_reg),
          const WordPtr (&   modrm_rm),
          imm8_t imm)
{
    return encode_instruction (p,
                               Prefix (Op16,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0x6b),
                               make_modrm (modrm_rm,modrm_reg),
                               make_imm (imm));
}
/*  69  /r RMBoth  iw op16  | word register ← r/m16 ∗ immediate word. */
inline int imul (code_ptr p,
          const WordReg (&   modrm_reg),
          const WordReg (&   modrm_rm),
          imm16_t imm)
{
    return encode_instruction (p,
                               Prefix (Op16,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0x69),
                               make_modrm (modrm_rm,modrm_reg),
                               make_imm (imm));
}
/*  69  /r RMBoth  iw op16  | word register ← r/m16 ∗ immediate word. */
inline int imul (code_ptr p,
          const WordReg (&   modrm_reg),
          const WordPtr (&   modrm_rm),
          imm16_t imm)
{
    return encode_instruction (p,
                               Prefix (Op16,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0x69),
                               make_modrm (modrm_rm,modrm_reg),
                               make_imm (imm));
}
/*  6B  /r RMBoth  ib op32  | doubleword register ← r/m32 ∗ sign-extended immediate byte. */
inline int imul (code_ptr p,
          const DwordReg (&   modrm_reg),
          const DwordReg (&   modrm_rm),
          imm8_t imm)
{
    return encode_instruction (p,
                               Prefix (Op32,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0x6b),
                               make_modrm (modrm_rm,modrm_reg),
                               make_imm (imm));
}
/*  6B  /r RMBoth  ib op32  | doubleword register ← r/m32 ∗ sign-extended immediate byte. */
inline int imul (code_ptr p,
          const DwordReg (&   modrm_reg),
          const DwordPtr (&   modrm_rm),
          imm8_t imm)
{
    return encode_instruction (p,
                               Prefix (Op32,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0x6b),
                               make_modrm (modrm_rm,modrm_reg),
                               make_imm (imm));
}
/*  69  /r RMBoth  id op32  | doubleword register ← r/m32 ∗ immediate doubleword. */
inline int imul (code_ptr p,
          const DwordReg (&   modrm_reg),
          const DwordReg (&   modrm_rm),
          imm32_t imm)
{
    return encode_instruction (p,
                               Prefix (Op32,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0x69),
                               make_modrm (modrm_rm,modrm_reg),
                               make_imm (imm));
}
/*  69  /r RMBoth  id op32  | doubleword register ← r/m32 ∗ immediate doubleword. */
inline int imul (code_ptr p,
          const DwordReg (&   modrm_reg),
          const DwordPtr (&   modrm_rm),
          imm32_t imm)
{
    return encode_instruction (p,
                               Prefix (Op32,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0x69),
                               make_modrm (modrm_rm,modrm_reg),
                               make_imm (imm));
}
/*  E4     ib   | Input byte from imm8 I/O port address into AL. */
inline int in (code_ptr p,
        const RegAL (&   unused),
        imm8_t imm)
{
    return encode_instruction (p,
                               Prefix (OpNothing,AddrNothing),
                               Code (0xe4),
                               make_imm (imm));
}
/*  EC        | Input byte from I/O port in DX into AL. */
inline int in (code_ptr p,
        const RegAL (&   unused1),
        const RegDX (&   unused2))
{
    return encode_instruction (p,
                               Prefix (OpNothing,AddrNothing),
                               Code (0xec));
}
/*  E5     ib op16  | Input word from imm8 I/O port address into AX. */
inline int in (code_ptr p,
        const RegAX (&   unused),
        imm8_t imm)
{
    return encode_instruction (p,
                               Prefix (Op16,AddrNothing),
                               Code (0xe5),
                               make_imm (imm));
}
/*  ED      op16  | Input word from I/O port in DX into AX. */
inline int in (code_ptr p,
        const RegAX (&   unused1),
        const RegDX (&   unused2))
{
    return encode_instruction (p,
                               Prefix (Op16,AddrNothing),
                               Code (0xed));
}
/*  E5     ib op32  | Input dword from imm8 I/O port address into EAX. */
inline int in (code_ptr p,
        const RegEAX (&   unused),
        imm8_t imm)
{
    return encode_instruction (p,
                               Prefix (Op32,AddrNothing),
                               Code (0xe5),
                               make_imm (imm));
}
/*  ED      op32  | Input doubleword from I/O port in DX into EAX. */
inline int in (code_ptr p,
        const RegEAX (&   unused1),
        const RegDX (&   unused2))
{
    return encode_instruction (p,
                               Prefix (Op32,AddrNothing),
                               Code (0xed));
}
/*  40    +rd  op32  | Increment doubleword register by 1. */
inline int inc (code_ptr p,
         const DwordReg (&   radd))
{
    return encode_instruction (p,
                               Prefix (Op32,AddrNothing),
                               rexByte (rex_regadd (RegAdd (radd))),
                               Code (0x40,RegAdd (radd)));
}
/*  FF  /0 RMBoth   op32  | Increment r/m doubleword by 1. */
inline int inc (code_ptr p,
         const DwordPtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (Op32,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm)),
                               Code (0xff),
                               make_modrm (modrm_rm,0));
}
/*  40    +rw  op16  | Increment word register by 1. */
inline int inc (code_ptr p,
         const WordReg (&   radd))
{
    return encode_instruction (p,
                               Prefix (Op16,AddrNothing),
                               rexByte (rex_regadd (RegAdd (radd))),
                               Code (0x40,RegAdd (radd)));
}
/*  FF  /0 RMBoth   op16  | Increment r/m word by 1. */
inline int inc (code_ptr p,
         const WordPtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (Op16,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm)),
                               Code (0xff),
                               make_modrm (modrm_rm,0));
}
/*  FE  /0 RMBoth     | Increment r/m byte by 1. */
inline int inc (code_ptr p,
         const ByteReg (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm)),
                               Code (0xfe),
                               make_modrm (modrm_rm,0));
}
/*  FE  /0 RMBoth     | Increment r/m byte by 1. */
inline int inc (code_ptr p,
         const BytePtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm)),
                               Code (0xfe),
                               make_modrm (modrm_rm,0));
}
/*  6C        | Input byte from I/O port specified in DX into memory location specified in ES:(E)DI or RDI.* */
inline int ins (code_ptr p,
         const BytePtr_ES_EDI (&   unused1),
         const RegDX (&   unused2))
{
    return encode_instruction (p,
                               Prefix (OpNothing,Addr32),
                               Code (0x6c));
}
/*  6C        | Input byte from I/O port specified in DX into memory location specified in ES:(E)DI or RDI.* */
inline int ins (code_ptr p,
         const BytePtr_ES_DI (&   unused1),
         const RegDX (&   unused2))
{
    return encode_instruction (p,
                               Prefix (OpNothing,Addr16),
                               Code (0x6c));
}
/*  6D      op16  | Input word from I/O port specified in DX into memory location specified in ES:(E)DI or RDI.1 */
inline int ins (code_ptr p,
         const WordPtr_ES_EDI (&   unused1),
         const RegDX (&   unused2))
{
    return encode_instruction (p,
                               Prefix (Op16,Addr32),
                               Code (0x6d));
}
/*  6D      op16  | Input word from I/O port specified in DX into memory location specified in ES:(E)DI or RDI.1 */
inline int ins (code_ptr p,
         const WordPtr_ES_DI (&   unused1),
         const RegDX (&   unused2))
{
    return encode_instruction (p,
                               Prefix (Op16,Addr16),
                               Code (0x6d));
}
/*  6D      op32  | Input doubleword from I/O port specified in DX into memory location specified in ES:(E)DI or RDI.1 */
inline int ins (code_ptr p,
         const DwordPtr_ES_EDI (&   unused1),
         const RegDX (&   unused2))
{
    return encode_instruction (p,
                               Prefix (Op32,Addr32),
                               Code (0x6d));
}
/*  6D      op32  | Input doubleword from I/O port specified in DX into memory location specified in ES:(E)DI or RDI.1 */
inline int ins (code_ptr p,
         const DwordPtr_ES_DI (&   unused1),
         const RegDX (&   unused2))
{
    return encode_instruction (p,
                               Prefix (Op32,Addr16),
                               Code (0x6d));
}
/*  6C        | Input byte from I/O port specified in DX into memory location specified with ES:(E)DI or RDI.1 */
inline int insb (code_ptr p)
{
    return encode_instruction (p,
                               Prefix (OpNothing,AddrNothing),
                               Code (0x6c));
}
/*  6D      op32  | Input doubleword from I/O port specified in DX into memory location specified in ES:(E)DI or RDI.1 */
inline int insd (code_ptr p)
{
    return encode_instruction (p,
                               Prefix (Op32,AddrNothing),
                               Code (0x6d));
}
/* 66 0F 3A 21  /r RMBoth  ib   | Insert a single precision floating-point value selected by imm8 from xmm2/m32 into xmm1 at the specified destination element specified by imm8 and zero out destination elements in xmm1 as indicated in imm8. */
inline int insertps (code_ptr p,
              const XmmReg (&   modrm_reg),
              const XmmReg (&   modrm_rm),
              imm8_t imm)
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm,
                                       Prefix_OPERAND_SIZE),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x3a,0x21),
                               make_modrm (modrm_rm,modrm_reg),
                               make_imm (imm));
}
/* 66 0F 3A 21  /r RMBoth  ib   | Insert a single precision floating-point value selected by imm8 from xmm2/m32 into xmm1 at the specified destination element specified by imm8 and zero out destination elements in xmm1 as indicated in imm8. */
inline int insertps (code_ptr p,
              const XmmReg (&   modrm_reg),
              const DwordPtr (&   modrm_rm),
              imm8_t imm)
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm,
                                       Prefix_OPERAND_SIZE),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x3a,0x21),
                               make_modrm (modrm_rm,modrm_reg),
                               make_imm (imm));
}
/*  6D      op16  | Input word from I/O port specified in DX into memory location specified in ES:(E)DI or RDI.1 */
inline int insw (code_ptr p)
{
    return encode_instruction (p,
                               Prefix (Op16,AddrNothing),
                               Code (0x6d));
}
/*  CD     ib   | Interrupt vector number specified by immediate byte. */
inline int int_ (code_ptr p,imm8_t imm)
{
    return encode_instruction (p,
                               Prefix (OpNothing,AddrNothing),
                               Code (0xcd),
                               make_imm (imm));
}
/*  CC        | Interrupt 3—trap to debugger. */
inline int int3 (code_ptr p)
{
    return encode_instruction (p,
                               Prefix (OpNothing,AddrNothing),
                               Code (0xcc));
}
/*  CE        | Interrupt 4—if overflow flag is 1. */
inline int into (code_ptr p)
{
    return encode_instruction (p,
                               Prefix (OpNothing,AddrNothing),
                               Code (0xce));
}
/*  0F 08        | Flush internal caches; initiate flushing of external caches. */
inline int invd (code_ptr p)
{
    return encode_instruction (p,
                               Prefix (OpNothing,AddrNothing),
                               Code (0xf,0x8));
}
/* 66 0F 38 80  /r RMMemOnly     | Invalidates EPT-derived entries in the TLBs and paging-structure caches (outside 64-bit mode) */
inline int invept (code_ptr p,
            const DwordReg (&   modrm_reg),
            const OwordPtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm,
                                       Prefix_OPERAND_SIZE),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x38,0x80),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/*  0F 01  /7 RMMemOnly     | Invalidate TLB Entry for page that contains m. */
inline int invlpg (code_ptr p,
            const VoidPtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm)),
                               Code (0xf,0x1),
                               make_modrm (modrm_rm,7));
}
/* 66 0F 38 81  /r RMMemOnly     | Invalidates entries in the TLBs and paging-structure caches based on VPID (outside 64-bit mode) */
inline int invvpid (code_ptr p,
             const DwordReg (&   modrm_reg),
             const OwordPtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm,
                                       Prefix_OPERAND_SIZE),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x38,0x81),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/*  CF      op16  | Interrupt return (16-bit operand size). */
inline int iret (code_ptr p)
{
    return encode_instruction (p,
                               Prefix (Op16,AddrNothing),
                               Code (0xcf));
}
/*  CF      op32  | Interrupt return (32-bit operand size). */
inline int iretd (code_ptr p)
{
    return encode_instruction (p,
                               Prefix (Op32,AddrNothing),
                               Code (0xcf));
}
/*  77     cb   | Jump short if above (CF=0 and ZF=0). */
inline int ja (code_ptr p,rel8_t imm)
{
    return encode_instruction (p,
                               Prefix (OpNothing,AddrNothing),
                               Code (0x77),
                               make_imm (imm));
}
/*  0F 87     cw op16  | Jump near if above (CF=0 and ZF=0). Not supported in 64-bit mode. */
inline int ja (code_ptr p,rel16_t imm)
{
    return encode_instruction (p,
                               Prefix (Op16,AddrNothing),
                               Code (0xf,0x87),
                               make_imm (imm));
}
/*  0F 87     cd op32  | Jump near if above (CF=0 and ZF=0). */
inline int ja (code_ptr p,rel32_t imm)
{
    return encode_instruction (p,
                               Prefix (Op32,AddrNothing),
                               Code (0xf,0x87),
                               make_imm (imm));
}
/*  73     cb   | Jump short if above or equal (CF=0). */
inline int jae (code_ptr p,rel8_t imm)
{
    return encode_instruction (p,
                               Prefix (OpNothing,AddrNothing),
                               Code (0x73),
                               make_imm (imm));
}
/*  0F 83     cw op16  | Jump near if above or equal (CF=0). Not supported in 64- bit mode. */
inline int jae (code_ptr p,rel16_t imm)
{
    return encode_instruction (p,
                               Prefix (Op16,AddrNothing),
                               Code (0xf,0x83),
                               make_imm (imm));
}
/*  0F 83     cd op32  | Jump near if above or equal (CF=0). */
inline int jae (code_ptr p,rel32_t imm)
{
    return encode_instruction (p,
                               Prefix (Op32,AddrNothing),
                               Code (0xf,0x83),
                               make_imm (imm));
}
/*  72     cb   | Jump short if below (CF=1). */
inline int jb (code_ptr p,rel8_t imm)
{
    return encode_instruction (p,
                               Prefix (OpNothing,AddrNothing),
                               Code (0x72),
                               make_imm (imm));
}
/*  0F 82     cw op16  | Jump near if below (CF=1). Not supported in 64-bit mode. */
inline int jb (code_ptr p,rel16_t imm)
{
    return encode_instruction (p,
                               Prefix (Op16,AddrNothing),
                               Code (0xf,0x82),
                               make_imm (imm));
}
/*  0F 82     cd op32  | Jump near if below (CF=1). */
inline int jb (code_ptr p,rel32_t imm)
{
    return encode_instruction (p,
                               Prefix (Op32,AddrNothing),
                               Code (0xf,0x82),
                               make_imm (imm));
}
/*  76     cb   | Jump short if below or equal (CF=1 or ZF=1). */
inline int jbe (code_ptr p,rel8_t imm)
{
    return encode_instruction (p,
                               Prefix (OpNothing,AddrNothing),
                               Code (0x76),
                               make_imm (imm));
}
/*  0F 86     cw op16  | Jump near if below or equal (CF=1 or ZF=1). Not supported in 64-bit mode. */
inline int jbe (code_ptr p,rel16_t imm)
{
    return encode_instruction (p,
                               Prefix (Op16,AddrNothing),
                               Code (0xf,0x86),
                               make_imm (imm));
}
/*  0F 86     cd op32  | Jump near if below or equal (CF=1 or ZF=1). */
inline int jbe (code_ptr p,rel32_t imm)
{
    return encode_instruction (p,
                               Prefix (Op32,AddrNothing),
                               Code (0xf,0x86),
                               make_imm (imm));
}
/*  72     cb   | Jump short if carry (CF=1). */
inline int jc (code_ptr p,rel8_t imm)
{
    return encode_instruction (p,
                               Prefix (OpNothing,AddrNothing),
                               Code (0x72),
                               make_imm (imm));
}
/*  0F 82     cw op16  | Jump near if carry (CF=1). Not supported in 64-bit mode. */
inline int jc (code_ptr p,rel16_t imm)
{
    return encode_instruction (p,
                               Prefix (Op16,AddrNothing),
                               Code (0xf,0x82),
                               make_imm (imm));
}
/*  0F 82     cd op32  | Jump near if carry (CF=1). */
inline int jc (code_ptr p,rel32_t imm)
{
    return encode_instruction (p,
                               Prefix (Op32,AddrNothing),
                               Code (0xf,0x82),
                               make_imm (imm));
}
/*  E3     cb  addr16 | Jump short if CX register is 0. */
inline int jcxz (code_ptr p,rel8_t imm)
{
    return encode_instruction (p,
                               Prefix (OpNothing,Addr16),
                               Code (0xe3),
                               make_imm (imm));
}
/*  74     cb   | Jump short if equal (ZF=1). */
inline int je (code_ptr p,rel8_t imm)
{
    return encode_instruction (p,
                               Prefix (OpNothing,AddrNothing),
                               Code (0x74),
                               make_imm (imm));
}
/*  0F 84     cw op16  | Jump near if equal (ZF=1). Not supported in 64-bit mode. */
inline int je (code_ptr p,rel16_t imm)
{
    return encode_instruction (p,
                               Prefix (Op16,AddrNothing),
                               Code (0xf,0x84),
                               make_imm (imm));
}
/*  0F 84     cd op32  | Jump near if equal (ZF=1). */
inline int je (code_ptr p,rel32_t imm)
{
    return encode_instruction (p,
                               Prefix (Op32,AddrNothing),
                               Code (0xf,0x84),
                               make_imm (imm));
}
/*  E3     cb  addr32 | Jump short if ECX register is 0. */
inline int jecxz (code_ptr p,
           rel8_t imm)
{
    return encode_instruction (p,
                               Prefix (OpNothing,Addr32),
                               Code (0xe3),
                               make_imm (imm));
}
/*  7F     cb   | Jump short if greater (ZF=0 and SF=OF). */
inline int jg (code_ptr p,rel8_t imm)
{
    return encode_instruction (p,
                               Prefix (OpNothing,AddrNothing),
                               Code (0x7f),
                               make_imm (imm));
}
/*  0F 8F     cw op16  | Jump near if greater (ZF=0 and SF=OF). Not supported in 64-bit mode. */
inline int jg (code_ptr p,rel16_t imm)
{
    return encode_instruction (p,
                               Prefix (Op16,AddrNothing),
                               Code (0xf,0x8f),
                               make_imm (imm));
}
/*  0F 8F     cd op32  | Jump near if greater (ZF=0 and SF=OF). */
inline int jg (code_ptr p,rel32_t imm)
{
    return encode_instruction (p,
                               Prefix (Op32,AddrNothing),
                               Code (0xf,0x8f),
                               make_imm (imm));
}
/*  7D     cb   | Jump short if greater or equal (SF=OF). */
inline int jge (code_ptr p,rel8_t imm)
{
    return encode_instruction (p,
                               Prefix (OpNothing,AddrNothing),
                               Code (0x7d),
                               make_imm (imm));
}
/*  0F 8D     cw op16  | Jump near if greater or equal (SF=OF). Not supported in 64-bit mode. */
inline int jge (code_ptr p,rel16_t imm)
{
    return encode_instruction (p,
                               Prefix (Op16,AddrNothing),
                               Code (0xf,0x8d),
                               make_imm (imm));
}
/*  0F 8D     cd op32  | Jump near if greater or equal (SF=OF). */
inline int jge (code_ptr p,rel32_t imm)
{
    return encode_instruction (p,
                               Prefix (Op32,AddrNothing),
                               Code (0xf,0x8d),
                               make_imm (imm));
}
/*  7C     cb   | Jump short if less (SF≠ OF). */
inline int jl (code_ptr p,rel8_t imm)
{
    return encode_instruction (p,
                               Prefix (OpNothing,AddrNothing),
                               Code (0x7c),
                               make_imm (imm));
}
/*  0F 8C     cw op16  | Jump near if less (SF≠ OF). Not supported in 64-bit mode. */
inline int jl (code_ptr p,rel16_t imm)
{
    return encode_instruction (p,
                               Prefix (Op16,AddrNothing),
                               Code (0xf,0x8c),
                               make_imm (imm));
}
/*  0F 8C     cd op32  | Jump near if less (SF≠ OF). */
inline int jl (code_ptr p,rel32_t imm)
{
    return encode_instruction (p,
                               Prefix (Op32,AddrNothing),
                               Code (0xf,0x8c),
                               make_imm (imm));
}
/*  7E     cb   | Jump short if less or equal (ZF=1 or SF≠ OF). */
inline int jle (code_ptr p,rel8_t imm)
{
    return encode_instruction (p,
                               Prefix (OpNothing,AddrNothing),
                               Code (0x7e),
                               make_imm (imm));
}
/*  0F 8E     cw op16  | Jump near if less or equal (ZF=1 or SF≠ OF). Not supported in 64-bit mode. */
inline int jle (code_ptr p,rel16_t imm)
{
    return encode_instruction (p,
                               Prefix (Op16,AddrNothing),
                               Code (0xf,0x8e),
                               make_imm (imm));
}
/*  0F 8E     cd op32  | Jump near if less or equal (ZF=1 or SF≠ OF). */
inline int jle (code_ptr p,rel32_t imm)
{
    return encode_instruction (p,
                               Prefix (Op32,AddrNothing),
                               Code (0xf,0x8e),
                               make_imm (imm));
}
/*  EB     cb   | Jump short, RIP = RIP + 8-bit displacement sign extended to 64-bits */
inline int jmp (code_ptr p,rel8_t imm)
{
    return encode_instruction (p,
                               Prefix (OpNothing,AddrNothing),
                               Code (0xeb),
                               make_imm (imm));
}
/*  E9     cw op16  | Jump near, relative, displacement relative to next instruction. Not supported in 64-bit mode. */
inline int jmp (code_ptr p,rel16_t imm)
{
    return encode_instruction (p,
                               Prefix (Op16,AddrNothing),
                               Code (0xe9),
                               make_imm (imm));
}
/*  E9     cd op32  | Jump near, relative, RIP = RIP + 32-bit displacement sign extended to 64-bits */
inline int jmp (code_ptr p,rel32_t imm)
{
    return encode_instruction (p,
                               Prefix (Op32,AddrNothing),
                               Code (0xe9),
                               make_imm (imm));
}
/*  EA     cd op16  | Jump far, absolute, address given in operand */
inline int jmp (code_ptr p,
         const FarPtr16 (&   imm))
{
    return encode_instruction (p,
                               Prefix (Op16,AddrNothing),
                               Code (0xea),
                               make_imm (imm));
}
/*  EA     cp op32  | Jump far, absolute, address given in operand */
inline int jmp (code_ptr p,
         const FarPtr32 (&   imm))
{
    return encode_instruction (p,
                               Prefix (Op32,AddrNothing),
                               Code (0xea),
                               make_imm (imm));
}
/*  FF  /4 RMBoth   op16  | Jump near, absolute indirect, address = zero-extended r/m16. Not supported in 64- bit mode. */
inline int jmp (code_ptr p,
         const WordReg (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (Op16,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm)),
                               Code (0xff),
                               make_modrm (modrm_rm,4));
}
/*  FF  /4 RMBoth   op16  | Jump near, absolute indirect, address = zero-extended r/m16. Not supported in 64- bit mode. */
inline int jmp (code_ptr p,
         const WordPtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (Op16,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm)),
                               Code (0xff),
                               make_modrm (modrm_rm,4));
}
/*  FF  /4 RMBoth   op32  | Jump near, absolute indirect, address given in r/m32. Not supported in 64-bit mode. */
inline int jmp (code_ptr p,
         const DwordReg (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (Op32,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm)),
                               Code (0xff),
                               make_modrm (modrm_rm,4));
}
/*  FF  /4 RMBoth   op32  | Jump near, absolute indirect, address given in r/m32. Not supported in 64-bit mode. */
inline int jmp (code_ptr p,
         const DwordPtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (Op32,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm)),
                               Code (0xff),
                               make_modrm (modrm_rm,4));
}
/*  FF  /5 RMMemOnly   op16  | Jump far, absolute indirect, address given in m16:16 */
inline int jmp (code_ptr p,
         const Far16Ptr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (Op16,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm)),
                               Code (0xff),
                               make_modrm (modrm_rm,5));
}
/*  FF  /5 RMMemOnly   op32  | Jump far, absolute indirect, address given in m16:32. */
inline int jmp (code_ptr p,
         const Far32Ptr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (Op32,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm)),
                               Code (0xff),
                               make_modrm (modrm_rm,5));
}
/*  76     cb   | Jump short if not above (CF=1 or ZF=1). */
inline int jna (code_ptr p,rel8_t imm)
{
    return encode_instruction (p,
                               Prefix (OpNothing,AddrNothing),
                               Code (0x76),
                               make_imm (imm));
}
/*  0F 86     cw op16  | Jump near if not above (CF=1 or ZF=1). Not supported in 64-bit mode. */
inline int jna (code_ptr p,rel16_t imm)
{
    return encode_instruction (p,
                               Prefix (Op16,AddrNothing),
                               Code (0xf,0x86),
                               make_imm (imm));
}
/*  0F 86     cd op32  | Jump near if not above (CF=1 or ZF=1). */
inline int jna (code_ptr p,rel32_t imm)
{
    return encode_instruction (p,
                               Prefix (Op32,AddrNothing),
                               Code (0xf,0x86),
                               make_imm (imm));
}
/*  72     cb   | Jump short if not above or equal (CF=1). */
inline int jnae (code_ptr p,rel8_t imm)
{
    return encode_instruction (p,
                               Prefix (OpNothing,AddrNothing),
                               Code (0x72),
                               make_imm (imm));
}
/*  0F 82     cw op16  | Jump near if not above or equal (CF=1). Not supported in 64-bit mode. */
inline int jnae (code_ptr p,
          rel16_t imm)
{
    return encode_instruction (p,
                               Prefix (Op16,AddrNothing),
                               Code (0xf,0x82),
                               make_imm (imm));
}
/*  0F 82     cd op32  | Jump near if not above or equal (CF=1). */
inline int jnae (code_ptr p,
          rel32_t imm)
{
    return encode_instruction (p,
                               Prefix (Op32,AddrNothing),
                               Code (0xf,0x82),
                               make_imm (imm));
}
/*  73     cb   | Jump short if not below (CF=0). */
inline int jnb (code_ptr p,rel8_t imm)
{
    return encode_instruction (p,
                               Prefix (OpNothing,AddrNothing),
                               Code (0x73),
                               make_imm (imm));
}
/*  0F 83     cw op16  | Jump near if not below (CF=0). Not supported in 64- bit mode. */
inline int jnb (code_ptr p,rel16_t imm)
{
    return encode_instruction (p,
                               Prefix (Op16,AddrNothing),
                               Code (0xf,0x83),
                               make_imm (imm));
}
/*  0F 83     cd op32  | Jump near if not below (CF=0). */
inline int jnb (code_ptr p,rel32_t imm)
{
    return encode_instruction (p,
                               Prefix (Op32,AddrNothing),
                               Code (0xf,0x83),
                               make_imm (imm));
}
/*  77     cb   | Jump short if not below or equal (CF=0 and ZF=0). */
inline int jnbe (code_ptr p,rel8_t imm)
{
    return encode_instruction (p,
                               Prefix (OpNothing,AddrNothing),
                               Code (0x77),
                               make_imm (imm));
}
/*  0F 87     cw op16  | Jump near if not below or equal (CF=0 and ZF=0). Not supported in 64-bit mode. */
inline int jnbe (code_ptr p,
          rel16_t imm)
{
    return encode_instruction (p,
                               Prefix (Op16,AddrNothing),
                               Code (0xf,0x87),
                               make_imm (imm));
}
/*  0F 87     cd op32  | Jump near if not below or equal (CF=0 and ZF=0). */
inline int jnbe (code_ptr p,
          rel32_t imm)
{
    return encode_instruction (p,
                               Prefix (Op32,AddrNothing),
                               Code (0xf,0x87),
                               make_imm (imm));
}
/*  73     cb   | Jump short if not carry (CF=0). */
inline int jnc (code_ptr p,rel8_t imm)
{
    return encode_instruction (p,
                               Prefix (OpNothing,AddrNothing),
                               Code (0x73),
                               make_imm (imm));
}
/*  0F 83     cw op16  | Jump near if not carry (CF=0). Not supported in 64- bit mode. */
inline int jnc (code_ptr p,rel16_t imm)
{
    return encode_instruction (p,
                               Prefix (Op16,AddrNothing),
                               Code (0xf,0x83),
                               make_imm (imm));
}
/*  0F 83     cd op32  | Jump near if not carry (CF=0). */
inline int jnc (code_ptr p,rel32_t imm)
{
    return encode_instruction (p,
                               Prefix (Op32,AddrNothing),
                               Code (0xf,0x83),
                               make_imm (imm));
}
/*  75     cb   | Jump short if not equal (ZF=0). */
inline int jne (code_ptr p,rel8_t imm)
{
    return encode_instruction (p,
                               Prefix (OpNothing,AddrNothing),
                               Code (0x75),
                               make_imm (imm));
}
/*  0F 85     cw op16  | Jump near if not equal (ZF=0). Not supported in 64-bit mode. */
inline int jne (code_ptr p,rel16_t imm)
{
    return encode_instruction (p,
                               Prefix (Op16,AddrNothing),
                               Code (0xf,0x85),
                               make_imm (imm));
}
/*  0F 85     cd op32  | Jump near if not equal (ZF=0). */
inline int jne (code_ptr p,rel32_t imm)
{
    return encode_instruction (p,
                               Prefix (Op32,AddrNothing),
                               Code (0xf,0x85),
                               make_imm (imm));
}
/*  7E     cb   | Jump short if not greater (ZF=1 or SF≠ OF). */
inline int jng (code_ptr p,rel8_t imm)
{
    return encode_instruction (p,
                               Prefix (OpNothing,AddrNothing),
                               Code (0x7e),
                               make_imm (imm));
}
/*  0F 8E     cw op16  | Jump near if not greater (ZF=1 or SF≠ OF). Not supported in 64-bit mode. */
inline int jng (code_ptr p,rel16_t imm)
{
    return encode_instruction (p,
                               Prefix (Op16,AddrNothing),
                               Code (0xf,0x8e),
                               make_imm (imm));
}
/*  0F 8E     cd op32  | Jump near if not greater (ZF=1 or SF≠ OF). */
inline int jng (code_ptr p,rel32_t imm)
{
    return encode_instruction (p,
                               Prefix (Op32,AddrNothing),
                               Code (0xf,0x8e),
                               make_imm (imm));
}
/*  7C     cb   | Jump short if not greater or equal (SF≠ OF). */
inline int jnge (code_ptr p,rel8_t imm)
{
    return encode_instruction (p,
                               Prefix (OpNothing,AddrNothing),
                               Code (0x7c),
                               make_imm (imm));
}
/*  0F 8C     cw op16  | Jump near if not greater or equal (SF≠ OF). Not supported in 64-bit mode. */
inline int jnge (code_ptr p,
          rel16_t imm)
{
    return encode_instruction (p,
                               Prefix (Op16,AddrNothing),
                               Code (0xf,0x8c),
                               make_imm (imm));
}
/*  0F 8C     cd op32  | Jump near if not greater or equal (SF≠ OF). */
inline int jnge (code_ptr p,
          rel32_t imm)
{
    return encode_instruction (p,
                               Prefix (Op32,AddrNothing),
                               Code (0xf,0x8c),
                               make_imm (imm));
}
/*  7D     cb   | Jump short if not less (SF=OF). */
inline int jnl (code_ptr p,rel8_t imm)
{
    return encode_instruction (p,
                               Prefix (OpNothing,AddrNothing),
                               Code (0x7d),
                               make_imm (imm));
}
/*  0F 8D     cw op16  | Jump near if not less (SF=OF). Not supported in 64-bit mode. */
inline int jnl (code_ptr p,rel16_t imm)
{
    return encode_instruction (p,
                               Prefix (Op16,AddrNothing),
                               Code (0xf,0x8d),
                               make_imm (imm));
}
/*  0F 8D     cd op32  | Jump near if not less (SF=OF). */
inline int jnl (code_ptr p,rel32_t imm)
{
    return encode_instruction (p,
                               Prefix (Op32,AddrNothing),
                               Code (0xf,0x8d),
                               make_imm (imm));
}
/*  7F     cb   | Jump short if not less or equal (ZF=0 and SF=OF). */
inline int jnle (code_ptr p,rel8_t imm)
{
    return encode_instruction (p,
                               Prefix (OpNothing,AddrNothing),
                               Code (0x7f),
                               make_imm (imm));
}
/*  0F 8F     cw op16  | Jump near if not less or equal (ZF=0 and SF=OF). Not supported in 64-bit mode. */
inline int jnle (code_ptr p,
          rel16_t imm)
{
    return encode_instruction (p,
                               Prefix (Op16,AddrNothing),
                               Code (0xf,0x8f),
                               make_imm (imm));
}
/*  0F 8F     cd op32  | Jump near if not less or equal (ZF=0 and SF=OF). */
inline int jnle (code_ptr p,
          rel32_t imm)
{
    return encode_instruction (p,
                               Prefix (Op32,AddrNothing),
                               Code (0xf,0x8f),
                               make_imm (imm));
}
/*  71     cb   | Jump short if not overflow (OF=0). */
inline int jno (code_ptr p,rel8_t imm)
{
    return encode_instruction (p,
                               Prefix (OpNothing,AddrNothing),
                               Code (0x71),
                               make_imm (imm));
}
/*  0F 81     cw op16  | Jump near if not overflow (OF=0). Not supported in 64-bit mode. */
inline int jno (code_ptr p,rel16_t imm)
{
    return encode_instruction (p,
                               Prefix (Op16,AddrNothing),
                               Code (0xf,0x81),
                               make_imm (imm));
}
/*  0F 81     cd op32  | Jump near if not overflow (OF=0). */
inline int jno (code_ptr p,rel32_t imm)
{
    return encode_instruction (p,
                               Prefix (Op32,AddrNothing),
                               Code (0xf,0x81),
                               make_imm (imm));
}
/*  7B     cb   | Jump short if not parity (PF=0). */
inline int jnp (code_ptr p,rel8_t imm)
{
    return encode_instruction (p,
                               Prefix (OpNothing,AddrNothing),
                               Code (0x7b),
                               make_imm (imm));
}
/*  0F 8B     cw op16  | Jump near if not parity (PF=0). Not supported in 64- bit mode. */
inline int jnp (code_ptr p,rel16_t imm)
{
    return encode_instruction (p,
                               Prefix (Op16,AddrNothing),
                               Code (0xf,0x8b),
                               make_imm (imm));
}
/*  0F 8B     cd op32  | Jump near if not parity (PF=0). */
inline int jnp (code_ptr p,rel32_t imm)
{
    return encode_instruction (p,
                               Prefix (Op32,AddrNothing),
                               Code (0xf,0x8b),
                               make_imm (imm));
}
/*  79     cb   | Jump short if not sign (SF=0). */
inline int jns (code_ptr p,rel8_t imm)
{
    return encode_instruction (p,
                               Prefix (OpNothing,AddrNothing),
                               Code (0x79),
                               make_imm (imm));
}
/*  0F 89     cw op16  | Jump near if not sign (SF=0). Not supported in 64-bit mode. */
inline int jns (code_ptr p,rel16_t imm)
{
    return encode_instruction (p,
                               Prefix (Op16,AddrNothing),
                               Code (0xf,0x89),
                               make_imm (imm));
}
/*  0F 89     cd op32  | Jump near if not sign (SF=0). */
inline int jns (code_ptr p,rel32_t imm)
{
    return encode_instruction (p,
                               Prefix (Op32,AddrNothing),
                               Code (0xf,0x89),
                               make_imm (imm));
}
/*  75     cb   | Jump short if not zero (ZF=0). */
inline int jnz (code_ptr p,rel8_t imm)
{
    return encode_instruction (p,
                               Prefix (OpNothing,AddrNothing),
                               Code (0x75),
                               make_imm (imm));
}
/*  0F 85     cw op16  | Jump near if not zero (ZF=0). Not supported in 64-bit mode. */
inline int jnz (code_ptr p,rel16_t imm)
{
    return encode_instruction (p,
                               Prefix (Op16,AddrNothing),
                               Code (0xf,0x85),
                               make_imm (imm));
}
/*  0F 85     cd op32  | Jump near if not zero (ZF=0). */
inline int jnz (code_ptr p,rel32_t imm)
{
    return encode_instruction (p,
                               Prefix (Op32,AddrNothing),
                               Code (0xf,0x85),
                               make_imm (imm));
}
/*  70     cb   | Jump short if overflow (OF=1). */
inline int jo (code_ptr p,rel8_t imm)
{
    return encode_instruction (p,
                               Prefix (OpNothing,AddrNothing),
                               Code (0x70),
                               make_imm (imm));
}
/*  0F 80     cw op16  | Jump near if overflow (OF=1). Not supported in 64-bit mode. */
inline int jo (code_ptr p,rel16_t imm)
{
    return encode_instruction (p,
                               Prefix (Op16,AddrNothing),
                               Code (0xf,0x80),
                               make_imm (imm));
}
/*  0F 80     cd op32  | Jump near if overflow (OF=1). */
inline int jo (code_ptr p,rel32_t imm)
{
    return encode_instruction (p,
                               Prefix (Op32,AddrNothing),
                               Code (0xf,0x80),
                               make_imm (imm));
}
/*  7A     cb   | Jump short if parity (PF=1). */
inline int jp (code_ptr p,rel8_t imm)
{
    return encode_instruction (p,
                               Prefix (OpNothing,AddrNothing),
                               Code (0x7a),
                               make_imm (imm));
}
/*  0F 8A     cw op16  | Jump near if parity (PF=1). Not supported in 64-bit mode. */
inline int jp (code_ptr p,rel16_t imm)
{
    return encode_instruction (p,
                               Prefix (Op16,AddrNothing),
                               Code (0xf,0x8a),
                               make_imm (imm));
}
/*  0F 8A     cd op32  | Jump near if parity (PF=1). */
inline int jp (code_ptr p,rel32_t imm)
{
    return encode_instruction (p,
                               Prefix (Op32,AddrNothing),
                               Code (0xf,0x8a),
                               make_imm (imm));
}
/*  7A     cb   | Jump short if parity even (PF=1). */
inline int jpe (code_ptr p,rel8_t imm)
{
    return encode_instruction (p,
                               Prefix (OpNothing,AddrNothing),
                               Code (0x7a),
                               make_imm (imm));
}
/*  0F 8A     cw op16  | Jump near if parity even (PF=1). Not supported in 64- bit mode. */
inline int jpe (code_ptr p,rel16_t imm)
{
    return encode_instruction (p,
                               Prefix (Op16,AddrNothing),
                               Code (0xf,0x8a),
                               make_imm (imm));
}
/*  0F 8A     cd op32  | Jump near if parity even (PF=1). */
inline int jpe (code_ptr p,rel32_t imm)
{
    return encode_instruction (p,
                               Prefix (Op32,AddrNothing),
                               Code (0xf,0x8a),
                               make_imm (imm));
}
/*  7B     cb   | Jump short if parity odd (PF=0). */
inline int jpo (code_ptr p,rel8_t imm)
{
    return encode_instruction (p,
                               Prefix (OpNothing,AddrNothing),
                               Code (0x7b),
                               make_imm (imm));
}
/*  0F 8B     cw op16  | Jump near if parity odd (PF=0). Not supported in 64- bit mode. */
inline int jpo (code_ptr p,rel16_t imm)
{
    return encode_instruction (p,
                               Prefix (Op16,AddrNothing),
                               Code (0xf,0x8b),
                               make_imm (imm));
}
/*  0F 8B     cd op32  | Jump near if parity odd (PF=0). */
inline int jpo (code_ptr p,rel32_t imm)
{
    return encode_instruction (p,
                               Prefix (Op32,AddrNothing),
                               Code (0xf,0x8b),
                               make_imm (imm));
}
/*  78     cb   | Jump short if sign (SF=1). */
inline int js (code_ptr p,rel8_t imm)
{
    return encode_instruction (p,
                               Prefix (OpNothing,AddrNothing),
                               Code (0x78),
                               make_imm (imm));
}
/*  0F 88     cw op16  | Jump near if sign (SF=1). Not supported in 64-bit mode. */
inline int js (code_ptr p,rel16_t imm)
{
    return encode_instruction (p,
                               Prefix (Op16,AddrNothing),
                               Code (0xf,0x88),
                               make_imm (imm));
}
/*  0F 88     cd op32  | Jump near if sign (SF=1). */
inline int js (code_ptr p,rel32_t imm)
{
    return encode_instruction (p,
                               Prefix (Op32,AddrNothing),
                               Code (0xf,0x88),
                               make_imm (imm));
}
/*  74     cb   | Jump short if zero (ZF ← 1). */
inline int jz (code_ptr p,rel8_t imm)
{
    return encode_instruction (p,
                               Prefix (OpNothing,AddrNothing),
                               Code (0x74),
                               make_imm (imm));
}
/*  0F 84     cw op16  | Jump near if 0 (ZF=1). Not supported in 64-bit mode. */
inline int jz (code_ptr p,rel16_t imm)
{
    return encode_instruction (p,
                               Prefix (Op16,AddrNothing),
                               Code (0xf,0x84),
                               make_imm (imm));
}
/*  0F 84     cd op32  | Jump near if 0 (ZF=1). */
inline int jz (code_ptr p,rel32_t imm)
{
    return encode_instruction (p,
                               Prefix (Op32,AddrNothing),
                               Code (0xf,0x84),
                               make_imm (imm));
}
/*  9F        | Load: AH ← EFLAGS(SF:ZF:0:AF:0:PF:1:CF). */
inline int lahf (code_ptr p)
{
    return encode_instruction (p,
                               Prefix (OpNothing,AddrNothing),
                               Code (0x9f));
}
/*  0F 02  /r RMBoth   op16  | r16 ← r16/m16 masked by FF00H. */
inline int lar (code_ptr p,
         const WordReg (&   modrm_reg),
         const WordReg (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (Op16,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x2),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/*  0F 02  /r RMBoth   op16  | r16 ← r16/m16 masked by FF00H. */
inline int lar (code_ptr p,
         const WordReg (&   modrm_reg),
         const WordPtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (Op16,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x2),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/*  0F 02  /r RMBoth   op32  | r32 ← r32/m16 masked by 00FxFF00H */
inline int lar (code_ptr p,
         const DwordReg (&   modrm_reg),
         const DwordReg (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (Op32,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x2),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/*  0F 02  /r RMBoth   op32  | r32 ← r32/m16 masked by 00FxFF00H */
inline int lar (code_ptr p,
         const DwordReg (&   modrm_reg),
         const WordPtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (Op32,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x2),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/* F2 0F F0  /r RMMemOnly     | Load unaligned data from mem and return double quadword in xmm1. */
inline int lddqu (code_ptr p,
           const XmmReg (&   modrm_reg),
           const VoidPtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm,
                                       Prefix_REPNE),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0xf0),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/*  0F AE  /2 RMMemOnly     | Load MXCSR register from m32. */
inline int ldmxcsr (code_ptr p,
             const DwordPtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm)),
                               Code (0xf,0xae),
                               make_modrm (modrm_rm,2));
}
/*  C5  /r RMMemOnly   op16  | Load DS:r16 with far pointer from memory. */
inline int lds (code_ptr p,
         const WordReg (&   modrm_reg),
         const Far16Ptr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (Op16,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xc5),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/*  C5  /r RMMemOnly   op32  | Load DS:r32 with far pointer from memory. */
inline int lds (code_ptr p,
         const DwordReg (&   modrm_reg),
         const Far32Ptr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (Op32,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xc5),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/*  8D  /r RMMemOnly   op16  | Store effective address for m in register r16. */
inline int lea (code_ptr p,
         const WordReg (&   modrm_reg),
         const VoidPtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (Op16,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0x8d),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/*  8D  /r RMMemOnly   op32  | Store effective address for m in register r32. */
inline int lea (code_ptr p,
         const DwordReg (&   modrm_reg),
         const VoidPtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (Op32,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0x8d),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/*  C9      op32  | Set ESP to EBP, then pop EBP. */
inline int leave (code_ptr p)
{
    return encode_instruction (p,
                               Prefix (Op32,AddrNothing),
                               Code (0xc9));
}
/*  C9      op16  | Set SP to BP, then pop BP. */
inline int leavew (code_ptr p)
{
    return encode_instruction (p,
                               Prefix (Op16,AddrNothing),
                               Code (0xc9));
}
/*  C4  /r RMMemOnly   op16  | Load ES:r16 with far pointer from memory. */
inline int les (code_ptr p,
         const WordReg (&   modrm_reg),
         const Far16Ptr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (Op16,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xc4),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/*  C4  /r RMMemOnly   op32  | Load ES:r32 with far pointer from memory. */
inline int les (code_ptr p,
         const DwordReg (&   modrm_reg),
         const Far32Ptr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (Op32,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xc4),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/*  0F AE  /5 RMRegOnly     | Serializes load operations. */
inline int lfence (code_ptr p)
{
    return encode_instruction (p,
                               Prefix (OpNothing,AddrNothing),
                               Code (0xf,0xae),
                               make_modrm (rax,5));
}
/*  0F B4  /r RMMemOnly   op16  | Load FS:r16 with far pointer from memory. */
inline int lfs (code_ptr p,
         const WordReg (&   modrm_reg),
         const Far16Ptr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (Op16,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0xb4),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/*  0F B4  /r RMMemOnly   op32  | Load FS:r32 with far pointer from memory. */
inline int lfs (code_ptr p,
         const DwordReg (&   modrm_reg),
         const Far32Ptr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (Op32,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0xb4),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/*  0F 01  /2 RMMemOnly     | Load m into GDTR. */
inline int lgdt (code_ptr p,
          const FwordPtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm)),
                               Code (0xf,0x1),
                               make_modrm (modrm_rm,2));
}
/*  0F B5  /r RMMemOnly   op16  | Load GS:r16 with far pointer from memory. */
inline int lgs (code_ptr p,
         const WordReg (&   modrm_reg),
         const Far16Ptr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (Op16,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0xb5),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/*  0F B5  /r RMMemOnly   op32  | Load GS:r32 with far pointer from memory. */
inline int lgs (code_ptr p,
         const DwordReg (&   modrm_reg),
         const Far32Ptr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (Op32,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0xb5),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/*  0F 01  /3 RMMemOnly     | Load m into IDTR. */
inline int lidt (code_ptr p,
          const FwordPtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm)),
                               Code (0xf,0x1),
                               make_modrm (modrm_rm,3));
}
/*  0F 00  /2 RMBoth     | Load segment selector r/m16 into LDTR. */
inline int lldt (code_ptr p,
          const WordReg (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm)),
                               Code (0xf,0x0),
                               make_modrm (modrm_rm,2));
}
/*  0F 00  /2 RMBoth     | Load segment selector r/m16 into LDTR. */
inline int lldt (code_ptr p,
          const WordPtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm)),
                               Code (0xf,0x0),
                               make_modrm (modrm_rm,2));
}
/*  0F 01  /6 RMBoth     | Loads r/m16 in machine status word of CR0. */
inline int lmsw (code_ptr p,
          const WordReg (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm)),
                               Code (0xf,0x1),
                               make_modrm (modrm_rm,6));
}
/*  0F 01  /6 RMBoth     | Loads r/m16 in machine status word of CR0. */
inline int lmsw (code_ptr p,
          const WordPtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm)),
                               Code (0xf,0x1),
                               make_modrm (modrm_rm,6));
}
/*  AC        | For legacy mode, Load byte at address DS:(E)SI into AL. For 64-bit mode load byte at address (R)SI into AL. */
inline int lods (code_ptr p,
          const BytePtr_ESI (&   ptr))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       Addr32,
                                       ptr.get_segment ()),
                               Code (0xac));
}
/*  AC        | For legacy mode, Load byte at address DS:(E)SI into AL. For 64-bit mode load byte at address (R)SI into AL. */
inline int lods (code_ptr p,
          const RegAL (&   unused),
          const BytePtr_ESI (&   ptr))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       Addr32,
                                       ptr.get_segment ()),
                               Code (0xac));
}
/*  AC        | For legacy mode, Load byte at address DS:(E)SI into AL. For 64-bit mode load byte at address (R)SI into AL. */
inline int lods (code_ptr p,
          const BytePtr_SI (&   ptr))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       Addr16,
                                       ptr.get_segment ()),
                               Code (0xac));
}
/*  AC        | For legacy mode, Load byte at address DS:(E)SI into AL. For 64-bit mode load byte at address (R)SI into AL. */
inline int lods (code_ptr p,
          const RegAL (&   unused),
          const BytePtr_SI (&   ptr))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       Addr16,
                                       ptr.get_segment ()),
                               Code (0xac));
}
/*  AD      op16  | For legacy mode, Load word at address DS:(E)SI into AX. For 64-bit mode load word at address (R)SI into AX. */
inline int lods (code_ptr p,
          const WordPtr_ESI (&   ptr))
{
    return encode_instruction (p,
                               Prefix (Op16,
                                       Addr32,
                                       ptr.get_segment ()),
                               Code (0xad));
}
/*  AD      op16  | For legacy mode, Load word at address DS:(E)SI into AX. For 64-bit mode load word at address (R)SI into AX. */
inline int lods (code_ptr p,
          const RegAX (&   unused),
          const WordPtr_ESI (&   ptr))
{
    return encode_instruction (p,
                               Prefix (Op16,
                                       Addr32,
                                       ptr.get_segment ()),
                               Code (0xad));
}
/*  AD      op16  | For legacy mode, Load word at address DS:(E)SI into AX. For 64-bit mode load word at address (R)SI into AX. */
inline int lods (code_ptr p,
          const WordPtr_SI (&   ptr))
{
    return encode_instruction (p,
                               Prefix (Op16,
                                       Addr16,
                                       ptr.get_segment ()),
                               Code (0xad));
}
/*  AD      op16  | For legacy mode, Load word at address DS:(E)SI into AX. For 64-bit mode load word at address (R)SI into AX. */
inline int lods (code_ptr p,
          const RegAX (&   unused),
          const WordPtr_SI (&   ptr))
{
    return encode_instruction (p,
                               Prefix (Op16,
                                       Addr16,
                                       ptr.get_segment ()),
                               Code (0xad));
}
/*  AD      op32  | For legacy mode, Load dword at address DS:(E)SI into EAX. For 64-bit mode load dword at address (R)SI into EAX. */
inline int lods (code_ptr p,
          const DwordPtr_ESI (&   ptr))
{
    return encode_instruction (p,
                               Prefix (Op32,
                                       Addr32,
                                       ptr.get_segment ()),
                               Code (0xad));
}
/*  AD      op32  | For legacy mode, Load dword at address DS:(E)SI into EAX. For 64-bit mode load dword at address (R)SI into EAX. */
inline int lods (code_ptr p,
          const RegEAX (&   unused),
          const DwordPtr_ESI (&   ptr))
{
    return encode_instruction (p,
                               Prefix (Op32,
                                       Addr32,
                                       ptr.get_segment ()),
                               Code (0xad));
}
/*  AD      op32  | For legacy mode, Load dword at address DS:(E)SI into EAX. For 64-bit mode load dword at address (R)SI into EAX. */
inline int lods (code_ptr p,
          const DwordPtr_SI (&   ptr))
{
    return encode_instruction (p,
                               Prefix (Op32,
                                       Addr16,
                                       ptr.get_segment ()),
                               Code (0xad));
}
/*  AD      op32  | For legacy mode, Load dword at address DS:(E)SI into EAX. For 64-bit mode load dword at address (R)SI into EAX. */
inline int lods (code_ptr p,
          const RegEAX (&   unused),
          const DwordPtr_SI (&   ptr))
{
    return encode_instruction (p,
                               Prefix (Op32,
                                       Addr16,
                                       ptr.get_segment ()),
                               Code (0xad));
}
/*  AC        | For legacy mode, Load byte at address DS:(E)SI into AL. For 64-bit mode load byte at address (R)SI into AL. */
inline int lodsb (code_ptr p)
{
    return encode_instruction (p,
                               Prefix (OpNothing,AddrNothing),
                               Code (0xac));
}
/*  AD      op32  | For legacy mode, Load dword at address DS:(E)SI into EAX. For 64-bit mode load dword at address (R)SI into EAX. */
inline int lodsd (code_ptr p)
{
    return encode_instruction (p,
                               Prefix (Op32,AddrNothing),
                               Code (0xad));
}
/*  AD      op16  | For legacy mode, Load word at address DS:(E)SI into AX. For 64-bit mode load word at address (R)SI into AX. */
inline int lodsw (code_ptr p)
{
    return encode_instruction (p,
                               Prefix (Op16,AddrNothing),
                               Code (0xad));
}
/*  E2     cb   | Decrement count; jump short if count ≠ 0. */
inline int loop (code_ptr p,rel8_t imm)
{
    return encode_instruction (p,
                               Prefix (OpNothing,AddrNothing),
                               Code (0xe2),
                               make_imm (imm));
}
/*  E1     cb   | Decrement count; jump short if count ≠ 0 and ZF = 1. */
inline int loope (code_ptr p,
           rel8_t imm)
{
    return encode_instruction (p,
                               Prefix (OpNothing,AddrNothing),
                               Code (0xe1),
                               make_imm (imm));
}
/*  E0     cb   | Decrement count; jump short if count ≠ 0 and ZF = 0. */
inline int loopne (code_ptr p,
            rel8_t imm)
{
    return encode_instruction (p,
                               Prefix (OpNothing,AddrNothing),
                               Code (0xe0),
                               make_imm (imm));
}
/*  0F 03  /r RMBoth   op16  | Load: r16 ← segment limit, selector r16/m16. */
inline int lsl (code_ptr p,
         const WordReg (&   modrm_reg),
         const WordReg (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (Op16,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x3),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/*  0F 03  /r RMBoth   op16  | Load: r16 ← segment limit, selector r16/m16. */
inline int lsl (code_ptr p,
         const WordReg (&   modrm_reg),
         const WordPtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (Op16,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x3),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/*  0F 03  /r RMBoth   op32  | Load: r32 ← segment limit, selector r32/m16. */
inline int lsl (code_ptr p,
         const DwordReg (&   modrm_reg),
         const DwordReg (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (Op32,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x3),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/*  0F 03  /r RMBoth   op32  | Load: r32 ← segment limit, selector r32/m16. */
inline int lsl (code_ptr p,
         const DwordReg (&   modrm_reg),
         const WordPtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (Op32,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x3),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/*  0F B2  /r RMMemOnly   op16  | Load SS:r16 with far pointer from memory. */
inline int lss (code_ptr p,
         const WordReg (&   modrm_reg),
         const Far16Ptr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (Op16,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0xb2),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/*  0F B2  /r RMMemOnly   op32  | Load SS:r32 with far pointer from memory. */
inline int lss (code_ptr p,
         const DwordReg (&   modrm_reg),
         const Far32Ptr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (Op32,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0xb2),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/*  0F 00  /3 RMBoth     | Load r/m16 into task register. */
inline int ltr (code_ptr p,
         const WordReg (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm)),
                               Code (0xf,0x0),
                               make_modrm (modrm_rm,3));
}
/*  0F 00  /3 RMBoth     | Load r/m16 into task register. */
inline int ltr (code_ptr p,
         const WordPtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm)),
                               Code (0xf,0x0),
                               make_modrm (modrm_rm,3));
}
/* 66 0F F7  /r RMRegOnly     | Selectively write bytes from xmm1 to memory location using the byte mask in xmm2. The default memory location is specified by DS:EDI. */
inline int maskmovdqu (code_ptr p,
                const XmmReg (&   modrm_reg),
                const XmmReg (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm,
                                       Prefix_OPERAND_SIZE),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0xf7),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/*  0F F7  /r RMRegOnly     | Selectively write bytes from mm1 to memory location using the byte mask in mm2. The default memory location is specified by DS:EDI. */
inline int maskmovq (code_ptr p,
              const MmReg (&   modrm_reg),
              const MmReg (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0xf7),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/* 66 0F 5F  /r RMBoth     | Return the maximum double-precision floating- point values between xmm2/m128 and xmm1. */
inline int maxpd (code_ptr p,
           const XmmReg (&   modrm_reg),
           const XmmReg (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm,
                                       Prefix_OPERAND_SIZE),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x5f),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/* 66 0F 5F  /r RMBoth     | Return the maximum double-precision floating- point values between xmm2/m128 and xmm1. */
inline int maxpd (code_ptr p,
           const XmmReg (&   modrm_reg),
           const XmmWordPtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm,
                                       Prefix_OPERAND_SIZE),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x5f),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/*  0F 5F  /r RMBoth     | Return the maximum single- precision floating-point values between xmm2/m128 and xmm1. */
inline int maxps (code_ptr p,
           const XmmReg (&   modrm_reg),
           const XmmReg (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x5f),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/*  0F 5F  /r RMBoth     | Return the maximum single- precision floating-point values between xmm2/m128 and xmm1. */
inline int maxps (code_ptr p,
           const XmmReg (&   modrm_reg),
           const XmmWordPtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x5f),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/* F2 0F 5F  /r RMBoth     | Return the maximum scalar double-precision floating- point value between xmm2/mem64 and xmm1. */
inline int maxsd (code_ptr p,
           const XmmReg (&   modrm_reg),
           const XmmReg (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm,
                                       Prefix_REPNE),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x5f),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/* F2 0F 5F  /r RMBoth     | Return the maximum scalar double-precision floating- point value between xmm2/mem64 and xmm1. */
inline int maxsd (code_ptr p,
           const XmmReg (&   modrm_reg),
           const QwordPtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm,
                                       Prefix_REPNE),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x5f),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/* F3 0F 5F  /r RMBoth     | Return the maximum scalar single-precision floating- point value between xmm2/mem32 and xmm1. */
inline int maxss (code_ptr p,
           const XmmReg (&   modrm_reg),
           const XmmReg (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm,
                                       Prefix_REP),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x5f),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/* F3 0F 5F  /r RMBoth     | Return the maximum scalar single-precision floating- point value between xmm2/mem32 and xmm1. */
inline int maxss (code_ptr p,
           const XmmReg (&   modrm_reg),
           const DwordPtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm,
                                       Prefix_REP),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x5f),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/*  0F AE  /6 RMRegOnly     | Serializes load and store operations. */
inline int mfence (code_ptr p)
{
    return encode_instruction (p,
                               Prefix (OpNothing,AddrNothing),
                               Code (0xf,0xae),
                               make_modrm (rax,6));
}
/* 66 0F 5D  /r RMBoth     | Return the minimum double- precision floating-point values between xmm2/m128 and xmm1. */
inline int minpd (code_ptr p,
           const XmmReg (&   modrm_reg),
           const XmmReg (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm,
                                       Prefix_OPERAND_SIZE),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x5d),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/* 66 0F 5D  /r RMBoth     | Return the minimum double- precision floating-point values between xmm2/m128 and xmm1. */
inline int minpd (code_ptr p,
           const XmmReg (&   modrm_reg),
           const XmmWordPtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm,
                                       Prefix_OPERAND_SIZE),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x5d),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/*  0F 5D  /r RMBoth     | Return the minimum single- precision floating-point values between xmm2/m128 and xmm1. */
inline int minps (code_ptr p,
           const XmmReg (&   modrm_reg),
           const XmmReg (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x5d),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/*  0F 5D  /r RMBoth     | Return the minimum single- precision floating-point values between xmm2/m128 and xmm1. */
inline int minps (code_ptr p,
           const XmmReg (&   modrm_reg),
           const XmmWordPtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x5d),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/* F2 0F 5D  /r RMBoth     | Return the minimum scalar double-precision floating- point value between xmm2/mem64 and xmm1. */
inline int minsd (code_ptr p,
           const XmmReg (&   modrm_reg),
           const XmmReg (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm,
                                       Prefix_REPNE),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x5d),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/* F2 0F 5D  /r RMBoth     | Return the minimum scalar double-precision floating- point value between xmm2/mem64 and xmm1. */
inline int minsd (code_ptr p,
           const XmmReg (&   modrm_reg),
           const QwordPtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm,
                                       Prefix_REPNE),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x5d),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/* F3 0F 5D  /r RMBoth     | Return the minimum scalar single-precision floating- point value between xmm2/mem32 and xmm1. */
inline int minss (code_ptr p,
           const XmmReg (&   modrm_reg),
           const XmmReg (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm,
                                       Prefix_REP),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x5d),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/* F3 0F 5D  /r RMBoth     | Return the minimum scalar single-precision floating- point value between xmm2/mem32 and xmm1. */
inline int minss (code_ptr p,
           const XmmReg (&   modrm_reg),
           const DwordPtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm,
                                       Prefix_REP),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x5d),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/*  0F 01 C8        | Sets up a linear address range to be monitored by hardware and activates the monitor. The address range should be a write-back memory caching type. The address is DS:EAX (DS:RAX in 64-bit mode). */
inline int monitor (code_ptr p)
{
    return encode_instruction (p,
                               Prefix (OpNothing,AddrNothing),
                               Code (0xf,0x1,0xc8));
}
/*  8B  /r RMBoth   op32  | Move r/m32 to r32. */
inline int mov (code_ptr p,
         const DwordReg (&   modrm_reg),
         const DwordReg (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (Op32,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0x8b),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/*  8B  /r RMBoth   op32  | Move r/m32 to r32. */
inline int mov (code_ptr p,
         const DwordReg (&   modrm_reg),
         const DwordPtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (Op32,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0x8b),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/*  89  /r RMBoth   op32  | Move r32 to r/m32. */
inline int mov (code_ptr p,
         const DwordPtr (&   modrm_rm),
         const DwordReg (&   modrm_reg))
{
    return encode_instruction (p,
                               Prefix (Op32,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0x89),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/*  B8    +rd id op32  | Move imm32 to r32. */
inline int mov (code_ptr p,
         const DwordReg (&   radd),
         imm32_t imm)
{
    return encode_instruction (p,
                               Prefix (Op32,AddrNothing),
                               rexByte (rex_regadd (RegAdd (radd))),
                               Code (0xb8,RegAdd (radd)),
                               make_imm (imm));
}
/*  C7  /0 RMBoth  id op32  | Move imm32 to r/m32. */
inline int mov (code_ptr p,
         const DwordPtr (&   modrm_rm),
         imm32_t imm)
{
    return encode_instruction (p,
                               Prefix (Op32,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm)),
                               Code (0xc7),
                               make_modrm (modrm_rm,0),
                               make_imm (imm));
}
/*  8B  /r RMBoth   op16  | Move r/m16 to r16. */
inline int mov (code_ptr p,
         const WordReg (&   modrm_reg),
         const WordReg (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (Op16,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0x8b),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/*  8B  /r RMBoth   op16  | Move r/m16 to r16. */
inline int mov (code_ptr p,
         const WordReg (&   modrm_reg),
         const WordPtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (Op16,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0x8b),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/*  89  /r RMBoth   op16  | Move r16 to r/m16. */
inline int mov (code_ptr p,
         const WordPtr (&   modrm_rm),
         const WordReg (&   modrm_reg))
{
    return encode_instruction (p,
                               Prefix (Op16,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0x89),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/*  B8    +rw iw op16  | Move imm16 to r16. */
inline int mov (code_ptr p,
         const WordReg (&   radd),
         imm16_t imm)
{
    return encode_instruction (p,
                               Prefix (Op16,AddrNothing),
                               rexByte (rex_regadd (RegAdd (radd))),
                               Code (0xb8,RegAdd (radd)),
                               make_imm (imm));
}
/*  C7  /0 RMBoth  iw op16  | Move imm16 to r/m16. */
inline int mov (code_ptr p,
         const WordPtr (&   modrm_rm),
         imm16_t imm)
{
    return encode_instruction (p,
                               Prefix (Op16,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm)),
                               Code (0xc7),
                               make_modrm (modrm_rm,0),
                               make_imm (imm));
}
/*  8A  /r RMBoth     | Move r/m8 to r8. */
inline int mov (code_ptr p,
         const ByteReg (&   modrm_reg),
         const ByteReg (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0x8a),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/*  8A  /r RMBoth     | Move r/m8 to r8. */
inline int mov (code_ptr p,
         const ByteReg (&   modrm_reg),
         const BytePtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0x8a),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/*  88  /r RMBoth     | Move r8 to r/m8. */
inline int mov (code_ptr p,
         const BytePtr (&   modrm_rm),
         const ByteReg (&   modrm_reg))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0x88),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/*  B0    +rb ib   | Move imm8 to r8. */
inline int mov (code_ptr p,
         const ByteReg (&   radd),
         imm8_t imm)
{
    return encode_instruction (p,
                               Prefix (OpNothing,AddrNothing),
                               rexByte (rex_regadd (RegAdd (radd))),
                               Code (0xb0,RegAdd (radd)),
                               make_imm (imm));
}
/*  C6  /0 RMBoth  ib   | Move imm8 to r/m8. */
inline int mov (code_ptr p,
         const BytePtr (&   modrm_rm),
         imm8_t imm)
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm)),
                               Code (0xc6),
                               make_modrm (modrm_rm,0),
                               make_imm (imm));
}
/*  0F 20  /r RMRegOnly     | Move control register to r32 */
inline int mov (code_ptr p,
         const DwordReg (&   modrm_rm),
         const CrReg (&   modrm_reg))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x20),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/*  0F 21  /r RMRegOnly     | Move debug register to r32 */
inline int mov (code_ptr p,
         const DwordReg (&   modrm_rm),
         const DrReg (&   modrm_reg))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x21),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/*  0F 22  /r RMRegOnly     | Move r32 to control register */
inline int mov (code_ptr p,
         const CrReg (&   modrm_reg),
         const DwordReg (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x22),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/*  0F 23  /r RMRegOnly     | Move r32 to debug register */
inline int mov (code_ptr p,
         const DrReg (&   modrm_reg),
         const DwordReg (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x23),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/*  8E  /r RMBoth     | Move r/m16 to segment register. */
inline int mov (code_ptr p,
         const SegReg (&   modrm_reg),
         const WordReg (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0x8e),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/*  8E  /r RMBoth     | Move r/m16 to segment register. */
inline int mov (code_ptr p,
         const SegReg (&   modrm_reg),
         const WordPtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0x8e),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/*  A0        | Move byte at (seg:offset) to AL. */
inline int mov (code_ptr p,
         const RegAL (&   unused),
         const ByteOffset16 (&   offset))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       Addr16,
                                       offset),
                               Code (0xa0),
                               offset);
}
/*  A0        | Move byte at (seg:offset) to AL. */
inline int mov (code_ptr p,
         const RegAL (&   unused),
         const ByteOffset32 (&   offset))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       Addr32,
                                       offset),
                               Code (0xa0),
                               offset);
}
/*  A1      op16  | Move word at (seg:offset) to AX. */
inline int mov (code_ptr p,
         const RegAX (&   unused),
         const WordOffset16 (&   offset))
{
    return encode_instruction (p,
                               Prefix (Op16,Addr16,offset),
                               Code (0xa1),
                               offset);
}
/*  A1      op16  | Move word at (seg:offset) to AX. */
inline int mov (code_ptr p,
         const RegAX (&   unused),
         const WordOffset32 (&   offset))
{
    return encode_instruction (p,
                               Prefix (Op16,Addr32,offset),
                               Code (0xa1),
                               offset);
}
/*  A1      op32  | Move doubleword at (seg:offset) to EAX. */
inline int mov (code_ptr p,
         const RegEAX (&   unused),
         const DwordOffset16 (&   offset))
{
    return encode_instruction (p,
                               Prefix (Op32,Addr16,offset),
                               Code (0xa1),
                               offset);
}
/*  A1      op32  | Move doubleword at (seg:offset) to EAX. */
inline int mov (code_ptr p,
         const RegEAX (&   unused),
         const DwordOffset32 (&   offset))
{
    return encode_instruction (p,
                               Prefix (Op32,Addr32,offset),
                               Code (0xa1),
                               offset);
}
/*  8C  /r RMBoth     | Move segment register to r/m16. */
inline int mov (code_ptr p,
         const WordReg (&   modrm_rm),
         const SegReg (&   modrm_reg))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0x8c),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/*  8C  /r RMBoth     | Move segment register to r/m16. */
inline int mov (code_ptr p,
         const WordPtr (&   modrm_rm),
         const SegReg (&   modrm_reg))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0x8c),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/*  A2        | Move AL to (seg:offset). */
inline int mov (code_ptr p,
         const ByteOffset16 (&   offset),
         const RegAL (&   unused))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       Addr16,
                                       offset),
                               Code (0xa2),
                               offset);
}
/*  A2        | Move AL to (seg:offset). */
inline int mov (code_ptr p,
         const ByteOffset32 (&   offset),
         const RegAL (&   unused))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       Addr32,
                                       offset),
                               Code (0xa2),
                               offset);
}
/*  A3      op16  | Move AX to (seg:offset). */
inline int mov (code_ptr p,
         const WordOffset16 (&   offset),
         const RegAX (&   unused))
{
    return encode_instruction (p,
                               Prefix (Op16,Addr16,offset),
                               Code (0xa3),
                               offset);
}
/*  A3      op16  | Move AX to (seg:offset). */
inline int mov (code_ptr p,
         const WordOffset32 (&   offset),
         const RegAX (&   unused))
{
    return encode_instruction (p,
                               Prefix (Op16,Addr32,offset),
                               Code (0xa3),
                               offset);
}
/*  A3      op32  | Move EAX to (seg:offset). */
inline int mov (code_ptr p,
         const DwordOffset16 (&   offset),
         const RegEAX (&   unused))
{
    return encode_instruction (p,
                               Prefix (Op32,Addr16,offset),
                               Code (0xa3),
                               offset);
}
/*  A3      op32  | Move EAX to (seg:offset). */
inline int mov (code_ptr p,
         const DwordOffset32 (&   offset),
         const RegEAX (&   unused))
{
    return encode_instruction (p,
                               Prefix (Op32,Addr32,offset),
                               Code (0xa3),
                               offset);
}
/* 66 0F 28  /r RMBoth     | Move packed double- precision floating-point values from xmm2/m128 to xmm1. */
inline int movapd (code_ptr p,
            const XmmReg (&   modrm_reg),
            const XmmReg (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm,
                                       Prefix_OPERAND_SIZE),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x28),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/* 66 0F 28  /r RMBoth     | Move packed double- precision floating-point values from xmm2/m128 to xmm1. */
inline int movapd (code_ptr p,
            const XmmReg (&   modrm_reg),
            const XmmWordPtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm,
                                       Prefix_OPERAND_SIZE),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x28),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/* 66 0F 29  /r RMBoth     | Move packed double- precision floating-point values from xmm1 to xmm2/m128. */
inline int movapd (code_ptr p,
            const XmmWordPtr (&   modrm_rm),
            const XmmReg (&   modrm_reg))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm,
                                       Prefix_OPERAND_SIZE),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x29),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/*  0F 28  /r RMBoth     | Move packed single- precision floating-point values from xmm2/m128 to xmm1. */
inline int movaps (code_ptr p,
            const XmmReg (&   modrm_reg),
            const XmmReg (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x28),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/*  0F 28  /r RMBoth     | Move packed single- precision floating-point values from xmm2/m128 to xmm1. */
inline int movaps (code_ptr p,
            const XmmReg (&   modrm_reg),
            const XmmWordPtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x28),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/*  0F 29  /r RMBoth     | Move packed single- precision floating-point values from xmm1 to xmm2/m128. */
inline int movaps (code_ptr p,
            const XmmWordPtr (&   modrm_rm),
            const XmmReg (&   modrm_reg))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x29),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/*  0F 38 F0  /r RMMemOnly   op16  | Reverse byte order in m16 and move to r16 */
inline int movbe (code_ptr p,
           const WordReg (&   modrm_reg),
           const WordPtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (Op16,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x38,0xf0),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/*  0F 38 F0  /r RMMemOnly   op32  | Reverse byte order in m32 and move to r32 */
inline int movbe (code_ptr p,
           const DwordReg (&   modrm_reg),
           const DwordPtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (Op32,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x38,0xf0),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/*  0F 38 F1  /r RMMemOnly   op16  | Reverse byte order in r16 and move to m16 */
inline int movbe (code_ptr p,
           const WordPtr (&   modrm_rm),
           const WordReg (&   modrm_reg))
{
    return encode_instruction (p,
                               Prefix (Op16,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x38,0xf1),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/*  0F 38 F1  /r RMMemOnly   op32  | Reverse byte order in r32 and move to m32 */
inline int movbe (code_ptr p,
           const DwordPtr (&   modrm_rm),
           const DwordReg (&   modrm_reg))
{
    return encode_instruction (p,
                               Prefix (Op32,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x38,0xf1),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/*  0F 6E  /r RMBoth     | Move doubleword from r/m32 to mm. */
inline int movd (code_ptr p,
          const MmReg (&   modrm_reg),
          const DwordReg (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x6e),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/*  0F 6E  /r RMBoth     | Move doubleword from r/m32 to mm. */
inline int movd (code_ptr p,
          const MmReg (&   modrm_reg),
          const DwordPtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x6e),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/* 66 0F 6E  /r RMBoth     | Move doubleword from r/m32 to xmm. */
inline int movd (code_ptr p,
          const XmmReg (&   modrm_reg),
          const DwordReg (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm,
                                       Prefix_OPERAND_SIZE),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x6e),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/* 66 0F 6E  /r RMBoth     | Move doubleword from r/m32 to xmm. */
inline int movd (code_ptr p,
          const XmmReg (&   modrm_reg),
          const DwordPtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm,
                                       Prefix_OPERAND_SIZE),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x6e),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/*  0F 7E  /r RMBoth     | Move doubleword from mm to r/m32. */
inline int movd (code_ptr p,
          const DwordReg (&   modrm_rm),
          const MmReg (&   modrm_reg))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x7e),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/*  0F 7E  /r RMBoth     | Move doubleword from mm to r/m32. */
inline int movd (code_ptr p,
          const DwordPtr (&   modrm_rm),
          const MmReg (&   modrm_reg))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x7e),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/* 66 0F 7E  /r RMBoth     | Move doubleword from xmm register to r/m32. */
inline int movd (code_ptr p,
          const DwordReg (&   modrm_rm),
          const XmmReg (&   modrm_reg))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm,
                                       Prefix_OPERAND_SIZE),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x7e),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/* 66 0F 7E  /r RMBoth     | Move doubleword from xmm register to r/m32. */
inline int movd (code_ptr p,
          const DwordPtr (&   modrm_rm),
          const XmmReg (&   modrm_reg))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm,
                                       Prefix_OPERAND_SIZE),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x7e),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/* F2 0F 12  /r RMBoth     | Move one double-precision floating-point value from the lower 64-bit operand in xmm2/m64 to xmm1 and duplicate. */
inline int movddup (code_ptr p,
             const XmmReg (&   modrm_reg),
             const XmmReg (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm,
                                       Prefix_REPNE),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x12),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/* F2 0F 12  /r RMBoth     | Move one double-precision floating-point value from the lower 64-bit operand in xmm2/m64 to xmm1 and duplicate. */
inline int movddup (code_ptr p,
             const XmmReg (&   modrm_reg),
             const QwordPtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm,
                                       Prefix_REPNE),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x12),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/* F2 0F D6  /r RMRegOnly     | Move low quadword from xmm to mmx register. */
inline int movdq2q (code_ptr p,
             const MmReg (&   modrm_reg),
             const XmmReg (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm,
                                       Prefix_REPNE),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0xd6),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/* 66 0F 6F  /r RMBoth     | Move aligned double quadword from xmm2/m128 to xmm1. */
inline int movdqa (code_ptr p,
            const XmmReg (&   modrm_reg),
            const XmmReg (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm,
                                       Prefix_OPERAND_SIZE),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x6f),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/* 66 0F 6F  /r RMBoth     | Move aligned double quadword from xmm2/m128 to xmm1. */
inline int movdqa (code_ptr p,
            const XmmReg (&   modrm_reg),
            const XmmWordPtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm,
                                       Prefix_OPERAND_SIZE),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x6f),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/* 66 0F 7F  /r RMBoth     | Move aligned double quadword from xmm1 to xmm2/m128. */
inline int movdqa (code_ptr p,
            const XmmWordPtr (&   modrm_rm),
            const XmmReg (&   modrm_reg))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm,
                                       Prefix_OPERAND_SIZE),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x7f),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/* F3 0F 6F  /r RMBoth     | Move unaligned double quadword from xmm2/m128 to xmm1. */
inline int movdqu (code_ptr p,
            const XmmReg (&   modrm_reg),
            const XmmReg (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm,
                                       Prefix_REP),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x6f),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/* F3 0F 6F  /r RMBoth     | Move unaligned double quadword from xmm2/m128 to xmm1. */
inline int movdqu (code_ptr p,
            const XmmReg (&   modrm_reg),
            const XmmWordPtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm,
                                       Prefix_REP),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x6f),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/* F3 0F 7F  /r RMBoth     | Move unaligned double quadword from xmm1 to xmm2/m128. */
inline int movdqu (code_ptr p,
            const XmmWordPtr (&   modrm_rm),
            const XmmReg (&   modrm_reg))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm,
                                       Prefix_REP),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x7f),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/*  0F 12  /r RMRegOnly     | Move two packed single- precision floating-point values from high quadword of xmm2 to low quadword of xmm1. */
inline int movhlps (code_ptr p,
             const XmmReg (&   modrm_reg),
             const XmmReg (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x12),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/* 66 0F 16  /r RMMemOnly     | Move double-precision floating-point value from m64 to high quadword of xmm. */
inline int movhpd (code_ptr p,
            const XmmReg (&   modrm_reg),
            const QwordPtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm,
                                       Prefix_OPERAND_SIZE),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x16),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/* 66 0F 17  /r RMMemOnly     | Move double-precision floating-point value from high quadword of xmm to m64. */
inline int movhpd (code_ptr p,
            const QwordPtr (&   modrm_rm),
            const XmmReg (&   modrm_reg))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm,
                                       Prefix_OPERAND_SIZE),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x17),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/*  0F 16  /r RMMemOnly     | Move two packed single- precision floating-point values from m64 to high quadword of xmm. */
inline int movhps (code_ptr p,
            const XmmReg (&   modrm_reg),
            const QwordPtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x16),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/*  0F 17  /r RMMemOnly     | Move two packed single- precision floating-point values from high quadword of xmm to m64. */
inline int movhps (code_ptr p,
            const QwordPtr (&   modrm_rm),
            const XmmReg (&   modrm_reg))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x17),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/*  0F 16  /r RMRegOnly     | Move two packed single- precision floating-point values from low quadword of xmm2 to high quadword of xmm1. */
inline int movlhps (code_ptr p,
             const XmmReg (&   modrm_reg),
             const XmmReg (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x16),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/* 66 0F 12  /r RMMemOnly     | Move double-precision floating-point value from m64 to low quadword of xmm register. */
inline int movlpd (code_ptr p,
            const XmmReg (&   modrm_reg),
            const QwordPtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm,
                                       Prefix_OPERAND_SIZE),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x12),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/* 66 0F 13  /r RMMemOnly     | Move double-precision floating-point nvalue from low quadword of xmm register to m64. */
inline int movlpd (code_ptr p,
            const QwordPtr (&   modrm_rm),
            const XmmReg (&   modrm_reg))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm,
                                       Prefix_OPERAND_SIZE),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x13),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/*  0F 12  /r RMMemOnly     | Move two packed single- precision floating-point values from m64 to low quadword of xmm. */
inline int movlps (code_ptr p,
            const XmmReg (&   modrm_reg),
            const QwordPtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x12),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/*  0F 13  /r RMMemOnly     | Move two packed single- precision floating-point values from low quadword of xmm to m64. */
inline int movlps (code_ptr p,
            const QwordPtr (&   modrm_rm),
            const XmmReg (&   modrm_reg))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x13),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/* 66 0F 50  /r RMRegOnly     | Extract 2-bit sign mask from xmm and store in reg. The upper bits of r32 or r64 are filled with zeros. */
inline int movmskpd (code_ptr p,
              const DwordReg (&   modrm_reg),
              const XmmReg (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm,
                                       Prefix_OPERAND_SIZE),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x50),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/*  0F 50  /r RMRegOnly     | Extract 4-bit sign mask from xmm and store in reg. The upper bits of r32 or r64 are filled with zeros. */
inline int movmskps (code_ptr p,
              const DwordReg (&   modrm_reg),
              const XmmReg (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x50),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/* 66 0F E7  /r RMMemOnly     | Move double quadword from xmm to m128 using non-temporal hint. */
inline int movntdq (code_ptr p,
             const XmmWordPtr (&   modrm_rm),
             const XmmReg (&   modrm_reg))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm,
                                       Prefix_OPERAND_SIZE),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0xe7),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/* 66 0F 38 2A  /r RMMemOnly     | Move double quadword from m128 to xmm using non-temporal hint if WC memory type. */
inline int movntdqa (code_ptr p,
              const XmmReg (&   modrm_reg),
              const XmmWordPtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm,
                                       Prefix_OPERAND_SIZE),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x38,0x2a),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/*  0F C3  /r RMMemOnly     | Move doubleword from r32 to m32 using non-temporal hint. */
inline int movnti (code_ptr p,
            const DwordPtr (&   modrm_rm),
            const DwordReg (&   modrm_reg))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0xc3),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/* 66 0F 2B  /r RMMemOnly     | Move packed double- precision floating-point values from xmm to m128 using non-temporal hint. */
inline int movntpd (code_ptr p,
             const XmmWordPtr (&   modrm_rm),
             const XmmReg (&   modrm_reg))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm,
                                       Prefix_OPERAND_SIZE),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x2b),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/*  0F 2B  /r RMMemOnly     | Move packed single- precision floating-point values from xmm to m128 using non-temporal hint. */
inline int movntps (code_ptr p,
             const XmmWordPtr (&   modrm_rm),
             const XmmReg (&   modrm_reg))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x2b),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/*  0F E7  /r RMMemOnly     | Move quadword from mm to m64 using non-temporal hint. */
inline int movntq (code_ptr p,
            const QwordPtr (&   modrm_rm),
            const MmReg (&   modrm_reg))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0xe7),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/* F3 0F 7E  /r RMBoth     | Move quadword from xmm2/mem64 to xmm1. */
inline int movq (code_ptr p,
          const XmmReg (&   modrm_reg),
          const XmmReg (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm,
                                       Prefix_REP),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x7e),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/* F3 0F 7E  /r RMBoth     | Move quadword from xmm2/mem64 to xmm1. */
inline int movq (code_ptr p,
          const XmmReg (&   modrm_reg),
          const QwordPtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm,
                                       Prefix_REP),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x7e),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/* 66 0F D6  /r RMBoth     | Move quadword from xmm1 to xmm2/mem64. */
inline int movq (code_ptr p,
          const QwordPtr (&   modrm_rm),
          const XmmReg (&   modrm_reg))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm,
                                       Prefix_OPERAND_SIZE),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0xd6),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/*  0F 6F  /r RMBoth     | Move quadword from mm/m64 to mm. */
inline int movq (code_ptr p,
          const MmReg (&   modrm_reg),
          const MmReg (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x6f),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/*  0F 6F  /r RMBoth     | Move quadword from mm/m64 to mm. */
inline int movq (code_ptr p,
          const MmReg (&   modrm_reg),
          const QwordPtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x6f),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/*  0F 7F  /r RMBoth     | Move quadword from mm to mm/m64. */
inline int movq (code_ptr p,
          const QwordPtr (&   modrm_rm),
          const MmReg (&   modrm_reg))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x7f),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/* F3 0F D6  /r RMRegOnly     | Move quadword from mmx to low quadword of xmm. */
inline int movq2dq (code_ptr p,
             const XmmReg (&   modrm_reg),
             const MmReg (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm,
                                       Prefix_REP),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0xd6),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/*  A4        | For legacy mode, Move byte from address DS:(E)SI to ES:(E)DI. For 64-bit mode move byte from address (R|E)SI to (R|E)DI. */
inline int movs (code_ptr p,
          const BytePtr_ES_EDI (&   unused),
          const BytePtr_ESI (&   ptr))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       Addr32,
                                       ptr.get_segment ()),
                               Code (0xa4));
}
/*  A4        | For legacy mode, Move byte from address DS:(E)SI to ES:(E)DI. For 64-bit mode move byte from address (R|E)SI to (R|E)DI. */
inline int movs (code_ptr p,
          const BytePtr_ES_DI (&   unused),
          const BytePtr_SI (&   ptr))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       Addr16,
                                       ptr.get_segment ()),
                               Code (0xa4));
}
/*  A5      op16  | For legacy mode, move word from address DS:(E)SI to ES:(E)DI. For 64-bit mode move word at address (R|E)SI to (R|E)DI. */
inline int movs (code_ptr p,
          const WordPtr_ES_EDI (&   unused),
          const WordPtr_ESI (&   ptr))
{
    return encode_instruction (p,
                               Prefix (Op16,
                                       Addr32,
                                       ptr.get_segment ()),
                               Code (0xa5));
}
/*  A5      op16  | For legacy mode, move word from address DS:(E)SI to ES:(E)DI. For 64-bit mode move word at address (R|E)SI to (R|E)DI. */
inline int movs (code_ptr p,
          const WordPtr_ES_DI (&   unused),
          const WordPtr_SI (&   ptr))
{
    return encode_instruction (p,
                               Prefix (Op16,
                                       Addr16,
                                       ptr.get_segment ()),
                               Code (0xa5));
}
/*  A5      op32  | For legacy mode, move dword from address DS:(E)SI to ES:(E)DI. For 64-bit mode move dword from address (R|E)SI to (R|E)DI. */
inline int movs (code_ptr p,
          const DwordPtr_ES_EDI (&   unused),
          const DwordPtr_ESI (&   ptr))
{
    return encode_instruction (p,
                               Prefix (Op32,
                                       Addr32,
                                       ptr.get_segment ()),
                               Code (0xa5));
}
/*  A5      op32  | For legacy mode, move dword from address DS:(E)SI to ES:(E)DI. For 64-bit mode move dword from address (R|E)SI to (R|E)DI. */
inline int movs (code_ptr p,
          const DwordPtr_ES_DI (&   unused),
          const DwordPtr_SI (&   ptr))
{
    return encode_instruction (p,
                               Prefix (Op32,
                                       Addr16,
                                       ptr.get_segment ()),
                               Code (0xa5));
}
/*  A4        | For legacy mode, Move byte from address DS:(E)SI to ES:(E)DI. For 64-bit mode move byte from address (R|E)SI to (R|E)DI. */
inline int movsb (code_ptr p)
{
    return encode_instruction (p,
                               Prefix (OpNothing,AddrNothing),
                               Code (0xa4));
}
/*  A5      op32  | For legacy mode, move dword from address DS:(E)SI to ES:(E)DI. For 64-bit mode move dword from address (R|E)SI to (R|E)DI. */
inline int movsd (code_ptr p)
{
    return encode_instruction (p,
                               Prefix (Op32,AddrNothing),
                               Code (0xa5));
}
/* F2 0F 10  /r RMBoth     | Move scalar double- precision floating-point value from xmm2/m64 to xmm1 register. */
inline int movsd (code_ptr p,
           const XmmReg (&   modrm_reg),
           const XmmReg (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm,
                                       Prefix_REPNE),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x10),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/* F2 0F 10  /r RMBoth     | Move scalar double- precision floating-point value from xmm2/m64 to xmm1 register. */
inline int movsd (code_ptr p,
           const XmmReg (&   modrm_reg),
           const QwordPtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm,
                                       Prefix_REPNE),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x10),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/* F2 0F 11  /r RMBoth     | Move scalar double- precision floating-point value from xmm1 register to xmm2/m64. */
inline int movsd (code_ptr p,
           const QwordPtr (&   modrm_rm),
           const XmmReg (&   modrm_reg))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm,
                                       Prefix_REPNE),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x11),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/* F3 0F 16  /r RMBoth     | Move two single-precision floating-point values from the higher 32-bit operand of each qword in xmm2/m128 to xmm1 and duplicate each 32-bit operand to the lower 32-bits of each qword. */
inline int movshdup (code_ptr p,
              const XmmReg (&   modrm_reg),
              const XmmReg (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm,
                                       Prefix_REP),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x16),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/* F3 0F 16  /r RMBoth     | Move two single-precision floating-point values from the higher 32-bit operand of each qword in xmm2/m128 to xmm1 and duplicate each 32-bit operand to the lower 32-bits of each qword. */
inline int movshdup (code_ptr p,
              const XmmReg (&   modrm_reg),
              const XmmWordPtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm,
                                       Prefix_REP),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x16),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/* F3 0F 12  /r RMBoth     | Move two single-precision floating-point values from the lower 32-bit operand of each qword in xmm2/m128 to xmm1 and duplicate each 32-bit operand to the higher 32-bits of each qword. */
inline int movsldup (code_ptr p,
              const XmmReg (&   modrm_reg),
              const XmmReg (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm,
                                       Prefix_REP),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x12),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/* F3 0F 12  /r RMBoth     | Move two single-precision floating-point values from the lower 32-bit operand of each qword in xmm2/m128 to xmm1 and duplicate each 32-bit operand to the higher 32-bits of each qword. */
inline int movsldup (code_ptr p,
              const XmmReg (&   modrm_reg),
              const XmmWordPtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm,
                                       Prefix_REP),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x12),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/* F3 0F 10  /r RMBoth     | Move scalar single-precision floating-point value from xmm2/m32 to xmm1 register. */
inline int movss (code_ptr p,
           const XmmReg (&   modrm_reg),
           const XmmReg (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm,
                                       Prefix_REP),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x10),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/* F3 0F 10  /r RMBoth     | Move scalar single-precision floating-point value from xmm2/m32 to xmm1 register. */
inline int movss (code_ptr p,
           const XmmReg (&   modrm_reg),
           const DwordPtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm,
                                       Prefix_REP),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x10),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/* F3 0F 11  /r RMBoth     | Move scalar single-precision floating-point value from xmm1 register to xmm2/m32. */
inline int movss (code_ptr p,
           const DwordPtr (&   modrm_rm),
           const XmmReg (&   modrm_reg))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm,
                                       Prefix_REP),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x11),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/*  A5      op16  | For legacy mode, move word from address DS:(E)SI to ES:(E)DI. For 64-bit mode move word at address (R|E)SI to (R|E)DI. */
inline int movsw (code_ptr p)
{
    return encode_instruction (p,
                               Prefix (Op16,AddrNothing),
                               Code (0xa5));
}
/*  0F BE  /r RMBoth   op16  | Move byte to word with sign-extension. */
inline int movsx (code_ptr p,
           const WordReg (&   modrm_reg),
           const ByteReg (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (Op16,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0xbe),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/*  0F BE  /r RMBoth   op16  | Move byte to word with sign-extension. */
inline int movsx (code_ptr p,
           const WordReg (&   modrm_reg),
           const BytePtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (Op16,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0xbe),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/*  0F BE  /r RMBoth   op32  | Move byte to doubleword with sign-extension. */
inline int movsx (code_ptr p,
           const DwordReg (&   modrm_reg),
           const ByteReg (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (Op32,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0xbe),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/*  0F BE  /r RMBoth   op32  | Move byte to doubleword with sign-extension. */
inline int movsx (code_ptr p,
           const DwordReg (&   modrm_reg),
           const BytePtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (Op32,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0xbe),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/*  0F BF  /r RMBoth     | Move word to doubleword, with sign-extension. */
inline int movsx (code_ptr p,
           const DwordReg (&   modrm_reg),
           const WordReg (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0xbf),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/*  0F BF  /r RMBoth     | Move word to doubleword, with sign-extension. */
inline int movsx (code_ptr p,
           const DwordReg (&   modrm_reg),
           const WordPtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0xbf),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/* 66 0F 10  /r RMBoth     | Move packed double- precision floating-point values from xmm2/m128 to xmm1. */
inline int movupd (code_ptr p,
            const XmmReg (&   modrm_reg),
            const XmmReg (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm,
                                       Prefix_OPERAND_SIZE),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x10),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/* 66 0F 10  /r RMBoth     | Move packed double- precision floating-point values from xmm2/m128 to xmm1. */
inline int movupd (code_ptr p,
            const XmmReg (&   modrm_reg),
            const XmmWordPtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm,
                                       Prefix_OPERAND_SIZE),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x10),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/* 66 0F 11  /r RMBoth     | Move packed double- precision floating-point values from xmm1 to xmm2/m128. */
inline int movupd (code_ptr p,
            const XmmWordPtr (&   modrm_rm),
            const XmmReg (&   modrm_reg))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm,
                                       Prefix_OPERAND_SIZE),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x11),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/*  0F 10  /r RMBoth     | Move packed single- precision floating-point values from xmm2/m128 to xmm1. */
inline int movups (code_ptr p,
            const XmmReg (&   modrm_reg),
            const XmmReg (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x10),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/*  0F 10  /r RMBoth     | Move packed single- precision floating-point values from xmm2/m128 to xmm1. */
inline int movups (code_ptr p,
            const XmmReg (&   modrm_reg),
            const XmmWordPtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x10),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/*  0F 11  /r RMBoth     | Move packed single- precision floating-point values from xmm1 to xmm2/m128. */
inline int movups (code_ptr p,
            const XmmWordPtr (&   modrm_rm),
            const XmmReg (&   modrm_reg))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x11),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/*  0F B6  /r RMBoth   op16  | Move byte to word with zero-extension. */
inline int movzx (code_ptr p,
           const WordReg (&   modrm_reg),
           const ByteReg (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (Op16,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0xb6),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/*  0F B6  /r RMBoth   op16  | Move byte to word with zero-extension. */
inline int movzx (code_ptr p,
           const WordReg (&   modrm_reg),
           const BytePtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (Op16,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0xb6),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/*  0F B6  /r RMBoth   op32  | Move byte to doubleword, zero-extension. */
inline int movzx (code_ptr p,
           const DwordReg (&   modrm_reg),
           const ByteReg (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (Op32,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0xb6),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/*  0F B6  /r RMBoth   op32  | Move byte to doubleword, zero-extension. */
inline int movzx (code_ptr p,
           const DwordReg (&   modrm_reg),
           const BytePtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (Op32,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0xb6),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/*  0F B7  /r RMBoth     | Move word to doubleword, zero-extension. */
inline int movzx (code_ptr p,
           const DwordReg (&   modrm_reg),
           const WordReg (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0xb7),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/*  0F B7  /r RMBoth     | Move word to doubleword, zero-extension. */
inline int movzx (code_ptr p,
           const DwordReg (&   modrm_reg),
           const WordPtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0xb7),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/* 66 0F 3A 42  /r RMBoth  ib   | Sums absolute 8-bit integer difference of adjacent groups of 4 byte integers in xmm1 and xmm2/m128 and writes the results in xmm1. Starting offsets within xmm1 and xmm2/m128 are determined by imm8. */
inline int mpsadbw (code_ptr p,
             const XmmReg (&   modrm_reg),
             const XmmReg (&   modrm_rm),
             imm8_t imm)
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm,
                                       Prefix_OPERAND_SIZE),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x3a,0x42),
                               make_modrm (modrm_rm,modrm_reg),
                               make_imm (imm));
}
/* 66 0F 3A 42  /r RMBoth  ib   | Sums absolute 8-bit integer difference of adjacent groups of 4 byte integers in xmm1 and xmm2/m128 and writes the results in xmm1. Starting offsets within xmm1 and xmm2/m128 are determined by imm8. */
inline int mpsadbw (code_ptr p,
             const XmmReg (&   modrm_reg),
             const XmmWordPtr (&   modrm_rm),
             imm8_t imm)
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm,
                                       Prefix_OPERAND_SIZE),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x3a,0x42),
                               make_modrm (modrm_rm,modrm_reg),
                               make_imm (imm));
}
/*  F6  /4 RMBoth     | Unsigned multiply (AX ← AL ∗ r/m8). */
inline int mul (code_ptr p,
         const ByteReg (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm)),
                               Code (0xf6),
                               make_modrm (modrm_rm,4));
}
/*  F6  /4 RMBoth     | Unsigned multiply (AX ← AL ∗ r/m8). */
inline int mul (code_ptr p,
         const BytePtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm)),
                               Code (0xf6),
                               make_modrm (modrm_rm,4));
}
/*  F7  /4 RMBoth   op16  | Unsigned multiply (DX:AX ← AX ∗ r/m16). */
inline int mul (code_ptr p,
         const WordReg (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (Op16,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm)),
                               Code (0xf7),
                               make_modrm (modrm_rm,4));
}
/*  F7  /4 RMBoth   op16  | Unsigned multiply (DX:AX ← AX ∗ r/m16). */
inline int mul (code_ptr p,
         const WordPtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (Op16,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm)),
                               Code (0xf7),
                               make_modrm (modrm_rm,4));
}
/*  F7  /4 RMBoth   op32  | Unsigned multiply (EDX:EAX ← EAX ∗ r/m32). */
inline int mul (code_ptr p,
         const DwordReg (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (Op32,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm)),
                               Code (0xf7),
                               make_modrm (modrm_rm,4));
}
/*  F7  /4 RMBoth   op32  | Unsigned multiply (EDX:EAX ← EAX ∗ r/m32). */
inline int mul (code_ptr p,
         const DwordPtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (Op32,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm)),
                               Code (0xf7),
                               make_modrm (modrm_rm,4));
}
/* 66 0F 59  /r RMBoth     | Multiply packed double- precision floating-point values in xmm2/m128 by xmm1. */
inline int mulpd (code_ptr p,
           const XmmReg (&   modrm_reg),
           const XmmReg (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm,
                                       Prefix_OPERAND_SIZE),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x59),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/* 66 0F 59  /r RMBoth     | Multiply packed double- precision floating-point values in xmm2/m128 by xmm1. */
inline int mulpd (code_ptr p,
           const XmmReg (&   modrm_reg),
           const XmmWordPtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm,
                                       Prefix_OPERAND_SIZE),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x59),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/*  0F 59  /r RMBoth     | Multiply packed single- precision floating-point values in xmm2/mem by xmm1. */
inline int mulps (code_ptr p,
           const XmmReg (&   modrm_reg),
           const XmmReg (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x59),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/*  0F 59  /r RMBoth     | Multiply packed single- precision floating-point values in xmm2/mem by xmm1. */
inline int mulps (code_ptr p,
           const XmmReg (&   modrm_reg),
           const XmmWordPtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x59),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/* F2 0F 59  /r RMBoth     | Multiply the low double- precision floating-point value in xmm2/mem64 by low double-precision floating-point value in xmm1. */
inline int mulsd (code_ptr p,
           const XmmReg (&   modrm_reg),
           const XmmReg (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm,
                                       Prefix_REPNE),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x59),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/* F2 0F 59  /r RMBoth     | Multiply the low double- precision floating-point value in xmm2/mem64 by low double-precision floating-point value in xmm1. */
inline int mulsd (code_ptr p,
           const XmmReg (&   modrm_reg),
           const QwordPtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm,
                                       Prefix_REPNE),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x59),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/* F3 0F 59  /r RMBoth     | Multiply the low single- precision floating-point value in xmm2/mem by the low single-precision floating-point value in xmm1. */
inline int mulss (code_ptr p,
           const XmmReg (&   modrm_reg),
           const XmmReg (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm,
                                       Prefix_REP),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x59),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/* F3 0F 59  /r RMBoth     | Multiply the low single- precision floating-point value in xmm2/mem by the low single-precision floating-point value in xmm1. */
inline int mulss (code_ptr p,
           const XmmReg (&   modrm_reg),
           const DwordPtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm,
                                       Prefix_REP),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x59),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/*  0F 01 C9        | A hint that allow the processor to stop instruction execution and enter an implementation- dependent optimized state until occurrence of a class of events. */
inline int mwait (code_ptr p)
{
    return encode_instruction (p,
                               Prefix (OpNothing,AddrNothing),
                               Code (0xf,0x1,0xc9));
}
/*  F6  /3 RMBoth     | Two's complement negate r/m8. */
inline int neg (code_ptr p,
         const ByteReg (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm)),
                               Code (0xf6),
                               make_modrm (modrm_rm,3));
}
/*  F6  /3 RMBoth     | Two's complement negate r/m8. */
inline int neg (code_ptr p,
         const BytePtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm)),
                               Code (0xf6),
                               make_modrm (modrm_rm,3));
}
/*  F7  /3 RMBoth   op16  | Two's complement negate r/m16. */
inline int neg (code_ptr p,
         const WordReg (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (Op16,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm)),
                               Code (0xf7),
                               make_modrm (modrm_rm,3));
}
/*  F7  /3 RMBoth   op16  | Two's complement negate r/m16. */
inline int neg (code_ptr p,
         const WordPtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (Op16,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm)),
                               Code (0xf7),
                               make_modrm (modrm_rm,3));
}
/*  F7  /3 RMBoth   op32  | Two's complement negate r/m32. */
inline int neg (code_ptr p,
         const DwordReg (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (Op32,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm)),
                               Code (0xf7),
                               make_modrm (modrm_rm,3));
}
/*  F7  /3 RMBoth   op32  | Two's complement negate r/m32. */
inline int neg (code_ptr p,
         const DwordPtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (Op32,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm)),
                               Code (0xf7),
                               make_modrm (modrm_rm,3));
}
/*  90        | One byte no-operation instruction. */
inline int nop (code_ptr p)
{
    return encode_instruction (p,
                               Prefix (OpNothing,AddrNothing),
                               Code (0x90));
}
/*  0F 1F  /0 RMBoth   op16  | Multi-byte no-operation instruction. */
inline int nop (code_ptr p,
         const WordReg (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (Op16,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm)),
                               Code (0xf,0x1f),
                               make_modrm (modrm_rm,0));
}
/*  0F 1F  /0 RMBoth   op16  | Multi-byte no-operation instruction. */
inline int nop (code_ptr p,
         const WordPtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (Op16,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm)),
                               Code (0xf,0x1f),
                               make_modrm (modrm_rm,0));
}
/*  0F 1F  /0 RMBoth   op32  | Multi-byte no-operation instruction. */
inline int nop (code_ptr p,
         const DwordReg (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (Op32,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm)),
                               Code (0xf,0x1f),
                               make_modrm (modrm_rm,0));
}
/*  0F 1F  /0 RMBoth   op32  | Multi-byte no-operation instruction. */
inline int nop (code_ptr p,
         const DwordPtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (Op32,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm)),
                               Code (0xf,0x1f),
                               make_modrm (modrm_rm,0));
}
/*  F6  /2 RMBoth     | Reverse each bit of r/m8. */
inline int not_ (code_ptr p,
          const ByteReg (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm)),
                               Code (0xf6),
                               make_modrm (modrm_rm,2));
}
/*  F6  /2 RMBoth     | Reverse each bit of r/m8. */
inline int not_ (code_ptr p,
          const BytePtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm)),
                               Code (0xf6),
                               make_modrm (modrm_rm,2));
}
/*  F7  /2 RMBoth   op16  | Reverse each bit of r/m16. */
inline int not_ (code_ptr p,
          const WordReg (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (Op16,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm)),
                               Code (0xf7),
                               make_modrm (modrm_rm,2));
}
/*  F7  /2 RMBoth   op16  | Reverse each bit of r/m16. */
inline int not_ (code_ptr p,
          const WordPtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (Op16,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm)),
                               Code (0xf7),
                               make_modrm (modrm_rm,2));
}
/*  F7  /2 RMBoth   op32  | Reverse each bit of r/m32. */
inline int not_ (code_ptr p,
          const DwordReg (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (Op32,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm)),
                               Code (0xf7),
                               make_modrm (modrm_rm,2));
}
/*  F7  /2 RMBoth   op32  | Reverse each bit of r/m32. */
inline int not_ (code_ptr p,
          const DwordPtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (Op32,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm)),
                               Code (0xf7),
                               make_modrm (modrm_rm,2));
}
/*  0D     id op32  | EAX OR imm32. */
inline int or_ (code_ptr p,
         const RegEAX (&   unused),
         imm32_t imm)
{
    return encode_instruction (p,
                               Prefix (Op32,AddrNothing),
                               Code (0xd),
                               make_imm (imm));
}
/*  83  /1 RMBoth  ib op32  | r/m32 OR imm8 (sign- extended). */
inline int or_ (code_ptr p,
         const DwordReg_m_EAX (&   modrm_rm),
         imm8_t imm)
{
    return encode_instruction (p,
                               Prefix (Op32,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm)),
                               Code (0x83),
                               make_modrm (modrm_rm,1),
                               make_imm (imm));
}
/*  81  /1 RMBoth  id op32  | r/m32 OR imm32. */
inline int or_ (code_ptr p,
         const DwordReg_m_EAX (&   modrm_rm),
         imm32_t imm)
{
    return encode_instruction (p,
                               Prefix (Op32,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm)),
                               Code (0x81),
                               make_modrm (modrm_rm,1),
                               make_imm (imm));
}
/*  81  /1 RMBoth  id op32  | r/m32 OR imm32. */
inline int or_ (code_ptr p,
         const DwordPtr (&   modrm_rm),
         imm32_t imm)
{
    return encode_instruction (p,
                               Prefix (Op32,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm)),
                               Code (0x81),
                               make_modrm (modrm_rm,1),
                               make_imm (imm));
}
/*  83  /1 RMBoth  ib op32  | r/m32 OR imm8 (sign- extended). */
inline int or_ (code_ptr p,
         const RegEAX (&   modrm_rm),
         imm8_t imm)
{
    return encode_instruction (p,
                               Prefix (Op32,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm)),
                               Code (0x83),
                               make_modrm (modrm_rm,1),
                               make_imm (imm));
}
/*  83  /1 RMBoth  ib op32  | r/m32 OR imm8 (sign- extended). */
inline int or_ (code_ptr p,
         const DwordPtr (&   modrm_rm),
         imm8_t imm)
{
    return encode_instruction (p,
                               Prefix (Op32,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm)),
                               Code (0x83),
                               make_modrm (modrm_rm,1),
                               make_imm (imm));
}
/*  0D     iw op16  | AX OR imm16. */
inline int or_ (code_ptr p,
         const RegAX (&   unused),
         imm16_t imm)
{
    return encode_instruction (p,
                               Prefix (Op16,AddrNothing),
                               Code (0xd),
                               make_imm (imm));
}
/*  83  /1 RMBoth  ib op16  | r/m16 OR imm8 (sign- extended). */
inline int or_ (code_ptr p,
         const WordReg_m_AX (&   modrm_rm),
         imm8_t imm)
{
    return encode_instruction (p,
                               Prefix (Op16,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm)),
                               Code (0x83),
                               make_modrm (modrm_rm,1),
                               make_imm (imm));
}
/*  81  /1 RMBoth  iw op16  | r/m16 OR imm16. */
inline int or_ (code_ptr p,
         const WordReg_m_AX (&   modrm_rm),
         imm16_t imm)
{
    return encode_instruction (p,
                               Prefix (Op16,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm)),
                               Code (0x81),
                               make_modrm (modrm_rm,1),
                               make_imm (imm));
}
/*  81  /1 RMBoth  iw op16  | r/m16 OR imm16. */
inline int or_ (code_ptr p,
         const WordPtr (&   modrm_rm),
         imm16_t imm)
{
    return encode_instruction (p,
                               Prefix (Op16,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm)),
                               Code (0x81),
                               make_modrm (modrm_rm,1),
                               make_imm (imm));
}
/*  83  /1 RMBoth  ib op16  | r/m16 OR imm8 (sign- extended). */
inline int or_ (code_ptr p,
         const RegAX (&   modrm_rm),
         imm8_t imm)
{
    return encode_instruction (p,
                               Prefix (Op16,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm)),
                               Code (0x83),
                               make_modrm (modrm_rm,1),
                               make_imm (imm));
}
/*  83  /1 RMBoth  ib op16  | r/m16 OR imm8 (sign- extended). */
inline int or_ (code_ptr p,
         const WordPtr (&   modrm_rm),
         imm8_t imm)
{
    return encode_instruction (p,
                               Prefix (Op16,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm)),
                               Code (0x83),
                               make_modrm (modrm_rm,1),
                               make_imm (imm));
}
/*  0B  /r RMBoth   op32  | r32 OR r/m32. */
inline int or_ (code_ptr p,
         const DwordReg (&   modrm_reg),
         const DwordReg (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (Op32,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xb),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/*  0B  /r RMBoth   op32  | r32 OR r/m32. */
inline int or_ (code_ptr p,
         const DwordReg (&   modrm_reg),
         const DwordPtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (Op32,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xb),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/*  09  /r RMBoth   op32  | r/m32 OR r32. */
inline int or_ (code_ptr p,
         const DwordPtr (&   modrm_rm),
         const DwordReg (&   modrm_reg))
{
    return encode_instruction (p,
                               Prefix (Op32,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0x9),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/*  0B  /r RMBoth   op16  | r16 OR r/m16. */
inline int or_ (code_ptr p,
         const WordReg (&   modrm_reg),
         const WordReg (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (Op16,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xb),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/*  0B  /r RMBoth   op16  | r16 OR r/m16. */
inline int or_ (code_ptr p,
         const WordReg (&   modrm_reg),
         const WordPtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (Op16,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xb),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/*  09  /r RMBoth   op16  | r/m16 OR r16. */
inline int or_ (code_ptr p,
         const WordPtr (&   modrm_rm),
         const WordReg (&   modrm_reg))
{
    return encode_instruction (p,
                               Prefix (Op16,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0x9),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/*  0A  /r RMBoth     | r8 OR r/m8. */
inline int or_ (code_ptr p,
         const ByteReg (&   modrm_reg),
         const ByteReg (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xa),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/*  0A  /r RMBoth     | r8 OR r/m8. */
inline int or_ (code_ptr p,
         const ByteReg (&   modrm_reg),
         const BytePtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xa),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/*  08  /r RMBoth     | r/m8 OR r8. */
inline int or_ (code_ptr p,
         const BytePtr (&   modrm_rm),
         const ByteReg (&   modrm_reg))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0x8),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/*  0C     ib   | AL OR imm8. */
inline int or_ (code_ptr p,
         const RegAL (&   unused),
         imm8_t imm)
{
    return encode_instruction (p,
                               Prefix (OpNothing,AddrNothing),
                               Code (0xc),
                               make_imm (imm));
}
/*  80  /1 RMBoth  ib   | r/m8 OR imm8. */
inline int or_ (code_ptr p,
         const ByteReg (&   modrm_rm),
         imm8_t imm)
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm)),
                               Code (0x80),
                               make_modrm (modrm_rm,1),
                               make_imm (imm));
}
/*  80  /1 RMBoth  ib   | r/m8 OR imm8. */
inline int or_ (code_ptr p,
         const BytePtr (&   modrm_rm),
         imm8_t imm)
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm)),
                               Code (0x80),
                               make_modrm (modrm_rm,1),
                               make_imm (imm));
}
/* 66 0F 56  /r RMBoth     | Bitwise OR of xmm2/m128 and xmm1. */
inline int orpd (code_ptr p,
          const XmmReg (&   modrm_reg),
          const XmmReg (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm,
                                       Prefix_OPERAND_SIZE),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x56),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/* 66 0F 56  /r RMBoth     | Bitwise OR of xmm2/m128 and xmm1. */
inline int orpd (code_ptr p,
          const XmmReg (&   modrm_reg),
          const XmmWordPtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm,
                                       Prefix_OPERAND_SIZE),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x56),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/*  0F 56  /r RMBoth     | Bitwise OR of xmm2/m128 and xmm1. */
inline int orps (code_ptr p,
          const XmmReg (&   modrm_reg),
          const XmmReg (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x56),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/*  0F 56  /r RMBoth     | Bitwise OR of xmm2/m128 and xmm1. */
inline int orps (code_ptr p,
          const XmmReg (&   modrm_reg),
          const XmmWordPtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x56),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/*  E6     ib   | Output byte in AL to I/O port address imm8. */
inline int out (code_ptr p,
         imm8_t imm,
         const RegAL (&   unused))
{
    return encode_instruction (p,
                               Prefix (OpNothing,AddrNothing),
                               Code (0xe6),
                               make_imm (imm));
}
/*  E7     ib op16  | Output word in AX to I/O port address imm8. */
inline int out (code_ptr p,
         imm8_t imm,
         const RegAX (&   unused))
{
    return encode_instruction (p,
                               Prefix (Op16,AddrNothing),
                               Code (0xe7),
                               make_imm (imm));
}
/*  E7     ib op32  | Output doubleword in EAX to I/O port address imm8. */
inline int out (code_ptr p,
         imm8_t imm,
         const RegEAX (&   unused))
{
    return encode_instruction (p,
                               Prefix (Op32,AddrNothing),
                               Code (0xe7),
                               make_imm (imm));
}
/*  EE        | Output byte in AL to I/O port address in DX. */
inline int out (code_ptr p,
         const RegDX (&   unused1),
         const RegAL (&   unused2))
{
    return encode_instruction (p,
                               Prefix (OpNothing,AddrNothing),
                               Code (0xee));
}
/*  EF      op16  | Output word in AX to I/O port address in DX. */
inline int out (code_ptr p,
         const RegDX (&   unused1),
         const RegAX (&   unused2))
{
    return encode_instruction (p,
                               Prefix (Op16,AddrNothing),
                               Code (0xef));
}
/*  EF      op32  | Output doubleword in EAX to I/O port address in DX. */
inline int out (code_ptr p,
         const RegDX (&   unused1),
         const RegEAX (&   unused2))
{
    return encode_instruction (p,
                               Prefix (Op32,AddrNothing),
                               Code (0xef));
}
/*  6E        | Output byte from memory location specified in DS:(E)SI or RSI to I/O port specified in DX**. */
inline int outs (code_ptr p,
          const RegDX (&   unused),
          const BytePtr_ESI (&   ptr))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       Addr32,
                                       ptr.get_segment ()),
                               Code (0x6e));
}
/*  6E        | Output byte from memory location specified in DS:(E)SI or RSI to I/O port specified in DX**. */
inline int outs (code_ptr p,
          const RegDX (&   unused),
          const BytePtr_SI (&   ptr))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       Addr16,
                                       ptr.get_segment ()),
                               Code (0x6e));
}
/*  6F      op16  | Output word from memory location specified in DS:(E)SI or RSI to I/O port specified in DX**. */
inline int outs (code_ptr p,
          const RegDX (&   unused),
          const WordPtr_ESI (&   ptr))
{
    return encode_instruction (p,
                               Prefix (Op16,
                                       Addr32,
                                       ptr.get_segment ()),
                               Code (0x6f));
}
/*  6F      op16  | Output word from memory location specified in DS:(E)SI or RSI to I/O port specified in DX**. */
inline int outs (code_ptr p,
          const RegDX (&   unused),
          const WordPtr_SI (&   ptr))
{
    return encode_instruction (p,
                               Prefix (Op16,
                                       Addr16,
                                       ptr.get_segment ()),
                               Code (0x6f));
}
/*  6F      op32  | Output doubleword from memory location specified in DS:(E)SI or RSI to I/O port specified in DX**. */
inline int outs (code_ptr p,
          const RegDX (&   unused),
          const DwordPtr_ESI (&   ptr))
{
    return encode_instruction (p,
                               Prefix (Op32,
                                       Addr32,
                                       ptr.get_segment ()),
                               Code (0x6f));
}
/*  6F      op32  | Output doubleword from memory location specified in DS:(E)SI or RSI to I/O port specified in DX**. */
inline int outs (code_ptr p,
          const RegDX (&   unused),
          const DwordPtr_SI (&   ptr))
{
    return encode_instruction (p,
                               Prefix (Op32,
                                       Addr16,
                                       ptr.get_segment ()),
                               Code (0x6f));
}
/*  6E        | Output byte from memory location specified in DS:(E)SI or RSI to I/O port specified in DX**. */
inline int outsb (code_ptr p)
{
    return encode_instruction (p,
                               Prefix (OpNothing,AddrNothing),
                               Code (0x6e));
}
/*  6F      op32  | Output doubleword from memory location specified in DS:(E)SI or RSI to I/O port specified in DX**. */
inline int outsd (code_ptr p)
{
    return encode_instruction (p,
                               Prefix (Op32,AddrNothing),
                               Code (0x6f));
}
/*  6F      op16  | Output word from memory location specified in DS:(E)SI or RSI to I/O port specified in DX**. */
inline int outsw (code_ptr p)
{
    return encode_instruction (p,
                               Prefix (Op16,AddrNothing),
                               Code (0x6f));
}
/*  0F 38 1C  /r RMBoth     | Compute the absolute value of bytes in mm2/m64 and store UNSIGNED result in mm1. */
inline int pabsb (code_ptr p,
           const MmReg (&   modrm_reg),
           const MmReg (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x38,0x1c),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/*  0F 38 1C  /r RMBoth     | Compute the absolute value of bytes in mm2/m64 and store UNSIGNED result in mm1. */
inline int pabsb (code_ptr p,
           const MmReg (&   modrm_reg),
           const QwordPtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x38,0x1c),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/* 66 0F 38 1C  /r RMBoth     | Compute the absolute value of bytes in xmm2/m128 and store UNSIGNED result in xmm1. */
inline int pabsb (code_ptr p,
           const XmmReg (&   modrm_reg),
           const XmmReg (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm,
                                       Prefix_OPERAND_SIZE),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x38,0x1c),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/* 66 0F 38 1C  /r RMBoth     | Compute the absolute value of bytes in xmm2/m128 and store UNSIGNED result in xmm1. */
inline int pabsb (code_ptr p,
           const XmmReg (&   modrm_reg),
           const XmmWordPtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm,
                                       Prefix_OPERAND_SIZE),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x38,0x1c),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/*  0F 38 1E  /r RMBoth     | Compute the absolute value of 32-bit integers in mm2/m64 and store UNSIGNED result in mm1. */
inline int pabsd (code_ptr p,
           const MmReg (&   modrm_reg),
           const MmReg (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x38,0x1e),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/*  0F 38 1E  /r RMBoth     | Compute the absolute value of 32-bit integers in mm2/m64 and store UNSIGNED result in mm1. */
inline int pabsd (code_ptr p,
           const MmReg (&   modrm_reg),
           const QwordPtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x38,0x1e),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/* 66 0F 38 1E  /r RMBoth     | Compute the absolute value of 32-bit integers in xmm2/m128 and store UNSIGNED result in xmm1. */
inline int pabsd (code_ptr p,
           const XmmReg (&   modrm_reg),
           const XmmReg (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm,
                                       Prefix_OPERAND_SIZE),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x38,0x1e),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/* 66 0F 38 1E  /r RMBoth     | Compute the absolute value of 32-bit integers in xmm2/m128 and store UNSIGNED result in xmm1. */
inline int pabsd (code_ptr p,
           const XmmReg (&   modrm_reg),
           const XmmWordPtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm,
                                       Prefix_OPERAND_SIZE),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x38,0x1e),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/*  0F 38 1D  /r RMBoth     | Compute the absolute value of 16-bit integers in mm2/m64 and store UNSIGNED result in mm1. */
inline int pabsw (code_ptr p,
           const MmReg (&   modrm_reg),
           const MmReg (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x38,0x1d),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/*  0F 38 1D  /r RMBoth     | Compute the absolute value of 16-bit integers in mm2/m64 and store UNSIGNED result in mm1. */
inline int pabsw (code_ptr p,
           const MmReg (&   modrm_reg),
           const QwordPtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x38,0x1d),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/* 66 0F 38 1D  /r RMBoth     | Compute the absolute value of 16-bit integers in xmm2/m128 and store UNSIGNED result in xmm1. */
inline int pabsw (code_ptr p,
           const XmmReg (&   modrm_reg),
           const XmmReg (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm,
                                       Prefix_OPERAND_SIZE),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x38,0x1d),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/* 66 0F 38 1D  /r RMBoth     | Compute the absolute value of 16-bit integers in xmm2/m128 and store UNSIGNED result in xmm1. */
inline int pabsw (code_ptr p,
           const XmmReg (&   modrm_reg),
           const XmmWordPtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm,
                                       Prefix_OPERAND_SIZE),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x38,0x1d),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/*  0F 6B  /r RMBoth     | Converts 2 packed signed doubleword integers from mm1 and from mm2/m64 into 4 packed signed word integers in mm1 using signed saturation. */
inline int packssdw (code_ptr p,
              const MmReg (&   modrm_reg),
              const MmReg (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x6b),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/*  0F 6B  /r RMBoth     | Converts 2 packed signed doubleword integers from mm1 and from mm2/m64 into 4 packed signed word integers in mm1 using signed saturation. */
inline int packssdw (code_ptr p,
              const MmReg (&   modrm_reg),
              const QwordPtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x6b),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/* 66 0F 6B  /r RMBoth     | Converts 4 packed signed doubleword integers from xmm1 and from xxm2/m128 into 8 packed signed word integers in xxm1 using signed saturation. */
inline int packssdw (code_ptr p,
              const XmmReg (&   modrm_reg),
              const XmmReg (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm,
                                       Prefix_OPERAND_SIZE),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x6b),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/* 66 0F 6B  /r RMBoth     | Converts 4 packed signed doubleword integers from xmm1 and from xxm2/m128 into 8 packed signed word integers in xxm1 using signed saturation. */
inline int packssdw (code_ptr p,
              const XmmReg (&   modrm_reg),
              const XmmWordPtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm,
                                       Prefix_OPERAND_SIZE),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x6b),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/*  0F 63  /r RMBoth     | Converts 4 packed signed word integers from mm1 and from mm2/m64 into 8 packed signed byte integers in mm1 using signed saturation. */
inline int packsswb (code_ptr p,
              const MmReg (&   modrm_reg),
              const MmReg (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x63),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/*  0F 63  /r RMBoth     | Converts 4 packed signed word integers from mm1 and from mm2/m64 into 8 packed signed byte integers in mm1 using signed saturation. */
inline int packsswb (code_ptr p,
              const MmReg (&   modrm_reg),
              const QwordPtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x63),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/* 66 0F 63  /r RMBoth     | Converts 8 packed signed word integers from xmm1 and from xxm2/m128 into 16 packed signed byte integers in xxm1 using signed saturation. */
inline int packsswb (code_ptr p,
              const XmmReg (&   modrm_reg),
              const XmmReg (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm,
                                       Prefix_OPERAND_SIZE),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x63),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/* 66 0F 63  /r RMBoth     | Converts 8 packed signed word integers from xmm1 and from xxm2/m128 into 16 packed signed byte integers in xxm1 using signed saturation. */
inline int packsswb (code_ptr p,
              const XmmReg (&   modrm_reg),
              const XmmWordPtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm,
                                       Prefix_OPERAND_SIZE),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x63),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/* 66 0F 38 2B  /r RMBoth     | Convert 4 packed signed doubleword integers from xmm1 and 4 packed signed doubleword integers from xmm2/m128 into 8 packed unsigned word integers in xmm1 using unsigned saturation. */
inline int packusdw (code_ptr p,
              const XmmReg (&   modrm_reg),
              const XmmReg (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm,
                                       Prefix_OPERAND_SIZE),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x38,0x2b),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/* 66 0F 38 2B  /r RMBoth     | Convert 4 packed signed doubleword integers from xmm1 and 4 packed signed doubleword integers from xmm2/m128 into 8 packed unsigned word integers in xmm1 using unsigned saturation. */
inline int packusdw (code_ptr p,
              const XmmReg (&   modrm_reg),
              const XmmWordPtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm,
                                       Prefix_OPERAND_SIZE),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x38,0x2b),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/*  0F 67  /r RMBoth     | Converts 4 signed word integers from mm and 4 signed word integers from mm/m64 into 8 unsigned byte integers in mm using unsigned saturation. */
inline int packuswb (code_ptr p,
              const MmReg (&   modrm_reg),
              const MmReg (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x67),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/*  0F 67  /r RMBoth     | Converts 4 signed word integers from mm and 4 signed word integers from mm/m64 into 8 unsigned byte integers in mm using unsigned saturation. */
inline int packuswb (code_ptr p,
              const MmReg (&   modrm_reg),
              const QwordPtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x67),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/* 66 0F 67  /r RMBoth     | Converts 8 signed word integers from xmm1 and 8 signed word integers from xmm2/m128 into 16 unsigned byte integers in xmm1 using unsigned saturation. */
inline int packuswb (code_ptr p,
              const XmmReg (&   modrm_reg),
              const XmmReg (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm,
                                       Prefix_OPERAND_SIZE),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x67),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/* 66 0F 67  /r RMBoth     | Converts 8 signed word integers from xmm1 and 8 signed word integers from xmm2/m128 into 16 unsigned byte integers in xmm1 using unsigned saturation. */
inline int packuswb (code_ptr p,
              const XmmReg (&   modrm_reg),
              const XmmWordPtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm,
                                       Prefix_OPERAND_SIZE),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x67),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/*  0F FC  /r RMBoth     | Add packed byte integers from mm/m64 and mm. */
inline int paddb (code_ptr p,
           const MmReg (&   modrm_reg),
           const MmReg (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0xfc),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/*  0F FC  /r RMBoth     | Add packed byte integers from mm/m64 and mm. */
inline int paddb (code_ptr p,
           const MmReg (&   modrm_reg),
           const QwordPtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0xfc),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/* 66 0F FC  /r RMBoth     | Add packed byte integers from xmm2/m128 and xmm1. */
inline int paddb (code_ptr p,
           const XmmReg (&   modrm_reg),
           const XmmReg (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm,
                                       Prefix_OPERAND_SIZE),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0xfc),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/* 66 0F FC  /r RMBoth     | Add packed byte integers from xmm2/m128 and xmm1. */
inline int paddb (code_ptr p,
           const XmmReg (&   modrm_reg),
           const XmmWordPtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm,
                                       Prefix_OPERAND_SIZE),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0xfc),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/*  0F FE  /r RMBoth     | Add packed doubleword integers from mm/m64 and mm. */
inline int paddd (code_ptr p,
           const MmReg (&   modrm_reg),
           const MmReg (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0xfe),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/*  0F FE  /r RMBoth     | Add packed doubleword integers from mm/m64 and mm. */
inline int paddd (code_ptr p,
           const MmReg (&   modrm_reg),
           const QwordPtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0xfe),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/* 66 0F FE  /r RMBoth     | Add packed doubleword integers from xmm2/m128 and xmm1. */
inline int paddd (code_ptr p,
           const XmmReg (&   modrm_reg),
           const XmmReg (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm,
                                       Prefix_OPERAND_SIZE),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0xfe),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/* 66 0F FE  /r RMBoth     | Add packed doubleword integers from xmm2/m128 and xmm1. */
inline int paddd (code_ptr p,
           const XmmReg (&   modrm_reg),
           const XmmWordPtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm,
                                       Prefix_OPERAND_SIZE),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0xfe),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/*  0F D4  /r RMBoth     | Add quadword integer mm2/m64 to mm1. */
inline int paddq (code_ptr p,
           const MmReg (&   modrm_reg),
           const MmReg (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0xd4),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/*  0F D4  /r RMBoth     | Add quadword integer mm2/m64 to mm1. */
inline int paddq (code_ptr p,
           const MmReg (&   modrm_reg),
           const QwordPtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0xd4),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/* 66 0F D4  /r RMBoth     | Add packed quadword integers xmm2/m128 to xmm1. */
inline int paddq (code_ptr p,
           const XmmReg (&   modrm_reg),
           const XmmReg (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm,
                                       Prefix_OPERAND_SIZE),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0xd4),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/* 66 0F D4  /r RMBoth     | Add packed quadword integers xmm2/m128 to xmm1. */
inline int paddq (code_ptr p,
           const XmmReg (&   modrm_reg),
           const XmmWordPtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm,
                                       Prefix_OPERAND_SIZE),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0xd4),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/*  0F EC  /r RMBoth     | Add packed signed byte integers from mm/m64 and mm and saturate the results. */
inline int paddsb (code_ptr p,
            const MmReg (&   modrm_reg),
            const MmReg (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0xec),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/*  0F EC  /r RMBoth     | Add packed signed byte integers from mm/m64 and mm and saturate the results. */
inline int paddsb (code_ptr p,
            const MmReg (&   modrm_reg),
            const QwordPtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0xec),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/* 66 0F EC  /r RMBoth     | Add packed signed byte integers from xmm2/m128 and xmm1 saturate the results. */
inline int paddsb (code_ptr p,
            const XmmReg (&   modrm_reg),
            const XmmReg (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm,
                                       Prefix_OPERAND_SIZE),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0xec),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/* 66 0F EC  /r RMBoth     | Add packed signed byte integers from xmm2/m128 and xmm1 saturate the results. */
inline int paddsb (code_ptr p,
            const XmmReg (&   modrm_reg),
            const XmmWordPtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm,
                                       Prefix_OPERAND_SIZE),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0xec),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/*  0F ED  /r RMBoth     | Add packed signed word integers from mm/m64 and mm and saturate the results. */
inline int paddsw (code_ptr p,
            const MmReg (&   modrm_reg),
            const MmReg (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0xed),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/*  0F ED  /r RMBoth     | Add packed signed word integers from mm/m64 and mm and saturate the results. */
inline int paddsw (code_ptr p,
            const MmReg (&   modrm_reg),
            const QwordPtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0xed),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/* 66 0F ED  /r RMBoth     | Add packed signed word integers from xmm2/m128 and xmm1 and saturate the results. */
inline int paddsw (code_ptr p,
            const XmmReg (&   modrm_reg),
            const XmmReg (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm,
                                       Prefix_OPERAND_SIZE),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0xed),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/* 66 0F ED  /r RMBoth     | Add packed signed word integers from xmm2/m128 and xmm1 and saturate the results. */
inline int paddsw (code_ptr p,
            const XmmReg (&   modrm_reg),
            const XmmWordPtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm,
                                       Prefix_OPERAND_SIZE),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0xed),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/*  0F DC  /r RMBoth     | Add packed unsigned byte integers from mm/m64 and mm and saturate the results. */
inline int paddusb (code_ptr p,
             const MmReg (&   modrm_reg),
             const MmReg (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0xdc),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/*  0F DC  /r RMBoth     | Add packed unsigned byte integers from mm/m64 and mm and saturate the results. */
inline int paddusb (code_ptr p,
             const MmReg (&   modrm_reg),
             const QwordPtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0xdc),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/* 66 0F DC  /r RMBoth     | Add packed unsigned byte integers from xmm2/m128 and xmm1 saturate the results. */
inline int paddusb (code_ptr p,
             const XmmReg (&   modrm_reg),
             const XmmReg (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm,
                                       Prefix_OPERAND_SIZE),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0xdc),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/* 66 0F DC  /r RMBoth     | Add packed unsigned byte integers from xmm2/m128 and xmm1 saturate the results. */
inline int paddusb (code_ptr p,
             const XmmReg (&   modrm_reg),
             const XmmWordPtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm,
                                       Prefix_OPERAND_SIZE),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0xdc),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/*  0F DD  /r RMBoth     | Add packed unsigned word integers from mm/m64 and mm and saturate the results. */
inline int paddusw (code_ptr p,
             const MmReg (&   modrm_reg),
             const MmReg (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0xdd),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/*  0F DD  /r RMBoth     | Add packed unsigned word integers from mm/m64 and mm and saturate the results. */
inline int paddusw (code_ptr p,
             const MmReg (&   modrm_reg),
             const QwordPtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0xdd),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/* 66 0F DD  /r RMBoth     | Add packed unsigned word integers from xmm2/m128 to xmm1 and saturate the results. */
inline int paddusw (code_ptr p,
             const XmmReg (&   modrm_reg),
             const XmmReg (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm,
                                       Prefix_OPERAND_SIZE),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0xdd),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/* 66 0F DD  /r RMBoth     | Add packed unsigned word integers from xmm2/m128 to xmm1 and saturate the results. */
inline int paddusw (code_ptr p,
             const XmmReg (&   modrm_reg),
             const XmmWordPtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm,
                                       Prefix_OPERAND_SIZE),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0xdd),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/*  0F FD  /r RMBoth     | Add packed word integers from mm/m64 and mm. */
inline int paddw (code_ptr p,
           const MmReg (&   modrm_reg),
           const MmReg (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0xfd),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/*  0F FD  /r RMBoth     | Add packed word integers from mm/m64 and mm. */
inline int paddw (code_ptr p,
           const MmReg (&   modrm_reg),
           const QwordPtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0xfd),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/* 66 0F FD  /r RMBoth     | Add packed word integers from xmm2/m128 and xmm1. */
inline int paddw (code_ptr p,
           const XmmReg (&   modrm_reg),
           const XmmReg (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm,
                                       Prefix_OPERAND_SIZE),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0xfd),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/* 66 0F FD  /r RMBoth     | Add packed word integers from xmm2/m128 and xmm1. */
inline int paddw (code_ptr p,
           const XmmReg (&   modrm_reg),
           const XmmWordPtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm,
                                       Prefix_OPERAND_SIZE),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0xfd),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/*  0F 3A 0F  /r RMBoth  ib   | Concatenate destination and source operands, extract byte-aligned result shifted to the right by constant value in imm8 into mm1. */
inline int palignr (code_ptr p,
             const MmReg (&   modrm_reg),
             const MmReg (&   modrm_rm),
             imm8_t imm)
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x3a,0xf),
                               make_modrm (modrm_rm,modrm_reg),
                               make_imm (imm));
}
/*  0F 3A 0F  /r RMBoth  ib   | Concatenate destination and source operands, extract byte-aligned result shifted to the right by constant value in imm8 into mm1. */
inline int palignr (code_ptr p,
             const MmReg (&   modrm_reg),
             const QwordPtr (&   modrm_rm),
             imm8_t imm)
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x3a,0xf),
                               make_modrm (modrm_rm,modrm_reg),
                               make_imm (imm));
}
/* 66 0F 3A 0F  /r RMBoth  ib   | Concatenate destination and source operands, extract byte-aligned result shifted to the right by constant value in imm8 into xmm1 */
inline int palignr (code_ptr p,
             const XmmReg (&   modrm_reg),
             const XmmReg (&   modrm_rm),
             imm8_t imm)
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm,
                                       Prefix_OPERAND_SIZE),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x3a,0xf),
                               make_modrm (modrm_rm,modrm_reg),
                               make_imm (imm));
}
/* 66 0F 3A 0F  /r RMBoth  ib   | Concatenate destination and source operands, extract byte-aligned result shifted to the right by constant value in imm8 into xmm1 */
inline int palignr (code_ptr p,
             const XmmReg (&   modrm_reg),
             const XmmWordPtr (&   modrm_rm),
             imm8_t imm)
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm,
                                       Prefix_OPERAND_SIZE),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x3a,0xf),
                               make_modrm (modrm_rm,modrm_reg),
                               make_imm (imm));
}
/*  0F DB  /r RMBoth     | Bitwise AND mm/m64 and mm. */
inline int pand (code_ptr p,
          const MmReg (&   modrm_reg),
          const MmReg (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0xdb),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/*  0F DB  /r RMBoth     | Bitwise AND mm/m64 and mm. */
inline int pand (code_ptr p,
          const MmReg (&   modrm_reg),
          const QwordPtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0xdb),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/* 66 0F DB  /r RMBoth     | Bitwise AND of xmm2/m128 and xmm1. */
inline int pand (code_ptr p,
          const XmmReg (&   modrm_reg),
          const XmmReg (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm,
                                       Prefix_OPERAND_SIZE),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0xdb),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/* 66 0F DB  /r RMBoth     | Bitwise AND of xmm2/m128 and xmm1. */
inline int pand (code_ptr p,
          const XmmReg (&   modrm_reg),
          const XmmWordPtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm,
                                       Prefix_OPERAND_SIZE),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0xdb),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/*  0F DF  /r RMBoth     | Bitwise AND NOT of mm/m64 and mm. */
inline int pandn (code_ptr p,
           const MmReg (&   modrm_reg),
           const MmReg (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0xdf),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/*  0F DF  /r RMBoth     | Bitwise AND NOT of mm/m64 and mm. */
inline int pandn (code_ptr p,
           const MmReg (&   modrm_reg),
           const QwordPtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0xdf),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/* 66 0F DF  /r RMBoth     | Bitwise AND NOT of xmm2/m128 and xmm1. */
inline int pandn (code_ptr p,
           const XmmReg (&   modrm_reg),
           const XmmReg (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm,
                                       Prefix_OPERAND_SIZE),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0xdf),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/* 66 0F DF  /r RMBoth     | Bitwise AND NOT of xmm2/m128 and xmm1. */
inline int pandn (code_ptr p,
           const XmmReg (&   modrm_reg),
           const XmmWordPtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm,
                                       Prefix_OPERAND_SIZE),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0xdf),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/* F3 90        | Gives hint to processor that improves performance of spin-wait loops. */
inline int pause (code_ptr p)
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       Prefix_REP),
                               Code (0x90));
}
/*  0F E0  /r RMBoth     | Average packed unsigned byte integers from mm2/m64 and mm1 with rounding. */
inline int pavgb (code_ptr p,
           const MmReg (&   modrm_reg),
           const MmReg (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0xe0),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/*  0F E0  /r RMBoth     | Average packed unsigned byte integers from mm2/m64 and mm1 with rounding. */
inline int pavgb (code_ptr p,
           const MmReg (&   modrm_reg),
           const QwordPtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0xe0),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/* 66 0F E0  /r RMBoth     | Average packed unsigned byte integers from xmm2/m128 and xmm1 with rounding. */
inline int pavgb (code_ptr p,
           const XmmReg (&   modrm_reg),
           const XmmReg (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm,
                                       Prefix_OPERAND_SIZE),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0xe0),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/* 66 0F E0  /r RMBoth     | Average packed unsigned byte integers from xmm2/m128 and xmm1 with rounding. */
inline int pavgb (code_ptr p,
           const XmmReg (&   modrm_reg),
           const XmmWordPtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm,
                                       Prefix_OPERAND_SIZE),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0xe0),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/*  0F E3  /r RMBoth     | Average packed unsigned word integers from mm2/m64 and mm1 with rounding. */
inline int pavgw (code_ptr p,
           const MmReg (&   modrm_reg),
           const MmReg (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0xe3),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/*  0F E3  /r RMBoth     | Average packed unsigned word integers from mm2/m64 and mm1 with rounding. */
inline int pavgw (code_ptr p,
           const MmReg (&   modrm_reg),
           const QwordPtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0xe3),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/* 66 0F E3  /r RMBoth     | Average packed unsigned word integers from xmm2/m128 and xmm1 with rounding. */
inline int pavgw (code_ptr p,
           const XmmReg (&   modrm_reg),
           const XmmReg (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm,
                                       Prefix_OPERAND_SIZE),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0xe3),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/* 66 0F E3  /r RMBoth     | Average packed unsigned word integers from xmm2/m128 and xmm1 with rounding. */
inline int pavgw (code_ptr p,
           const XmmReg (&   modrm_reg),
           const XmmWordPtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm,
                                       Prefix_OPERAND_SIZE),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0xe3),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/* 66 0F 38 10  /r RMBoth     | Select byte values from xmm1 and xmm2/m128 from mask specified in the high bit of each byte in XMM0 and store the values into xmm1. */
inline int pblendvb (code_ptr p,
              const XmmReg (&   modrm_reg),
              const XmmReg (&   modrm_rm),
              const RegXMM0 (&   unused))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm,
                                       Prefix_OPERAND_SIZE),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x38,0x10),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/* 66 0F 38 10  /r RMBoth     | Select byte values from xmm1 and xmm2/m128 from mask specified in the high bit of each byte in XMM0 and store the values into xmm1. */
inline int pblendvb (code_ptr p,
              const XmmReg (&   modrm_reg),
              const XmmWordPtr (&   modrm_rm),
              const RegXMM0 (&   unused))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm,
                                       Prefix_OPERAND_SIZE),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x38,0x10),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/* 66 0F 3A 0E  /r RMBoth  ib   | Select words from xmm1 and xmm2/m128 from mask specified in imm8 and store the values into xmm1. */
inline int pblendw (code_ptr p,
             const XmmReg (&   modrm_reg),
             const XmmReg (&   modrm_rm),
             imm8_t imm)
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm,
                                       Prefix_OPERAND_SIZE),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x3a,0xe),
                               make_modrm (modrm_rm,modrm_reg),
                               make_imm (imm));
}
/* 66 0F 3A 0E  /r RMBoth  ib   | Select words from xmm1 and xmm2/m128 from mask specified in imm8 and store the values into xmm1. */
inline int pblendw (code_ptr p,
             const XmmReg (&   modrm_reg),
             const XmmWordPtr (&   modrm_rm),
             imm8_t imm)
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm,
                                       Prefix_OPERAND_SIZE),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x3a,0xe),
                               make_modrm (modrm_rm,modrm_reg),
                               make_imm (imm));
}
/* 66 0F 3A 44  /r RMBoth  17   | alias for PCLMULQDQ */
inline int pclmulhqhdq (code_ptr p,
                 const XmmReg (&   modrm_reg),
                 const XmmReg (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm,
                                       Prefix_OPERAND_SIZE),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x3a,0x44),
                               make_modrm (modrm_rm,modrm_reg),
                               make_imm ((imm8_t) 17));
}
/* 66 0F 3A 44  /r RMBoth  17   | alias for PCLMULQDQ */
inline int pclmulhqhdq (code_ptr p,
                 const XmmReg (&   modrm_reg),
                 const XmmWordPtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm,
                                       Prefix_OPERAND_SIZE),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x3a,0x44),
                               make_modrm (modrm_rm,modrm_reg),
                               make_imm ((imm8_t) 17));
}
/* 66 0F 3A 44  /r RMBoth  1   | alias for PCLMULQDQ */
inline int pclmulhqlqdq (code_ptr p,
                  const XmmReg (&   modrm_reg),
                  const XmmReg (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm,
                                       Prefix_OPERAND_SIZE),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x3a,0x44),
                               make_modrm (modrm_rm,modrm_reg),
                               make_imm ((imm8_t) 1));
}
/* 66 0F 3A 44  /r RMBoth  1   | alias for PCLMULQDQ */
inline int pclmulhqlqdq (code_ptr p,
                  const XmmReg (&   modrm_reg),
                  const XmmWordPtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm,
                                       Prefix_OPERAND_SIZE),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x3a,0x44),
                               make_modrm (modrm_rm,modrm_reg),
                               make_imm ((imm8_t) 1));
}
/* 66 0F 3A 44  /r RMBoth  16   | alias for PCLMULQDQ */
inline int pclmullqhdq (code_ptr p,
                 const XmmReg (&   modrm_reg),
                 const XmmReg (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm,
                                       Prefix_OPERAND_SIZE),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x3a,0x44),
                               make_modrm (modrm_rm,modrm_reg),
                               make_imm ((imm8_t) 16));
}
/* 66 0F 3A 44  /r RMBoth  16   | alias for PCLMULQDQ */
inline int pclmullqhdq (code_ptr p,
                 const XmmReg (&   modrm_reg),
                 const XmmWordPtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm,
                                       Prefix_OPERAND_SIZE),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x3a,0x44),
                               make_modrm (modrm_rm,modrm_reg),
                               make_imm ((imm8_t) 16));
}
/* 66 0F 3A 44  /r RMBoth  0   | alias for PCLMULQDQ */
inline int pclmullqlqdq (code_ptr p,
                  const XmmReg (&   modrm_reg),
                  const XmmReg (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm,
                                       Prefix_OPERAND_SIZE),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x3a,0x44),
                               make_modrm (modrm_rm,modrm_reg),
                               make_imm ((imm8_t) 0));
}
/* 66 0F 3A 44  /r RMBoth  0   | alias for PCLMULQDQ */
inline int pclmullqlqdq (code_ptr p,
                  const XmmReg (&   modrm_reg),
                  const XmmWordPtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm,
                                       Prefix_OPERAND_SIZE),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x3a,0x44),
                               make_modrm (modrm_rm,modrm_reg),
                               make_imm ((imm8_t) 0));
}
/* 66 0F 3A 44  /r RMBoth  ib   | Carry-less multiplication of one quadword of xmm1 by one quadword of xmm2/m128, stores the 128-bit result in xmm1. The immediate is used to deter- mine which quadwords of xmm1 and xmm2/m128 should be used. */
inline int pclmulqdq (code_ptr p,
               const XmmReg (&   modrm_reg),
               const XmmReg (&   modrm_rm),
               imm8_t imm)
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm,
                                       Prefix_OPERAND_SIZE),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x3a,0x44),
                               make_modrm (modrm_rm,modrm_reg),
                               make_imm (imm));
}
/* 66 0F 3A 44  /r RMBoth  ib   | Carry-less multiplication of one quadword of xmm1 by one quadword of xmm2/m128, stores the 128-bit result in xmm1. The immediate is used to deter- mine which quadwords of xmm1 and xmm2/m128 should be used. */
inline int pclmulqdq (code_ptr p,
               const XmmReg (&   modrm_reg),
               const XmmWordPtr (&   modrm_rm),
               imm8_t imm)
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm,
                                       Prefix_OPERAND_SIZE),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x3a,0x44),
                               make_modrm (modrm_rm,modrm_reg),
                               make_imm (imm));
}
/*  0F 74  /r RMBoth     | Compare packed bytes in mm/m64 and mm for equality. */
inline int pcmpeqb (code_ptr p,
             const MmReg (&   modrm_reg),
             const MmReg (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x74),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/*  0F 74  /r RMBoth     | Compare packed bytes in mm/m64 and mm for equality. */
inline int pcmpeqb (code_ptr p,
             const MmReg (&   modrm_reg),
             const QwordPtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x74),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/* 66 0F 74  /r RMBoth     | Compare packed bytes in xmm2/m128 and xmm1 for equality. */
inline int pcmpeqb (code_ptr p,
             const XmmReg (&   modrm_reg),
             const XmmReg (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm,
                                       Prefix_OPERAND_SIZE),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x74),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/* 66 0F 74  /r RMBoth     | Compare packed bytes in xmm2/m128 and xmm1 for equality. */
inline int pcmpeqb (code_ptr p,
             const XmmReg (&   modrm_reg),
             const XmmWordPtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm,
                                       Prefix_OPERAND_SIZE),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x74),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/*  0F 76  /r RMBoth     | Compare packed doublewords in mm/m64 and mm for equality. */
inline int pcmpeqd (code_ptr p,
             const MmReg (&   modrm_reg),
             const MmReg (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x76),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/*  0F 76  /r RMBoth     | Compare packed doublewords in mm/m64 and mm for equality. */
inline int pcmpeqd (code_ptr p,
             const MmReg (&   modrm_reg),
             const QwordPtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x76),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/* 66 0F 76  /r RMBoth     | Compare packed doublewords in xmm2/m128 and xmm1 for equality. */
inline int pcmpeqd (code_ptr p,
             const XmmReg (&   modrm_reg),
             const XmmReg (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm,
                                       Prefix_OPERAND_SIZE),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x76),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/* 66 0F 76  /r RMBoth     | Compare packed doublewords in xmm2/m128 and xmm1 for equality. */
inline int pcmpeqd (code_ptr p,
             const XmmReg (&   modrm_reg),
             const XmmWordPtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm,
                                       Prefix_OPERAND_SIZE),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x76),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/* 66 0F 38 29  /r RMBoth     | Compare packed qwords in xmm2/m128 and xmm1 for equality. */
inline int pcmpeqq (code_ptr p,
             const XmmReg (&   modrm_reg),
             const XmmReg (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm,
                                       Prefix_OPERAND_SIZE),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x38,0x29),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/* 66 0F 38 29  /r RMBoth     | Compare packed qwords in xmm2/m128 and xmm1 for equality. */
inline int pcmpeqq (code_ptr p,
             const XmmReg (&   modrm_reg),
             const XmmWordPtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm,
                                       Prefix_OPERAND_SIZE),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x38,0x29),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/*  0F 75  /r RMBoth     | Compare packed words in mm/m64 and mm for equality. */
inline int pcmpeqw (code_ptr p,
             const MmReg (&   modrm_reg),
             const MmReg (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x75),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/*  0F 75  /r RMBoth     | Compare packed words in mm/m64 and mm for equality. */
inline int pcmpeqw (code_ptr p,
             const MmReg (&   modrm_reg),
             const QwordPtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x75),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/* 66 0F 75  /r RMBoth     | Compare packed words in xmm2/m128 and xmm1 for equality. */
inline int pcmpeqw (code_ptr p,
             const XmmReg (&   modrm_reg),
             const XmmReg (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm,
                                       Prefix_OPERAND_SIZE),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x75),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/* 66 0F 75  /r RMBoth     | Compare packed words in xmm2/m128 and xmm1 for equality. */
inline int pcmpeqw (code_ptr p,
             const XmmReg (&   modrm_reg),
             const XmmWordPtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm,
                                       Prefix_OPERAND_SIZE),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x75),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/* 66 0F 3A 61  /r RMBoth  ib   | Perform a packed comparison of string data with explicit lengths, generating an index, and storing the result in ECX. */
inline int pcmpestri (code_ptr p,
               const XmmReg (&   modrm_reg),
               const XmmReg (&   modrm_rm),
               imm8_t imm)
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm,
                                       Prefix_OPERAND_SIZE),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x3a,0x61),
                               make_modrm (modrm_rm,modrm_reg),
                               make_imm (imm));
}
/* 66 0F 3A 61  /r RMBoth  ib   | Perform a packed comparison of string data with explicit lengths, generating an index, and storing the result in ECX. */
inline int pcmpestri (code_ptr p,
               const XmmReg (&   modrm_reg),
               const XmmWordPtr (&   modrm_rm),
               imm8_t imm)
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm,
                                       Prefix_OPERAND_SIZE),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x3a,0x61),
                               make_modrm (modrm_rm,modrm_reg),
                               make_imm (imm));
}
/* 66 0F 3A 60  /r RMBoth  ib   | Perform a packed comparison of string data with explicit lengths, generating a mask, and storing the result in XMM0 */
inline int pcmpestrm (code_ptr p,
               const XmmReg (&   modrm_reg),
               const XmmReg (&   modrm_rm),
               imm8_t imm)
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm,
                                       Prefix_OPERAND_SIZE),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x3a,0x60),
                               make_modrm (modrm_rm,modrm_reg),
                               make_imm (imm));
}
/* 66 0F 3A 60  /r RMBoth  ib   | Perform a packed comparison of string data with explicit lengths, generating a mask, and storing the result in XMM0 */
inline int pcmpestrm (code_ptr p,
               const XmmReg (&   modrm_reg),
               const XmmWordPtr (&   modrm_rm),
               imm8_t imm)
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm,
                                       Prefix_OPERAND_SIZE),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x3a,0x60),
                               make_modrm (modrm_rm,modrm_reg),
                               make_imm (imm));
}
/*  0F 64  /r RMBoth     | Compare packed signed byte integers in mm and mm/m64 for greater than. */
inline int pcmpgtb (code_ptr p,
             const MmReg (&   modrm_reg),
             const MmReg (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x64),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/*  0F 64  /r RMBoth     | Compare packed signed byte integers in mm and mm/m64 for greater than. */
inline int pcmpgtb (code_ptr p,
             const MmReg (&   modrm_reg),
             const QwordPtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x64),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/* 66 0F 64  /r RMBoth     | Compare packed signed byte integers in xmm1 and xmm2/m128 for greater than. */
inline int pcmpgtb (code_ptr p,
             const XmmReg (&   modrm_reg),
             const XmmReg (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm,
                                       Prefix_OPERAND_SIZE),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x64),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/* 66 0F 64  /r RMBoth     | Compare packed signed byte integers in xmm1 and xmm2/m128 for greater than. */
inline int pcmpgtb (code_ptr p,
             const XmmReg (&   modrm_reg),
             const XmmWordPtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm,
                                       Prefix_OPERAND_SIZE),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x64),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/*  0F 66  /r RMBoth     | Compare packed signed doubleword integers in mm and mm/m64 for greater than. */
inline int pcmpgtd (code_ptr p,
             const MmReg (&   modrm_reg),
             const MmReg (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x66),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/*  0F 66  /r RMBoth     | Compare packed signed doubleword integers in mm and mm/m64 for greater than. */
inline int pcmpgtd (code_ptr p,
             const MmReg (&   modrm_reg),
             const QwordPtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x66),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/* 66 0F 66  /r RMBoth     | Compare packed signed doubleword integers in xmm1 and xmm2/m128 for greater than. */
inline int pcmpgtd (code_ptr p,
             const XmmReg (&   modrm_reg),
             const XmmReg (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm,
                                       Prefix_OPERAND_SIZE),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x66),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/* 66 0F 66  /r RMBoth     | Compare packed signed doubleword integers in xmm1 and xmm2/m128 for greater than. */
inline int pcmpgtd (code_ptr p,
             const XmmReg (&   modrm_reg),
             const XmmWordPtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm,
                                       Prefix_OPERAND_SIZE),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x66),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/* 66 0F 38 37  /r RMBoth     | Compare packed qwords in xmm2/m128 and xmm1 for greater than. */
inline int pcmpgtq (code_ptr p,
             const XmmReg (&   modrm_reg),
             const XmmReg (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm,
                                       Prefix_OPERAND_SIZE),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x38,0x37),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/* 66 0F 38 37  /r RMBoth     | Compare packed qwords in xmm2/m128 and xmm1 for greater than. */
inline int pcmpgtq (code_ptr p,
             const XmmReg (&   modrm_reg),
             const XmmWordPtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm,
                                       Prefix_OPERAND_SIZE),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x38,0x37),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/*  0F 65  /r RMBoth     | Compare packed signed word integers in mm and mm/m64 for greater than. */
inline int pcmpgtw (code_ptr p,
             const MmReg (&   modrm_reg),
             const MmReg (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x65),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/*  0F 65  /r RMBoth     | Compare packed signed word integers in mm and mm/m64 for greater than. */
inline int pcmpgtw (code_ptr p,
             const MmReg (&   modrm_reg),
             const QwordPtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x65),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/* 66 0F 65  /r RMBoth     | Compare packed signed word integers in xmm1 and xmm2/m128 for greater than. */
inline int pcmpgtw (code_ptr p,
             const XmmReg (&   modrm_reg),
             const XmmReg (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm,
                                       Prefix_OPERAND_SIZE),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x65),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/* 66 0F 65  /r RMBoth     | Compare packed signed word integers in xmm1 and xmm2/m128 for greater than. */
inline int pcmpgtw (code_ptr p,
             const XmmReg (&   modrm_reg),
             const XmmWordPtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm,
                                       Prefix_OPERAND_SIZE),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x65),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/* 66 0F 3A 63  /r RMBoth  ib   | Perform a packed comparison of string data with implicit lengths, generating an index, and storing the result in ECX. */
inline int pcmpistri (code_ptr p,
               const XmmReg (&   modrm_reg),
               const XmmReg (&   modrm_rm),
               imm8_t imm)
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm,
                                       Prefix_OPERAND_SIZE),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x3a,0x63),
                               make_modrm (modrm_rm,modrm_reg),
                               make_imm (imm));
}
/* 66 0F 3A 63  /r RMBoth  ib   | Perform a packed comparison of string data with implicit lengths, generating an index, and storing the result in ECX. */
inline int pcmpistri (code_ptr p,
               const XmmReg (&   modrm_reg),
               const XmmWordPtr (&   modrm_rm),
               imm8_t imm)
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm,
                                       Prefix_OPERAND_SIZE),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x3a,0x63),
                               make_modrm (modrm_rm,modrm_reg),
                               make_imm (imm));
}
/* 66 0F 3A 62  /r RMBoth  ib   | Perform a packed comparison of string data with implicit lengths, generating a mask, and storing the result in XMM0. */
inline int pcmpistrm (code_ptr p,
               const XmmReg (&   modrm_reg),
               const XmmReg (&   modrm_rm),
               imm8_t imm)
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm,
                                       Prefix_OPERAND_SIZE),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x3a,0x62),
                               make_modrm (modrm_rm,modrm_reg),
                               make_imm (imm));
}
/* 66 0F 3A 62  /r RMBoth  ib   | Perform a packed comparison of string data with implicit lengths, generating a mask, and storing the result in XMM0. */
inline int pcmpistrm (code_ptr p,
               const XmmReg (&   modrm_reg),
               const XmmWordPtr (&   modrm_rm),
               imm8_t imm)
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm,
                                       Prefix_OPERAND_SIZE),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x3a,0x62),
                               make_modrm (modrm_rm,modrm_reg),
                               make_imm (imm));
}
/* 66 0F 3A 14  /r RMBoth  ib   | Extract a byte integer value from xmm2 at the source byte offset specified by imm8 into rreg or m8. The upper bits of r32 or r64 are zeroed. */
inline int pextrb (code_ptr p,
            const DwordReg (&   modrm_rm),
            const XmmReg (&   modrm_reg),
            imm8_t imm)
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm,
                                       Prefix_OPERAND_SIZE),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x3a,0x14),
                               make_modrm (modrm_rm,modrm_reg),
                               make_imm (imm));
}
/* 66 0F 3A 14  /r RMBoth  ib   | Extract a byte integer value from xmm2 at the source byte offset specified by imm8 into rreg or m8. The upper bits of r32 or r64 are zeroed. */
inline int pextrb (code_ptr p,
            const BytePtr (&   modrm_rm),
            const XmmReg (&   modrm_reg),
            imm8_t imm)
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm,
                                       Prefix_OPERAND_SIZE),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x3a,0x14),
                               make_modrm (modrm_rm,modrm_reg),
                               make_imm (imm));
}
/* 66 0F 3A 16  /r RMBoth  ib   | Extract a dword integer value from xmm2 at the source dword offset specified by imm8 into r/m32. */
inline int pextrd (code_ptr p,
            const DwordReg (&   modrm_rm),
            const XmmReg (&   modrm_reg),
            imm8_t imm)
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm,
                                       Prefix_OPERAND_SIZE),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x3a,0x16),
                               make_modrm (modrm_rm,modrm_reg),
                               make_imm (imm));
}
/* 66 0F 3A 16  /r RMBoth  ib   | Extract a dword integer value from xmm2 at the source dword offset specified by imm8 into r/m32. */
inline int pextrd (code_ptr p,
            const DwordPtr (&   modrm_rm),
            const XmmReg (&   modrm_reg),
            imm8_t imm)
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm,
                                       Prefix_OPERAND_SIZE),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x3a,0x16),
                               make_modrm (modrm_rm,modrm_reg),
                               make_imm (imm));
}
/* 66 0F C5  /r RMRegOnly  ib   | Extract the word specified by imm8 from xmm and move it to reg, bits 15-0. The upper bits of r32 or r64 is zeroed. */
inline int pextrw (code_ptr p,
            const DwordReg (&   modrm_reg),
            const XmmReg (&   modrm_rm),
            imm8_t imm)
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm,
                                       Prefix_OPERAND_SIZE),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0xc5),
                               make_modrm (modrm_rm,modrm_reg),
                               make_imm (imm));
}
/* 66 0F 3A 15  /r RMBoth  ib   | Extract the word specified by imm8 from xmm and copy it to lowest 16 bits of reg or m16. Zero-extend the result in the destination, r32 or r64. */
inline int pextrw (code_ptr p,
            const WordPtr (&   modrm_rm),
            const XmmReg (&   modrm_reg),
            imm8_t imm)
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm,
                                       Prefix_OPERAND_SIZE),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x3a,0x15),
                               make_modrm (modrm_rm,modrm_reg),
                               make_imm (imm));
}
/*  0F C5  /r RMRegOnly  ib   | Extract the word specified by imm8 from mm and move it to reg, bits 15-0. The upper bits of r32 or r64 is zeroed. */
inline int pextrw (code_ptr p,
            const DwordReg (&   modrm_reg),
            const MmReg (&   modrm_rm),
            imm8_t imm)
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0xc5),
                               make_modrm (modrm_rm,modrm_reg),
                               make_imm (imm));
}
/*  0F 38 02  /r RMBoth     | Add 32-bit signed integers horizontally, pack to MM1. */
inline int phaddd (code_ptr p,
            const MmReg (&   modrm_reg),
            const MmReg (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x38,0x2),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/*  0F 38 02  /r RMBoth     | Add 32-bit signed integers horizontally, pack to MM1. */
inline int phaddd (code_ptr p,
            const MmReg (&   modrm_reg),
            const QwordPtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x38,0x2),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/* 66 0F 38 02  /r RMBoth     | Add 32-bit signed integers horizontally, pack to XMM1. */
inline int phaddd (code_ptr p,
            const XmmReg (&   modrm_reg),
            const XmmReg (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm,
                                       Prefix_OPERAND_SIZE),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x38,0x2),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/* 66 0F 38 02  /r RMBoth     | Add 32-bit signed integers horizontally, pack to XMM1. */
inline int phaddd (code_ptr p,
            const XmmReg (&   modrm_reg),
            const XmmWordPtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm,
                                       Prefix_OPERAND_SIZE),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x38,0x2),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/*  0F 38 03  /r RMBoth     | Add 16-bit signed integers horizontally, pack saturated integers to MM1. */
inline int phaddsw (code_ptr p,
             const MmReg (&   modrm_reg),
             const MmReg (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x38,0x3),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/*  0F 38 03  /r RMBoth     | Add 16-bit signed integers horizontally, pack saturated integers to MM1. */
inline int phaddsw (code_ptr p,
             const MmReg (&   modrm_reg),
             const QwordPtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x38,0x3),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/* 66 0F 38 03  /r RMBoth     | Add 16-bit signed integers horizontally, pack saturated integers to XMM1. */
inline int phaddsw (code_ptr p,
             const XmmReg (&   modrm_reg),
             const XmmReg (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm,
                                       Prefix_OPERAND_SIZE),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x38,0x3),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/* 66 0F 38 03  /r RMBoth     | Add 16-bit signed integers horizontally, pack saturated integers to XMM1. */
inline int phaddsw (code_ptr p,
             const XmmReg (&   modrm_reg),
             const XmmWordPtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm,
                                       Prefix_OPERAND_SIZE),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x38,0x3),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/*  0F 38 01  /r RMBoth     | Add 16-bit signed integers horizontally, pack to MM1. */
inline int phaddw (code_ptr p,
            const MmReg (&   modrm_reg),
            const MmReg (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x38,0x1),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/*  0F 38 01  /r RMBoth     | Add 16-bit signed integers horizontally, pack to MM1. */
inline int phaddw (code_ptr p,
            const MmReg (&   modrm_reg),
            const QwordPtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x38,0x1),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/* 66 0F 38 01  /r RMBoth     | Add 16-bit signed integers horizontally, pack to XMM1. */
inline int phaddw (code_ptr p,
            const XmmReg (&   modrm_reg),
            const XmmReg (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm,
                                       Prefix_OPERAND_SIZE),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x38,0x1),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/* 66 0F 38 01  /r RMBoth     | Add 16-bit signed integers horizontally, pack to XMM1. */
inline int phaddw (code_ptr p,
            const XmmReg (&   modrm_reg),
            const XmmWordPtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm,
                                       Prefix_OPERAND_SIZE),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x38,0x1),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/* 66 0F 38 41  /r RMBoth     | Find the minimum unsigned word in xmm2/m128 and place its value in the low word of xmm1 and its index in the second-lowest word of xmm1. */
inline int phminposuw (code_ptr p,
                const XmmReg (&   modrm_reg),
                const XmmReg (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm,
                                       Prefix_OPERAND_SIZE),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x38,0x41),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/* 66 0F 38 41  /r RMBoth     | Find the minimum unsigned word in xmm2/m128 and place its value in the low word of xmm1 and its index in the second-lowest word of xmm1. */
inline int phminposuw (code_ptr p,
                const XmmReg (&   modrm_reg),
                const XmmWordPtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm,
                                       Prefix_OPERAND_SIZE),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x38,0x41),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/*  0F 38 06  /r RMBoth     | Subtract 32-bit signed integers horizontally, pack to MM1. */
inline int phsubd (code_ptr p,
            const MmReg (&   modrm_reg),
            const MmReg (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x38,0x6),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/*  0F 38 06  /r RMBoth     | Subtract 32-bit signed integers horizontally, pack to MM1. */
inline int phsubd (code_ptr p,
            const MmReg (&   modrm_reg),
            const QwordPtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x38,0x6),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/* 66 0F 38 06  /r RMBoth     | Subtract 32-bit signed integers horizontally, pack to XMM1. */
inline int phsubd (code_ptr p,
            const XmmReg (&   modrm_reg),
            const XmmReg (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm,
                                       Prefix_OPERAND_SIZE),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x38,0x6),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/* 66 0F 38 06  /r RMBoth     | Subtract 32-bit signed integers horizontally, pack to XMM1. */
inline int phsubd (code_ptr p,
            const XmmReg (&   modrm_reg),
            const XmmWordPtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm,
                                       Prefix_OPERAND_SIZE),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x38,0x6),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/*  0F 38 07  /r RMBoth     | Subtract 16-bit signed integer horizontally, pack saturated integers to MM1. */
inline int phsubsw (code_ptr p,
             const MmReg (&   modrm_reg),
             const MmReg (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x38,0x7),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/*  0F 38 07  /r RMBoth     | Subtract 16-bit signed integer horizontally, pack saturated integers to MM1. */
inline int phsubsw (code_ptr p,
             const MmReg (&   modrm_reg),
             const QwordPtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x38,0x7),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/* 66 0F 38 07  /r RMBoth     | Subtract 16-bit signed integer horizontally, pack saturated integers to XMM1 */
inline int phsubsw (code_ptr p,
             const XmmReg (&   modrm_reg),
             const XmmReg (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm,
                                       Prefix_OPERAND_SIZE),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x38,0x7),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/* 66 0F 38 07  /r RMBoth     | Subtract 16-bit signed integer horizontally, pack saturated integers to XMM1 */
inline int phsubsw (code_ptr p,
             const XmmReg (&   modrm_reg),
             const XmmWordPtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm,
                                       Prefix_OPERAND_SIZE),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x38,0x7),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/*  0F 38 05  /r RMBoth     | Subtract 16-bit signed integers horizontally, pack to MM1. */
inline int phsubw (code_ptr p,
            const MmReg (&   modrm_reg),
            const MmReg (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x38,0x5),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/*  0F 38 05  /r RMBoth     | Subtract 16-bit signed integers horizontally, pack to MM1. */
inline int phsubw (code_ptr p,
            const MmReg (&   modrm_reg),
            const QwordPtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x38,0x5),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/* 66 0F 38 05  /r RMBoth     | Subtract 16-bit signed integers horizontally, pack to XMM1. */
inline int phsubw (code_ptr p,
            const XmmReg (&   modrm_reg),
            const XmmReg (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm,
                                       Prefix_OPERAND_SIZE),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x38,0x5),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/* 66 0F 38 05  /r RMBoth     | Subtract 16-bit signed integers horizontally, pack to XMM1. */
inline int phsubw (code_ptr p,
            const XmmReg (&   modrm_reg),
            const XmmWordPtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm,
                                       Prefix_OPERAND_SIZE),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x38,0x5),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/* 66 0F 3A 20  /r RMBoth  ib   | Insert a byte integer value from r32/m8 into xmm1 at the destination element in xmm1 specified by imm8. */
inline int pinsrb (code_ptr p,
            const XmmReg (&   modrm_reg),
            const DwordReg (&   modrm_rm),
            imm8_t imm)
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm,
                                       Prefix_OPERAND_SIZE),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x3a,0x20),
                               make_modrm (modrm_rm,modrm_reg),
                               make_imm (imm));
}
/* 66 0F 3A 20  /r RMBoth  ib   | Insert a byte integer value from r32/m8 into xmm1 at the destination element in xmm1 specified by imm8. */
inline int pinsrb (code_ptr p,
            const XmmReg (&   modrm_reg),
            const BytePtr (&   modrm_rm),
            imm8_t imm)
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm,
                                       Prefix_OPERAND_SIZE),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x3a,0x20),
                               make_modrm (modrm_rm,modrm_reg),
                               make_imm (imm));
}
/* 66 0F 3A 22  /r RMBoth  ib   | Insert a dword integer value from r/m32 into the xmm1 at the destination element specified by imm8. */
inline int pinsrd (code_ptr p,
            const XmmReg (&   modrm_reg),
            const DwordReg (&   modrm_rm),
            imm8_t imm)
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm,
                                       Prefix_OPERAND_SIZE),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x3a,0x22),
                               make_modrm (modrm_rm,modrm_reg),
                               make_imm (imm));
}
/* 66 0F 3A 22  /r RMBoth  ib   | Insert a dword integer value from r/m32 into the xmm1 at the destination element specified by imm8. */
inline int pinsrd (code_ptr p,
            const XmmReg (&   modrm_reg),
            const DwordPtr (&   modrm_rm),
            imm8_t imm)
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm,
                                       Prefix_OPERAND_SIZE),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x3a,0x22),
                               make_modrm (modrm_rm,modrm_reg),
                               make_imm (imm));
}
/*  0F C4  /r RMBoth  ib   | Insert the low word from r32 or from m16 into mm at the word position specified by imm8 */
inline int pinsrw (code_ptr p,
            const MmReg (&   modrm_reg),
            const DwordReg (&   modrm_rm),
            imm8_t imm)
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0xc4),
                               make_modrm (modrm_rm,modrm_reg),
                               make_imm (imm));
}
/*  0F C4  /r RMBoth  ib   | Insert the low word from r32 or from m16 into mm at the word position specified by imm8 */
inline int pinsrw (code_ptr p,
            const MmReg (&   modrm_reg),
            const WordPtr (&   modrm_rm),
            imm8_t imm)
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0xc4),
                               make_modrm (modrm_rm,modrm_reg),
                               make_imm (imm));
}
/* 66 0F C4  /r RMBoth  ib   | Move the low word of r32 or from m16 into xmm at the word position specified by imm8. */
inline int pinsrw (code_ptr p,
            const XmmReg (&   modrm_reg),
            const DwordReg (&   modrm_rm),
            imm8_t imm)
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm,
                                       Prefix_OPERAND_SIZE),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0xc4),
                               make_modrm (modrm_rm,modrm_reg),
                               make_imm (imm));
}
/* 66 0F C4  /r RMBoth  ib   | Move the low word of r32 or from m16 into xmm at the word position specified by imm8. */
inline int pinsrw (code_ptr p,
            const XmmReg (&   modrm_reg),
            const WordPtr (&   modrm_rm),
            imm8_t imm)
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm,
                                       Prefix_OPERAND_SIZE),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0xc4),
                               make_modrm (modrm_rm,modrm_reg),
                               make_imm (imm));
}
/*  0F 38 04  /r RMBoth     | Multiply signed and unsigned bytes, add horizontal pair of signed words, pack saturated signed-words to MM1. */
inline int pmaddubsw (code_ptr p,
               const MmReg (&   modrm_reg),
               const MmReg (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x38,0x4),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/*  0F 38 04  /r RMBoth     | Multiply signed and unsigned bytes, add horizontal pair of signed words, pack saturated signed-words to MM1. */
inline int pmaddubsw (code_ptr p,
               const MmReg (&   modrm_reg),
               const QwordPtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x38,0x4),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/* 66 0F 38 04  /r RMBoth     | Multiply signed and unsigned bytes, add horizontal pair of signed words, pack saturated signed-words to XMM1. */
inline int pmaddubsw (code_ptr p,
               const XmmReg (&   modrm_reg),
               const XmmReg (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm,
                                       Prefix_OPERAND_SIZE),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x38,0x4),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/* 66 0F 38 04  /r RMBoth     | Multiply signed and unsigned bytes, add horizontal pair of signed words, pack saturated signed-words to XMM1. */
inline int pmaddubsw (code_ptr p,
               const XmmReg (&   modrm_reg),
               const XmmWordPtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm,
                                       Prefix_OPERAND_SIZE),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x38,0x4),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/*  0F F5  /r RMBoth     | Multiply the packed words in mm by the packed words in mm/m64, add adjacent doubleword results, and store in mm. */
inline int pmaddwd (code_ptr p,
             const MmReg (&   modrm_reg),
             const MmReg (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0xf5),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/*  0F F5  /r RMBoth     | Multiply the packed words in mm by the packed words in mm/m64, add adjacent doubleword results, and store in mm. */
inline int pmaddwd (code_ptr p,
             const MmReg (&   modrm_reg),
             const QwordPtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0xf5),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/* 66 0F F5  /r RMBoth     | Multiply the packed word integers in xmm1 by the packed word integers in xmm2/m128, add adjacent doubleword results, and store in xmm1. */
inline int pmaddwd (code_ptr p,
             const XmmReg (&   modrm_reg),
             const XmmReg (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm,
                                       Prefix_OPERAND_SIZE),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0xf5),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/* 66 0F F5  /r RMBoth     | Multiply the packed word integers in xmm1 by the packed word integers in xmm2/m128, add adjacent doubleword results, and store in xmm1. */
inline int pmaddwd (code_ptr p,
             const XmmReg (&   modrm_reg),
             const XmmWordPtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm,
                                       Prefix_OPERAND_SIZE),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0xf5),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/* 66 0F 38 3C  /r RMBoth     | Compare packed signed byte integers in xmm1 and xmm2/m128 and store packed maximum values in xmm1. */
inline int pmaxsb (code_ptr p,
            const XmmReg (&   modrm_reg),
            const XmmReg (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm,
                                       Prefix_OPERAND_SIZE),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x38,0x3c),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/* 66 0F 38 3C  /r RMBoth     | Compare packed signed byte integers in xmm1 and xmm2/m128 and store packed maximum values in xmm1. */
inline int pmaxsb (code_ptr p,
            const XmmReg (&   modrm_reg),
            const XmmWordPtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm,
                                       Prefix_OPERAND_SIZE),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x38,0x3c),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/* 66 0F 38 3D  /r RMBoth     | Compare packed signed dword integers in xmm1 and xmm2/m128 and store packed maximum values in xmm1. */
inline int pmaxsd (code_ptr p,
            const XmmReg (&   modrm_reg),
            const XmmReg (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm,
                                       Prefix_OPERAND_SIZE),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x38,0x3d),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/* 66 0F 38 3D  /r RMBoth     | Compare packed signed dword integers in xmm1 and xmm2/m128 and store packed maximum values in xmm1. */
inline int pmaxsd (code_ptr p,
            const XmmReg (&   modrm_reg),
            const XmmWordPtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm,
                                       Prefix_OPERAND_SIZE),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x38,0x3d),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/*  0F EE  /r RMBoth     | Compare signed word integers in mm2/m64 and mm1 and return maximum values. */
inline int pmaxsw (code_ptr p,
            const MmReg (&   modrm_reg),
            const MmReg (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0xee),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/*  0F EE  /r RMBoth     | Compare signed word integers in mm2/m64 and mm1 and return maximum values. */
inline int pmaxsw (code_ptr p,
            const MmReg (&   modrm_reg),
            const QwordPtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0xee),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/* 66 0F EE  /r RMBoth     | Compare signed word integers in xmm2/m128 and xmm1 and return maximum values. */
inline int pmaxsw (code_ptr p,
            const XmmReg (&   modrm_reg),
            const XmmReg (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm,
                                       Prefix_OPERAND_SIZE),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0xee),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/* 66 0F EE  /r RMBoth     | Compare signed word integers in xmm2/m128 and xmm1 and return maximum values. */
inline int pmaxsw (code_ptr p,
            const XmmReg (&   modrm_reg),
            const XmmWordPtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm,
                                       Prefix_OPERAND_SIZE),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0xee),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/*  0F DE  /r RMBoth     | Compare unsigned byte integers in mm2/m64 and mm1 and returns maximum values. */
inline int pmaxub (code_ptr p,
            const MmReg (&   modrm_reg),
            const MmReg (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0xde),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/*  0F DE  /r RMBoth     | Compare unsigned byte integers in mm2/m64 and mm1 and returns maximum values. */
inline int pmaxub (code_ptr p,
            const MmReg (&   modrm_reg),
            const QwordPtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0xde),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/* 66 0F DE  /r RMBoth     | Compare unsigned byte integers in xmm2/m128 and xmm1 and returns maximum values. */
inline int pmaxub (code_ptr p,
            const XmmReg (&   modrm_reg),
            const XmmReg (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm,
                                       Prefix_OPERAND_SIZE),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0xde),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/* 66 0F DE  /r RMBoth     | Compare unsigned byte integers in xmm2/m128 and xmm1 and returns maximum values. */
inline int pmaxub (code_ptr p,
            const XmmReg (&   modrm_reg),
            const XmmWordPtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm,
                                       Prefix_OPERAND_SIZE),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0xde),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/* 66 0F 38 3F  /r RMBoth     | Compare packed unsigned dword integers in xmm1 and xmm2/m128 and store packed maximum values in xmm1. */
inline int pmaxud (code_ptr p,
            const XmmReg (&   modrm_reg),
            const XmmReg (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm,
                                       Prefix_OPERAND_SIZE),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x38,0x3f),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/* 66 0F 38 3F  /r RMBoth     | Compare packed unsigned dword integers in xmm1 and xmm2/m128 and store packed maximum values in xmm1. */
inline int pmaxud (code_ptr p,
            const XmmReg (&   modrm_reg),
            const XmmWordPtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm,
                                       Prefix_OPERAND_SIZE),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x38,0x3f),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/* 66 0F 38 3E  /r RMBoth     | Compare packed unsigned word integers in xmm1 and xmm2/m128 and store packed maximum values in xmm1. */
inline int pmaxuw (code_ptr p,
            const XmmReg (&   modrm_reg),
            const XmmReg (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm,
                                       Prefix_OPERAND_SIZE),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x38,0x3e),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/* 66 0F 38 3E  /r RMBoth     | Compare packed unsigned word integers in xmm1 and xmm2/m128 and store packed maximum values in xmm1. */
inline int pmaxuw (code_ptr p,
            const XmmReg (&   modrm_reg),
            const XmmWordPtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm,
                                       Prefix_OPERAND_SIZE),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x38,0x3e),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/* 66 0F 38 38  /r RMBoth     | Compare packed signed byte integers in xmm1 and xmm2/m128 and store packed minimum values in xmm1. */
inline int pminsb (code_ptr p,
            const XmmReg (&   modrm_reg),
            const XmmReg (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm,
                                       Prefix_OPERAND_SIZE),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x38,0x38),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/* 66 0F 38 38  /r RMBoth     | Compare packed signed byte integers in xmm1 and xmm2/m128 and store packed minimum values in xmm1. */
inline int pminsb (code_ptr p,
            const XmmReg (&   modrm_reg),
            const XmmWordPtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm,
                                       Prefix_OPERAND_SIZE),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x38,0x38),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/* 66 0F 38 39  /r RMBoth     | Compare packed signed dword integers in xmm1 and xmm2/m128 and store packed minimum values in xmm1. */
inline int pminsd (code_ptr p,
            const XmmReg (&   modrm_reg),
            const XmmReg (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm,
                                       Prefix_OPERAND_SIZE),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x38,0x39),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/* 66 0F 38 39  /r RMBoth     | Compare packed signed dword integers in xmm1 and xmm2/m128 and store packed minimum values in xmm1. */
inline int pminsd (code_ptr p,
            const XmmReg (&   modrm_reg),
            const XmmWordPtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm,
                                       Prefix_OPERAND_SIZE),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x38,0x39),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/*  0F EA  /r RMBoth     | Compare signed word integers in mm2/m64 and mm1 and return minimum values. */
inline int pminsw (code_ptr p,
            const MmReg (&   modrm_reg),
            const MmReg (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0xea),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/*  0F EA  /r RMBoth     | Compare signed word integers in mm2/m64 and mm1 and return minimum values. */
inline int pminsw (code_ptr p,
            const MmReg (&   modrm_reg),
            const QwordPtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0xea),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/* 66 0F EA  /r RMBoth     | Compare signed word integers in xmm2/m128 and xmm1 and return minimum values. */
inline int pminsw (code_ptr p,
            const XmmReg (&   modrm_reg),
            const XmmReg (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm,
                                       Prefix_OPERAND_SIZE),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0xea),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/* 66 0F EA  /r RMBoth     | Compare signed word integers in xmm2/m128 and xmm1 and return minimum values. */
inline int pminsw (code_ptr p,
            const XmmReg (&   modrm_reg),
            const XmmWordPtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm,
                                       Prefix_OPERAND_SIZE),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0xea),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/*  0F DA  /r RMBoth     | Compare unsigned byte integers in mm2/m64 and mm1 and returns minimum values. */
inline int pminub (code_ptr p,
            const MmReg (&   modrm_reg),
            const MmReg (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0xda),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/*  0F DA  /r RMBoth     | Compare unsigned byte integers in mm2/m64 and mm1 and returns minimum values. */
inline int pminub (code_ptr p,
            const MmReg (&   modrm_reg),
            const QwordPtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0xda),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/* 66 0F DA  /r RMBoth     | Compare unsigned byte integers in xmm2/m128 and xmm1 and returns minimum values. */
inline int pminub (code_ptr p,
            const XmmReg (&   modrm_reg),
            const XmmReg (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm,
                                       Prefix_OPERAND_SIZE),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0xda),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/* 66 0F DA  /r RMBoth     | Compare unsigned byte integers in xmm2/m128 and xmm1 and returns minimum values. */
inline int pminub (code_ptr p,
            const XmmReg (&   modrm_reg),
            const XmmWordPtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm,
                                       Prefix_OPERAND_SIZE),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0xda),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/* 66 0F 38 3B  /r RMBoth     | Compare packed unsigned dword integers in xmm1 and xmm2/m128 and store packed minimum values in xmm1. */
inline int pminud (code_ptr p,
            const XmmReg (&   modrm_reg),
            const XmmReg (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm,
                                       Prefix_OPERAND_SIZE),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x38,0x3b),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/* 66 0F 38 3B  /r RMBoth     | Compare packed unsigned dword integers in xmm1 and xmm2/m128 and store packed minimum values in xmm1. */
inline int pminud (code_ptr p,
            const XmmReg (&   modrm_reg),
            const XmmWordPtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm,
                                       Prefix_OPERAND_SIZE),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x38,0x3b),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/* 66 0F 38 3A  /r RMBoth     | Compare packed unsigned word integers in xmm1 and xmm2/m128 and store packed minimum values in xmm1. */
inline int pminuw (code_ptr p,
            const XmmReg (&   modrm_reg),
            const XmmReg (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm,
                                       Prefix_OPERAND_SIZE),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x38,0x3a),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/* 66 0F 38 3A  /r RMBoth     | Compare packed unsigned word integers in xmm1 and xmm2/m128 and store packed minimum values in xmm1. */
inline int pminuw (code_ptr p,
            const XmmReg (&   modrm_reg),
            const XmmWordPtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm,
                                       Prefix_OPERAND_SIZE),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x38,0x3a),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/*  0F D7  /r RMRegOnly     | Move a byte mask of mm to r32. */
inline int pmovmskb (code_ptr p,
              const DwordReg (&   modrm_reg),
              const MmReg (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0xd7),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/* 66 0F D7  /r RMRegOnly     | Move a byte mask of xmm to reg. The upper bits of r32 or r64 are zeroed */
inline int pmovmskb (code_ptr p,
              const DwordReg (&   modrm_reg),
              const XmmReg (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm,
                                       Prefix_OPERAND_SIZE),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0xd7),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/* 66 0F 38 21  /r RMBoth     | Sign extend 4 packed signed 8-bit integers in the low 4 bytes of xmm2/m32 to 4 packed signed 32-bit integers in xmm1. */
inline int pmovsxbd (code_ptr p,
              const XmmReg (&   modrm_reg),
              const XmmReg (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm,
                                       Prefix_OPERAND_SIZE),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x38,0x21),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/* 66 0F 38 21  /r RMBoth     | Sign extend 4 packed signed 8-bit integers in the low 4 bytes of xmm2/m32 to 4 packed signed 32-bit integers in xmm1. */
inline int pmovsxbd (code_ptr p,
              const XmmReg (&   modrm_reg),
              const DwordPtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm,
                                       Prefix_OPERAND_SIZE),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x38,0x21),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/* 66 0F 38 22  /r RMBoth     | Sign extend 2 packed signed 8-bit integers in the low 2 bytes of xmm2/m16 to 2 packed signed 64-bit integers in xmm1. */
inline int pmovsxbq (code_ptr p,
              const XmmReg (&   modrm_reg),
              const XmmReg (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm,
                                       Prefix_OPERAND_SIZE),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x38,0x22),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/* 66 0F 38 22  /r RMBoth     | Sign extend 2 packed signed 8-bit integers in the low 2 bytes of xmm2/m16 to 2 packed signed 64-bit integers in xmm1. */
inline int pmovsxbq (code_ptr p,
              const XmmReg (&   modrm_reg),
              const WordPtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm,
                                       Prefix_OPERAND_SIZE),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x38,0x22),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/* 66 0F 38 20  /r RMBoth     | Sign extend 8 packed signed 8-bit integers in the low 8 bytes of xmm2/m64 to 8 packed signed 16-bit integers in xmm1. */
inline int pmovsxbw (code_ptr p,
              const XmmReg (&   modrm_reg),
              const XmmReg (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm,
                                       Prefix_OPERAND_SIZE),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x38,0x20),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/* 66 0F 38 20  /r RMBoth     | Sign extend 8 packed signed 8-bit integers in the low 8 bytes of xmm2/m64 to 8 packed signed 16-bit integers in xmm1. */
inline int pmovsxbw (code_ptr p,
              const XmmReg (&   modrm_reg),
              const QwordPtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm,
                                       Prefix_OPERAND_SIZE),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x38,0x20),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/* 66 0F 38 25  /r RMBoth     | Sign extend 2 packed signed 32-bit integers in the low 8 bytes of xmm2/m64 to 2 packed signed 64-bit integers in xmm1. */
inline int pmovsxdq (code_ptr p,
              const XmmReg (&   modrm_reg),
              const XmmReg (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm,
                                       Prefix_OPERAND_SIZE),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x38,0x25),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/* 66 0F 38 25  /r RMBoth     | Sign extend 2 packed signed 32-bit integers in the low 8 bytes of xmm2/m64 to 2 packed signed 64-bit integers in xmm1. */
inline int pmovsxdq (code_ptr p,
              const XmmReg (&   modrm_reg),
              const QwordPtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm,
                                       Prefix_OPERAND_SIZE),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x38,0x25),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/* 66 0F 38 23  /r RMBoth     | Sign extend 4 packed signed 16-bit integers in the low 8 bytes of xmm2/m64 to 4 packed signed 32-bit integers in xmm1. */
inline int pmovsxwd (code_ptr p,
              const XmmReg (&   modrm_reg),
              const XmmReg (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm,
                                       Prefix_OPERAND_SIZE),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x38,0x23),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/* 66 0F 38 23  /r RMBoth     | Sign extend 4 packed signed 16-bit integers in the low 8 bytes of xmm2/m64 to 4 packed signed 32-bit integers in xmm1. */
inline int pmovsxwd (code_ptr p,
              const XmmReg (&   modrm_reg),
              const QwordPtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm,
                                       Prefix_OPERAND_SIZE),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x38,0x23),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/* 66 0F 38 24  /r RMBoth     | Sign extend 2 packed signed 16-bit integers in the low 4 bytes of xmm2/m32 to 2 packed signed 64-bit integers in xmm1. */
inline int pmovsxwq (code_ptr p,
              const XmmReg (&   modrm_reg),
              const XmmReg (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm,
                                       Prefix_OPERAND_SIZE),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x38,0x24),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/* 66 0F 38 24  /r RMBoth     | Sign extend 2 packed signed 16-bit integers in the low 4 bytes of xmm2/m32 to 2 packed signed 64-bit integers in xmm1. */
inline int pmovsxwq (code_ptr p,
              const XmmReg (&   modrm_reg),
              const DwordPtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm,
                                       Prefix_OPERAND_SIZE),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x38,0x24),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/* 66 0F 38 31  /r RMBoth     | Zero extend 4 packed 8-bit integers in the low 4 bytes of xmm2/m32 to 4 packed 32-bit integers in xmm1. */
inline int pmovzxbd (code_ptr p,
              const XmmReg (&   modrm_reg),
              const XmmReg (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm,
                                       Prefix_OPERAND_SIZE),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x38,0x31),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/* 66 0F 38 31  /r RMBoth     | Zero extend 4 packed 8-bit integers in the low 4 bytes of xmm2/m32 to 4 packed 32-bit integers in xmm1. */
inline int pmovzxbd (code_ptr p,
              const XmmReg (&   modrm_reg),
              const DwordPtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm,
                                       Prefix_OPERAND_SIZE),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x38,0x31),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/* 66 0F 38 32  /r RMBoth     | Zero extend 2 packed 8-bit integers in the low 2 bytes of xmm2/m16 to 2 packed 64-bit integers in xmm1. */
inline int pmovzxbq (code_ptr p,
              const XmmReg (&   modrm_reg),
              const XmmReg (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm,
                                       Prefix_OPERAND_SIZE),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x38,0x32),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/* 66 0F 38 32  /r RMBoth     | Zero extend 2 packed 8-bit integers in the low 2 bytes of xmm2/m16 to 2 packed 64-bit integers in xmm1. */
inline int pmovzxbq (code_ptr p,
              const XmmReg (&   modrm_reg),
              const WordPtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm,
                                       Prefix_OPERAND_SIZE),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x38,0x32),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/* 66 0F 38 30  /r RMBoth     | Zero extend 8 packed 8-bit integers in the low 8 bytes of xmm2/m64 to 8 packed 16-bit integers in xmm1. */
inline int pmovzxbw (code_ptr p,
              const XmmReg (&   modrm_reg),
              const XmmReg (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm,
                                       Prefix_OPERAND_SIZE),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x38,0x30),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/* 66 0F 38 30  /r RMBoth     | Zero extend 8 packed 8-bit integers in the low 8 bytes of xmm2/m64 to 8 packed 16-bit integers in xmm1. */
inline int pmovzxbw (code_ptr p,
              const XmmReg (&   modrm_reg),
              const QwordPtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm,
                                       Prefix_OPERAND_SIZE),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x38,0x30),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/* 66 0F 38 35  /r RMBoth     | Zero extend 2 packed 32-bit integers in the low 8 bytes of xmm2/m64 to 2 packed 64-bit integers in xmm1. */
inline int pmovzxdq (code_ptr p,
              const XmmReg (&   modrm_reg),
              const XmmReg (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm,
                                       Prefix_OPERAND_SIZE),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x38,0x35),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/* 66 0F 38 35  /r RMBoth     | Zero extend 2 packed 32-bit integers in the low 8 bytes of xmm2/m64 to 2 packed 64-bit integers in xmm1. */
inline int pmovzxdq (code_ptr p,
              const XmmReg (&   modrm_reg),
              const QwordPtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm,
                                       Prefix_OPERAND_SIZE),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x38,0x35),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/* 66 0F 38 33  /r RMBoth     | Zero extend 4 packed 16-bit integers in the low 8 bytes of xmm2/m64 to 4 packed 32-bit integers in xmm1. */
inline int pmovzxwd (code_ptr p,
              const XmmReg (&   modrm_reg),
              const XmmReg (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm,
                                       Prefix_OPERAND_SIZE),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x38,0x33),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/* 66 0F 38 33  /r RMBoth     | Zero extend 4 packed 16-bit integers in the low 8 bytes of xmm2/m64 to 4 packed 32-bit integers in xmm1. */
inline int pmovzxwd (code_ptr p,
              const XmmReg (&   modrm_reg),
              const QwordPtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm,
                                       Prefix_OPERAND_SIZE),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x38,0x33),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/* 66 0F 38 34  /r RMBoth     | Zero extend 2 packed 16-bit integers in the low 4 bytes of xmm2/m32 to 2 packed 64-bit integers in xmm1. */
inline int pmovzxwq (code_ptr p,
              const XmmReg (&   modrm_reg),
              const XmmReg (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm,
                                       Prefix_OPERAND_SIZE),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x38,0x34),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/* 66 0F 38 34  /r RMBoth     | Zero extend 2 packed 16-bit integers in the low 4 bytes of xmm2/m32 to 2 packed 64-bit integers in xmm1. */
inline int pmovzxwq (code_ptr p,
              const XmmReg (&   modrm_reg),
              const DwordPtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm,
                                       Prefix_OPERAND_SIZE),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x38,0x34),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/* 66 0F 38 28  /r RMBoth     | Multiply the packed signed dword integers in xmm1 and xmm2/m128 and store the quadword product in xmm1. */
inline int pmuldq (code_ptr p,
            const XmmReg (&   modrm_reg),
            const XmmReg (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm,
                                       Prefix_OPERAND_SIZE),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x38,0x28),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/* 66 0F 38 28  /r RMBoth     | Multiply the packed signed dword integers in xmm1 and xmm2/m128 and store the quadword product in xmm1. */
inline int pmuldq (code_ptr p,
            const XmmReg (&   modrm_reg),
            const XmmWordPtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm,
                                       Prefix_OPERAND_SIZE),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x38,0x28),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/*  0F 38 0B  /r RMBoth     | Multiply 16-bit signed words, scale and round signed doublewords, pack high 16 bits to MM1. */
inline int pmulhrsw (code_ptr p,
              const MmReg (&   modrm_reg),
              const MmReg (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x38,0xb),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/*  0F 38 0B  /r RMBoth     | Multiply 16-bit signed words, scale and round signed doublewords, pack high 16 bits to MM1. */
inline int pmulhrsw (code_ptr p,
              const MmReg (&   modrm_reg),
              const QwordPtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x38,0xb),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/* 66 0F 38 0B  /r RMBoth     | Multiply 16-bit signed words, scale and round signed doublewords, pack high 16 bits to XMM1. */
inline int pmulhrsw (code_ptr p,
              const XmmReg (&   modrm_reg),
              const XmmReg (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm,
                                       Prefix_OPERAND_SIZE),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x38,0xb),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/* 66 0F 38 0B  /r RMBoth     | Multiply 16-bit signed words, scale and round signed doublewords, pack high 16 bits to XMM1. */
inline int pmulhrsw (code_ptr p,
              const XmmReg (&   modrm_reg),
              const XmmWordPtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm,
                                       Prefix_OPERAND_SIZE),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x38,0xb),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/*  0F E4  /r RMBoth     | Multiply the packed unsigned word integers in mm1 register and mm2/m64, and store the high 16 bits of the results in mm1. */
inline int pmulhuw (code_ptr p,
             const MmReg (&   modrm_reg),
             const MmReg (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0xe4),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/*  0F E4  /r RMBoth     | Multiply the packed unsigned word integers in mm1 register and mm2/m64, and store the high 16 bits of the results in mm1. */
inline int pmulhuw (code_ptr p,
             const MmReg (&   modrm_reg),
             const QwordPtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0xe4),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/* 66 0F E4  /r RMBoth     | Multiply the packed unsigned word integers in xmm1 and xmm2/m128, and store the high 16 bits of the results in xmm1. */
inline int pmulhuw (code_ptr p,
             const XmmReg (&   modrm_reg),
             const XmmReg (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm,
                                       Prefix_OPERAND_SIZE),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0xe4),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/* 66 0F E4  /r RMBoth     | Multiply the packed unsigned word integers in xmm1 and xmm2/m128, and store the high 16 bits of the results in xmm1. */
inline int pmulhuw (code_ptr p,
             const XmmReg (&   modrm_reg),
             const XmmWordPtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm,
                                       Prefix_OPERAND_SIZE),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0xe4),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/*  0F E5  /r RMBoth     | Multiply the packed signed word integers in mm1 register and mm2/m64, and store the high 16 bits of the results in mm1. */
inline int pmulhw (code_ptr p,
            const MmReg (&   modrm_reg),
            const MmReg (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0xe5),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/*  0F E5  /r RMBoth     | Multiply the packed signed word integers in mm1 register and mm2/m64, and store the high 16 bits of the results in mm1. */
inline int pmulhw (code_ptr p,
            const MmReg (&   modrm_reg),
            const QwordPtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0xe5),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/* 66 0F E5  /r RMBoth     | Multiply the packed signed word integers in xmm1 and xmm2/m128, and store the high 16 bits of the results in xmm1. */
inline int pmulhw (code_ptr p,
            const XmmReg (&   modrm_reg),
            const XmmReg (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm,
                                       Prefix_OPERAND_SIZE),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0xe5),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/* 66 0F E5  /r RMBoth     | Multiply the packed signed word integers in xmm1 and xmm2/m128, and store the high 16 bits of the results in xmm1. */
inline int pmulhw (code_ptr p,
            const XmmReg (&   modrm_reg),
            const XmmWordPtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm,
                                       Prefix_OPERAND_SIZE),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0xe5),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/* 66 0F 38 40  /r RMBoth     | Multiply the packed dword signed integers in xmm1 and xmm2/m128 and store the low 32 bits of each product in xmm1. */
inline int pmulld (code_ptr p,
            const XmmReg (&   modrm_reg),
            const XmmReg (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm,
                                       Prefix_OPERAND_SIZE),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x38,0x40),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/* 66 0F 38 40  /r RMBoth     | Multiply the packed dword signed integers in xmm1 and xmm2/m128 and store the low 32 bits of each product in xmm1. */
inline int pmulld (code_ptr p,
            const XmmReg (&   modrm_reg),
            const XmmWordPtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm,
                                       Prefix_OPERAND_SIZE),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x38,0x40),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/*  0F D5  /r RMBoth     | Multiply the packed signed word integers in mm1 register and mm2/m64, and store the low 16 bits of the results in mm1. */
inline int pmullw (code_ptr p,
            const MmReg (&   modrm_reg),
            const MmReg (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0xd5),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/*  0F D5  /r RMBoth     | Multiply the packed signed word integers in mm1 register and mm2/m64, and store the low 16 bits of the results in mm1. */
inline int pmullw (code_ptr p,
            const MmReg (&   modrm_reg),
            const QwordPtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0xd5),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/* 66 0F D5  /r RMBoth     | Multiply the packed signed word integers in xmm1 and xmm2/m128, and store the low 16 bits of the results in xmm1. */
inline int pmullw (code_ptr p,
            const XmmReg (&   modrm_reg),
            const XmmReg (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm,
                                       Prefix_OPERAND_SIZE),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0xd5),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/* 66 0F D5  /r RMBoth     | Multiply the packed signed word integers in xmm1 and xmm2/m128, and store the low 16 bits of the results in xmm1. */
inline int pmullw (code_ptr p,
            const XmmReg (&   modrm_reg),
            const XmmWordPtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm,
                                       Prefix_OPERAND_SIZE),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0xd5),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/*  0F F4  /r RMBoth     | Multiply unsigned doubleword integer in mm1 by unsigned doubleword integer in mm2/m64, and store the quadword result in mm1. */
inline int pmuludq (code_ptr p,
             const MmReg (&   modrm_reg),
             const MmReg (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0xf4),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/*  0F F4  /r RMBoth     | Multiply unsigned doubleword integer in mm1 by unsigned doubleword integer in mm2/m64, and store the quadword result in mm1. */
inline int pmuludq (code_ptr p,
             const MmReg (&   modrm_reg),
             const QwordPtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0xf4),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/* 66 0F F4  /r RMBoth     | Multiply packed unsigned doubleword integers in xmm1 by packed unsigned doubleword integers in xmm2/m128, and store the quadword results in xmm1. */
inline int pmuludq (code_ptr p,
             const XmmReg (&   modrm_reg),
             const XmmReg (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm,
                                       Prefix_OPERAND_SIZE),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0xf4),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/* 66 0F F4  /r RMBoth     | Multiply packed unsigned doubleword integers in xmm1 by packed unsigned doubleword integers in xmm2/m128, and store the quadword results in xmm1. */
inline int pmuludq (code_ptr p,
             const XmmReg (&   modrm_reg),
             const XmmWordPtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm,
                                       Prefix_OPERAND_SIZE),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0xf4),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/*  58    +rd  op32  | Pop top of stack into r32; increment stack pointer. */
inline int pop (code_ptr p,
         const DwordReg (&   radd))
{
    return encode_instruction (p,
                               Prefix (Op32,AddrNothing),
                               rexByte (rex_regadd (RegAdd (radd))),
                               Code (0x58,RegAdd (radd)));
}
/*  8F  /0 RMBoth   op32  | Pop top of stack into m32; increment stack pointer. */
inline int pop (code_ptr p,
         const DwordPtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (Op32,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm)),
                               Code (0x8f),
                               make_modrm (modrm_rm,0));
}
/*  58    +rw  op16  | Pop top of stack into r16; increment stack pointer. */
inline int pop (code_ptr p,
         const WordReg (&   radd))
{
    return encode_instruction (p,
                               Prefix (Op16,AddrNothing),
                               rexByte (rex_regadd (RegAdd (radd))),
                               Code (0x58,RegAdd (radd)));
}
/*  8F  /0 RMBoth   op16  | Pop top of stack into m16; increment stack pointer. */
inline int pop (code_ptr p,
         const WordPtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (Op16,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm)),
                               Code (0x8f),
                               make_modrm (modrm_rm,0));
}
/*  1F        | Pop top of stack into DS; increment stack pointer. */
inline int pop (code_ptr p,
         const RegDS (&   unused))
{
    return encode_instruction (p,
                               Prefix (OpNothing,AddrNothing),
                               Code (0x1f));
}
/*  07        | Pop top of stack into ES; increment stack pointer. */
inline int pop (code_ptr p,
         const RegES (&   unused))
{
    return encode_instruction (p,
                               Prefix (OpNothing,AddrNothing),
                               Code (0x7));
}
/*  17        | Pop top of stack into SS; increment stack pointer. */
inline int pop (code_ptr p,
         const RegSS (&   unused))
{
    return encode_instruction (p,
                               Prefix (OpNothing,AddrNothing),
                               Code (0x17));
}
/*  0F A1        | Pop top of stack into FS; increment stack pointer by 16 bits. */
inline int pop (code_ptr p,
         const RegFS (&   unused))
{
    return encode_instruction (p,
                               Prefix (OpNothing,AddrNothing),
                               Code (0xf,0xa1));
}
/*  0F A9        | Pop top of stack into GS; increment stack pointer by 16 bits. */
inline int pop (code_ptr p,
         const RegGS (&   unused))
{
    return encode_instruction (p,
                               Prefix (OpNothing,AddrNothing),
                               Code (0xf,0xa9));
}
/*  61      op16  | Pop DI, SI, BP, BX, DX, CX, and AX. */
inline int popa (code_ptr p)
{
    return encode_instruction (p,
                               Prefix (Op16,AddrNothing),
                               Code (0x61));
}
/*  61      op32  | Pop EDI, ESI, EBP, EBX, EDX, ECX, and EAX. */
inline int popad (code_ptr p)
{
    return encode_instruction (p,
                               Prefix (Op32,AddrNothing),
                               Code (0x61));
}
/* F3 0F B8  /r RMBoth   op16  | POPCNT on r/m16 */
inline int popcnt (code_ptr p,
            const WordReg (&   modrm_reg),
            const WordReg (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (Op16,
                                       AddrNothing,
                                       modrm_rm,
                                       Prefix_REP),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0xb8),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/* F3 0F B8  /r RMBoth   op16  | POPCNT on r/m16 */
inline int popcnt (code_ptr p,
            const WordReg (&   modrm_reg),
            const WordPtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (Op16,
                                       AddrNothing,
                                       modrm_rm,
                                       Prefix_REP),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0xb8),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/* F3 0F B8  /r RMBoth   op32  | POPCNT on r/m32 */
inline int popcnt (code_ptr p,
            const DwordReg (&   modrm_reg),
            const DwordReg (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (Op32,
                                       AddrNothing,
                                       modrm_rm,
                                       Prefix_REP),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0xb8),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/* F3 0F B8  /r RMBoth   op32  | POPCNT on r/m32 */
inline int popcnt (code_ptr p,
            const DwordReg (&   modrm_reg),
            const DwordPtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (Op32,
                                       AddrNothing,
                                       modrm_rm,
                                       Prefix_REP),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0xb8),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/*  9D      op16  | Pop top of stack into lower 16 bits of EFLAGS. */
inline int popf (code_ptr p)
{
    return encode_instruction (p,
                               Prefix (Op16,AddrNothing),
                               Code (0x9d));
}
/*  9D      op32  | Pop top of stack into EFLAGS. */
inline int popfd (code_ptr p)
{
    return encode_instruction (p,
                               Prefix (Op32,AddrNothing),
                               Code (0x9d));
}
/*  0F EB  /r RMBoth     | Bitwise OR of mm/m64 and mm. */
inline int por (code_ptr p,
         const MmReg (&   modrm_reg),
         const MmReg (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0xeb),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/*  0F EB  /r RMBoth     | Bitwise OR of mm/m64 and mm. */
inline int por (code_ptr p,
         const MmReg (&   modrm_reg),
         const QwordPtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0xeb),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/* 66 0F EB  /r RMBoth     | Bitwise OR of xmm2/m128 and xmm1. */
inline int por (code_ptr p,
         const XmmReg (&   modrm_reg),
         const XmmReg (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm,
                                       Prefix_OPERAND_SIZE),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0xeb),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/* 66 0F EB  /r RMBoth     | Bitwise OR of xmm2/m128 and xmm1. */
inline int por (code_ptr p,
         const XmmReg (&   modrm_reg),
         const XmmWordPtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm,
                                       Prefix_OPERAND_SIZE),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0xeb),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/*  0F 18  /0 RMMemOnly     | Move data from m8 closer to the processor using NTA hint. */
inline int prefetchnta (code_ptr p,
                 const BytePtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm)),
                               Code (0xf,0x18),
                               make_modrm (modrm_rm,0));
}
/*  0F 18  /1 RMMemOnly     | Move data from m8 closer to the processor using T0 hint. */
inline int prefetcht0 (code_ptr p,
                const BytePtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm)),
                               Code (0xf,0x18),
                               make_modrm (modrm_rm,1));
}
/*  0F 18  /2 RMMemOnly     | Move data from m8 closer to the processor using T1 hint. */
inline int prefetcht1 (code_ptr p,
                const BytePtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm)),
                               Code (0xf,0x18),
                               make_modrm (modrm_rm,2));
}
/*  0F 18  /3 RMMemOnly     | Move data from m8 closer to the processor using T2 hint. */
inline int prefetcht2 (code_ptr p,
                const BytePtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm)),
                               Code (0xf,0x18),
                               make_modrm (modrm_rm,3));
}
/*  0F F6  /r RMBoth     | Computes the absolute differences of the packed unsigned byte integers from mm2 /m64 and mm1; differences are then summed to produce an unsigned word integer result. */
inline int psadbw (code_ptr p,
            const MmReg (&   modrm_reg),
            const MmReg (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0xf6),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/*  0F F6  /r RMBoth     | Computes the absolute differences of the packed unsigned byte integers from mm2 /m64 and mm1; differences are then summed to produce an unsigned word integer result. */
inline int psadbw (code_ptr p,
            const MmReg (&   modrm_reg),
            const QwordPtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0xf6),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/* 66 0F F6  /r RMBoth     | Computes the absolute differences of the packed unsigned byte integers from xmm2 /m128 and xmm1; the 8 low differences and 8 high differences are then summed separately to produce two unsigned word integer results. */
inline int psadbw (code_ptr p,
            const XmmReg (&   modrm_reg),
            const XmmReg (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm,
                                       Prefix_OPERAND_SIZE),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0xf6),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/* 66 0F F6  /r RMBoth     | Computes the absolute differences of the packed unsigned byte integers from xmm2 /m128 and xmm1; the 8 low differences and 8 high differences are then summed separately to produce two unsigned word integer results. */
inline int psadbw (code_ptr p,
            const XmmReg (&   modrm_reg),
            const XmmWordPtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm,
                                       Prefix_OPERAND_SIZE),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0xf6),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/*  0F 38 00  /r RMBoth     | Shuffle bytes in mm1 according to contents of mm2/m64. */
inline int pshufb (code_ptr p,
            const MmReg (&   modrm_reg),
            const MmReg (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x38,0x0),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/*  0F 38 00  /r RMBoth     | Shuffle bytes in mm1 according to contents of mm2/m64. */
inline int pshufb (code_ptr p,
            const MmReg (&   modrm_reg),
            const QwordPtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x38,0x0),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/* 66 0F 38 00  /r RMBoth     | Shuffle bytes in xmm1 according to contents of xmm2/m128. */
inline int pshufb (code_ptr p,
            const XmmReg (&   modrm_reg),
            const XmmReg (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm,
                                       Prefix_OPERAND_SIZE),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x38,0x0),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/* 66 0F 38 00  /r RMBoth     | Shuffle bytes in xmm1 according to contents of xmm2/m128. */
inline int pshufb (code_ptr p,
            const XmmReg (&   modrm_reg),
            const XmmWordPtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm,
                                       Prefix_OPERAND_SIZE),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x38,0x0),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/* 66 0F 70  /r RMBoth  ib   | Shuffle the doublewords in xmm2/m128 based on the encoding in imm8 and store the result in xmm1. */
inline int pshufd (code_ptr p,
            const XmmReg (&   modrm_reg),
            const XmmReg (&   modrm_rm),
            imm8_t imm)
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm,
                                       Prefix_OPERAND_SIZE),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x70),
                               make_modrm (modrm_rm,modrm_reg),
                               make_imm (imm));
}
/* 66 0F 70  /r RMBoth  ib   | Shuffle the doublewords in xmm2/m128 based on the encoding in imm8 and store the result in xmm1. */
inline int pshufd (code_ptr p,
            const XmmReg (&   modrm_reg),
            const XmmWordPtr (&   modrm_rm),
            imm8_t imm)
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm,
                                       Prefix_OPERAND_SIZE),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x70),
                               make_modrm (modrm_rm,modrm_reg),
                               make_imm (imm));
}
/* F3 0F 70  /r RMBoth  ib   | Shuffle the high words in xmm2/m128 based on the encoding in imm8 and store the result in xmm1. */
inline int pshufhw (code_ptr p,
             const XmmReg (&   modrm_reg),
             const XmmReg (&   modrm_rm),
             imm8_t imm)
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm,
                                       Prefix_REP),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x70),
                               make_modrm (modrm_rm,modrm_reg),
                               make_imm (imm));
}
/* F3 0F 70  /r RMBoth  ib   | Shuffle the high words in xmm2/m128 based on the encoding in imm8 and store the result in xmm1. */
inline int pshufhw (code_ptr p,
             const XmmReg (&   modrm_reg),
             const XmmWordPtr (&   modrm_rm),
             imm8_t imm)
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm,
                                       Prefix_REP),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x70),
                               make_modrm (modrm_rm,modrm_reg),
                               make_imm (imm));
}
/* F2 0F 70  /r RMBoth  ib   | Shuffle the low words in xmm2/m128 based on the encoding in imm8 and store the result in xmm1. */
inline int pshuflw (code_ptr p,
             const XmmReg (&   modrm_reg),
             const XmmReg (&   modrm_rm),
             imm8_t imm)
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm,
                                       Prefix_REPNE),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x70),
                               make_modrm (modrm_rm,modrm_reg),
                               make_imm (imm));
}
/* F2 0F 70  /r RMBoth  ib   | Shuffle the low words in xmm2/m128 based on the encoding in imm8 and store the result in xmm1. */
inline int pshuflw (code_ptr p,
             const XmmReg (&   modrm_reg),
             const XmmWordPtr (&   modrm_rm),
             imm8_t imm)
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm,
                                       Prefix_REPNE),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x70),
                               make_modrm (modrm_rm,modrm_reg),
                               make_imm (imm));
}
/*  0F 70  /r RMBoth  ib   | Shuffle the words in mm2/m64 based on the encoding in imm8 and store the result in mm1. */
inline int pshufw (code_ptr p,
            const MmReg (&   modrm_reg),
            const MmReg (&   modrm_rm),
            imm8_t imm)
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x70),
                               make_modrm (modrm_rm,modrm_reg),
                               make_imm (imm));
}
/*  0F 70  /r RMBoth  ib   | Shuffle the words in mm2/m64 based on the encoding in imm8 and store the result in mm1. */
inline int pshufw (code_ptr p,
            const MmReg (&   modrm_reg),
            const QwordPtr (&   modrm_rm),
            imm8_t imm)
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x70),
                               make_modrm (modrm_rm,modrm_reg),
                               make_imm (imm));
}
/*  0F 38 08  /r RMBoth     | Negate/zero/preserve packed byte integers in mm1 depending on the corresponding sign in mm2/m64 */
inline int psignb (code_ptr p,
            const MmReg (&   modrm_reg),
            const MmReg (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x38,0x8),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/*  0F 38 08  /r RMBoth     | Negate/zero/preserve packed byte integers in mm1 depending on the corresponding sign in mm2/m64 */
inline int psignb (code_ptr p,
            const MmReg (&   modrm_reg),
            const QwordPtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x38,0x8),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/* 66 0F 38 08  /r RMBoth     | Negate/zero/preserve packed byte integers in xmm1 depending on the corresponding sign in xmm2/m128. */
inline int psignb (code_ptr p,
            const XmmReg (&   modrm_reg),
            const XmmReg (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm,
                                       Prefix_OPERAND_SIZE),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x38,0x8),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/* 66 0F 38 08  /r RMBoth     | Negate/zero/preserve packed byte integers in xmm1 depending on the corresponding sign in xmm2/m128. */
inline int psignb (code_ptr p,
            const XmmReg (&   modrm_reg),
            const XmmWordPtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm,
                                       Prefix_OPERAND_SIZE),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x38,0x8),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/*  0F 38 0A  /r RMBoth     | Negate/zero/preserve packed doubleword integers in mm1 depending on the corresponding sign in mm2/m128. */
inline int psignd (code_ptr p,
            const MmReg (&   modrm_reg),
            const MmReg (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x38,0xa),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/*  0F 38 0A  /r RMBoth     | Negate/zero/preserve packed doubleword integers in mm1 depending on the corresponding sign in mm2/m128. */
inline int psignd (code_ptr p,
            const MmReg (&   modrm_reg),
            const QwordPtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x38,0xa),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/* 66 0F 38 0A  /r RMBoth     | Negate/zero/preserve packed doubleword integers in xmm1 depending on the corresponding sign in xmm2/m128. */
inline int psignd (code_ptr p,
            const XmmReg (&   modrm_reg),
            const XmmReg (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm,
                                       Prefix_OPERAND_SIZE),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x38,0xa),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/* 66 0F 38 0A  /r RMBoth     | Negate/zero/preserve packed doubleword integers in xmm1 depending on the corresponding sign in xmm2/m128. */
inline int psignd (code_ptr p,
            const XmmReg (&   modrm_reg),
            const XmmWordPtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm,
                                       Prefix_OPERAND_SIZE),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x38,0xa),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/*  0F 38 09  /r RMBoth     | Negate/zero/preserve packed word integers in mm1 depending on the corresponding sign in mm2/m128. */
inline int psignw (code_ptr p,
            const MmReg (&   modrm_reg),
            const MmReg (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x38,0x9),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/*  0F 38 09  /r RMBoth     | Negate/zero/preserve packed word integers in mm1 depending on the corresponding sign in mm2/m128. */
inline int psignw (code_ptr p,
            const MmReg (&   modrm_reg),
            const QwordPtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x38,0x9),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/* 66 0F 38 09  /r RMBoth     | Negate/zero/preserve packed word integers in xmm1 depending on the corresponding sign in xmm2/m128. */
inline int psignw (code_ptr p,
            const XmmReg (&   modrm_reg),
            const XmmReg (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm,
                                       Prefix_OPERAND_SIZE),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x38,0x9),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/* 66 0F 38 09  /r RMBoth     | Negate/zero/preserve packed word integers in xmm1 depending on the corresponding sign in xmm2/m128. */
inline int psignw (code_ptr p,
            const XmmReg (&   modrm_reg),
            const XmmWordPtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm,
                                       Prefix_OPERAND_SIZE),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x38,0x9),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/*  0F 72  /6 RMRegOnly  ib   | Shift doublewords in mm left by imm8 while shifting in 0s. */
inline int pslld (code_ptr p,
           const MmReg (&   modrm_rm),
           imm8_t imm)
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm)),
                               Code (0xf,0x72),
                               make_modrm (modrm_rm,6),
                               make_imm (imm));
}
/*  0F F2  /r RMBoth     | Shift doublewords in mm left by mm/m64 while shifting in 0s. */
inline int pslld (code_ptr p,
           const MmReg (&   modrm_reg),
           const MmReg (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0xf2),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/*  0F F2  /r RMBoth     | Shift doublewords in mm left by mm/m64 while shifting in 0s. */
inline int pslld (code_ptr p,
           const MmReg (&   modrm_reg),
           const QwordPtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0xf2),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/* 66 0F 72  /6 RMRegOnly  ib   | Shift doublewords in xmm1 left by imm8 while shifting in 0s. */
inline int pslld (code_ptr p,
           const XmmReg (&   modrm_rm),
           imm8_t imm)
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm,
                                       Prefix_OPERAND_SIZE),
                               rexByte (rex_modrm_rm (modrm_rm)),
                               Code (0xf,0x72),
                               make_modrm (modrm_rm,6),
                               make_imm (imm));
}
/* 66 0F F2  /r RMBoth     | Shift doublewords in xmm1 left by xmm2/m128 while shifting in 0s. */
inline int pslld (code_ptr p,
           const XmmReg (&   modrm_reg),
           const XmmReg (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm,
                                       Prefix_OPERAND_SIZE),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0xf2),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/* 66 0F F2  /r RMBoth     | Shift doublewords in xmm1 left by xmm2/m128 while shifting in 0s. */
inline int pslld (code_ptr p,
           const XmmReg (&   modrm_reg),
           const XmmWordPtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm,
                                       Prefix_OPERAND_SIZE),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0xf2),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/* 66 0F 73  /7 RMRegOnly  ib   | Shift xmm1 left by imm8 bytes while shifting in 0s. */
inline int pslldq (code_ptr p,
            const XmmReg (&   modrm_rm),
            imm8_t imm)
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm,
                                       Prefix_OPERAND_SIZE),
                               rexByte (rex_modrm_rm (modrm_rm)),
                               Code (0xf,0x73),
                               make_modrm (modrm_rm,7),
                               make_imm (imm));
}
/*  0F 73  /6 RMRegOnly  ib   | Shift quadword in mm left by imm8 while shifting in 0s. */
inline int psllq (code_ptr p,
           const MmReg (&   modrm_rm),
           imm8_t imm)
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm)),
                               Code (0xf,0x73),
                               make_modrm (modrm_rm,6),
                               make_imm (imm));
}
/*  0F F3  /r RMBoth     | Shift quadword in mm left by mm/m64 while shifting in 0s. */
inline int psllq (code_ptr p,
           const MmReg (&   modrm_reg),
           const MmReg (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0xf3),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/*  0F F3  /r RMBoth     | Shift quadword in mm left by mm/m64 while shifting in 0s. */
inline int psllq (code_ptr p,
           const MmReg (&   modrm_reg),
           const QwordPtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0xf3),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/* 66 0F 73  /6 RMRegOnly  ib   | Shift quadwords in xmm1 left by imm8 while shifting in 0s. */
inline int psllq (code_ptr p,
           const XmmReg (&   modrm_rm),
           imm8_t imm)
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm,
                                       Prefix_OPERAND_SIZE),
                               rexByte (rex_modrm_rm (modrm_rm)),
                               Code (0xf,0x73),
                               make_modrm (modrm_rm,6),
                               make_imm (imm));
}
/* 66 0F F3  /r RMBoth     | Shift quadwords in xmm1 left by xmm2/m128 while shifting in 0s. */
inline int psllq (code_ptr p,
           const XmmReg (&   modrm_reg),
           const XmmReg (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm,
                                       Prefix_OPERAND_SIZE),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0xf3),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/* 66 0F F3  /r RMBoth     | Shift quadwords in xmm1 left by xmm2/m128 while shifting in 0s. */
inline int psllq (code_ptr p,
           const XmmReg (&   modrm_reg),
           const XmmWordPtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm,
                                       Prefix_OPERAND_SIZE),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0xf3),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/*  0F 71  /6 RMRegOnly  ib   | Shift words in mm left by imm8 while shifting in 0s. */
inline int psllw (code_ptr p,
           const MmReg (&   modrm_rm),
           imm8_t imm)
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm)),
                               Code (0xf,0x71),
                               make_modrm (modrm_rm,6),
                               make_imm (imm));
}
/*  0F F1  /r RMBoth     | Shift words in mm left mm/m64 while shifting in 0s. */
inline int psllw (code_ptr p,
           const MmReg (&   modrm_reg),
           const MmReg (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0xf1),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/*  0F F1  /r RMBoth     | Shift words in mm left mm/m64 while shifting in 0s. */
inline int psllw (code_ptr p,
           const MmReg (&   modrm_reg),
           const QwordPtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0xf1),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/* 66 0F 71  /6 RMRegOnly  ib   | Shift words in xmm1 left by imm8 while shifting in 0s. */
inline int psllw (code_ptr p,
           const XmmReg (&   modrm_rm),
           imm8_t imm)
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm,
                                       Prefix_OPERAND_SIZE),
                               rexByte (rex_modrm_rm (modrm_rm)),
                               Code (0xf,0x71),
                               make_modrm (modrm_rm,6),
                               make_imm (imm));
}
/* 66 0F F1  /r RMBoth     | Shift words in xmm1 left by xmm2/m128 while shifting in 0s. */
inline int psllw (code_ptr p,
           const XmmReg (&   modrm_reg),
           const XmmReg (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm,
                                       Prefix_OPERAND_SIZE),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0xf1),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/* 66 0F F1  /r RMBoth     | Shift words in xmm1 left by xmm2/m128 while shifting in 0s. */
inline int psllw (code_ptr p,
           const XmmReg (&   modrm_reg),
           const XmmWordPtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm,
                                       Prefix_OPERAND_SIZE),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0xf1),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/*  0F 72  /4 RMRegOnly  ib   | Shift doublewords in mm right by imm8 while shifting in sign bits. */
inline int psrad (code_ptr p,
           const MmReg (&   modrm_rm),
           imm8_t imm)
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm)),
                               Code (0xf,0x72),
                               make_modrm (modrm_rm,4),
                               make_imm (imm));
}
/*  0F E2  /r RMBoth     | Shift doublewords in mm right by mm/m64 while shifting in sign bits. */
inline int psrad (code_ptr p,
           const MmReg (&   modrm_reg),
           const MmReg (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0xe2),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/*  0F E2  /r RMBoth     | Shift doublewords in mm right by mm/m64 while shifting in sign bits. */
inline int psrad (code_ptr p,
           const MmReg (&   modrm_reg),
           const QwordPtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0xe2),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/* 66 0F 72  /4 RMRegOnly  ib   | Shift doublewords in xmm1 right by imm8 while shifting in sign bits. */
inline int psrad (code_ptr p,
           const XmmReg (&   modrm_rm),
           imm8_t imm)
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm,
                                       Prefix_OPERAND_SIZE),
                               rexByte (rex_modrm_rm (modrm_rm)),
                               Code (0xf,0x72),
                               make_modrm (modrm_rm,4),
                               make_imm (imm));
}
/* 66 0F E2  /r RMBoth     | Shift doubleword in xmm1 right by xmm2 /m128 while shifting in sign bits. */
inline int psrad (code_ptr p,
           const XmmReg (&   modrm_reg),
           const XmmReg (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm,
                                       Prefix_OPERAND_SIZE),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0xe2),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/* 66 0F E2  /r RMBoth     | Shift doubleword in xmm1 right by xmm2 /m128 while shifting in sign bits. */
inline int psrad (code_ptr p,
           const XmmReg (&   modrm_reg),
           const XmmWordPtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm,
                                       Prefix_OPERAND_SIZE),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0xe2),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/*  0F 71  /4 RMRegOnly  ib   | Shift words in mm right by imm8 while shifting in sign bits */
inline int psraw (code_ptr p,
           const MmReg (&   modrm_rm),
           imm8_t imm)
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm)),
                               Code (0xf,0x71),
                               make_modrm (modrm_rm,4),
                               make_imm (imm));
}
/*  0F E1  /r RMBoth     | Shift words in mm right by mm/m64 while shifting in sign bits. */
inline int psraw (code_ptr p,
           const MmReg (&   modrm_reg),
           const MmReg (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0xe1),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/*  0F E1  /r RMBoth     | Shift words in mm right by mm/m64 while shifting in sign bits. */
inline int psraw (code_ptr p,
           const MmReg (&   modrm_reg),
           const QwordPtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0xe1),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/* 66 0F 71  /4 RMRegOnly  ib   | Shift words in xmm1 right by imm8 while shifting in sign bits */
inline int psraw (code_ptr p,
           const XmmReg (&   modrm_rm),
           imm8_t imm)
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm,
                                       Prefix_OPERAND_SIZE),
                               rexByte (rex_modrm_rm (modrm_rm)),
                               Code (0xf,0x71),
                               make_modrm (modrm_rm,4),
                               make_imm (imm));
}
/* 66 0F E1  /r RMBoth     | Shift words in xmm1 right by xmm2/m128 while shifting in sign bits. */
inline int psraw (code_ptr p,
           const XmmReg (&   modrm_reg),
           const XmmReg (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm,
                                       Prefix_OPERAND_SIZE),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0xe1),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/* 66 0F E1  /r RMBoth     | Shift words in xmm1 right by xmm2/m128 while shifting in sign bits. */
inline int psraw (code_ptr p,
           const XmmReg (&   modrm_reg),
           const XmmWordPtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm,
                                       Prefix_OPERAND_SIZE),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0xe1),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/*  0F 72  /2 RMRegOnly  ib   | Shift doublewords in mm right by imm8 while shifting in 0s. */
inline int psrld (code_ptr p,
           const MmReg (&   modrm_rm),
           imm8_t imm)
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm)),
                               Code (0xf,0x72),
                               make_modrm (modrm_rm,2),
                               make_imm (imm));
}
/*  0F D2  /r RMBoth     | Shift doublewords in mm right by amount specified in mm/m64 while shifting in 0s. */
inline int psrld (code_ptr p,
           const MmReg (&   modrm_reg),
           const MmReg (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0xd2),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/*  0F D2  /r RMBoth     | Shift doublewords in mm right by amount specified in mm/m64 while shifting in 0s. */
inline int psrld (code_ptr p,
           const MmReg (&   modrm_reg),
           const QwordPtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0xd2),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/* 66 0F 72  /2 RMRegOnly  ib   | Shift doublewords in xmm1 right by imm8 while shifting in 0s. */
inline int psrld (code_ptr p,
           const XmmReg (&   modrm_rm),
           imm8_t imm)
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm,
                                       Prefix_OPERAND_SIZE),
                               rexByte (rex_modrm_rm (modrm_rm)),
                               Code (0xf,0x72),
                               make_modrm (modrm_rm,2),
                               make_imm (imm));
}
/* 66 0F D2  /r RMBoth     | Shift doublewords in xmm1 right by amount specified in xmm2 /m128 while shifting in 0s. */
inline int psrld (code_ptr p,
           const XmmReg (&   modrm_reg),
           const XmmReg (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm,
                                       Prefix_OPERAND_SIZE),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0xd2),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/* 66 0F D2  /r RMBoth     | Shift doublewords in xmm1 right by amount specified in xmm2 /m128 while shifting in 0s. */
inline int psrld (code_ptr p,
           const XmmReg (&   modrm_reg),
           const XmmWordPtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm,
                                       Prefix_OPERAND_SIZE),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0xd2),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/* 66 0F 73  /3 RMRegOnly  ib   | Shift xmm1 right by imm8 while shifting in 0s. */
inline int psrldq (code_ptr p,
            const XmmReg (&   modrm_rm),
            imm8_t imm)
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm,
                                       Prefix_OPERAND_SIZE),
                               rexByte (rex_modrm_rm (modrm_rm)),
                               Code (0xf,0x73),
                               make_modrm (modrm_rm,3),
                               make_imm (imm));
}
/*  0F 73  /2 RMRegOnly  ib   | Shift mm right by imm8 while shifting in 0s. */
inline int psrlq (code_ptr p,
           const MmReg (&   modrm_rm),
           imm8_t imm)
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm)),
                               Code (0xf,0x73),
                               make_modrm (modrm_rm,2),
                               make_imm (imm));
}
/*  0F D3  /r RMBoth     | Shift mm right by amount specified in mm/m64 while shifting in 0s. */
inline int psrlq (code_ptr p,
           const MmReg (&   modrm_reg),
           const MmReg (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0xd3),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/*  0F D3  /r RMBoth     | Shift mm right by amount specified in mm/m64 while shifting in 0s. */
inline int psrlq (code_ptr p,
           const MmReg (&   modrm_reg),
           const QwordPtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0xd3),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/* 66 0F 73  /2 RMRegOnly  ib   | Shift quadwords in xmm1 right by imm8 while shifting in 0s. */
inline int psrlq (code_ptr p,
           const XmmReg (&   modrm_rm),
           imm8_t imm)
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm,
                                       Prefix_OPERAND_SIZE),
                               rexByte (rex_modrm_rm (modrm_rm)),
                               Code (0xf,0x73),
                               make_modrm (modrm_rm,2),
                               make_imm (imm));
}
/* 66 0F D3  /r RMBoth     | Shift quadwords in xmm1 right by amount specified in xmm2/m128 while shifting in 0s. */
inline int psrlq (code_ptr p,
           const XmmReg (&   modrm_reg),
           const XmmReg (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm,
                                       Prefix_OPERAND_SIZE),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0xd3),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/* 66 0F D3  /r RMBoth     | Shift quadwords in xmm1 right by amount specified in xmm2/m128 while shifting in 0s. */
inline int psrlq (code_ptr p,
           const XmmReg (&   modrm_reg),
           const XmmWordPtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm,
                                       Prefix_OPERAND_SIZE),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0xd3),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/*  0F 71  /2 RMRegOnly  ib   | Shift words in mm right by imm8 while shifting in 0s. */
inline int psrlw (code_ptr p,
           const MmReg (&   modrm_rm),
           imm8_t imm)
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm)),
                               Code (0xf,0x71),
                               make_modrm (modrm_rm,2),
                               make_imm (imm));
}
/*  0F D1  /r RMBoth     | Shift words in mm right by amount specified in mm/m64 while shifting in 0s. */
inline int psrlw (code_ptr p,
           const MmReg (&   modrm_reg),
           const MmReg (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0xd1),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/*  0F D1  /r RMBoth     | Shift words in mm right by amount specified in mm/m64 while shifting in 0s. */
inline int psrlw (code_ptr p,
           const MmReg (&   modrm_reg),
           const QwordPtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0xd1),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/* 66 0F 71  /2 RMRegOnly  ib   | Shift words in xmm1 right by imm8 while shifting in 0s. */
inline int psrlw (code_ptr p,
           const XmmReg (&   modrm_rm),
           imm8_t imm)
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm,
                                       Prefix_OPERAND_SIZE),
                               rexByte (rex_modrm_rm (modrm_rm)),
                               Code (0xf,0x71),
                               make_modrm (modrm_rm,2),
                               make_imm (imm));
}
/* 66 0F D1  /r RMBoth     | Shift words in xmm1 right by amount specified in xmm2/m128 while shifting in 0s. */
inline int psrlw (code_ptr p,
           const XmmReg (&   modrm_reg),
           const XmmReg (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm,
                                       Prefix_OPERAND_SIZE),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0xd1),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/* 66 0F D1  /r RMBoth     | Shift words in xmm1 right by amount specified in xmm2/m128 while shifting in 0s. */
inline int psrlw (code_ptr p,
           const XmmReg (&   modrm_reg),
           const XmmWordPtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm,
                                       Prefix_OPERAND_SIZE),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0xd1),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/*  0F F8  /r RMBoth     | Subtract packed byte integers in mm/m64 from packed byte integers in mm. */
inline int psubb (code_ptr p,
           const MmReg (&   modrm_reg),
           const MmReg (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0xf8),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/*  0F F8  /r RMBoth     | Subtract packed byte integers in mm/m64 from packed byte integers in mm. */
inline int psubb (code_ptr p,
           const MmReg (&   modrm_reg),
           const QwordPtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0xf8),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/* 66 0F F8  /r RMBoth     | Subtract packed byte integers in xmm2/m128 from packed byte integers in xmm1. */
inline int psubb (code_ptr p,
           const XmmReg (&   modrm_reg),
           const XmmReg (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm,
                                       Prefix_OPERAND_SIZE),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0xf8),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/* 66 0F F8  /r RMBoth     | Subtract packed byte integers in xmm2/m128 from packed byte integers in xmm1. */
inline int psubb (code_ptr p,
           const XmmReg (&   modrm_reg),
           const XmmWordPtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm,
                                       Prefix_OPERAND_SIZE),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0xf8),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/*  0F FA  /r RMBoth     | Subtract packed doubleword integers in mm/m64 from packed doubleword integers in mm. */
inline int psubd (code_ptr p,
           const MmReg (&   modrm_reg),
           const MmReg (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0xfa),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/*  0F FA  /r RMBoth     | Subtract packed doubleword integers in mm/m64 from packed doubleword integers in mm. */
inline int psubd (code_ptr p,
           const MmReg (&   modrm_reg),
           const QwordPtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0xfa),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/* 66 0F FA  /r RMBoth     | Subtract packed doubleword integers in xmm2/mem128 from packed doubleword integers in xmm1. */
inline int psubd (code_ptr p,
           const XmmReg (&   modrm_reg),
           const XmmReg (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm,
                                       Prefix_OPERAND_SIZE),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0xfa),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/* 66 0F FA  /r RMBoth     | Subtract packed doubleword integers in xmm2/mem128 from packed doubleword integers in xmm1. */
inline int psubd (code_ptr p,
           const XmmReg (&   modrm_reg),
           const XmmWordPtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm,
                                       Prefix_OPERAND_SIZE),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0xfa),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/*  0F FB  /r RMBoth     | Subtract quadword integer in mm1 from mm2 /m64. */
inline int psubq (code_ptr p,
           const MmReg (&   modrm_reg),
           const MmReg (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0xfb),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/*  0F FB  /r RMBoth     | Subtract quadword integer in mm1 from mm2 /m64. */
inline int psubq (code_ptr p,
           const MmReg (&   modrm_reg),
           const QwordPtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0xfb),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/* 66 0F FB  /r RMBoth     | Subtract packed quadword integers in xmm1 from xmm2 /m128. */
inline int psubq (code_ptr p,
           const XmmReg (&   modrm_reg),
           const XmmReg (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm,
                                       Prefix_OPERAND_SIZE),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0xfb),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/* 66 0F FB  /r RMBoth     | Subtract packed quadword integers in xmm1 from xmm2 /m128. */
inline int psubq (code_ptr p,
           const XmmReg (&   modrm_reg),
           const XmmWordPtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm,
                                       Prefix_OPERAND_SIZE),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0xfb),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/*  0F E8  /r RMBoth     | Subtract signed packed bytes in mm/m64 from signed packed bytes in mm and saturate results. */
inline int psubsb (code_ptr p,
            const MmReg (&   modrm_reg),
            const MmReg (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0xe8),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/*  0F E8  /r RMBoth     | Subtract signed packed bytes in mm/m64 from signed packed bytes in mm and saturate results. */
inline int psubsb (code_ptr p,
            const MmReg (&   modrm_reg),
            const QwordPtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0xe8),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/* 66 0F E8  /r RMBoth     | Subtract packed signed byte integers in xmm2/m128 from packed signed byte integers in xmm1 and saturate results. */
inline int psubsb (code_ptr p,
            const XmmReg (&   modrm_reg),
            const XmmReg (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm,
                                       Prefix_OPERAND_SIZE),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0xe8),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/* 66 0F E8  /r RMBoth     | Subtract packed signed byte integers in xmm2/m128 from packed signed byte integers in xmm1 and saturate results. */
inline int psubsb (code_ptr p,
            const XmmReg (&   modrm_reg),
            const XmmWordPtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm,
                                       Prefix_OPERAND_SIZE),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0xe8),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/*  0F E9  /r RMBoth     | Subtract signed packed words in mm/m64 from signed packed words in mm and saturate results. */
inline int psubsw (code_ptr p,
            const MmReg (&   modrm_reg),
            const MmReg (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0xe9),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/*  0F E9  /r RMBoth     | Subtract signed packed words in mm/m64 from signed packed words in mm and saturate results. */
inline int psubsw (code_ptr p,
            const MmReg (&   modrm_reg),
            const QwordPtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0xe9),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/* 66 0F E9  /r RMBoth     | Subtract packed signed word integers in xmm2/m128 from packed signed word integers in xmm1 and saturate results. */
inline int psubsw (code_ptr p,
            const XmmReg (&   modrm_reg),
            const XmmReg (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm,
                                       Prefix_OPERAND_SIZE),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0xe9),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/* 66 0F E9  /r RMBoth     | Subtract packed signed word integers in xmm2/m128 from packed signed word integers in xmm1 and saturate results. */
inline int psubsw (code_ptr p,
            const XmmReg (&   modrm_reg),
            const XmmWordPtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm,
                                       Prefix_OPERAND_SIZE),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0xe9),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/*  0F D8  /r RMBoth     | Subtract unsigned packed bytes in mm/m64 from unsigned packed bytes in mm and saturate result. */
inline int psubusb (code_ptr p,
             const MmReg (&   modrm_reg),
             const MmReg (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0xd8),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/*  0F D8  /r RMBoth     | Subtract unsigned packed bytes in mm/m64 from unsigned packed bytes in mm and saturate result. */
inline int psubusb (code_ptr p,
             const MmReg (&   modrm_reg),
             const QwordPtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0xd8),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/* 66 0F D8  /r RMBoth     | Subtract packed unsigned byte integers in xmm2/m128 from packed unsigned byte integers in xmm1 and saturate result. */
inline int psubusb (code_ptr p,
             const XmmReg (&   modrm_reg),
             const XmmReg (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm,
                                       Prefix_OPERAND_SIZE),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0xd8),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/* 66 0F D8  /r RMBoth     | Subtract packed unsigned byte integers in xmm2/m128 from packed unsigned byte integers in xmm1 and saturate result. */
inline int psubusb (code_ptr p,
             const XmmReg (&   modrm_reg),
             const XmmWordPtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm,
                                       Prefix_OPERAND_SIZE),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0xd8),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/*  0F D9  /r RMBoth     | Subtract unsigned packed words in mm/m64 from unsigned packed words in mm and saturate result. */
inline int psubusw (code_ptr p,
             const MmReg (&   modrm_reg),
             const MmReg (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0xd9),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/*  0F D9  /r RMBoth     | Subtract unsigned packed words in mm/m64 from unsigned packed words in mm and saturate result. */
inline int psubusw (code_ptr p,
             const MmReg (&   modrm_reg),
             const QwordPtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0xd9),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/* 66 0F D9  /r RMBoth     | Subtract packed unsigned word integers in xmm2/m128 from packed unsigned word integers in xmm1 and saturate result. */
inline int psubusw (code_ptr p,
             const XmmReg (&   modrm_reg),
             const XmmReg (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm,
                                       Prefix_OPERAND_SIZE),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0xd9),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/* 66 0F D9  /r RMBoth     | Subtract packed unsigned word integers in xmm2/m128 from packed unsigned word integers in xmm1 and saturate result. */
inline int psubusw (code_ptr p,
             const XmmReg (&   modrm_reg),
             const XmmWordPtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm,
                                       Prefix_OPERAND_SIZE),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0xd9),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/*  0F F9  /r RMBoth     | Subtract packed word integers in mm/m64 from packed word integers in mm. */
inline int psubw (code_ptr p,
           const MmReg (&   modrm_reg),
           const MmReg (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0xf9),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/*  0F F9  /r RMBoth     | Subtract packed word integers in mm/m64 from packed word integers in mm. */
inline int psubw (code_ptr p,
           const MmReg (&   modrm_reg),
           const QwordPtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0xf9),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/* 66 0F F9  /r RMBoth     | Subtract packed word integers in xmm2/m128 from packed word integers in xmm1. */
inline int psubw (code_ptr p,
           const XmmReg (&   modrm_reg),
           const XmmReg (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm,
                                       Prefix_OPERAND_SIZE),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0xf9),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/* 66 0F F9  /r RMBoth     | Subtract packed word integers in xmm2/m128 from packed word integers in xmm1. */
inline int psubw (code_ptr p,
           const XmmReg (&   modrm_reg),
           const XmmWordPtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm,
                                       Prefix_OPERAND_SIZE),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0xf9),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/* 66 0F 38 17  /r RMBoth     | Set ZF if xmm2/m128 AND xmm1 result is all 0s. Set CF if xmm2/m128 AND NOT xmm1 result is all 0s. */
inline int ptest (code_ptr p,
           const XmmReg (&   modrm_reg),
           const XmmReg (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm,
                                       Prefix_OPERAND_SIZE),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x38,0x17),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/* 66 0F 38 17  /r RMBoth     | Set ZF if xmm2/m128 AND xmm1 result is all 0s. Set CF if xmm2/m128 AND NOT xmm1 result is all 0s. */
inline int ptest (code_ptr p,
           const XmmReg (&   modrm_reg),
           const XmmWordPtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm,
                                       Prefix_OPERAND_SIZE),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x38,0x17),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/*  0F 68  /r RMBoth     | Unpack and interleave high- order bytes from mm and mm/m64 into mm. */
inline int punpckhbw (code_ptr p,
               const MmReg (&   modrm_reg),
               const MmReg (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x68),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/*  0F 68  /r RMBoth     | Unpack and interleave high- order bytes from mm and mm/m64 into mm. */
inline int punpckhbw (code_ptr p,
               const MmReg (&   modrm_reg),
               const QwordPtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x68),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/* 66 0F 68  /r RMBoth     | Unpack and interleave high- order bytes from xmm1 and xmm2/m128 into xmm1. */
inline int punpckhbw (code_ptr p,
               const XmmReg (&   modrm_reg),
               const XmmReg (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm,
                                       Prefix_OPERAND_SIZE),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x68),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/* 66 0F 68  /r RMBoth     | Unpack and interleave high- order bytes from xmm1 and xmm2/m128 into xmm1. */
inline int punpckhbw (code_ptr p,
               const XmmReg (&   modrm_reg),
               const XmmWordPtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm,
                                       Prefix_OPERAND_SIZE),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x68),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/*  0F 6A  /r RMBoth     | Unpack and interleave high- order doublewords from mm and mm/m64 into mm. */
inline int punpckhdq (code_ptr p,
               const MmReg (&   modrm_reg),
               const MmReg (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x6a),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/*  0F 6A  /r RMBoth     | Unpack and interleave high- order doublewords from mm and mm/m64 into mm. */
inline int punpckhdq (code_ptr p,
               const MmReg (&   modrm_reg),
               const QwordPtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x6a),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/* 66 0F 6A  /r RMBoth     | Unpack and interleave high- order doublewords from xmm1 and xmm2/m128 into xmm1. */
inline int punpckhdq (code_ptr p,
               const XmmReg (&   modrm_reg),
               const XmmReg (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm,
                                       Prefix_OPERAND_SIZE),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x6a),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/* 66 0F 6A  /r RMBoth     | Unpack and interleave high- order doublewords from xmm1 and xmm2/m128 into xmm1. */
inline int punpckhdq (code_ptr p,
               const XmmReg (&   modrm_reg),
               const XmmWordPtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm,
                                       Prefix_OPERAND_SIZE),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x6a),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/* 66 0F 6D  /r RMBoth     | Unpack and interleave high- order quadwords from xmm1 and xmm2/m128 into xmm1. */
inline int punpckhqdq (code_ptr p,
                const XmmReg (&   modrm_reg),
                const XmmReg (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm,
                                       Prefix_OPERAND_SIZE),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x6d),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/* 66 0F 6D  /r RMBoth     | Unpack and interleave high- order quadwords from xmm1 and xmm2/m128 into xmm1. */
inline int punpckhqdq (code_ptr p,
                const XmmReg (&   modrm_reg),
                const XmmWordPtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm,
                                       Prefix_OPERAND_SIZE),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x6d),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/*  0F 69  /r RMBoth     | Unpack and interleave high- order words from mm and mm/m64 into mm. */
inline int punpckhwd (code_ptr p,
               const MmReg (&   modrm_reg),
               const MmReg (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x69),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/*  0F 69  /r RMBoth     | Unpack and interleave high- order words from mm and mm/m64 into mm. */
inline int punpckhwd (code_ptr p,
               const MmReg (&   modrm_reg),
               const QwordPtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x69),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/* 66 0F 69  /r RMBoth     | Unpack and interleave high- order words from xmm1 and xmm2/m128 into xmm1. */
inline int punpckhwd (code_ptr p,
               const XmmReg (&   modrm_reg),
               const XmmReg (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm,
                                       Prefix_OPERAND_SIZE),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x69),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/* 66 0F 69  /r RMBoth     | Unpack and interleave high- order words from xmm1 and xmm2/m128 into xmm1. */
inline int punpckhwd (code_ptr p,
               const XmmReg (&   modrm_reg),
               const XmmWordPtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm,
                                       Prefix_OPERAND_SIZE),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x69),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/*  0F 60  /r RMBoth     | Interleave low-order bytes from mm and mm/m32 into mm. */
inline int punpcklbw (code_ptr p,
               const MmReg (&   modrm_reg),
               const MmReg (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x60),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/*  0F 60  /r RMBoth     | Interleave low-order bytes from mm and mm/m32 into mm. */
inline int punpcklbw (code_ptr p,
               const MmReg (&   modrm_reg),
               const DwordPtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x60),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/* 66 0F 60  /r RMBoth     | Interleave low-order bytes from xmm1 and xmm2/m128 into xmm1. */
inline int punpcklbw (code_ptr p,
               const XmmReg (&   modrm_reg),
               const XmmReg (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm,
                                       Prefix_OPERAND_SIZE),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x60),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/* 66 0F 60  /r RMBoth     | Interleave low-order bytes from xmm1 and xmm2/m128 into xmm1. */
inline int punpcklbw (code_ptr p,
               const XmmReg (&   modrm_reg),
               const XmmWordPtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm,
                                       Prefix_OPERAND_SIZE),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x60),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/*  0F 62  /r RMBoth     | Interleave low-order doublewords from mm and mm/m32 into mm. */
inline int punpckldq (code_ptr p,
               const MmReg (&   modrm_reg),
               const MmReg (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x62),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/*  0F 62  /r RMBoth     | Interleave low-order doublewords from mm and mm/m32 into mm. */
inline int punpckldq (code_ptr p,
               const MmReg (&   modrm_reg),
               const DwordPtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x62),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/* 66 0F 62  /r RMBoth     | Interleave low-order doublewords from xmm1 and xmm2/m128 into xmm1. */
inline int punpckldq (code_ptr p,
               const XmmReg (&   modrm_reg),
               const XmmReg (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm,
                                       Prefix_OPERAND_SIZE),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x62),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/* 66 0F 62  /r RMBoth     | Interleave low-order doublewords from xmm1 and xmm2/m128 into xmm1. */
inline int punpckldq (code_ptr p,
               const XmmReg (&   modrm_reg),
               const XmmWordPtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm,
                                       Prefix_OPERAND_SIZE),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x62),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/* 66 0F 6C  /r RMBoth     | Interleave low-order quadword from xmm1 and xmm2/m128 into xmm1 register. */
inline int punpcklqdq (code_ptr p,
                const XmmReg (&   modrm_reg),
                const XmmReg (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm,
                                       Prefix_OPERAND_SIZE),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x6c),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/* 66 0F 6C  /r RMBoth     | Interleave low-order quadword from xmm1 and xmm2/m128 into xmm1 register. */
inline int punpcklqdq (code_ptr p,
                const XmmReg (&   modrm_reg),
                const XmmWordPtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm,
                                       Prefix_OPERAND_SIZE),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x6c),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/*  0F 61  /r RMBoth     | Interleave low-order words from mm and mm/m32 into mm. */
inline int punpcklwd (code_ptr p,
               const MmReg (&   modrm_reg),
               const MmReg (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x61),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/*  0F 61  /r RMBoth     | Interleave low-order words from mm and mm/m32 into mm. */
inline int punpcklwd (code_ptr p,
               const MmReg (&   modrm_reg),
               const DwordPtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x61),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/* 66 0F 61  /r RMBoth     | Interleave low-order words from xmm1 and xmm2/m128 into xmm1. */
inline int punpcklwd (code_ptr p,
               const XmmReg (&   modrm_reg),
               const XmmReg (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm,
                                       Prefix_OPERAND_SIZE),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x61),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/* 66 0F 61  /r RMBoth     | Interleave low-order words from xmm1 and xmm2/m128 into xmm1. */
inline int punpcklwd (code_ptr p,
               const XmmReg (&   modrm_reg),
               const XmmWordPtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm,
                                       Prefix_OPERAND_SIZE),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x61),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/*  50    +rd  op32  | Push r32. */
inline int push (code_ptr p,
          const DwordReg (&   radd))
{
    return encode_instruction (p,
                               Prefix (Op32,AddrNothing),
                               rexByte (rex_regadd (RegAdd (radd))),
                               Code (0x50,RegAdd (radd)));
}
/*  FF  /6 RMBoth   op32  | Push r/m32. */
inline int push (code_ptr p,
          const DwordPtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (Op32,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm)),
                               Code (0xff),
                               make_modrm (modrm_rm,6));
}
/*  50    +rw  op16  | Push r16. */
inline int push (code_ptr p,
          const WordReg (&   radd))
{
    return encode_instruction (p,
                               Prefix (Op16,AddrNothing),
                               rexByte (rex_regadd (RegAdd (radd))),
                               Code (0x50,RegAdd (radd)));
}
/*  FF  /6 RMBoth   op16  | Push r/m16. */
inline int push (code_ptr p,
          const WordPtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (Op16,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm)),
                               Code (0xff),
                               make_modrm (modrm_rm,6));
}
/*  6A     ib   | Push sign-extended imm8. Stack pointer is decremented by the size of stack pointer. */
inline int push (code_ptr p,imm8_t imm)
{
    return encode_instruction (p,
                               Prefix (OpNothing,AddrNothing),
                               Code (0x6a),
                               make_imm (imm));
}
/*  68     iw op16  | Push sign-extended imm16. Stack pointer is decremented by the size of stack pointer. */
inline int push (code_ptr p,
          imm16_t imm)
{
    return encode_instruction (p,
                               Prefix (Op16,AddrNothing),
                               Code (0x68),
                               make_imm (imm));
}
/*  68     id op32  | Push sign-extended imm32. Stack pointer is decremented by the size of stack pointer. */
inline int push (code_ptr p,
          imm32_t imm)
{
    return encode_instruction (p,
                               Prefix (Op32,AddrNothing),
                               Code (0x68),
                               make_imm (imm));
}
/*  1E        | Push DS. */
inline int push (code_ptr p,
          const RegDS (&   unused))
{
    return encode_instruction (p,
                               Prefix (OpNothing,AddrNothing),
                               Code (0x1e));
}
/*  06        | Push ES. */
inline int push (code_ptr p,
          const RegES (&   unused))
{
    return encode_instruction (p,
                               Prefix (OpNothing,AddrNothing),
                               Code (0x6));
}
/*  16        | Push SS. */
inline int push (code_ptr p,
          const RegSS (&   unused))
{
    return encode_instruction (p,
                               Prefix (OpNothing,AddrNothing),
                               Code (0x16));
}
/*  0F A0        | Push FS and decrement stack pointer by 16 bits. */
inline int push (code_ptr p,
          const RegFS (&   unused))
{
    return encode_instruction (p,
                               Prefix (OpNothing,AddrNothing),
                               Code (0xf,0xa0));
}
/*  0F A8        | Push GS and decrement stack pointer by 16 bits. */
inline int push (code_ptr p,
          const RegGS (&   unused))
{
    return encode_instruction (p,
                               Prefix (OpNothing,AddrNothing),
                               Code (0xf,0xa8));
}
/*  0E        | Push CS. */
inline int push (code_ptr p,
          const RegCS (&   unused))
{
    return encode_instruction (p,
                               Prefix (OpNothing,AddrNothing),
                               Code (0xe));
}
/*  60      op16  | Push AX, CX, DX, BX, original SP, BP, SI, and DI. */
inline int pusha (code_ptr p)
{
    return encode_instruction (p,
                               Prefix (Op16,AddrNothing),
                               Code (0x60));
}
/*  60      op32  | Push EAX, ECX, EDX, EBX, original ESP, EBP, ESI, and EDI. */
inline int pushad (code_ptr p)
{
    return encode_instruction (p,
                               Prefix (Op32,AddrNothing),
                               Code (0x60));
}
/*  9C      op16  | Push lower 16 bits of EFLAGS. */
inline int pushf (code_ptr p)
{
    return encode_instruction (p,
                               Prefix (Op16,AddrNothing),
                               Code (0x9c));
}
/*  9C      op32  | Push EFLAGS. */
inline int pushfd (code_ptr p)
{
    return encode_instruction (p,
                               Prefix (Op32,AddrNothing),
                               Code (0x9c));
}
/*  0F EF  /r RMBoth     | Bitwise XOR of mm/m64 and mm. */
inline int pxor (code_ptr p,
          const MmReg (&   modrm_reg),
          const MmReg (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0xef),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/*  0F EF  /r RMBoth     | Bitwise XOR of mm/m64 and mm. */
inline int pxor (code_ptr p,
          const MmReg (&   modrm_reg),
          const QwordPtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0xef),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/* 66 0F EF  /r RMBoth     | Bitwise XOR of xmm2/m128 and xmm1. */
inline int pxor (code_ptr p,
          const XmmReg (&   modrm_reg),
          const XmmReg (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm,
                                       Prefix_OPERAND_SIZE),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0xef),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/* 66 0F EF  /r RMBoth     | Bitwise XOR of xmm2/m128 and xmm1. */
inline int pxor (code_ptr p,
          const XmmReg (&   modrm_reg),
          const XmmWordPtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm,
                                       Prefix_OPERAND_SIZE),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0xef),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/*  C1  /2 RMBoth  ib op32  | Rotate 33 bits (CF, r/m32) left imm8 times. */
inline int rcl (code_ptr p,
         const DwordReg (&   modrm_rm),
         imm8_t imm)
{
    if (imm == 1)
       {
           return encode_instruction (p,
                                      Prefix (Op32,
                                              AddrNothing,
                                              modrm_rm),
                                      rexByte (rex_modrm_rm (modrm_rm)),
                                      Code (0xd1),
                                      make_modrm (modrm_rm,2));
       }
    else
       {
           return encode_instruction (p,
                                      Prefix (Op32,
                                              AddrNothing,
                                              modrm_rm),
                                      rexByte (rex_modrm_rm (modrm_rm)),
                                      Code (0xc1),
                                      make_modrm (modrm_rm,2),
                                      make_imm (imm));
       }
}
/*  C1  /2 RMBoth  ib op32  | Rotate 33 bits (CF, r/m32) left imm8 times. */
inline int rcl (code_ptr p,
         const DwordPtr (&   modrm_rm),
         imm8_t imm)
{
    if (imm == 1)
       {
           return encode_instruction (p,
                                      Prefix (Op32,
                                              AddrNothing,
                                              modrm_rm),
                                      rexByte (rex_modrm_rm (modrm_rm)),
                                      Code (0xd1),
                                      make_modrm (modrm_rm,2));
       }
    else
       {
           return encode_instruction (p,
                                      Prefix (Op32,
                                              AddrNothing,
                                              modrm_rm),
                                      rexByte (rex_modrm_rm (modrm_rm)),
                                      Code (0xc1),
                                      make_modrm (modrm_rm,2),
                                      make_imm (imm));
       }
}
/*  C1  /2 RMBoth  ib op16  | Rotate 17 bits (CF, r/m16) left imm8 times. */
inline int rcl (code_ptr p,
         const WordReg (&   modrm_rm),
         imm8_t imm)
{
    if (imm == 1)
       {
           return encode_instruction (p,
                                      Prefix (Op16,
                                              AddrNothing,
                                              modrm_rm),
                                      rexByte (rex_modrm_rm (modrm_rm)),
                                      Code (0xd1),
                                      make_modrm (modrm_rm,2));
       }
    else
       {
           return encode_instruction (p,
                                      Prefix (Op16,
                                              AddrNothing,
                                              modrm_rm),
                                      rexByte (rex_modrm_rm (modrm_rm)),
                                      Code (0xc1),
                                      make_modrm (modrm_rm,2),
                                      make_imm (imm));
       }
}
/*  C1  /2 RMBoth  ib op16  | Rotate 17 bits (CF, r/m16) left imm8 times. */
inline int rcl (code_ptr p,
         const WordPtr (&   modrm_rm),
         imm8_t imm)
{
    if (imm == 1)
       {
           return encode_instruction (p,
                                      Prefix (Op16,
                                              AddrNothing,
                                              modrm_rm),
                                      rexByte (rex_modrm_rm (modrm_rm)),
                                      Code (0xd1),
                                      make_modrm (modrm_rm,2));
       }
    else
       {
           return encode_instruction (p,
                                      Prefix (Op16,
                                              AddrNothing,
                                              modrm_rm),
                                      rexByte (rex_modrm_rm (modrm_rm)),
                                      Code (0xc1),
                                      make_modrm (modrm_rm,2),
                                      make_imm (imm));
       }
}
/*  C0  /2 RMBoth  ib   | Rotate 9 bits (CF, r/m8) left imm8 times. */
inline int rcl (code_ptr p,
         const ByteReg (&   modrm_rm),
         imm8_t imm)
{
    if (imm == 1)
       {
           return encode_instruction (p,
                                      Prefix (OpNothing,
                                              AddrNothing,
                                              modrm_rm),
                                      rexByte (rex_modrm_rm (modrm_rm)),
                                      Code (0xd0),
                                      make_modrm (modrm_rm,2));
       }
    else
       {
           return encode_instruction (p,
                                      Prefix (OpNothing,
                                              AddrNothing,
                                              modrm_rm),
                                      rexByte (rex_modrm_rm (modrm_rm)),
                                      Code (0xc0),
                                      make_modrm (modrm_rm,2),
                                      make_imm (imm));
       }
}
/*  C0  /2 RMBoth  ib   | Rotate 9 bits (CF, r/m8) left imm8 times. */
inline int rcl (code_ptr p,
         const BytePtr (&   modrm_rm),
         imm8_t imm)
{
    if (imm == 1)
       {
           return encode_instruction (p,
                                      Prefix (OpNothing,
                                              AddrNothing,
                                              modrm_rm),
                                      rexByte (rex_modrm_rm (modrm_rm)),
                                      Code (0xd0),
                                      make_modrm (modrm_rm,2));
       }
    else
       {
           return encode_instruction (p,
                                      Prefix (OpNothing,
                                              AddrNothing,
                                              modrm_rm),
                                      rexByte (rex_modrm_rm (modrm_rm)),
                                      Code (0xc0),
                                      make_modrm (modrm_rm,2),
                                      make_imm (imm));
       }
}
/*  D2  /2 RMBoth     | Rotate 9 bits (CF, r/m8) left CL times. */
inline int rcl (code_ptr p,
         const ByteReg (&   modrm_rm),
         const RegCL (&   unused))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm)),
                               Code (0xd2),
                               make_modrm (modrm_rm,2));
}
/*  D2  /2 RMBoth     | Rotate 9 bits (CF, r/m8) left CL times. */
inline int rcl (code_ptr p,
         const BytePtr (&   modrm_rm),
         const RegCL (&   unused))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm)),
                               Code (0xd2),
                               make_modrm (modrm_rm,2));
}
/*  D3  /2 RMBoth   op16  | Rotate 17 bits (CF, r/m16) left CL times. */
inline int rcl (code_ptr p,
         const WordReg (&   modrm_rm),
         const RegCL (&   unused))
{
    return encode_instruction (p,
                               Prefix (Op16,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm)),
                               Code (0xd3),
                               make_modrm (modrm_rm,2));
}
/*  D3  /2 RMBoth   op16  | Rotate 17 bits (CF, r/m16) left CL times. */
inline int rcl (code_ptr p,
         const WordPtr (&   modrm_rm),
         const RegCL (&   unused))
{
    return encode_instruction (p,
                               Prefix (Op16,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm)),
                               Code (0xd3),
                               make_modrm (modrm_rm,2));
}
/*  D3  /2 RMBoth   op32  | Rotate 33 bits (CF, r/m32) left CL times. */
inline int rcl (code_ptr p,
         const DwordReg (&   modrm_rm),
         const RegCL (&   unused))
{
    return encode_instruction (p,
                               Prefix (Op32,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm)),
                               Code (0xd3),
                               make_modrm (modrm_rm,2));
}
/*  D3  /2 RMBoth   op32  | Rotate 33 bits (CF, r/m32) left CL times. */
inline int rcl (code_ptr p,
         const DwordPtr (&   modrm_rm),
         const RegCL (&   unused))
{
    return encode_instruction (p,
                               Prefix (Op32,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm)),
                               Code (0xd3),
                               make_modrm (modrm_rm,2));
}
/*  0F 53  /r RMBoth     | Computes the approximate reciprocals of the packed single-precision floating- point values in xmm2/m128 and stores the results in xmm1. */
inline int rcpps (code_ptr p,
           const XmmReg (&   modrm_reg),
           const XmmReg (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x53),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/*  0F 53  /r RMBoth     | Computes the approximate reciprocals of the packed single-precision floating- point values in xmm2/m128 and stores the results in xmm1. */
inline int rcpps (code_ptr p,
           const XmmReg (&   modrm_reg),
           const XmmWordPtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x53),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/* F3 0F 53  /r RMBoth     | Computes the approximate reciprocal of the scalar single-precision floating- point value in xmm2/m32 and stores the result in xmm1. */
inline int rcpss (code_ptr p,
           const XmmReg (&   modrm_reg),
           const XmmReg (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm,
                                       Prefix_REP),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x53),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/* F3 0F 53  /r RMBoth     | Computes the approximate reciprocal of the scalar single-precision floating- point value in xmm2/m32 and stores the result in xmm1. */
inline int rcpss (code_ptr p,
           const XmmReg (&   modrm_reg),
           const DwordPtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm,
                                       Prefix_REP),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x53),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/*  C1  /3 RMBoth  ib op32  | Rotate 33 bits (CF, r/m32) right imm8 times. */
inline int rcr (code_ptr p,
         const DwordReg (&   modrm_rm),
         imm8_t imm)
{
    if (imm == 1)
       {
           return encode_instruction (p,
                                      Prefix (Op32,
                                              AddrNothing,
                                              modrm_rm),
                                      rexByte (rex_modrm_rm (modrm_rm)),
                                      Code (0xd1),
                                      make_modrm (modrm_rm,3));
       }
    else
       {
           return encode_instruction (p,
                                      Prefix (Op32,
                                              AddrNothing,
                                              modrm_rm),
                                      rexByte (rex_modrm_rm (modrm_rm)),
                                      Code (0xc1),
                                      make_modrm (modrm_rm,3),
                                      make_imm (imm));
       }
}
/*  C1  /3 RMBoth  ib op32  | Rotate 33 bits (CF, r/m32) right imm8 times. */
inline int rcr (code_ptr p,
         const DwordPtr (&   modrm_rm),
         imm8_t imm)
{
    if (imm == 1)
       {
           return encode_instruction (p,
                                      Prefix (Op32,
                                              AddrNothing,
                                              modrm_rm),
                                      rexByte (rex_modrm_rm (modrm_rm)),
                                      Code (0xd1),
                                      make_modrm (modrm_rm,3));
       }
    else
       {
           return encode_instruction (p,
                                      Prefix (Op32,
                                              AddrNothing,
                                              modrm_rm),
                                      rexByte (rex_modrm_rm (modrm_rm)),
                                      Code (0xc1),
                                      make_modrm (modrm_rm,3),
                                      make_imm (imm));
       }
}
/*  C1  /3 RMBoth  ib op16  | Rotate 17 bits (CF, r/m16) right imm8 times. */
inline int rcr (code_ptr p,
         const WordReg (&   modrm_rm),
         imm8_t imm)
{
    if (imm == 1)
       {
           return encode_instruction (p,
                                      Prefix (Op16,
                                              AddrNothing,
                                              modrm_rm),
                                      rexByte (rex_modrm_rm (modrm_rm)),
                                      Code (0xd1),
                                      make_modrm (modrm_rm,3));
       }
    else
       {
           return encode_instruction (p,
                                      Prefix (Op16,
                                              AddrNothing,
                                              modrm_rm),
                                      rexByte (rex_modrm_rm (modrm_rm)),
                                      Code (0xc1),
                                      make_modrm (modrm_rm,3),
                                      make_imm (imm));
       }
}
/*  C1  /3 RMBoth  ib op16  | Rotate 17 bits (CF, r/m16) right imm8 times. */
inline int rcr (code_ptr p,
         const WordPtr (&   modrm_rm),
         imm8_t imm)
{
    if (imm == 1)
       {
           return encode_instruction (p,
                                      Prefix (Op16,
                                              AddrNothing,
                                              modrm_rm),
                                      rexByte (rex_modrm_rm (modrm_rm)),
                                      Code (0xd1),
                                      make_modrm (modrm_rm,3));
       }
    else
       {
           return encode_instruction (p,
                                      Prefix (Op16,
                                              AddrNothing,
                                              modrm_rm),
                                      rexByte (rex_modrm_rm (modrm_rm)),
                                      Code (0xc1),
                                      make_modrm (modrm_rm,3),
                                      make_imm (imm));
       }
}
/*  C0  /3 RMBoth  ib   | Rotate 9 bits (CF, r/m8) right imm8 times. */
inline int rcr (code_ptr p,
         const ByteReg (&   modrm_rm),
         imm8_t imm)
{
    if (imm == 1)
       {
           return encode_instruction (p,
                                      Prefix (OpNothing,
                                              AddrNothing,
                                              modrm_rm),
                                      rexByte (rex_modrm_rm (modrm_rm)),
                                      Code (0xd0),
                                      make_modrm (modrm_rm,3));
       }
    else
       {
           return encode_instruction (p,
                                      Prefix (OpNothing,
                                              AddrNothing,
                                              modrm_rm),
                                      rexByte (rex_modrm_rm (modrm_rm)),
                                      Code (0xc0),
                                      make_modrm (modrm_rm,3),
                                      make_imm (imm));
       }
}
/*  C0  /3 RMBoth  ib   | Rotate 9 bits (CF, r/m8) right imm8 times. */
inline int rcr (code_ptr p,
         const BytePtr (&   modrm_rm),
         imm8_t imm)
{
    if (imm == 1)
       {
           return encode_instruction (p,
                                      Prefix (OpNothing,
                                              AddrNothing,
                                              modrm_rm),
                                      rexByte (rex_modrm_rm (modrm_rm)),
                                      Code (0xd0),
                                      make_modrm (modrm_rm,3));
       }
    else
       {
           return encode_instruction (p,
                                      Prefix (OpNothing,
                                              AddrNothing,
                                              modrm_rm),
                                      rexByte (rex_modrm_rm (modrm_rm)),
                                      Code (0xc0),
                                      make_modrm (modrm_rm,3),
                                      make_imm (imm));
       }
}
/*  D2  /3 RMBoth     | Rotate 9 bits (CF, r/m8) right CL times. */
inline int rcr (code_ptr p,
         const ByteReg (&   modrm_rm),
         const RegCL (&   unused))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm)),
                               Code (0xd2),
                               make_modrm (modrm_rm,3));
}
/*  D2  /3 RMBoth     | Rotate 9 bits (CF, r/m8) right CL times. */
inline int rcr (code_ptr p,
         const BytePtr (&   modrm_rm),
         const RegCL (&   unused))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm)),
                               Code (0xd2),
                               make_modrm (modrm_rm,3));
}
/*  D3  /3 RMBoth   op16  | Rotate 17 bits (CF, r/m16) right CL times. */
inline int rcr (code_ptr p,
         const WordReg (&   modrm_rm),
         const RegCL (&   unused))
{
    return encode_instruction (p,
                               Prefix (Op16,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm)),
                               Code (0xd3),
                               make_modrm (modrm_rm,3));
}
/*  D3  /3 RMBoth   op16  | Rotate 17 bits (CF, r/m16) right CL times. */
inline int rcr (code_ptr p,
         const WordPtr (&   modrm_rm),
         const RegCL (&   unused))
{
    return encode_instruction (p,
                               Prefix (Op16,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm)),
                               Code (0xd3),
                               make_modrm (modrm_rm,3));
}
/*  D3  /3 RMBoth   op32  | Rotate 33 bits (CF, r/m32) right CL times. */
inline int rcr (code_ptr p,
         const DwordReg (&   modrm_rm),
         const RegCL (&   unused))
{
    return encode_instruction (p,
                               Prefix (Op32,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm)),
                               Code (0xd3),
                               make_modrm (modrm_rm,3));
}
/*  D3  /3 RMBoth   op32  | Rotate 33 bits (CF, r/m32) right CL times. */
inline int rcr (code_ptr p,
         const DwordPtr (&   modrm_rm),
         const RegCL (&   unused))
{
    return encode_instruction (p,
                               Prefix (Op32,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm)),
                               Code (0xd3),
                               make_modrm (modrm_rm,3));
}
/*  0F 32        | Read MSR specified by ECX into EDX:EAX. */
inline int rdmsr (code_ptr p)
{
    return encode_instruction (p,
                               Prefix (OpNothing,AddrNothing),
                               Code (0xf,0x32));
}
/*  0F 33        | Read performance- monitoring counter specified by ECX into EDX:EAX. */
inline int rdpmc (code_ptr p)
{
    return encode_instruction (p,
                               Prefix (OpNothing,AddrNothing),
                               Code (0xf,0x33));
}
/*  0F 31        | Read time-stamp counter into EDX:EAX. */
inline int rdtsc (code_ptr p)
{
    return encode_instruction (p,
                               Prefix (OpNothing,AddrNothing),
                               Code (0xf,0x31));
}
/*  0F 01 F9        | Read 64-bit time-stamp counter and 32-bit IA32_TSC_AUX value into EDX:EAX and ECX. */
inline int rdtscp (code_ptr p)
{
    return encode_instruction (p,
                               Prefix (OpNothing,AddrNothing),
                               Code (0xf,0x1,0xf9));
}
/* F3 A6        | Find nonmatching bytes in ES:[(E)DI] and DS:[(E)SI]. */
inline int repe_cmps (code_ptr p,
               const BytePtr_ESI (&   ptr),
               const BytePtr_ES_EDI (&   unused))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       Addr32,
                                       ptr.get_segment (),
                                       Prefix_REP),
                               Code (0xa6));
}
/* F3 A6        | Find nonmatching bytes in ES:[(E)DI] and DS:[(E)SI]. */
inline int repe_cmps (code_ptr p,
               const BytePtr_SI (&   ptr),
               const BytePtr_ES_DI (&   unused))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       Addr16,
                                       ptr.get_segment (),
                                       Prefix_REP),
                               Code (0xa6));
}
/* F3 A7      op16  | Find nonmatching words in ES:[(E)DI] and DS:[(E)SI]. */
inline int repe_cmps (code_ptr p,
               const WordPtr_ESI (&   ptr),
               const WordPtr_ES_EDI (&   unused))
{
    return encode_instruction (p,
                               Prefix (Op16,
                                       Addr32,
                                       ptr.get_segment (),
                                       Prefix_REP),
                               Code (0xa7));
}
/* F3 A7      op16  | Find nonmatching words in ES:[(E)DI] and DS:[(E)SI]. */
inline int repe_cmps (code_ptr p,
               const WordPtr_SI (&   ptr),
               const WordPtr_ES_DI (&   unused))
{
    return encode_instruction (p,
                               Prefix (Op16,
                                       Addr16,
                                       ptr.get_segment (),
                                       Prefix_REP),
                               Code (0xa7));
}
/* F3 A7      op32  | Find nonmatching doublewords in ES:[(E)DI] and DS:[(E)SI]. */
inline int repe_cmps (code_ptr p,
               const DwordPtr_ESI (&   ptr),
               const DwordPtr_ES_EDI (&   unused))
{
    return encode_instruction (p,
                               Prefix (Op32,
                                       Addr32,
                                       ptr.get_segment (),
                                       Prefix_REP),
                               Code (0xa7));
}
/* F3 A7      op32  | Find nonmatching doublewords in ES:[(E)DI] and DS:[(E)SI]. */
inline int repe_cmps (code_ptr p,
               const DwordPtr_SI (&   ptr),
               const DwordPtr_ES_DI (&   unused))
{
    return encode_instruction (p,
                               Prefix (Op32,
                                       Addr16,
                                       ptr.get_segment (),
                                       Prefix_REP),
                               Code (0xa7));
}
/* F3 AE        | Find non-AL byte starting at ES:[(E)DI]. */
inline int repe_scas (code_ptr p,
               const BytePtr_ES_EDI (&   unused))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       Addr32,
                                       Prefix_REP),
                               Code (0xae));
}
/* F3 AE        | Find non-AL byte starting at ES:[(E)DI]. */
inline int repe_scas (code_ptr p,
               const RegAL (&   unused1),
               const BytePtr_ES_EDI (&   unused2))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       Addr32,
                                       Prefix_REP),
                               Code (0xae));
}
/* F3 AE        | Find non-AL byte starting at ES:[(E)DI]. */
inline int repe_scas (code_ptr p,
               const BytePtr_ES_DI (&   unused))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       Addr16,
                                       Prefix_REP),
                               Code (0xae));
}
/* F3 AE        | Find non-AL byte starting at ES:[(E)DI]. */
inline int repe_scas (code_ptr p,
               const RegAL (&   unused1),
               const BytePtr_ES_DI (&   unused2))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       Addr16,
                                       Prefix_REP),
                               Code (0xae));
}
/* F3 AF      op16  | Find non-AX word starting at ES:[(E)DI]. */
inline int repe_scas (code_ptr p,
               const WordPtr_ES_EDI (&   unused))
{
    return encode_instruction (p,
                               Prefix (Op16,Addr32,Prefix_REP),
                               Code (0xaf));
}
/* F3 AF      op16  | Find non-AX word starting at ES:[(E)DI]. */
inline int repe_scas (code_ptr p,
               const RegAX (&   unused1),
               const WordPtr_ES_EDI (&   unused2))
{
    return encode_instruction (p,
                               Prefix (Op16,Addr32,Prefix_REP),
                               Code (0xaf));
}
/* F3 AF      op16  | Find non-AX word starting at ES:[(E)DI]. */
inline int repe_scas (code_ptr p,
               const WordPtr_ES_DI (&   unused))
{
    return encode_instruction (p,
                               Prefix (Op16,Addr16,Prefix_REP),
                               Code (0xaf));
}
/* F3 AF      op16  | Find non-AX word starting at ES:[(E)DI]. */
inline int repe_scas (code_ptr p,
               const RegAX (&   unused1),
               const WordPtr_ES_DI (&   unused2))
{
    return encode_instruction (p,
                               Prefix (Op16,Addr16,Prefix_REP),
                               Code (0xaf));
}
/* F3 AF      op32  | Find non-EAX doubleword starting at ES:[(E)DI]. */
inline int repe_scas (code_ptr p,
               const DwordPtr_ES_EDI (&   unused))
{
    return encode_instruction (p,
                               Prefix (Op32,Addr32,Prefix_REP),
                               Code (0xaf));
}
/* F3 AF      op32  | Find non-EAX doubleword starting at ES:[(E)DI]. */
inline int repe_scas (code_ptr p,
               const RegEAX (&   unused1),
               const DwordPtr_ES_EDI (&   unused2))
{
    return encode_instruction (p,
                               Prefix (Op32,Addr32,Prefix_REP),
                               Code (0xaf));
}
/* F3 AF      op32  | Find non-EAX doubleword starting at ES:[(E)DI]. */
inline int repe_scas (code_ptr p,
               const DwordPtr_ES_DI (&   unused))
{
    return encode_instruction (p,
                               Prefix (Op32,Addr16,Prefix_REP),
                               Code (0xaf));
}
/* F3 AF      op32  | Find non-EAX doubleword starting at ES:[(E)DI]. */
inline int repe_scas (code_ptr p,
               const RegEAX (&   unused1),
               const DwordPtr_ES_DI (&   unused2))
{
    return encode_instruction (p,
                               Prefix (Op32,Addr16,Prefix_REP),
                               Code (0xaf));
}
/* F2 A6        | Find matching bytes in ES:[(E)DI] and DS:[(E)SI]. */
inline int repne_cmps (code_ptr p,
                const BytePtr_ESI (&   ptr),
                const BytePtr_ES_EDI (&   unused))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       Addr32,
                                       ptr.get_segment (),
                                       Prefix_REPNE),
                               Code (0xa6));
}
/* F2 A6        | Find matching bytes in ES:[(E)DI] and DS:[(E)SI]. */
inline int repne_cmps (code_ptr p,
                const BytePtr_SI (&   ptr),
                const BytePtr_ES_DI (&   unused))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       Addr16,
                                       ptr.get_segment (),
                                       Prefix_REPNE),
                               Code (0xa6));
}
/* F2 A7      op16  | Find matching words in ES:[(E)DI] and DS:[(E)SI]. */
inline int repne_cmps (code_ptr p,
                const WordPtr_ESI (&   ptr),
                const WordPtr_ES_EDI (&   unused))
{
    return encode_instruction (p,
                               Prefix (Op16,
                                       Addr32,
                                       ptr.get_segment (),
                                       Prefix_REPNE),
                               Code (0xa7));
}
/* F2 A7      op16  | Find matching words in ES:[(E)DI] and DS:[(E)SI]. */
inline int repne_cmps (code_ptr p,
                const WordPtr_SI (&   ptr),
                const WordPtr_ES_DI (&   unused))
{
    return encode_instruction (p,
                               Prefix (Op16,
                                       Addr16,
                                       ptr.get_segment (),
                                       Prefix_REPNE),
                               Code (0xa7));
}
/* F2 A7      op32  | Find matching doublewords in ES:[(E)DI] and DS:[(E)SI]. */
inline int repne_cmps (code_ptr p,
                const DwordPtr_ESI (&   ptr),
                const DwordPtr_ES_EDI (&   unused))
{
    return encode_instruction (p,
                               Prefix (Op32,
                                       Addr32,
                                       ptr.get_segment (),
                                       Prefix_REPNE),
                               Code (0xa7));
}
/* F2 A7      op32  | Find matching doublewords in ES:[(E)DI] and DS:[(E)SI]. */
inline int repne_cmps (code_ptr p,
                const DwordPtr_SI (&   ptr),
                const DwordPtr_ES_DI (&   unused))
{
    return encode_instruction (p,
                               Prefix (Op32,
                                       Addr16,
                                       ptr.get_segment (),
                                       Prefix_REPNE),
                               Code (0xa7));
}
/* F2 AE        | Find AL, starting at ES:[(E)DI]. */
inline int repne_scas (code_ptr p,
                const BytePtr_ES_EDI (&   unused))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       Addr32,
                                       Prefix_REPNE),
                               Code (0xae));
}
/* F2 AE        | Find AL, starting at ES:[(E)DI]. */
inline int repne_scas (code_ptr p,
                const RegAL (&   unused1),
                const BytePtr_ES_EDI (&   unused2))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       Addr32,
                                       Prefix_REPNE),
                               Code (0xae));
}
/* F2 AE        | Find AL, starting at ES:[(E)DI]. */
inline int repne_scas (code_ptr p,
                const BytePtr_ES_DI (&   unused))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       Addr16,
                                       Prefix_REPNE),
                               Code (0xae));
}
/* F2 AE        | Find AL, starting at ES:[(E)DI]. */
inline int repne_scas (code_ptr p,
                const RegAL (&   unused1),
                const BytePtr_ES_DI (&   unused2))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       Addr16,
                                       Prefix_REPNE),
                               Code (0xae));
}
/* F2 AF      op16  | Find AX, starting at ES:[(E)DI]. */
inline int repne_scas (code_ptr p,
                const WordPtr_ES_EDI (&   unused))
{
    return encode_instruction (p,
                               Prefix (Op16,
                                       Addr32,
                                       Prefix_REPNE),
                               Code (0xaf));
}
/* F2 AF      op16  | Find AX, starting at ES:[(E)DI]. */
inline int repne_scas (code_ptr p,
                const RegAX (&   unused1),
                const WordPtr_ES_EDI (&   unused2))
{
    return encode_instruction (p,
                               Prefix (Op16,
                                       Addr32,
                                       Prefix_REPNE),
                               Code (0xaf));
}
/* F2 AF      op16  | Find AX, starting at ES:[(E)DI]. */
inline int repne_scas (code_ptr p,
                const WordPtr_ES_DI (&   unused))
{
    return encode_instruction (p,
                               Prefix (Op16,
                                       Addr16,
                                       Prefix_REPNE),
                               Code (0xaf));
}
/* F2 AF      op16  | Find AX, starting at ES:[(E)DI]. */
inline int repne_scas (code_ptr p,
                const RegAX (&   unused1),
                const WordPtr_ES_DI (&   unused2))
{
    return encode_instruction (p,
                               Prefix (Op16,
                                       Addr16,
                                       Prefix_REPNE),
                               Code (0xaf));
}
/* F2 AF      op32  | Find EAX, starting at ES:[(E)DI]. */
inline int repne_scas (code_ptr p,
                const DwordPtr_ES_EDI (&   unused))
{
    return encode_instruction (p,
                               Prefix (Op32,
                                       Addr32,
                                       Prefix_REPNE),
                               Code (0xaf));
}
/* F2 AF      op32  | Find EAX, starting at ES:[(E)DI]. */
inline int repne_scas (code_ptr p,
                const RegEAX (&   unused1),
                const DwordPtr_ES_EDI (&   unused2))
{
    return encode_instruction (p,
                               Prefix (Op32,
                                       Addr32,
                                       Prefix_REPNE),
                               Code (0xaf));
}
/* F2 AF      op32  | Find EAX, starting at ES:[(E)DI]. */
inline int repne_scas (code_ptr p,
                const DwordPtr_ES_DI (&   unused))
{
    return encode_instruction (p,
                               Prefix (Op32,
                                       Addr16,
                                       Prefix_REPNE),
                               Code (0xaf));
}
/* F2 AF      op32  | Find EAX, starting at ES:[(E)DI]. */
inline int repne_scas (code_ptr p,
                const RegEAX (&   unused1),
                const DwordPtr_ES_DI (&   unused2))
{
    return encode_instruction (p,
                               Prefix (Op32,
                                       Addr16,
                                       Prefix_REPNE),
                               Code (0xaf));
}
/* F3 6C        | Input (E)CX bytes from port DX into ES:[(E)DI]. */
inline int rep_ins (code_ptr p,
             const BytePtr_ES_EDI (&   unused1),
             const RegDX (&   unused2))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       Addr32,
                                       Prefix_REP),
                               Code (0x6c));
}
/* F3 6C        | Input (E)CX bytes from port DX into ES:[(E)DI]. */
inline int rep_ins (code_ptr p,
             const BytePtr_ES_DI (&   unused1),
             const RegDX (&   unused2))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       Addr16,
                                       Prefix_REP),
                               Code (0x6c));
}
/* F3 6D      op16  | Input (E)CX words from port DX into ES:[(E)DI.] */
inline int rep_ins (code_ptr p,
             const WordPtr_ES_EDI (&   unused1),
             const RegDX (&   unused2))
{
    return encode_instruction (p,
                               Prefix (Op16,Addr32,Prefix_REP),
                               Code (0x6d));
}
/* F3 6D      op16  | Input (E)CX words from port DX into ES:[(E)DI.] */
inline int rep_ins (code_ptr p,
             const WordPtr_ES_DI (&   unused1),
             const RegDX (&   unused2))
{
    return encode_instruction (p,
                               Prefix (Op16,Addr16,Prefix_REP),
                               Code (0x6d));
}
/* F3 6D      op32  | Input (E)CX doublewords from port DX into ES:[(E)DI]. */
inline int rep_ins (code_ptr p,
             const DwordPtr_ES_EDI (&   unused1),
             const RegDX (&   unused2))
{
    return encode_instruction (p,
                               Prefix (Op32,Addr32,Prefix_REP),
                               Code (0x6d));
}
/* F3 6D      op32  | Input (E)CX doublewords from port DX into ES:[(E)DI]. */
inline int rep_ins (code_ptr p,
             const DwordPtr_ES_DI (&   unused1),
             const RegDX (&   unused2))
{
    return encode_instruction (p,
                               Prefix (Op32,Addr16,Prefix_REP),
                               Code (0x6d));
}
/* F3 AC        | Load (E)CX bytes from DS:[(E)SI] to AL. */
inline int rep_lods (code_ptr p,
              const BytePtr_ESI (&   ptr))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       Addr32,
                                       ptr.get_segment (),
                                       Prefix_REP),
                               Code (0xac));
}
/* F3 AC        | Load (E)CX bytes from DS:[(E)SI] to AL. */
inline int rep_lods (code_ptr p,
              const RegAL (&   unused),
              const BytePtr_ESI (&   ptr))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       Addr32,
                                       ptr.get_segment (),
                                       Prefix_REP),
                               Code (0xac));
}
/* F3 AC        | Load (E)CX bytes from DS:[(E)SI] to AL. */
inline int rep_lods (code_ptr p,
              const BytePtr_SI (&   ptr))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       Addr16,
                                       ptr.get_segment (),
                                       Prefix_REP),
                               Code (0xac));
}
/* F3 AC        | Load (E)CX bytes from DS:[(E)SI] to AL. */
inline int rep_lods (code_ptr p,
              const RegAL (&   unused),
              const BytePtr_SI (&   ptr))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       Addr16,
                                       ptr.get_segment (),
                                       Prefix_REP),
                               Code (0xac));
}
/* F3 AD      op16  | Load (E)CX words from DS:[(E)SI] to AX. */
inline int rep_lods (code_ptr p,
              const WordPtr_ESI (&   ptr))
{
    return encode_instruction (p,
                               Prefix (Op16,
                                       Addr32,
                                       ptr.get_segment (),
                                       Prefix_REP),
                               Code (0xad));
}
/* F3 AD      op16  | Load (E)CX words from DS:[(E)SI] to AX. */
inline int rep_lods (code_ptr p,
              const RegAX (&   unused),
              const WordPtr_ESI (&   ptr))
{
    return encode_instruction (p,
                               Prefix (Op16,
                                       Addr32,
                                       ptr.get_segment (),
                                       Prefix_REP),
                               Code (0xad));
}
/* F3 AD      op16  | Load (E)CX words from DS:[(E)SI] to AX. */
inline int rep_lods (code_ptr p,
              const WordPtr_SI (&   ptr))
{
    return encode_instruction (p,
                               Prefix (Op16,
                                       Addr16,
                                       ptr.get_segment (),
                                       Prefix_REP),
                               Code (0xad));
}
/* F3 AD      op16  | Load (E)CX words from DS:[(E)SI] to AX. */
inline int rep_lods (code_ptr p,
              const RegAX (&   unused),
              const WordPtr_SI (&   ptr))
{
    return encode_instruction (p,
                               Prefix (Op16,
                                       Addr16,
                                       ptr.get_segment (),
                                       Prefix_REP),
                               Code (0xad));
}
/* F3 AD      op32  | Load (E)CX doublewords from DS:[(E)SI] to EAX. */
inline int rep_lods (code_ptr p,
              const DwordPtr_ESI (&   ptr))
{
    return encode_instruction (p,
                               Prefix (Op32,
                                       Addr32,
                                       ptr.get_segment (),
                                       Prefix_REP),
                               Code (0xad));
}
/* F3 AD      op32  | Load (E)CX doublewords from DS:[(E)SI] to EAX. */
inline int rep_lods (code_ptr p,
              const RegEAX (&   unused),
              const DwordPtr_ESI (&   ptr))
{
    return encode_instruction (p,
                               Prefix (Op32,
                                       Addr32,
                                       ptr.get_segment (),
                                       Prefix_REP),
                               Code (0xad));
}
/* F3 AD      op32  | Load (E)CX doublewords from DS:[(E)SI] to EAX. */
inline int rep_lods (code_ptr p,
              const DwordPtr_SI (&   ptr))
{
    return encode_instruction (p,
                               Prefix (Op32,
                                       Addr16,
                                       ptr.get_segment (),
                                       Prefix_REP),
                               Code (0xad));
}
/* F3 AD      op32  | Load (E)CX doublewords from DS:[(E)SI] to EAX. */
inline int rep_lods (code_ptr p,
              const RegEAX (&   unused),
              const DwordPtr_SI (&   ptr))
{
    return encode_instruction (p,
                               Prefix (Op32,
                                       Addr16,
                                       ptr.get_segment (),
                                       Prefix_REP),
                               Code (0xad));
}
/* F3 A4        | Move (E)CX bytes from DS:[(E)SI] to ES:[(E)DI]. */
inline int rep_movs (code_ptr p,
              const BytePtr_ES_EDI (&   unused),
              const BytePtr_ESI (&   ptr))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       Addr32,
                                       ptr.get_segment (),
                                       Prefix_REP),
                               Code (0xa4));
}
/* F3 A4        | Move (E)CX bytes from DS:[(E)SI] to ES:[(E)DI]. */
inline int rep_movs (code_ptr p,
              const BytePtr_ES_DI (&   unused),
              const BytePtr_SI (&   ptr))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       Addr16,
                                       ptr.get_segment (),
                                       Prefix_REP),
                               Code (0xa4));
}
/* F3 A5      op16  | Move (E)CX words from DS:[(E)SI] to ES:[(E)DI]. */
inline int rep_movs (code_ptr p,
              const WordPtr_ES_EDI (&   unused),
              const WordPtr_ESI (&   ptr))
{
    return encode_instruction (p,
                               Prefix (Op16,
                                       Addr32,
                                       ptr.get_segment (),
                                       Prefix_REP),
                               Code (0xa5));
}
/* F3 A5      op16  | Move (E)CX words from DS:[(E)SI] to ES:[(E)DI]. */
inline int rep_movs (code_ptr p,
              const WordPtr_ES_DI (&   unused),
              const WordPtr_SI (&   ptr))
{
    return encode_instruction (p,
                               Prefix (Op16,
                                       Addr16,
                                       ptr.get_segment (),
                                       Prefix_REP),
                               Code (0xa5));
}
/* F3 A5      op32  | Move (E)CX doublewords from DS:[(E)SI] to ES:[(E)DI]. */
inline int rep_movs (code_ptr p,
              const DwordPtr_ES_EDI (&   unused),
              const DwordPtr_ESI (&   ptr))
{
    return encode_instruction (p,
                               Prefix (Op32,
                                       Addr32,
                                       ptr.get_segment (),
                                       Prefix_REP),
                               Code (0xa5));
}
/* F3 A5      op32  | Move (E)CX doublewords from DS:[(E)SI] to ES:[(E)DI]. */
inline int rep_movs (code_ptr p,
              const DwordPtr_ES_DI (&   unused),
              const DwordPtr_SI (&   ptr))
{
    return encode_instruction (p,
                               Prefix (Op32,
                                       Addr16,
                                       ptr.get_segment (),
                                       Prefix_REP),
                               Code (0xa5));
}
/* F3 6E        | Output (E)CX bytes from DS:[(E)SI] to port DX. */
inline int rep_outs (code_ptr p,
              const RegDX (&   unused),
              const BytePtr_ESI (&   ptr))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       Addr32,
                                       ptr.get_segment (),
                                       Prefix_REP),
                               Code (0x6e));
}
/* F3 6E        | Output (E)CX bytes from DS:[(E)SI] to port DX. */
inline int rep_outs (code_ptr p,
              const RegDX (&   unused),
              const BytePtr_SI (&   ptr))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       Addr16,
                                       ptr.get_segment (),
                                       Prefix_REP),
                               Code (0x6e));
}
/* F3 6F      op16  | Output (E)CX words from DS:[(E)SI] to port DX. */
inline int rep_outs (code_ptr p,
              const RegDX (&   unused),
              const WordPtr_ESI (&   ptr))
{
    return encode_instruction (p,
                               Prefix (Op16,
                                       Addr32,
                                       ptr.get_segment (),
                                       Prefix_REP),
                               Code (0x6f));
}
/* F3 6F      op16  | Output (E)CX words from DS:[(E)SI] to port DX. */
inline int rep_outs (code_ptr p,
              const RegDX (&   unused),
              const WordPtr_SI (&   ptr))
{
    return encode_instruction (p,
                               Prefix (Op16,
                                       Addr16,
                                       ptr.get_segment (),
                                       Prefix_REP),
                               Code (0x6f));
}
/* F3 6F      op32  | Output (E)CX doublewords from DS:[(E)SI] to port DX. */
inline int rep_outs (code_ptr p,
              const RegDX (&   unused),
              const DwordPtr_ESI (&   ptr))
{
    return encode_instruction (p,
                               Prefix (Op32,
                                       Addr32,
                                       ptr.get_segment (),
                                       Prefix_REP),
                               Code (0x6f));
}
/* F3 6F      op32  | Output (E)CX doublewords from DS:[(E)SI] to port DX. */
inline int rep_outs (code_ptr p,
              const RegDX (&   unused),
              const DwordPtr_SI (&   ptr))
{
    return encode_instruction (p,
                               Prefix (Op32,
                                       Addr16,
                                       ptr.get_segment (),
                                       Prefix_REP),
                               Code (0x6f));
}
/* F3 AA        | Fill (E)CX bytes at ES:[(E)DI] with AL. */
inline int rep_stos (code_ptr p,
              const BytePtr_ES_EDI (&   unused))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       Addr32,
                                       Prefix_REP),
                               Code (0xaa));
}
/* F3 AA        | Fill (E)CX bytes at ES:[(E)DI] with AL. */
inline int rep_stos (code_ptr p,
              const BytePtr_ES_EDI (&   unused1),
              const RegAL (&   unused2))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       Addr32,
                                       Prefix_REP),
                               Code (0xaa));
}
/* F3 AA        | Fill (E)CX bytes at ES:[(E)DI] with AL. */
inline int rep_stos (code_ptr p,
              const BytePtr_ES_DI (&   unused))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       Addr16,
                                       Prefix_REP),
                               Code (0xaa));
}
/* F3 AA        | Fill (E)CX bytes at ES:[(E)DI] with AL. */
inline int rep_stos (code_ptr p,
              const BytePtr_ES_DI (&   unused1),
              const RegAL (&   unused2))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       Addr16,
                                       Prefix_REP),
                               Code (0xaa));
}
/* F3 AB      op16  | Fill (E)CX words at ES:[(E)DI] with AX. */
inline int rep_stos (code_ptr p,
              const WordPtr_ES_EDI (&   unused))
{
    return encode_instruction (p,
                               Prefix (Op16,Addr32,Prefix_REP),
                               Code (0xab));
}
/* F3 AB      op16  | Fill (E)CX words at ES:[(E)DI] with AX. */
inline int rep_stos (code_ptr p,
              const WordPtr_ES_EDI (&   unused1),
              const RegAX (&   unused2))
{
    return encode_instruction (p,
                               Prefix (Op16,Addr32,Prefix_REP),
                               Code (0xab));
}
/* F3 AB      op16  | Fill (E)CX words at ES:[(E)DI] with AX. */
inline int rep_stos (code_ptr p,
              const WordPtr_ES_DI (&   unused))
{
    return encode_instruction (p,
                               Prefix (Op16,Addr16,Prefix_REP),
                               Code (0xab));
}
/* F3 AB      op16  | Fill (E)CX words at ES:[(E)DI] with AX. */
inline int rep_stos (code_ptr p,
              const WordPtr_ES_DI (&   unused1),
              const RegAX (&   unused2))
{
    return encode_instruction (p,
                               Prefix (Op16,Addr16,Prefix_REP),
                               Code (0xab));
}
/* F3 AB      op32  | Fill (E)CX doublewords at ES:[(E)DI] with EAX. */
inline int rep_stos (code_ptr p,
              const DwordPtr_ES_EDI (&   unused))
{
    return encode_instruction (p,
                               Prefix (Op32,Addr32,Prefix_REP),
                               Code (0xab));
}
/* F3 AB      op32  | Fill (E)CX doublewords at ES:[(E)DI] with EAX. */
inline int rep_stos (code_ptr p,
              const DwordPtr_ES_EDI (&   unused1),
              const RegEAX (&   unused2))
{
    return encode_instruction (p,
                               Prefix (Op32,Addr32,Prefix_REP),
                               Code (0xab));
}
/* F3 AB      op32  | Fill (E)CX doublewords at ES:[(E)DI] with EAX. */
inline int rep_stos (code_ptr p,
              const DwordPtr_ES_DI (&   unused))
{
    return encode_instruction (p,
                               Prefix (Op32,Addr16,Prefix_REP),
                               Code (0xab));
}
/* F3 AB      op32  | Fill (E)CX doublewords at ES:[(E)DI] with EAX. */
inline int rep_stos (code_ptr p,
              const DwordPtr_ES_DI (&   unused1),
              const RegEAX (&   unused2))
{
    return encode_instruction (p,
                               Prefix (Op32,Addr16,Prefix_REP),
                               Code (0xab));
}
/*  C3        | Near return to calling procedure. */
inline int ret (code_ptr p)
{
    return encode_instruction (p,
                               Prefix (OpNothing,AddrNothing),
                               Code (0xc3));
}
/*  C2     iw   | Near return to calling procedure and pop imm16 bytes from stack. */
inline int ret (code_ptr p,imm16_t imm)
{
    return encode_instruction (p,
                               Prefix (OpNothing,AddrNothing),
                               Code (0xc2),
                               make_imm (imm));
}
/*  CB        | Far return to calling procedure. */
inline int retf (code_ptr p)
{
    return encode_instruction (p,
                               Prefix (OpNothing,AddrNothing),
                               Code (0xcb));
}
/*  CA     iw   | Far return to calling procedure and pop imm16 bytes from stack. */
inline int retf (code_ptr p,
          imm16_t imm)
{
    return encode_instruction (p,
                               Prefix (OpNothing,AddrNothing),
                               Code (0xca),
                               make_imm (imm));
}
/*  C1  /0 RMBoth  ib op32  | Rotate 32 bits r/m32 left imm8 times. */
inline int rol (code_ptr p,
         const DwordReg (&   modrm_rm),
         imm8_t imm)
{
    if (imm == 1)
       {
           return encode_instruction (p,
                                      Prefix (Op32,
                                              AddrNothing,
                                              modrm_rm),
                                      rexByte (rex_modrm_rm (modrm_rm)),
                                      Code (0xd1),
                                      make_modrm (modrm_rm,0));
       }
    else
       {
           return encode_instruction (p,
                                      Prefix (Op32,
                                              AddrNothing,
                                              modrm_rm),
                                      rexByte (rex_modrm_rm (modrm_rm)),
                                      Code (0xc1),
                                      make_modrm (modrm_rm,0),
                                      make_imm (imm));
       }
}
/*  C1  /0 RMBoth  ib op32  | Rotate 32 bits r/m32 left imm8 times. */
inline int rol (code_ptr p,
         const DwordPtr (&   modrm_rm),
         imm8_t imm)
{
    if (imm == 1)
       {
           return encode_instruction (p,
                                      Prefix (Op32,
                                              AddrNothing,
                                              modrm_rm),
                                      rexByte (rex_modrm_rm (modrm_rm)),
                                      Code (0xd1),
                                      make_modrm (modrm_rm,0));
       }
    else
       {
           return encode_instruction (p,
                                      Prefix (Op32,
                                              AddrNothing,
                                              modrm_rm),
                                      rexByte (rex_modrm_rm (modrm_rm)),
                                      Code (0xc1),
                                      make_modrm (modrm_rm,0),
                                      make_imm (imm));
       }
}
/*  C1  /0 RMBoth  ib op16  | Rotate 16 bits r/m16 left imm8 times. */
inline int rol (code_ptr p,
         const WordReg (&   modrm_rm),
         imm8_t imm)
{
    if (imm == 1)
       {
           return encode_instruction (p,
                                      Prefix (Op16,
                                              AddrNothing,
                                              modrm_rm),
                                      rexByte (rex_modrm_rm (modrm_rm)),
                                      Code (0xd1),
                                      make_modrm (modrm_rm,0));
       }
    else
       {
           return encode_instruction (p,
                                      Prefix (Op16,
                                              AddrNothing,
                                              modrm_rm),
                                      rexByte (rex_modrm_rm (modrm_rm)),
                                      Code (0xc1),
                                      make_modrm (modrm_rm,0),
                                      make_imm (imm));
       }
}
/*  C1  /0 RMBoth  ib op16  | Rotate 16 bits r/m16 left imm8 times. */
inline int rol (code_ptr p,
         const WordPtr (&   modrm_rm),
         imm8_t imm)
{
    if (imm == 1)
       {
           return encode_instruction (p,
                                      Prefix (Op16,
                                              AddrNothing,
                                              modrm_rm),
                                      rexByte (rex_modrm_rm (modrm_rm)),
                                      Code (0xd1),
                                      make_modrm (modrm_rm,0));
       }
    else
       {
           return encode_instruction (p,
                                      Prefix (Op16,
                                              AddrNothing,
                                              modrm_rm),
                                      rexByte (rex_modrm_rm (modrm_rm)),
                                      Code (0xc1),
                                      make_modrm (modrm_rm,0),
                                      make_imm (imm));
       }
}
/*  C0  /0 RMBoth  ib   | Rotate 8 bits r/m8 left imm8 times. */
inline int rol (code_ptr p,
         const ByteReg (&   modrm_rm),
         imm8_t imm)
{
    if (imm == 1)
       {
           return encode_instruction (p,
                                      Prefix (OpNothing,
                                              AddrNothing,
                                              modrm_rm),
                                      rexByte (rex_modrm_rm (modrm_rm)),
                                      Code (0xd0),
                                      make_modrm (modrm_rm,0));
       }
    else
       {
           return encode_instruction (p,
                                      Prefix (OpNothing,
                                              AddrNothing,
                                              modrm_rm),
                                      rexByte (rex_modrm_rm (modrm_rm)),
                                      Code (0xc0),
                                      make_modrm (modrm_rm,0),
                                      make_imm (imm));
       }
}
/*  C0  /0 RMBoth  ib   | Rotate 8 bits r/m8 left imm8 times. */
inline int rol (code_ptr p,
         const BytePtr (&   modrm_rm),
         imm8_t imm)
{
    if (imm == 1)
       {
           return encode_instruction (p,
                                      Prefix (OpNothing,
                                              AddrNothing,
                                              modrm_rm),
                                      rexByte (rex_modrm_rm (modrm_rm)),
                                      Code (0xd0),
                                      make_modrm (modrm_rm,0));
       }
    else
       {
           return encode_instruction (p,
                                      Prefix (OpNothing,
                                              AddrNothing,
                                              modrm_rm),
                                      rexByte (rex_modrm_rm (modrm_rm)),
                                      Code (0xc0),
                                      make_modrm (modrm_rm,0),
                                      make_imm (imm));
       }
}
/*  D2  /0 RMBoth     | Rotate 8 bits r/m8 left CL times. */
inline int rol (code_ptr p,
         const ByteReg (&   modrm_rm),
         const RegCL (&   unused))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm)),
                               Code (0xd2),
                               make_modrm (modrm_rm,0));
}
/*  D2  /0 RMBoth     | Rotate 8 bits r/m8 left CL times. */
inline int rol (code_ptr p,
         const BytePtr (&   modrm_rm),
         const RegCL (&   unused))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm)),
                               Code (0xd2),
                               make_modrm (modrm_rm,0));
}
/*  D3  /0 RMBoth   op16  | Rotate 16 bits r/m16 left CL times. */
inline int rol (code_ptr p,
         const WordReg (&   modrm_rm),
         const RegCL (&   unused))
{
    return encode_instruction (p,
                               Prefix (Op16,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm)),
                               Code (0xd3),
                               make_modrm (modrm_rm,0));
}
/*  D3  /0 RMBoth   op16  | Rotate 16 bits r/m16 left CL times. */
inline int rol (code_ptr p,
         const WordPtr (&   modrm_rm),
         const RegCL (&   unused))
{
    return encode_instruction (p,
                               Prefix (Op16,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm)),
                               Code (0xd3),
                               make_modrm (modrm_rm,0));
}
/*  D3  /0 RMBoth   op32  | Rotate 32 bits r/m32 left CL times. */
inline int rol (code_ptr p,
         const DwordReg (&   modrm_rm),
         const RegCL (&   unused))
{
    return encode_instruction (p,
                               Prefix (Op32,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm)),
                               Code (0xd3),
                               make_modrm (modrm_rm,0));
}
/*  D3  /0 RMBoth   op32  | Rotate 32 bits r/m32 left CL times. */
inline int rol (code_ptr p,
         const DwordPtr (&   modrm_rm),
         const RegCL (&   unused))
{
    return encode_instruction (p,
                               Prefix (Op32,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm)),
                               Code (0xd3),
                               make_modrm (modrm_rm,0));
}
/*  C1  /1 RMBoth  ib op32  | Rotate 32 bits r/m32 right imm8 times. */
inline int ror (code_ptr p,
         const DwordReg (&   modrm_rm),
         imm8_t imm)
{
    if (imm == 1)
       {
           return encode_instruction (p,
                                      Prefix (Op32,
                                              AddrNothing,
                                              modrm_rm),
                                      rexByte (rex_modrm_rm (modrm_rm)),
                                      Code (0xd1),
                                      make_modrm (modrm_rm,1));
       }
    else
       {
           return encode_instruction (p,
                                      Prefix (Op32,
                                              AddrNothing,
                                              modrm_rm),
                                      rexByte (rex_modrm_rm (modrm_rm)),
                                      Code (0xc1),
                                      make_modrm (modrm_rm,1),
                                      make_imm (imm));
       }
}
/*  C1  /1 RMBoth  ib op32  | Rotate 32 bits r/m32 right imm8 times. */
inline int ror (code_ptr p,
         const DwordPtr (&   modrm_rm),
         imm8_t imm)
{
    if (imm == 1)
       {
           return encode_instruction (p,
                                      Prefix (Op32,
                                              AddrNothing,
                                              modrm_rm),
                                      rexByte (rex_modrm_rm (modrm_rm)),
                                      Code (0xd1),
                                      make_modrm (modrm_rm,1));
       }
    else
       {
           return encode_instruction (p,
                                      Prefix (Op32,
                                              AddrNothing,
                                              modrm_rm),
                                      rexByte (rex_modrm_rm (modrm_rm)),
                                      Code (0xc1),
                                      make_modrm (modrm_rm,1),
                                      make_imm (imm));
       }
}
/*  C1  /1 RMBoth  ib op16  | Rotate 16 bits r/m16 right imm8 times. */
inline int ror (code_ptr p,
         const WordReg (&   modrm_rm),
         imm8_t imm)
{
    if (imm == 1)
       {
           return encode_instruction (p,
                                      Prefix (Op16,
                                              AddrNothing,
                                              modrm_rm),
                                      rexByte (rex_modrm_rm (modrm_rm)),
                                      Code (0xd1),
                                      make_modrm (modrm_rm,1));
       }
    else
       {
           return encode_instruction (p,
                                      Prefix (Op16,
                                              AddrNothing,
                                              modrm_rm),
                                      rexByte (rex_modrm_rm (modrm_rm)),
                                      Code (0xc1),
                                      make_modrm (modrm_rm,1),
                                      make_imm (imm));
       }
}
/*  C1  /1 RMBoth  ib op16  | Rotate 16 bits r/m16 right imm8 times. */
inline int ror (code_ptr p,
         const WordPtr (&   modrm_rm),
         imm8_t imm)
{
    if (imm == 1)
       {
           return encode_instruction (p,
                                      Prefix (Op16,
                                              AddrNothing,
                                              modrm_rm),
                                      rexByte (rex_modrm_rm (modrm_rm)),
                                      Code (0xd1),
                                      make_modrm (modrm_rm,1));
       }
    else
       {
           return encode_instruction (p,
                                      Prefix (Op16,
                                              AddrNothing,
                                              modrm_rm),
                                      rexByte (rex_modrm_rm (modrm_rm)),
                                      Code (0xc1),
                                      make_modrm (modrm_rm,1),
                                      make_imm (imm));
       }
}
/*  C0  /1 RMBoth  ib   | Rotate 8 bits r/m16 right imm8 times. */
inline int ror (code_ptr p,
         const ByteReg (&   modrm_rm),
         imm8_t imm)
{
    if (imm == 1)
       {
           return encode_instruction (p,
                                      Prefix (OpNothing,
                                              AddrNothing,
                                              modrm_rm),
                                      rexByte (rex_modrm_rm (modrm_rm)),
                                      Code (0xd0),
                                      make_modrm (modrm_rm,1));
       }
    else
       {
           return encode_instruction (p,
                                      Prefix (OpNothing,
                                              AddrNothing,
                                              modrm_rm),
                                      rexByte (rex_modrm_rm (modrm_rm)),
                                      Code (0xc0),
                                      make_modrm (modrm_rm,1),
                                      make_imm (imm));
       }
}
/*  C0  /1 RMBoth  ib   | Rotate 8 bits r/m16 right imm8 times. */
inline int ror (code_ptr p,
         const BytePtr (&   modrm_rm),
         imm8_t imm)
{
    if (imm == 1)
       {
           return encode_instruction (p,
                                      Prefix (OpNothing,
                                              AddrNothing,
                                              modrm_rm),
                                      rexByte (rex_modrm_rm (modrm_rm)),
                                      Code (0xd0),
                                      make_modrm (modrm_rm,1));
       }
    else
       {
           return encode_instruction (p,
                                      Prefix (OpNothing,
                                              AddrNothing,
                                              modrm_rm),
                                      rexByte (rex_modrm_rm (modrm_rm)),
                                      Code (0xc0),
                                      make_modrm (modrm_rm,1),
                                      make_imm (imm));
       }
}
/*  D2  /1 RMBoth     | Rotate 8 bits r/m8 right CL times. */
inline int ror (code_ptr p,
         const ByteReg (&   modrm_rm),
         const RegCL (&   unused))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm)),
                               Code (0xd2),
                               make_modrm (modrm_rm,1));
}
/*  D2  /1 RMBoth     | Rotate 8 bits r/m8 right CL times. */
inline int ror (code_ptr p,
         const BytePtr (&   modrm_rm),
         const RegCL (&   unused))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm)),
                               Code (0xd2),
                               make_modrm (modrm_rm,1));
}
/*  D3  /1 RMBoth   op16  | Rotate 16 bits r/m16 right CL times. */
inline int ror (code_ptr p,
         const WordReg (&   modrm_rm),
         const RegCL (&   unused))
{
    return encode_instruction (p,
                               Prefix (Op16,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm)),
                               Code (0xd3),
                               make_modrm (modrm_rm,1));
}
/*  D3  /1 RMBoth   op16  | Rotate 16 bits r/m16 right CL times. */
inline int ror (code_ptr p,
         const WordPtr (&   modrm_rm),
         const RegCL (&   unused))
{
    return encode_instruction (p,
                               Prefix (Op16,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm)),
                               Code (0xd3),
                               make_modrm (modrm_rm,1));
}
/*  D3  /1 RMBoth   op32  | Rotate 32 bits r/m32 right CL times. */
inline int ror (code_ptr p,
         const DwordReg (&   modrm_rm),
         const RegCL (&   unused))
{
    return encode_instruction (p,
                               Prefix (Op32,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm)),
                               Code (0xd3),
                               make_modrm (modrm_rm,1));
}
/*  D3  /1 RMBoth   op32  | Rotate 32 bits r/m32 right CL times. */
inline int ror (code_ptr p,
         const DwordPtr (&   modrm_rm),
         const RegCL (&   unused))
{
    return encode_instruction (p,
                               Prefix (Op32,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm)),
                               Code (0xd3),
                               make_modrm (modrm_rm,1));
}
/* 66 0F 3A 09  /r RMBoth  ib   | Round packed double precision floating-point values in xmm2/m128 and place the result in xmm1. The rounding mode is determined by imm8. */
inline int roundpd (code_ptr p,
             const XmmReg (&   modrm_reg),
             const XmmReg (&   modrm_rm),
             imm8_t imm)
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm,
                                       Prefix_OPERAND_SIZE),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x3a,0x9),
                               make_modrm (modrm_rm,modrm_reg),
                               make_imm (imm));
}
/* 66 0F 3A 09  /r RMBoth  ib   | Round packed double precision floating-point values in xmm2/m128 and place the result in xmm1. The rounding mode is determined by imm8. */
inline int roundpd (code_ptr p,
             const XmmReg (&   modrm_reg),
             const XmmWordPtr (&   modrm_rm),
             imm8_t imm)
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm,
                                       Prefix_OPERAND_SIZE),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x3a,0x9),
                               make_modrm (modrm_rm,modrm_reg),
                               make_imm (imm));
}
/* 66 0F 3A 08  /r RMBoth  ib   | Round packed single precision floating-point values in xmm2/m128 and place the result in xmm1. The rounding mode is determined by imm8. */
inline int roundps (code_ptr p,
             const XmmReg (&   modrm_reg),
             const XmmReg (&   modrm_rm),
             imm8_t imm)
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm,
                                       Prefix_OPERAND_SIZE),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x3a,0x8),
                               make_modrm (modrm_rm,modrm_reg),
                               make_imm (imm));
}
/* 66 0F 3A 08  /r RMBoth  ib   | Round packed single precision floating-point values in xmm2/m128 and place the result in xmm1. The rounding mode is determined by imm8. */
inline int roundps (code_ptr p,
             const XmmReg (&   modrm_reg),
             const XmmWordPtr (&   modrm_rm),
             imm8_t imm)
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm,
                                       Prefix_OPERAND_SIZE),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x3a,0x8),
                               make_modrm (modrm_rm,modrm_reg),
                               make_imm (imm));
}
/* 66 0F 3A 0B  /r RMBoth  ib   | Round the low packed double precision floating- point value in xmm2/m64 and place the result in xmm1. The rounding mode is determined by imm8. */
inline int roundsd (code_ptr p,
             const XmmReg (&   modrm_reg),
             const XmmReg (&   modrm_rm),
             imm8_t imm)
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm,
                                       Prefix_OPERAND_SIZE),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x3a,0xb),
                               make_modrm (modrm_rm,modrm_reg),
                               make_imm (imm));
}
/* 66 0F 3A 0B  /r RMBoth  ib   | Round the low packed double precision floating- point value in xmm2/m64 and place the result in xmm1. The rounding mode is determined by imm8. */
inline int roundsd (code_ptr p,
             const XmmReg (&   modrm_reg),
             const QwordPtr (&   modrm_rm),
             imm8_t imm)
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm,
                                       Prefix_OPERAND_SIZE),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x3a,0xb),
                               make_modrm (modrm_rm,modrm_reg),
                               make_imm (imm));
}
/* 66 0F 3A 0A  /r RMBoth  ib   | Round the low packed single precision floating-point value in xmm2/m32 and place the result in xmm1. The rounding mode is determined by imm8. */
inline int roundss (code_ptr p,
             const XmmReg (&   modrm_reg),
             const XmmReg (&   modrm_rm),
             imm8_t imm)
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm,
                                       Prefix_OPERAND_SIZE),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x3a,0xa),
                               make_modrm (modrm_rm,modrm_reg),
                               make_imm (imm));
}
/* 66 0F 3A 0A  /r RMBoth  ib   | Round the low packed single precision floating-point value in xmm2/m32 and place the result in xmm1. The rounding mode is determined by imm8. */
inline int roundss (code_ptr p,
             const XmmReg (&   modrm_reg),
             const DwordPtr (&   modrm_rm),
             imm8_t imm)
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm,
                                       Prefix_OPERAND_SIZE),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x3a,0xa),
                               make_modrm (modrm_rm,modrm_reg),
                               make_imm (imm));
}
/*  0F AA        | Resume operation of interrupted program. */
inline int rsm (code_ptr p)
{
    return encode_instruction (p,
                               Prefix (OpNothing,AddrNothing),
                               Code (0xf,0xaa));
}
/*  0F 52  /r RMBoth     | Computes the approximate reciprocals of the square roots of the packed single- precision floating-point values in xmm2/m128 and stores the results in xmm1. */
inline int rsqrtps (code_ptr p,
             const XmmReg (&   modrm_reg),
             const XmmReg (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x52),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/*  0F 52  /r RMBoth     | Computes the approximate reciprocals of the square roots of the packed single- precision floating-point values in xmm2/m128 and stores the results in xmm1. */
inline int rsqrtps (code_ptr p,
             const XmmReg (&   modrm_reg),
             const XmmWordPtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x52),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/* F3 0F 52  /r RMBoth     | Computes the approximate reciprocal of the square root of the low single-precision floating-point value in xmm2/m32 and stores the results in xmm1. */
inline int rsqrtss (code_ptr p,
             const XmmReg (&   modrm_reg),
             const XmmReg (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm,
                                       Prefix_REP),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x52),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/* F3 0F 52  /r RMBoth     | Computes the approximate reciprocal of the square root of the low single-precision floating-point value in xmm2/m32 and stores the results in xmm1. */
inline int rsqrtss (code_ptr p,
             const XmmReg (&   modrm_reg),
             const DwordPtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm,
                                       Prefix_REP),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x52),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/*  9E        | Loads SF, ZF, AF, PF, and CF from AH into EFLAGS register. */
inline int sahf (code_ptr p)
{
    return encode_instruction (p,
                               Prefix (OpNothing,AddrNothing),
                               Code (0x9e));
}
/*  C1  /4 RMBoth  ib op32  | Multiply r/m32 by 2, imm8 times. */
inline int sal (code_ptr p,
         const DwordReg (&   modrm_rm),
         imm8_t imm)
{
    if (imm == 1)
       {
           return encode_instruction (p,
                                      Prefix (Op32,
                                              AddrNothing,
                                              modrm_rm),
                                      rexByte (rex_modrm_rm (modrm_rm)),
                                      Code (0xd1),
                                      make_modrm (modrm_rm,4));
       }
    else
       {
           return encode_instruction (p,
                                      Prefix (Op32,
                                              AddrNothing,
                                              modrm_rm),
                                      rexByte (rex_modrm_rm (modrm_rm)),
                                      Code (0xc1),
                                      make_modrm (modrm_rm,4),
                                      make_imm (imm));
       }
}
/*  C1  /4 RMBoth  ib op32  | Multiply r/m32 by 2, imm8 times. */
inline int sal (code_ptr p,
         const DwordPtr (&   modrm_rm),
         imm8_t imm)
{
    if (imm == 1)
       {
           return encode_instruction (p,
                                      Prefix (Op32,
                                              AddrNothing,
                                              modrm_rm),
                                      rexByte (rex_modrm_rm (modrm_rm)),
                                      Code (0xd1),
                                      make_modrm (modrm_rm,4));
       }
    else
       {
           return encode_instruction (p,
                                      Prefix (Op32,
                                              AddrNothing,
                                              modrm_rm),
                                      rexByte (rex_modrm_rm (modrm_rm)),
                                      Code (0xc1),
                                      make_modrm (modrm_rm,4),
                                      make_imm (imm));
       }
}
/*  C1  /4 RMBoth  ib op16  | Multiply r/m16 by 2, imm8 times. */
inline int sal (code_ptr p,
         const WordReg (&   modrm_rm),
         imm8_t imm)
{
    if (imm == 1)
       {
           return encode_instruction (p,
                                      Prefix (Op16,
                                              AddrNothing,
                                              modrm_rm),
                                      rexByte (rex_modrm_rm (modrm_rm)),
                                      Code (0xd1),
                                      make_modrm (modrm_rm,4));
       }
    else
       {
           return encode_instruction (p,
                                      Prefix (Op16,
                                              AddrNothing,
                                              modrm_rm),
                                      rexByte (rex_modrm_rm (modrm_rm)),
                                      Code (0xc1),
                                      make_modrm (modrm_rm,4),
                                      make_imm (imm));
       }
}
/*  C1  /4 RMBoth  ib op16  | Multiply r/m16 by 2, imm8 times. */
inline int sal (code_ptr p,
         const WordPtr (&   modrm_rm),
         imm8_t imm)
{
    if (imm == 1)
       {
           return encode_instruction (p,
                                      Prefix (Op16,
                                              AddrNothing,
                                              modrm_rm),
                                      rexByte (rex_modrm_rm (modrm_rm)),
                                      Code (0xd1),
                                      make_modrm (modrm_rm,4));
       }
    else
       {
           return encode_instruction (p,
                                      Prefix (Op16,
                                              AddrNothing,
                                              modrm_rm),
                                      rexByte (rex_modrm_rm (modrm_rm)),
                                      Code (0xc1),
                                      make_modrm (modrm_rm,4),
                                      make_imm (imm));
       }
}
/*  C0  /4 RMBoth  ib   | Multiply r/m8 by 2, imm8 times. */
inline int sal (code_ptr p,
         const ByteReg (&   modrm_rm),
         imm8_t imm)
{
    if (imm == 1)
       {
           return encode_instruction (p,
                                      Prefix (OpNothing,
                                              AddrNothing,
                                              modrm_rm),
                                      rexByte (rex_modrm_rm (modrm_rm)),
                                      Code (0xd0),
                                      make_modrm (modrm_rm,4));
       }
    else
       {
           return encode_instruction (p,
                                      Prefix (OpNothing,
                                              AddrNothing,
                                              modrm_rm),
                                      rexByte (rex_modrm_rm (modrm_rm)),
                                      Code (0xc0),
                                      make_modrm (modrm_rm,4),
                                      make_imm (imm));
       }
}
/*  C0  /4 RMBoth  ib   | Multiply r/m8 by 2, imm8 times. */
inline int sal (code_ptr p,
         const BytePtr (&   modrm_rm),
         imm8_t imm)
{
    if (imm == 1)
       {
           return encode_instruction (p,
                                      Prefix (OpNothing,
                                              AddrNothing,
                                              modrm_rm),
                                      rexByte (rex_modrm_rm (modrm_rm)),
                                      Code (0xd0),
                                      make_modrm (modrm_rm,4));
       }
    else
       {
           return encode_instruction (p,
                                      Prefix (OpNothing,
                                              AddrNothing,
                                              modrm_rm),
                                      rexByte (rex_modrm_rm (modrm_rm)),
                                      Code (0xc0),
                                      make_modrm (modrm_rm,4),
                                      make_imm (imm));
       }
}
/*  D2  /4 RMBoth     | Multiply r/m8 by 2, CL times. */
inline int sal (code_ptr p,
         const ByteReg (&   modrm_rm),
         const RegCL (&   unused))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm)),
                               Code (0xd2),
                               make_modrm (modrm_rm,4));
}
/*  D2  /4 RMBoth     | Multiply r/m8 by 2, CL times. */
inline int sal (code_ptr p,
         const BytePtr (&   modrm_rm),
         const RegCL (&   unused))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm)),
                               Code (0xd2),
                               make_modrm (modrm_rm,4));
}
/*  D3  /4 RMBoth   op16  | Multiply r/m16 by 2, CL times. */
inline int sal (code_ptr p,
         const WordReg (&   modrm_rm),
         const RegCL (&   unused))
{
    return encode_instruction (p,
                               Prefix (Op16,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm)),
                               Code (0xd3),
                               make_modrm (modrm_rm,4));
}
/*  D3  /4 RMBoth   op16  | Multiply r/m16 by 2, CL times. */
inline int sal (code_ptr p,
         const WordPtr (&   modrm_rm),
         const RegCL (&   unused))
{
    return encode_instruction (p,
                               Prefix (Op16,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm)),
                               Code (0xd3),
                               make_modrm (modrm_rm,4));
}
/*  D3  /4 RMBoth   op32  | Multiply r/m32 by 2, CL times. */
inline int sal (code_ptr p,
         const DwordReg (&   modrm_rm),
         const RegCL (&   unused))
{
    return encode_instruction (p,
                               Prefix (Op32,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm)),
                               Code (0xd3),
                               make_modrm (modrm_rm,4));
}
/*  D3  /4 RMBoth   op32  | Multiply r/m32 by 2, CL times. */
inline int sal (code_ptr p,
         const DwordPtr (&   modrm_rm),
         const RegCL (&   unused))
{
    return encode_instruction (p,
                               Prefix (Op32,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm)),
                               Code (0xd3),
                               make_modrm (modrm_rm,4));
}
/*  C1  /7 RMBoth  ib op32  | Signed divide* r/m32 by 2, imm8 times. */
inline int sar (code_ptr p,
         const DwordReg (&   modrm_rm),
         imm8_t imm)
{
    if (imm == 1)
       {
           return encode_instruction (p,
                                      Prefix (Op32,
                                              AddrNothing,
                                              modrm_rm),
                                      rexByte (rex_modrm_rm (modrm_rm)),
                                      Code (0xd1),
                                      make_modrm (modrm_rm,7));
       }
    else
       {
           return encode_instruction (p,
                                      Prefix (Op32,
                                              AddrNothing,
                                              modrm_rm),
                                      rexByte (rex_modrm_rm (modrm_rm)),
                                      Code (0xc1),
                                      make_modrm (modrm_rm,7),
                                      make_imm (imm));
       }
}
/*  C1  /7 RMBoth  ib op32  | Signed divide* r/m32 by 2, imm8 times. */
inline int sar (code_ptr p,
         const DwordPtr (&   modrm_rm),
         imm8_t imm)
{
    if (imm == 1)
       {
           return encode_instruction (p,
                                      Prefix (Op32,
                                              AddrNothing,
                                              modrm_rm),
                                      rexByte (rex_modrm_rm (modrm_rm)),
                                      Code (0xd1),
                                      make_modrm (modrm_rm,7));
       }
    else
       {
           return encode_instruction (p,
                                      Prefix (Op32,
                                              AddrNothing,
                                              modrm_rm),
                                      rexByte (rex_modrm_rm (modrm_rm)),
                                      Code (0xc1),
                                      make_modrm (modrm_rm,7),
                                      make_imm (imm));
       }
}
/*  C1  /7 RMBoth  ib op16  | Signed divide* r/m16 by 2, imm8 times. */
inline int sar (code_ptr p,
         const WordReg (&   modrm_rm),
         imm8_t imm)
{
    if (imm == 1)
       {
           return encode_instruction (p,
                                      Prefix (Op16,
                                              AddrNothing,
                                              modrm_rm),
                                      rexByte (rex_modrm_rm (modrm_rm)),
                                      Code (0xd1),
                                      make_modrm (modrm_rm,7));
       }
    else
       {
           return encode_instruction (p,
                                      Prefix (Op16,
                                              AddrNothing,
                                              modrm_rm),
                                      rexByte (rex_modrm_rm (modrm_rm)),
                                      Code (0xc1),
                                      make_modrm (modrm_rm,7),
                                      make_imm (imm));
       }
}
/*  C1  /7 RMBoth  ib op16  | Signed divide* r/m16 by 2, imm8 times. */
inline int sar (code_ptr p,
         const WordPtr (&   modrm_rm),
         imm8_t imm)
{
    if (imm == 1)
       {
           return encode_instruction (p,
                                      Prefix (Op16,
                                              AddrNothing,
                                              modrm_rm),
                                      rexByte (rex_modrm_rm (modrm_rm)),
                                      Code (0xd1),
                                      make_modrm (modrm_rm,7));
       }
    else
       {
           return encode_instruction (p,
                                      Prefix (Op16,
                                              AddrNothing,
                                              modrm_rm),
                                      rexByte (rex_modrm_rm (modrm_rm)),
                                      Code (0xc1),
                                      make_modrm (modrm_rm,7),
                                      make_imm (imm));
       }
}
/*  C0  /7 RMBoth  ib   | Signed divide* r/m8 by 2, imm8 time. */
inline int sar (code_ptr p,
         const ByteReg (&   modrm_rm),
         imm8_t imm)
{
    if (imm == 1)
       {
           return encode_instruction (p,
                                      Prefix (OpNothing,
                                              AddrNothing,
                                              modrm_rm),
                                      rexByte (rex_modrm_rm (modrm_rm)),
                                      Code (0xd0),
                                      make_modrm (modrm_rm,7));
       }
    else
       {
           return encode_instruction (p,
                                      Prefix (OpNothing,
                                              AddrNothing,
                                              modrm_rm),
                                      rexByte (rex_modrm_rm (modrm_rm)),
                                      Code (0xc0),
                                      make_modrm (modrm_rm,7),
                                      make_imm (imm));
       }
}
/*  C0  /7 RMBoth  ib   | Signed divide* r/m8 by 2, imm8 time. */
inline int sar (code_ptr p,
         const BytePtr (&   modrm_rm),
         imm8_t imm)
{
    if (imm == 1)
       {
           return encode_instruction (p,
                                      Prefix (OpNothing,
                                              AddrNothing,
                                              modrm_rm),
                                      rexByte (rex_modrm_rm (modrm_rm)),
                                      Code (0xd0),
                                      make_modrm (modrm_rm,7));
       }
    else
       {
           return encode_instruction (p,
                                      Prefix (OpNothing,
                                              AddrNothing,
                                              modrm_rm),
                                      rexByte (rex_modrm_rm (modrm_rm)),
                                      Code (0xc0),
                                      make_modrm (modrm_rm,7),
                                      make_imm (imm));
       }
}
/*  D2  /7 RMBoth     | Signed divide* r/m8 by 2, CL times. */
inline int sar (code_ptr p,
         const ByteReg (&   modrm_rm),
         const RegCL (&   unused))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm)),
                               Code (0xd2),
                               make_modrm (modrm_rm,7));
}
/*  D2  /7 RMBoth     | Signed divide* r/m8 by 2, CL times. */
inline int sar (code_ptr p,
         const BytePtr (&   modrm_rm),
         const RegCL (&   unused))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm)),
                               Code (0xd2),
                               make_modrm (modrm_rm,7));
}
/*  D3  /7 RMBoth   op16  | Signed divide* r/m16 by 2, CL times. */
inline int sar (code_ptr p,
         const WordReg (&   modrm_rm),
         const RegCL (&   unused))
{
    return encode_instruction (p,
                               Prefix (Op16,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm)),
                               Code (0xd3),
                               make_modrm (modrm_rm,7));
}
/*  D3  /7 RMBoth   op16  | Signed divide* r/m16 by 2, CL times. */
inline int sar (code_ptr p,
         const WordPtr (&   modrm_rm),
         const RegCL (&   unused))
{
    return encode_instruction (p,
                               Prefix (Op16,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm)),
                               Code (0xd3),
                               make_modrm (modrm_rm,7));
}
/*  D3  /7 RMBoth   op32  | Signed divide* r/m32 by 2, CL times. */
inline int sar (code_ptr p,
         const DwordReg (&   modrm_rm),
         const RegCL (&   unused))
{
    return encode_instruction (p,
                               Prefix (Op32,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm)),
                               Code (0xd3),
                               make_modrm (modrm_rm,7));
}
/*  D3  /7 RMBoth   op32  | Signed divide* r/m32 by 2, CL times. */
inline int sar (code_ptr p,
         const DwordPtr (&   modrm_rm),
         const RegCL (&   unused))
{
    return encode_instruction (p,
                               Prefix (Op32,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm)),
                               Code (0xd3),
                               make_modrm (modrm_rm,7));
}
/*  1D     id op32  | Subtract with borrow imm32 from EAX. */
inline int sbb (code_ptr p,
         const RegEAX (&   unused),
         imm32_t imm)
{
    return encode_instruction (p,
                               Prefix (Op32,AddrNothing),
                               Code (0x1d),
                               make_imm (imm));
}
/*  83  /3 RMBoth  ib op32  | Subtract with borrow sign- extended imm8 from r/m32. */
inline int sbb (code_ptr p,
         const DwordReg_m_EAX (&   modrm_rm),
         imm8_t imm)
{
    return encode_instruction (p,
                               Prefix (Op32,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm)),
                               Code (0x83),
                               make_modrm (modrm_rm,3),
                               make_imm (imm));
}
/*  81  /3 RMBoth  id op32  | Subtract with borrow imm32 from r/m32. */
inline int sbb (code_ptr p,
         const DwordReg_m_EAX (&   modrm_rm),
         imm32_t imm)
{
    return encode_instruction (p,
                               Prefix (Op32,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm)),
                               Code (0x81),
                               make_modrm (modrm_rm,3),
                               make_imm (imm));
}
/*  81  /3 RMBoth  id op32  | Subtract with borrow imm32 from r/m32. */
inline int sbb (code_ptr p,
         const DwordPtr (&   modrm_rm),
         imm32_t imm)
{
    return encode_instruction (p,
                               Prefix (Op32,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm)),
                               Code (0x81),
                               make_modrm (modrm_rm,3),
                               make_imm (imm));
}
/*  83  /3 RMBoth  ib op32  | Subtract with borrow sign- extended imm8 from r/m32. */
inline int sbb (code_ptr p,
         const RegEAX (&   modrm_rm),
         imm8_t imm)
{
    return encode_instruction (p,
                               Prefix (Op32,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm)),
                               Code (0x83),
                               make_modrm (modrm_rm,3),
                               make_imm (imm));
}
/*  83  /3 RMBoth  ib op32  | Subtract with borrow sign- extended imm8 from r/m32. */
inline int sbb (code_ptr p,
         const DwordPtr (&   modrm_rm),
         imm8_t imm)
{
    return encode_instruction (p,
                               Prefix (Op32,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm)),
                               Code (0x83),
                               make_modrm (modrm_rm,3),
                               make_imm (imm));
}
/*  1D     iw op16  | Subtract with borrow imm16 from AX. */
inline int sbb (code_ptr p,
         const RegAX (&   unused),
         imm16_t imm)
{
    return encode_instruction (p,
                               Prefix (Op16,AddrNothing),
                               Code (0x1d),
                               make_imm (imm));
}
/*  83  /3 RMBoth  ib op16  | Subtract with borrow sign- extended imm8 from r/m16. */
inline int sbb (code_ptr p,
         const WordReg_m_AX (&   modrm_rm),
         imm8_t imm)
{
    return encode_instruction (p,
                               Prefix (Op16,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm)),
                               Code (0x83),
                               make_modrm (modrm_rm,3),
                               make_imm (imm));
}
/*  81  /3 RMBoth  iw op16  | Subtract with borrow imm16 from r/m16. */
inline int sbb (code_ptr p,
         const WordReg_m_AX (&   modrm_rm),
         imm16_t imm)
{
    return encode_instruction (p,
                               Prefix (Op16,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm)),
                               Code (0x81),
                               make_modrm (modrm_rm,3),
                               make_imm (imm));
}
/*  81  /3 RMBoth  iw op16  | Subtract with borrow imm16 from r/m16. */
inline int sbb (code_ptr p,
         const WordPtr (&   modrm_rm),
         imm16_t imm)
{
    return encode_instruction (p,
                               Prefix (Op16,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm)),
                               Code (0x81),
                               make_modrm (modrm_rm,3),
                               make_imm (imm));
}
/*  83  /3 RMBoth  ib op16  | Subtract with borrow sign- extended imm8 from r/m16. */
inline int sbb (code_ptr p,
         const RegAX (&   modrm_rm),
         imm8_t imm)
{
    return encode_instruction (p,
                               Prefix (Op16,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm)),
                               Code (0x83),
                               make_modrm (modrm_rm,3),
                               make_imm (imm));
}
/*  83  /3 RMBoth  ib op16  | Subtract with borrow sign- extended imm8 from r/m16. */
inline int sbb (code_ptr p,
         const WordPtr (&   modrm_rm),
         imm8_t imm)
{
    return encode_instruction (p,
                               Prefix (Op16,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm)),
                               Code (0x83),
                               make_modrm (modrm_rm,3),
                               make_imm (imm));
}
/*  1B  /r RMBoth   op32  | Subtract with borrow r/m32 from r32. */
inline int sbb (code_ptr p,
         const DwordReg (&   modrm_reg),
         const DwordReg (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (Op32,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0x1b),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/*  1B  /r RMBoth   op32  | Subtract with borrow r/m32 from r32. */
inline int sbb (code_ptr p,
         const DwordReg (&   modrm_reg),
         const DwordPtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (Op32,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0x1b),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/*  19  /r RMBoth   op32  | Subtract with borrow r32 from r/m32. */
inline int sbb (code_ptr p,
         const DwordPtr (&   modrm_rm),
         const DwordReg (&   modrm_reg))
{
    return encode_instruction (p,
                               Prefix (Op32,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0x19),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/*  1B  /r RMBoth   op16  | Subtract with borrow r/m16 from r16. */
inline int sbb (code_ptr p,
         const WordReg (&   modrm_reg),
         const WordReg (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (Op16,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0x1b),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/*  1B  /r RMBoth   op16  | Subtract with borrow r/m16 from r16. */
inline int sbb (code_ptr p,
         const WordReg (&   modrm_reg),
         const WordPtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (Op16,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0x1b),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/*  19  /r RMBoth   op16  | Subtract with borrow r16 from r/m16. */
inline int sbb (code_ptr p,
         const WordPtr (&   modrm_rm),
         const WordReg (&   modrm_reg))
{
    return encode_instruction (p,
                               Prefix (Op16,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0x19),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/*  1A  /r RMBoth     | Subtract with borrow r/m8 from r8. */
inline int sbb (code_ptr p,
         const ByteReg (&   modrm_reg),
         const ByteReg (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0x1a),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/*  1A  /r RMBoth     | Subtract with borrow r/m8 from r8. */
inline int sbb (code_ptr p,
         const ByteReg (&   modrm_reg),
         const BytePtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0x1a),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/*  18  /r RMBoth     | Subtract with borrow r8 from r/m8. */
inline int sbb (code_ptr p,
         const BytePtr (&   modrm_rm),
         const ByteReg (&   modrm_reg))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0x18),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/*  1C     ib   | Subtract with borrow imm8 from AL. */
inline int sbb (code_ptr p,
         const RegAL (&   unused),
         imm8_t imm)
{
    return encode_instruction (p,
                               Prefix (OpNothing,AddrNothing),
                               Code (0x1c),
                               make_imm (imm));
}
/*  80  /3 RMBoth  ib   | Subtract with borrow imm8 from r/m8. */
inline int sbb (code_ptr p,
         const ByteReg (&   modrm_rm),
         imm8_t imm)
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm)),
                               Code (0x80),
                               make_modrm (modrm_rm,3),
                               make_imm (imm));
}
/*  80  /3 RMBoth  ib   | Subtract with borrow imm8 from r/m8. */
inline int sbb (code_ptr p,
         const BytePtr (&   modrm_rm),
         imm8_t imm)
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm)),
                               Code (0x80),
                               make_modrm (modrm_rm,3),
                               make_imm (imm));
}
/*  AE        | Compare AL with byte at ES:(E)DI or RDI, then set status flags.* */
inline int scas (code_ptr p,
          const BytePtr_ES_EDI (&   unused))
{
    return encode_instruction (p,
                               Prefix (OpNothing,Addr32),
                               Code (0xae));
}
/*  AE        | Compare AL with byte at ES:(E)DI or RDI, then set status flags.* */
inline int scas (code_ptr p,
          const RegAL (&   unused1),
          const BytePtr_ES_EDI (&   unused2))
{
    return encode_instruction (p,
                               Prefix (OpNothing,Addr32),
                               Code (0xae));
}
/*  AE        | Compare AL with byte at ES:(E)DI or RDI, then set status flags.* */
inline int scas (code_ptr p,
          const BytePtr_ES_DI (&   unused))
{
    return encode_instruction (p,
                               Prefix (OpNothing,Addr16),
                               Code (0xae));
}
/*  AE        | Compare AL with byte at ES:(E)DI or RDI, then set status flags.* */
inline int scas (code_ptr p,
          const RegAL (&   unused1),
          const BytePtr_ES_DI (&   unused2))
{
    return encode_instruction (p,
                               Prefix (OpNothing,Addr16),
                               Code (0xae));
}
/*  AF      op16  | Compare AX with word at ES:(E)DI or RDI, then set status flags.* */
inline int scas (code_ptr p,
          const WordPtr_ES_EDI (&   unused))
{
    return encode_instruction (p,
                               Prefix (Op16,Addr32),
                               Code (0xaf));
}
/*  AF      op16  | Compare AX with word at ES:(E)DI or RDI, then set status flags.* */
inline int scas (code_ptr p,
          const RegAX (&   unused1),
          const WordPtr_ES_EDI (&   unused2))
{
    return encode_instruction (p,
                               Prefix (Op16,Addr32),
                               Code (0xaf));
}
/*  AF      op16  | Compare AX with word at ES:(E)DI or RDI, then set status flags.* */
inline int scas (code_ptr p,
          const WordPtr_ES_DI (&   unused))
{
    return encode_instruction (p,
                               Prefix (Op16,Addr16),
                               Code (0xaf));
}
/*  AF      op16  | Compare AX with word at ES:(E)DI or RDI, then set status flags.* */
inline int scas (code_ptr p,
          const RegAX (&   unused1),
          const WordPtr_ES_DI (&   unused2))
{
    return encode_instruction (p,
                               Prefix (Op16,Addr16),
                               Code (0xaf));
}
/*  AF      op32  | Compare EAX with doubleword at ES(E)DI or RDI then set status flags.* */
inline int scas (code_ptr p,
          const DwordPtr_ES_EDI (&   unused))
{
    return encode_instruction (p,
                               Prefix (Op32,Addr32),
                               Code (0xaf));
}
/*  AF      op32  | Compare EAX with doubleword at ES(E)DI or RDI then set status flags.* */
inline int scas (code_ptr p,
          const RegEAX (&   unused1),
          const DwordPtr_ES_EDI (&   unused2))
{
    return encode_instruction (p,
                               Prefix (Op32,Addr32),
                               Code (0xaf));
}
/*  AF      op32  | Compare EAX with doubleword at ES(E)DI or RDI then set status flags.* */
inline int scas (code_ptr p,
          const DwordPtr_ES_DI (&   unused))
{
    return encode_instruction (p,
                               Prefix (Op32,Addr16),
                               Code (0xaf));
}
/*  AF      op32  | Compare EAX with doubleword at ES(E)DI or RDI then set status flags.* */
inline int scas (code_ptr p,
          const RegEAX (&   unused1),
          const DwordPtr_ES_DI (&   unused2))
{
    return encode_instruction (p,
                               Prefix (Op32,Addr16),
                               Code (0xaf));
}
/*  AE        | Compare AL with byte at ES:(E)DI or RDI then set status flags.* */
inline int scasb (code_ptr p)
{
    return encode_instruction (p,
                               Prefix (OpNothing,AddrNothing),
                               Code (0xae));
}
/*  AF      op32  | Compare EAX with doubleword at ES:(E)DI or RDI then set status flags.* */
inline int scasd (code_ptr p)
{
    return encode_instruction (p,
                               Prefix (Op32,AddrNothing),
                               Code (0xaf));
}
/*  AF      op16  | Compare AX with word at ES:(E)DI or RDI then set status flags.* */
inline int scasw (code_ptr p)
{
    return encode_instruction (p,
                               Prefix (Op16,AddrNothing),
                               Code (0xaf));
}
/*  0F 97  /r RMBoth     | Set byte if above (CF=0 and ZF=0). */
inline int seta (code_ptr p,
          const ByteReg (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm)),
                               Code (0xf,0x97),
                               make_modrm (modrm_rm,rax));
}
/*  0F 97  /r RMBoth     | Set byte if above (CF=0 and ZF=0). */
inline int seta (code_ptr p,
          const BytePtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm)),
                               Code (0xf,0x97),
                               make_modrm (modrm_rm,rax));
}
/*  0F 93  /r RMBoth     | Set byte if above or equal (CF=0). */
inline int setae (code_ptr p,
           const ByteReg (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm)),
                               Code (0xf,0x93),
                               make_modrm (modrm_rm,rax));
}
/*  0F 93  /r RMBoth     | Set byte if above or equal (CF=0). */
inline int setae (code_ptr p,
           const BytePtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm)),
                               Code (0xf,0x93),
                               make_modrm (modrm_rm,rax));
}
/*  0F 92  /r RMBoth     | Set byte if below (CF=1). */
inline int setb (code_ptr p,
          const ByteReg (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm)),
                               Code (0xf,0x92),
                               make_modrm (modrm_rm,rax));
}
/*  0F 92  /r RMBoth     | Set byte if below (CF=1). */
inline int setb (code_ptr p,
          const BytePtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm)),
                               Code (0xf,0x92),
                               make_modrm (modrm_rm,rax));
}
/*  0F 96  /r RMBoth     | Set byte if below or equal (CF=1 or ZF=1). */
inline int setbe (code_ptr p,
           const ByteReg (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm)),
                               Code (0xf,0x96),
                               make_modrm (modrm_rm,rax));
}
/*  0F 96  /r RMBoth     | Set byte if below or equal (CF=1 or ZF=1). */
inline int setbe (code_ptr p,
           const BytePtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm)),
                               Code (0xf,0x96),
                               make_modrm (modrm_rm,rax));
}
/*  0F 92  /r RMBoth     | Set byte if carry (CF=1). */
inline int setc (code_ptr p,
          const ByteReg (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm)),
                               Code (0xf,0x92),
                               make_modrm (modrm_rm,rax));
}
/*  0F 92  /r RMBoth     | Set byte if carry (CF=1). */
inline int setc (code_ptr p,
          const BytePtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm)),
                               Code (0xf,0x92),
                               make_modrm (modrm_rm,rax));
}
/*  0F 94  /r RMBoth     | Set byte if equal (ZF=1). */
inline int sete (code_ptr p,
          const ByteReg (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm)),
                               Code (0xf,0x94),
                               make_modrm (modrm_rm,rax));
}
/*  0F 94  /r RMBoth     | Set byte if equal (ZF=1). */
inline int sete (code_ptr p,
          const BytePtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm)),
                               Code (0xf,0x94),
                               make_modrm (modrm_rm,rax));
}
/*  0F 9F  /r RMBoth     | Set byte if greater (ZF=0 and SF=OF). */
inline int setg (code_ptr p,
          const ByteReg (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm)),
                               Code (0xf,0x9f),
                               make_modrm (modrm_rm,rax));
}
/*  0F 9F  /r RMBoth     | Set byte if greater (ZF=0 and SF=OF). */
inline int setg (code_ptr p,
          const BytePtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm)),
                               Code (0xf,0x9f),
                               make_modrm (modrm_rm,rax));
}
/*  0F 9D  /r RMBoth     | Set byte if greater or equal (SF=OF). */
inline int setge (code_ptr p,
           const ByteReg (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm)),
                               Code (0xf,0x9d),
                               make_modrm (modrm_rm,rax));
}
/*  0F 9D  /r RMBoth     | Set byte if greater or equal (SF=OF). */
inline int setge (code_ptr p,
           const BytePtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm)),
                               Code (0xf,0x9d),
                               make_modrm (modrm_rm,rax));
}
/*  0F 9C  /r RMBoth     | Set byte if less (SF≠ OF). */
inline int setl (code_ptr p,
          const ByteReg (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm)),
                               Code (0xf,0x9c),
                               make_modrm (modrm_rm,rax));
}
/*  0F 9C  /r RMBoth     | Set byte if less (SF≠ OF). */
inline int setl (code_ptr p,
          const BytePtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm)),
                               Code (0xf,0x9c),
                               make_modrm (modrm_rm,rax));
}
/*  0F 9E  /r RMBoth     | Set byte if less or equal (ZF=1 or SF≠ OF). */
inline int setle (code_ptr p,
           const ByteReg (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm)),
                               Code (0xf,0x9e),
                               make_modrm (modrm_rm,rax));
}
/*  0F 9E  /r RMBoth     | Set byte if less or equal (ZF=1 or SF≠ OF). */
inline int setle (code_ptr p,
           const BytePtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm)),
                               Code (0xf,0x9e),
                               make_modrm (modrm_rm,rax));
}
/*  0F 96  /r RMBoth     | Set byte if not above (CF=1 or ZF=1). */
inline int setna (code_ptr p,
           const ByteReg (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm)),
                               Code (0xf,0x96),
                               make_modrm (modrm_rm,rax));
}
/*  0F 96  /r RMBoth     | Set byte if not above (CF=1 or ZF=1). */
inline int setna (code_ptr p,
           const BytePtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm)),
                               Code (0xf,0x96),
                               make_modrm (modrm_rm,rax));
}
/*  0F 92  /r RMBoth     | Set byte if not above or equal (CF=1). */
inline int setnae (code_ptr p,
            const ByteReg (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm)),
                               Code (0xf,0x92),
                               make_modrm (modrm_rm,rax));
}
/*  0F 92  /r RMBoth     | Set byte if not above or equal (CF=1). */
inline int setnae (code_ptr p,
            const BytePtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm)),
                               Code (0xf,0x92),
                               make_modrm (modrm_rm,rax));
}
/*  0F 93  /r RMBoth     | Set byte if not below (CF=0). */
inline int setnb (code_ptr p,
           const ByteReg (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm)),
                               Code (0xf,0x93),
                               make_modrm (modrm_rm,rax));
}
/*  0F 93  /r RMBoth     | Set byte if not below (CF=0). */
inline int setnb (code_ptr p,
           const BytePtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm)),
                               Code (0xf,0x93),
                               make_modrm (modrm_rm,rax));
}
/*  0F 97  /r RMBoth     | Set byte if not below or equal (CF=0 and ZF=0). */
inline int setnbe (code_ptr p,
            const ByteReg (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm)),
                               Code (0xf,0x97),
                               make_modrm (modrm_rm,rax));
}
/*  0F 97  /r RMBoth     | Set byte if not below or equal (CF=0 and ZF=0). */
inline int setnbe (code_ptr p,
            const BytePtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm)),
                               Code (0xf,0x97),
                               make_modrm (modrm_rm,rax));
}
/*  0F 93  /r RMBoth     | Set byte if not carry (CF=0). */
inline int setnc (code_ptr p,
           const ByteReg (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm)),
                               Code (0xf,0x93),
                               make_modrm (modrm_rm,rax));
}
/*  0F 93  /r RMBoth     | Set byte if not carry (CF=0). */
inline int setnc (code_ptr p,
           const BytePtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm)),
                               Code (0xf,0x93),
                               make_modrm (modrm_rm,rax));
}
/*  0F 95  /r RMBoth     | Set byte if not equal (ZF=0). */
inline int setne (code_ptr p,
           const ByteReg (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm)),
                               Code (0xf,0x95),
                               make_modrm (modrm_rm,rax));
}
/*  0F 95  /r RMBoth     | Set byte if not equal (ZF=0). */
inline int setne (code_ptr p,
           const BytePtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm)),
                               Code (0xf,0x95),
                               make_modrm (modrm_rm,rax));
}
/*  0F 9E  /r RMBoth     | Set byte if not greater (ZF=1 or SF≠ OF) */
inline int setng (code_ptr p,
           const ByteReg (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm)),
                               Code (0xf,0x9e),
                               make_modrm (modrm_rm,rax));
}
/*  0F 9E  /r RMBoth     | Set byte if not greater (ZF=1 or SF≠ OF) */
inline int setng (code_ptr p,
           const BytePtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm)),
                               Code (0xf,0x9e),
                               make_modrm (modrm_rm,rax));
}
/*  0F 9C  /r RMBoth     | Set byte if not greater or equal (SF≠ OF). */
inline int setnge (code_ptr p,
            const ByteReg (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm)),
                               Code (0xf,0x9c),
                               make_modrm (modrm_rm,rax));
}
/*  0F 9C  /r RMBoth     | Set byte if not greater or equal (SF≠ OF). */
inline int setnge (code_ptr p,
            const BytePtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm)),
                               Code (0xf,0x9c),
                               make_modrm (modrm_rm,rax));
}
/*  0F 9D  /r RMBoth     | Set byte if not less (SF=OF). */
inline int setnl (code_ptr p,
           const ByteReg (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm)),
                               Code (0xf,0x9d),
                               make_modrm (modrm_rm,rax));
}
/*  0F 9D  /r RMBoth     | Set byte if not less (SF=OF). */
inline int setnl (code_ptr p,
           const BytePtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm)),
                               Code (0xf,0x9d),
                               make_modrm (modrm_rm,rax));
}
/*  0F 9F  /r RMBoth     | Set byte if not less or equal (ZF=0 and SF=OF). */
inline int setnle (code_ptr p,
            const ByteReg (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm)),
                               Code (0xf,0x9f),
                               make_modrm (modrm_rm,rax));
}
/*  0F 9F  /r RMBoth     | Set byte if not less or equal (ZF=0 and SF=OF). */
inline int setnle (code_ptr p,
            const BytePtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm)),
                               Code (0xf,0x9f),
                               make_modrm (modrm_rm,rax));
}
/*  0F 91  /r RMBoth     | Set byte if not overflow (OF=0). */
inline int setno (code_ptr p,
           const ByteReg (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm)),
                               Code (0xf,0x91),
                               make_modrm (modrm_rm,rax));
}
/*  0F 91  /r RMBoth     | Set byte if not overflow (OF=0). */
inline int setno (code_ptr p,
           const BytePtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm)),
                               Code (0xf,0x91),
                               make_modrm (modrm_rm,rax));
}
/*  0F 9B  /r RMBoth     | Set byte if not parity (PF=0). */
inline int setnp (code_ptr p,
           const ByteReg (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm)),
                               Code (0xf,0x9b),
                               make_modrm (modrm_rm,rax));
}
/*  0F 9B  /r RMBoth     | Set byte if not parity (PF=0). */
inline int setnp (code_ptr p,
           const BytePtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm)),
                               Code (0xf,0x9b),
                               make_modrm (modrm_rm,rax));
}
/*  0F 99  /r RMBoth     | Set byte if not sign (SF=0). */
inline int setns (code_ptr p,
           const ByteReg (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm)),
                               Code (0xf,0x99),
                               make_modrm (modrm_rm,rax));
}
/*  0F 99  /r RMBoth     | Set byte if not sign (SF=0). */
inline int setns (code_ptr p,
           const BytePtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm)),
                               Code (0xf,0x99),
                               make_modrm (modrm_rm,rax));
}
/*  0F 95  /r RMBoth     | Set byte if not zero (ZF=0). */
inline int setnz (code_ptr p,
           const ByteReg (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm)),
                               Code (0xf,0x95),
                               make_modrm (modrm_rm,rax));
}
/*  0F 95  /r RMBoth     | Set byte if not zero (ZF=0). */
inline int setnz (code_ptr p,
           const BytePtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm)),
                               Code (0xf,0x95),
                               make_modrm (modrm_rm,rax));
}
/*  0F 90  /r RMBoth     | Set byte if overflow (OF=1) */
inline int seto (code_ptr p,
          const ByteReg (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm)),
                               Code (0xf,0x90),
                               make_modrm (modrm_rm,rax));
}
/*  0F 90  /r RMBoth     | Set byte if overflow (OF=1) */
inline int seto (code_ptr p,
          const BytePtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm)),
                               Code (0xf,0x90),
                               make_modrm (modrm_rm,rax));
}
/*  0F 9A  /r RMBoth     | Set byte if parity (PF=1). */
inline int setp (code_ptr p,
          const ByteReg (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm)),
                               Code (0xf,0x9a),
                               make_modrm (modrm_rm,rax));
}
/*  0F 9A  /r RMBoth     | Set byte if parity (PF=1). */
inline int setp (code_ptr p,
          const BytePtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm)),
                               Code (0xf,0x9a),
                               make_modrm (modrm_rm,rax));
}
/*  0F 9A  /r RMBoth     | Set byte if parity even (PF=1). */
inline int setpe (code_ptr p,
           const ByteReg (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm)),
                               Code (0xf,0x9a),
                               make_modrm (modrm_rm,rax));
}
/*  0F 9A  /r RMBoth     | Set byte if parity even (PF=1). */
inline int setpe (code_ptr p,
           const BytePtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm)),
                               Code (0xf,0x9a),
                               make_modrm (modrm_rm,rax));
}
/*  0F 9B  /r RMBoth     | Set byte if parity odd (PF=0). */
inline int setpo (code_ptr p,
           const ByteReg (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm)),
                               Code (0xf,0x9b),
                               make_modrm (modrm_rm,rax));
}
/*  0F 9B  /r RMBoth     | Set byte if parity odd (PF=0). */
inline int setpo (code_ptr p,
           const BytePtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm)),
                               Code (0xf,0x9b),
                               make_modrm (modrm_rm,rax));
}
/*  0F 98  /r RMBoth     | Set byte if sign (SF=1). */
inline int sets (code_ptr p,
          const ByteReg (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm)),
                               Code (0xf,0x98),
                               make_modrm (modrm_rm,rax));
}
/*  0F 98  /r RMBoth     | Set byte if sign (SF=1). */
inline int sets (code_ptr p,
          const BytePtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm)),
                               Code (0xf,0x98),
                               make_modrm (modrm_rm,rax));
}
/*  0F 94  /r RMBoth     | Set byte if zero (ZF=1). */
inline int setz (code_ptr p,
          const ByteReg (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm)),
                               Code (0xf,0x94),
                               make_modrm (modrm_rm,rax));
}
/*  0F 94  /r RMBoth     | Set byte if zero (ZF=1). */
inline int setz (code_ptr p,
          const BytePtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm)),
                               Code (0xf,0x94),
                               make_modrm (modrm_rm,rax));
}
/*  0F AE  /7 RMRegOnly     | Serializes store operations. */
inline int sfence (code_ptr p)
{
    return encode_instruction (p,
                               Prefix (OpNothing,AddrNothing),
                               Code (0xf,0xae),
                               make_modrm (rax,7));
}
/*  0F 01  /0 RMMemOnly     | Store GDTR to m. */
inline int sgdt (code_ptr p,
          const VoidPtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm)),
                               Code (0xf,0x1),
                               make_modrm (modrm_rm,0));
}
/*  C1  /4 RMBoth  ib op32  | Multiply r/m32 by 2, imm8 times. */
inline int shl (code_ptr p,
         const DwordReg (&   modrm_rm),
         imm8_t imm)
{
    if (imm == 1)
       {
           return encode_instruction (p,
                                      Prefix (Op32,
                                              AddrNothing,
                                              modrm_rm),
                                      rexByte (rex_modrm_rm (modrm_rm)),
                                      Code (0xd1),
                                      make_modrm (modrm_rm,4));
       }
    else
       {
           return encode_instruction (p,
                                      Prefix (Op32,
                                              AddrNothing,
                                              modrm_rm),
                                      rexByte (rex_modrm_rm (modrm_rm)),
                                      Code (0xc1),
                                      make_modrm (modrm_rm,4),
                                      make_imm (imm));
       }
}
/*  C1  /4 RMBoth  ib op32  | Multiply r/m32 by 2, imm8 times. */
inline int shl (code_ptr p,
         const DwordPtr (&   modrm_rm),
         imm8_t imm)
{
    if (imm == 1)
       {
           return encode_instruction (p,
                                      Prefix (Op32,
                                              AddrNothing,
                                              modrm_rm),
                                      rexByte (rex_modrm_rm (modrm_rm)),
                                      Code (0xd1),
                                      make_modrm (modrm_rm,4));
       }
    else
       {
           return encode_instruction (p,
                                      Prefix (Op32,
                                              AddrNothing,
                                              modrm_rm),
                                      rexByte (rex_modrm_rm (modrm_rm)),
                                      Code (0xc1),
                                      make_modrm (modrm_rm,4),
                                      make_imm (imm));
       }
}
/*  C1  /4 RMBoth  ib op16  | Multiply r/m16 by 2, imm8 times. */
inline int shl (code_ptr p,
         const WordReg (&   modrm_rm),
         imm8_t imm)
{
    if (imm == 1)
       {
           return encode_instruction (p,
                                      Prefix (Op16,
                                              AddrNothing,
                                              modrm_rm),
                                      rexByte (rex_modrm_rm (modrm_rm)),
                                      Code (0xd1),
                                      make_modrm (modrm_rm,4));
       }
    else
       {
           return encode_instruction (p,
                                      Prefix (Op16,
                                              AddrNothing,
                                              modrm_rm),
                                      rexByte (rex_modrm_rm (modrm_rm)),
                                      Code (0xc1),
                                      make_modrm (modrm_rm,4),
                                      make_imm (imm));
       }
}
/*  C1  /4 RMBoth  ib op16  | Multiply r/m16 by 2, imm8 times. */
inline int shl (code_ptr p,
         const WordPtr (&   modrm_rm),
         imm8_t imm)
{
    if (imm == 1)
       {
           return encode_instruction (p,
                                      Prefix (Op16,
                                              AddrNothing,
                                              modrm_rm),
                                      rexByte (rex_modrm_rm (modrm_rm)),
                                      Code (0xd1),
                                      make_modrm (modrm_rm,4));
       }
    else
       {
           return encode_instruction (p,
                                      Prefix (Op16,
                                              AddrNothing,
                                              modrm_rm),
                                      rexByte (rex_modrm_rm (modrm_rm)),
                                      Code (0xc1),
                                      make_modrm (modrm_rm,4),
                                      make_imm (imm));
       }
}
/*  C0  /4 RMBoth  ib   | Multiply r/m8 by 2, imm8 times. */
inline int shl (code_ptr p,
         const ByteReg (&   modrm_rm),
         imm8_t imm)
{
    if (imm == 1)
       {
           return encode_instruction (p,
                                      Prefix (OpNothing,
                                              AddrNothing,
                                              modrm_rm),
                                      rexByte (rex_modrm_rm (modrm_rm)),
                                      Code (0xd0),
                                      make_modrm (modrm_rm,4));
       }
    else
       {
           return encode_instruction (p,
                                      Prefix (OpNothing,
                                              AddrNothing,
                                              modrm_rm),
                                      rexByte (rex_modrm_rm (modrm_rm)),
                                      Code (0xc0),
                                      make_modrm (modrm_rm,4),
                                      make_imm (imm));
       }
}
/*  C0  /4 RMBoth  ib   | Multiply r/m8 by 2, imm8 times. */
inline int shl (code_ptr p,
         const BytePtr (&   modrm_rm),
         imm8_t imm)
{
    if (imm == 1)
       {
           return encode_instruction (p,
                                      Prefix (OpNothing,
                                              AddrNothing,
                                              modrm_rm),
                                      rexByte (rex_modrm_rm (modrm_rm)),
                                      Code (0xd0),
                                      make_modrm (modrm_rm,4));
       }
    else
       {
           return encode_instruction (p,
                                      Prefix (OpNothing,
                                              AddrNothing,
                                              modrm_rm),
                                      rexByte (rex_modrm_rm (modrm_rm)),
                                      Code (0xc0),
                                      make_modrm (modrm_rm,4),
                                      make_imm (imm));
       }
}
/*  D2  /4 RMBoth     | Multiply r/m8 by 2, CL times. */
inline int shl (code_ptr p,
         const ByteReg (&   modrm_rm),
         const RegCL (&   unused))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm)),
                               Code (0xd2),
                               make_modrm (modrm_rm,4));
}
/*  D2  /4 RMBoth     | Multiply r/m8 by 2, CL times. */
inline int shl (code_ptr p,
         const BytePtr (&   modrm_rm),
         const RegCL (&   unused))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm)),
                               Code (0xd2),
                               make_modrm (modrm_rm,4));
}
/*  D3  /4 RMBoth   op16  | Multiply r/m16 by 2, CL times. */
inline int shl (code_ptr p,
         const WordReg (&   modrm_rm),
         const RegCL (&   unused))
{
    return encode_instruction (p,
                               Prefix (Op16,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm)),
                               Code (0xd3),
                               make_modrm (modrm_rm,4));
}
/*  D3  /4 RMBoth   op16  | Multiply r/m16 by 2, CL times. */
inline int shl (code_ptr p,
         const WordPtr (&   modrm_rm),
         const RegCL (&   unused))
{
    return encode_instruction (p,
                               Prefix (Op16,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm)),
                               Code (0xd3),
                               make_modrm (modrm_rm,4));
}
/*  D3  /4 RMBoth   op32  | Multiply r/m32 by 2, CL times. */
inline int shl (code_ptr p,
         const DwordReg (&   modrm_rm),
         const RegCL (&   unused))
{
    return encode_instruction (p,
                               Prefix (Op32,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm)),
                               Code (0xd3),
                               make_modrm (modrm_rm,4));
}
/*  D3  /4 RMBoth   op32  | Multiply r/m32 by 2, CL times. */
inline int shl (code_ptr p,
         const DwordPtr (&   modrm_rm),
         const RegCL (&   unused))
{
    return encode_instruction (p,
                               Prefix (Op32,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm)),
                               Code (0xd3),
                               make_modrm (modrm_rm,4));
}
/*  0F A4  /r RMBoth  ib op16  | Shift r/m16 to left imm8 places while shifting bits from r16 in from the right. */
inline int shld (code_ptr p,
          const WordReg (&   modrm_rm),
          const WordReg (&   modrm_reg),
          imm8_t imm)
{
    return encode_instruction (p,
                               Prefix (Op16,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0xa4),
                               make_modrm (modrm_rm,modrm_reg),
                               make_imm (imm));
}
/*  0F A4  /r RMBoth  ib op16  | Shift r/m16 to left imm8 places while shifting bits from r16 in from the right. */
inline int shld (code_ptr p,
          const WordPtr (&   modrm_rm),
          const WordReg (&   modrm_reg),
          imm8_t imm)
{
    return encode_instruction (p,
                               Prefix (Op16,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0xa4),
                               make_modrm (modrm_rm,modrm_reg),
                               make_imm (imm));
}
/*  0F A5  /r RMBoth   op16  | Shift r/m16 to left CL places while shifting bits from r16 in from the right. */
inline int shld (code_ptr p,
          const WordReg (&   modrm_rm),
          const WordReg (&   modrm_reg),
          const RegCL (&   unused))
{
    return encode_instruction (p,
                               Prefix (Op16,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0xa5),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/*  0F A5  /r RMBoth   op16  | Shift r/m16 to left CL places while shifting bits from r16 in from the right. */
inline int shld (code_ptr p,
          const WordPtr (&   modrm_rm),
          const WordReg (&   modrm_reg),
          const RegCL (&   unused))
{
    return encode_instruction (p,
                               Prefix (Op16,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0xa5),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/*  0F A4  /r RMBoth  ib op32  | Shift r/m32 to left imm8 places while shifting bits from r32 in from the right. */
inline int shld (code_ptr p,
          const DwordReg (&   modrm_rm),
          const DwordReg (&   modrm_reg),
          imm8_t imm)
{
    return encode_instruction (p,
                               Prefix (Op32,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0xa4),
                               make_modrm (modrm_rm,modrm_reg),
                               make_imm (imm));
}
/*  0F A4  /r RMBoth  ib op32  | Shift r/m32 to left imm8 places while shifting bits from r32 in from the right. */
inline int shld (code_ptr p,
          const DwordPtr (&   modrm_rm),
          const DwordReg (&   modrm_reg),
          imm8_t imm)
{
    return encode_instruction (p,
                               Prefix (Op32,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0xa4),
                               make_modrm (modrm_rm,modrm_reg),
                               make_imm (imm));
}
/*  0F A5  /r RMBoth   op32  | Shift r/m32 to left CL places while shifting bits from r32 in from the right. */
inline int shld (code_ptr p,
          const DwordReg (&   modrm_rm),
          const DwordReg (&   modrm_reg),
          const RegCL (&   unused))
{
    return encode_instruction (p,
                               Prefix (Op32,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0xa5),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/*  0F A5  /r RMBoth   op32  | Shift r/m32 to left CL places while shifting bits from r32 in from the right. */
inline int shld (code_ptr p,
          const DwordPtr (&   modrm_rm),
          const DwordReg (&   modrm_reg),
          const RegCL (&   unused))
{
    return encode_instruction (p,
                               Prefix (Op32,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0xa5),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/*  C1  /5 RMBoth  ib op32  | Unsigned divide r/m32 by 2, imm8 times. */
inline int shr (code_ptr p,
         const DwordReg (&   modrm_rm),
         imm8_t imm)
{
    if (imm == 1)
       {
           return encode_instruction (p,
                                      Prefix (Op32,
                                              AddrNothing,
                                              modrm_rm),
                                      rexByte (rex_modrm_rm (modrm_rm)),
                                      Code (0xd1),
                                      make_modrm (modrm_rm,5));
       }
    else
       {
           return encode_instruction (p,
                                      Prefix (Op32,
                                              AddrNothing,
                                              modrm_rm),
                                      rexByte (rex_modrm_rm (modrm_rm)),
                                      Code (0xc1),
                                      make_modrm (modrm_rm,5),
                                      make_imm (imm));
       }
}
/*  C1  /5 RMBoth  ib op32  | Unsigned divide r/m32 by 2, imm8 times. */
inline int shr (code_ptr p,
         const DwordPtr (&   modrm_rm),
         imm8_t imm)
{
    if (imm == 1)
       {
           return encode_instruction (p,
                                      Prefix (Op32,
                                              AddrNothing,
                                              modrm_rm),
                                      rexByte (rex_modrm_rm (modrm_rm)),
                                      Code (0xd1),
                                      make_modrm (modrm_rm,5));
       }
    else
       {
           return encode_instruction (p,
                                      Prefix (Op32,
                                              AddrNothing,
                                              modrm_rm),
                                      rexByte (rex_modrm_rm (modrm_rm)),
                                      Code (0xc1),
                                      make_modrm (modrm_rm,5),
                                      make_imm (imm));
       }
}
/*  C1  /5 RMBoth  ib op16  | Unsigned divide r/m16 by 2, imm8 times. */
inline int shr (code_ptr p,
         const WordReg (&   modrm_rm),
         imm8_t imm)
{
    if (imm == 1)
       {
           return encode_instruction (p,
                                      Prefix (Op16,
                                              AddrNothing,
                                              modrm_rm),
                                      rexByte (rex_modrm_rm (modrm_rm)),
                                      Code (0xd1),
                                      make_modrm (modrm_rm,5));
       }
    else
       {
           return encode_instruction (p,
                                      Prefix (Op16,
                                              AddrNothing,
                                              modrm_rm),
                                      rexByte (rex_modrm_rm (modrm_rm)),
                                      Code (0xc1),
                                      make_modrm (modrm_rm,5),
                                      make_imm (imm));
       }
}
/*  C1  /5 RMBoth  ib op16  | Unsigned divide r/m16 by 2, imm8 times. */
inline int shr (code_ptr p,
         const WordPtr (&   modrm_rm),
         imm8_t imm)
{
    if (imm == 1)
       {
           return encode_instruction (p,
                                      Prefix (Op16,
                                              AddrNothing,
                                              modrm_rm),
                                      rexByte (rex_modrm_rm (modrm_rm)),
                                      Code (0xd1),
                                      make_modrm (modrm_rm,5));
       }
    else
       {
           return encode_instruction (p,
                                      Prefix (Op16,
                                              AddrNothing,
                                              modrm_rm),
                                      rexByte (rex_modrm_rm (modrm_rm)),
                                      Code (0xc1),
                                      make_modrm (modrm_rm,5),
                                      make_imm (imm));
       }
}
/*  C0  /5 RMBoth  ib   | Unsigned divide r/m8 by 2, imm8 times. */
inline int shr (code_ptr p,
         const ByteReg (&   modrm_rm),
         imm8_t imm)
{
    if (imm == 1)
       {
           return encode_instruction (p,
                                      Prefix (OpNothing,
                                              AddrNothing,
                                              modrm_rm),
                                      rexByte (rex_modrm_rm (modrm_rm)),
                                      Code (0xd0),
                                      make_modrm (modrm_rm,5));
       }
    else
       {
           return encode_instruction (p,
                                      Prefix (OpNothing,
                                              AddrNothing,
                                              modrm_rm),
                                      rexByte (rex_modrm_rm (modrm_rm)),
                                      Code (0xc0),
                                      make_modrm (modrm_rm,5),
                                      make_imm (imm));
       }
}
/*  C0  /5 RMBoth  ib   | Unsigned divide r/m8 by 2, imm8 times. */
inline int shr (code_ptr p,
         const BytePtr (&   modrm_rm),
         imm8_t imm)
{
    if (imm == 1)
       {
           return encode_instruction (p,
                                      Prefix (OpNothing,
                                              AddrNothing,
                                              modrm_rm),
                                      rexByte (rex_modrm_rm (modrm_rm)),
                                      Code (0xd0),
                                      make_modrm (modrm_rm,5));
       }
    else
       {
           return encode_instruction (p,
                                      Prefix (OpNothing,
                                              AddrNothing,
                                              modrm_rm),
                                      rexByte (rex_modrm_rm (modrm_rm)),
                                      Code (0xc0),
                                      make_modrm (modrm_rm,5),
                                      make_imm (imm));
       }
}
/*  D2  /5 RMBoth     | Unsigned divide r/m8 by 2, CL times. */
inline int shr (code_ptr p,
         const ByteReg (&   modrm_rm),
         const RegCL (&   unused))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm)),
                               Code (0xd2),
                               make_modrm (modrm_rm,5));
}
/*  D2  /5 RMBoth     | Unsigned divide r/m8 by 2, CL times. */
inline int shr (code_ptr p,
         const BytePtr (&   modrm_rm),
         const RegCL (&   unused))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm)),
                               Code (0xd2),
                               make_modrm (modrm_rm,5));
}
/*  D3  /5 RMBoth   op16  | Unsigned divide r/m16 by 2, CL times */
inline int shr (code_ptr p,
         const WordReg (&   modrm_rm),
         const RegCL (&   unused))
{
    return encode_instruction (p,
                               Prefix (Op16,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm)),
                               Code (0xd3),
                               make_modrm (modrm_rm,5));
}
/*  D3  /5 RMBoth   op16  | Unsigned divide r/m16 by 2, CL times */
inline int shr (code_ptr p,
         const WordPtr (&   modrm_rm),
         const RegCL (&   unused))
{
    return encode_instruction (p,
                               Prefix (Op16,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm)),
                               Code (0xd3),
                               make_modrm (modrm_rm,5));
}
/*  D3  /5 RMBoth   op32  | Unsigned divide r/m32 by 2, CL times. */
inline int shr (code_ptr p,
         const DwordReg (&   modrm_rm),
         const RegCL (&   unused))
{
    return encode_instruction (p,
                               Prefix (Op32,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm)),
                               Code (0xd3),
                               make_modrm (modrm_rm,5));
}
/*  D3  /5 RMBoth   op32  | Unsigned divide r/m32 by 2, CL times. */
inline int shr (code_ptr p,
         const DwordPtr (&   modrm_rm),
         const RegCL (&   unused))
{
    return encode_instruction (p,
                               Prefix (Op32,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm)),
                               Code (0xd3),
                               make_modrm (modrm_rm,5));
}
/*  0F AC  /r RMBoth  ib op16  | Shift r/m16 to right imm8 places while shifting bits from r16 in from the left. */
inline int shrd (code_ptr p,
          const WordReg (&   modrm_rm),
          const WordReg (&   modrm_reg),
          imm8_t imm)
{
    return encode_instruction (p,
                               Prefix (Op16,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0xac),
                               make_modrm (modrm_rm,modrm_reg),
                               make_imm (imm));
}
/*  0F AC  /r RMBoth  ib op16  | Shift r/m16 to right imm8 places while shifting bits from r16 in from the left. */
inline int shrd (code_ptr p,
          const WordPtr (&   modrm_rm),
          const WordReg (&   modrm_reg),
          imm8_t imm)
{
    return encode_instruction (p,
                               Prefix (Op16,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0xac),
                               make_modrm (modrm_rm,modrm_reg),
                               make_imm (imm));
}
/*  0F AD  /r RMBoth   op16  | Shift r/m16 to right CL places while shifting bits from r16 in from the left. */
inline int shrd (code_ptr p,
          const WordReg (&   modrm_rm),
          const WordReg (&   modrm_reg),
          const RegCL (&   unused))
{
    return encode_instruction (p,
                               Prefix (Op16,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0xad),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/*  0F AD  /r RMBoth   op16  | Shift r/m16 to right CL places while shifting bits from r16 in from the left. */
inline int shrd (code_ptr p,
          const WordPtr (&   modrm_rm),
          const WordReg (&   modrm_reg),
          const RegCL (&   unused))
{
    return encode_instruction (p,
                               Prefix (Op16,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0xad),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/*  0F AC  /r RMBoth  ib op32  | Shift r/m32 to right imm8 places while shifting bits from r32 in from the left. */
inline int shrd (code_ptr p,
          const DwordReg (&   modrm_rm),
          const DwordReg (&   modrm_reg),
          imm8_t imm)
{
    return encode_instruction (p,
                               Prefix (Op32,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0xac),
                               make_modrm (modrm_rm,modrm_reg),
                               make_imm (imm));
}
/*  0F AC  /r RMBoth  ib op32  | Shift r/m32 to right imm8 places while shifting bits from r32 in from the left. */
inline int shrd (code_ptr p,
          const DwordPtr (&   modrm_rm),
          const DwordReg (&   modrm_reg),
          imm8_t imm)
{
    return encode_instruction (p,
                               Prefix (Op32,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0xac),
                               make_modrm (modrm_rm,modrm_reg),
                               make_imm (imm));
}
/*  0F AD  /r RMBoth   op32  | Shift r/m32 to right CL places while shifting bits from r32 in from the left. */
inline int shrd (code_ptr p,
          const DwordReg (&   modrm_rm),
          const DwordReg (&   modrm_reg),
          const RegCL (&   unused))
{
    return encode_instruction (p,
                               Prefix (Op32,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0xad),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/*  0F AD  /r RMBoth   op32  | Shift r/m32 to right CL places while shifting bits from r32 in from the left. */
inline int shrd (code_ptr p,
          const DwordPtr (&   modrm_rm),
          const DwordReg (&   modrm_reg),
          const RegCL (&   unused))
{
    return encode_instruction (p,
                               Prefix (Op32,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0xad),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/* 66 0F C6  /r RMBoth  ib   | Shuffle packed double- precision floating-point values selected by imm8 from xmm1 and xmm2/m128 to xmm1. */
inline int shufpd (code_ptr p,
            const XmmReg (&   modrm_reg),
            const XmmReg (&   modrm_rm),
            imm8_t imm)
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm,
                                       Prefix_OPERAND_SIZE),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0xc6),
                               make_modrm (modrm_rm,modrm_reg),
                               make_imm (imm));
}
/* 66 0F C6  /r RMBoth  ib   | Shuffle packed double- precision floating-point values selected by imm8 from xmm1 and xmm2/m128 to xmm1. */
inline int shufpd (code_ptr p,
            const XmmReg (&   modrm_reg),
            const XmmWordPtr (&   modrm_rm),
            imm8_t imm)
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm,
                                       Prefix_OPERAND_SIZE),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0xc6),
                               make_modrm (modrm_rm,modrm_reg),
                               make_imm (imm));
}
/*  0F C6  /r RMBoth  ib   | Shuffle packed single- precision floating-point values selected by imm8 from xmm1 and xmm1/m128 to xmm1. */
inline int shufps (code_ptr p,
            const XmmReg (&   modrm_reg),
            const XmmReg (&   modrm_rm),
            imm8_t imm)
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0xc6),
                               make_modrm (modrm_rm,modrm_reg),
                               make_imm (imm));
}
/*  0F C6  /r RMBoth  ib   | Shuffle packed single- precision floating-point values selected by imm8 from xmm1 and xmm1/m128 to xmm1. */
inline int shufps (code_ptr p,
            const XmmReg (&   modrm_reg),
            const XmmWordPtr (&   modrm_rm),
            imm8_t imm)
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0xc6),
                               make_modrm (modrm_rm,modrm_reg),
                               make_imm (imm));
}
/*  0F 01  /1 RMMemOnly     | Store IDTR to m. */
inline int sidt (code_ptr p,
          const VoidPtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm)),
                               Code (0xf,0x1),
                               make_modrm (modrm_rm,1));
}
/*  0F 00  /0 RMBoth     | Stores segment selector from LDTR in r/m16. */
inline int sldt (code_ptr p,
          const WordReg (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm)),
                               Code (0xf,0x0),
                               make_modrm (modrm_rm,0));
}
/*  0F 00  /0 RMBoth     | Stores segment selector from LDTR in r/m16. */
inline int sldt (code_ptr p,
          const WordPtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm)),
                               Code (0xf,0x0),
                               make_modrm (modrm_rm,0));
}
/*  0F 01  /4 RMBoth   op16  | Store machine status word to r/m16. */
inline int smsw (code_ptr p,
          const WordReg (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (Op16,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm)),
                               Code (0xf,0x1),
                               make_modrm (modrm_rm,4));
}
/*  0F 01  /4 RMBoth   op32  | Store machine status word in low-order 16 bits of r32/m16; high-order 16 bits of r32 are undefined. */
inline int smsw (code_ptr p,
          const DwordReg (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (Op32,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm)),
                               Code (0xf,0x1),
                               make_modrm (modrm_rm,4));
}
/*  0F 01  /4 RMBoth     | Store machine status word to r/m16. */
inline int smsw (code_ptr p,
          const WordPtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm)),
                               Code (0xf,0x1),
                               make_modrm (modrm_rm,4));
}
/* 66 0F 51  /r RMBoth     | Computes square roots of the packed double-precision floating-point values in xmm2/m128 and stores the results in xmm1. */
inline int sqrtpd (code_ptr p,
            const XmmReg (&   modrm_reg),
            const XmmReg (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm,
                                       Prefix_OPERAND_SIZE),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x51),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/* 66 0F 51  /r RMBoth     | Computes square roots of the packed double-precision floating-point values in xmm2/m128 and stores the results in xmm1. */
inline int sqrtpd (code_ptr p,
            const XmmReg (&   modrm_reg),
            const XmmWordPtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm,
                                       Prefix_OPERAND_SIZE),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x51),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/*  0F 51  /r RMBoth     | Computes square roots of the packed single-precision floating-point values in xmm2/m128 and stores the results in xmm1. */
inline int sqrtps (code_ptr p,
            const XmmReg (&   modrm_reg),
            const XmmReg (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x51),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/*  0F 51  /r RMBoth     | Computes square roots of the packed single-precision floating-point values in xmm2/m128 and stores the results in xmm1. */
inline int sqrtps (code_ptr p,
            const XmmReg (&   modrm_reg),
            const XmmWordPtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x51),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/* F2 0F 51  /r RMBoth     | Computes square root of the low double-precision floating-point value in xmm2/m64 and stores the results in xmm1. */
inline int sqrtsd (code_ptr p,
            const XmmReg (&   modrm_reg),
            const XmmReg (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm,
                                       Prefix_REPNE),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x51),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/* F2 0F 51  /r RMBoth     | Computes square root of the low double-precision floating-point value in xmm2/m64 and stores the results in xmm1. */
inline int sqrtsd (code_ptr p,
            const XmmReg (&   modrm_reg),
            const QwordPtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm,
                                       Prefix_REPNE),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x51),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/* F3 0F 51  /r RMBoth     | Computes square root of the low single-precision floating-point value in xmm2/m32 and stores the results in xmm1. */
inline int sqrtss (code_ptr p,
            const XmmReg (&   modrm_reg),
            const XmmReg (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm,
                                       Prefix_REP),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x51),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/* F3 0F 51  /r RMBoth     | Computes square root of the low single-precision floating-point value in xmm2/m32 and stores the results in xmm1. */
inline int sqrtss (code_ptr p,
            const XmmReg (&   modrm_reg),
            const DwordPtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm,
                                       Prefix_REP),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x51),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/*  F9        | Set CF flag. */
inline int stc (code_ptr p)
{
    return encode_instruction (p,
                               Prefix (OpNothing,AddrNothing),
                               Code (0xf9));
}
/*  FD        | Set DF flag. */
inline int std_ (code_ptr p)
{
    return encode_instruction (p,
                               Prefix (OpNothing,AddrNothing),
                               Code (0xfd));
}
/*  FB        | Set interrupt flag; external, maskable interrupts enabled at the end of the next instruction. */
inline int sti (code_ptr p)
{
    return encode_instruction (p,
                               Prefix (OpNothing,AddrNothing),
                               Code (0xfb));
}
/*  0F AE  /3 RMMemOnly     | Store contents of MXCSR register to m32. */
inline int stmxcsr (code_ptr p,
             const DwordPtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm)),
                               Code (0xf,0xae),
                               make_modrm (modrm_rm,3));
}
/*  AA        | For legacy mode, store AL at address ES:(E)DI; For 64-bit mode store AL at address RDI or EDI. */
inline int stos (code_ptr p,
          const BytePtr_ES_EDI (&   unused))
{
    return encode_instruction (p,
                               Prefix (OpNothing,Addr32),
                               Code (0xaa));
}
/*  AA        | For legacy mode, store AL at address ES:(E)DI; For 64-bit mode store AL at address RDI or EDI. */
inline int stos (code_ptr p,
          const BytePtr_ES_EDI (&   unused1),
          const RegAL (&   unused2))
{
    return encode_instruction (p,
                               Prefix (OpNothing,Addr32),
                               Code (0xaa));
}
/*  AA        | For legacy mode, store AL at address ES:(E)DI; For 64-bit mode store AL at address RDI or EDI. */
inline int stos (code_ptr p,
          const BytePtr_ES_DI (&   unused))
{
    return encode_instruction (p,
                               Prefix (OpNothing,Addr16),
                               Code (0xaa));
}
/*  AA        | For legacy mode, store AL at address ES:(E)DI; For 64-bit mode store AL at address RDI or EDI. */
inline int stos (code_ptr p,
          const BytePtr_ES_DI (&   unused1),
          const RegAL (&   unused2))
{
    return encode_instruction (p,
                               Prefix (OpNothing,Addr16),
                               Code (0xaa));
}
/*  AB      op16  | For legacy mode, store AX at address ES:(E)DI; For 64- bit mode store AX at address RDI or EDI. */
inline int stos (code_ptr p,
          const WordPtr_ES_EDI (&   unused))
{
    return encode_instruction (p,
                               Prefix (Op16,Addr32),
                               Code (0xab));
}
/*  AB      op16  | For legacy mode, store AX at address ES:(E)DI; For 64- bit mode store AX at address RDI or EDI. */
inline int stos (code_ptr p,
          const WordPtr_ES_EDI (&   unused1),
          const RegAX (&   unused2))
{
    return encode_instruction (p,
                               Prefix (Op16,Addr32),
                               Code (0xab));
}
/*  AB      op16  | For legacy mode, store AX at address ES:(E)DI; For 64- bit mode store AX at address RDI or EDI. */
inline int stos (code_ptr p,
          const WordPtr_ES_DI (&   unused))
{
    return encode_instruction (p,
                               Prefix (Op16,Addr16),
                               Code (0xab));
}
/*  AB      op16  | For legacy mode, store AX at address ES:(E)DI; For 64- bit mode store AX at address RDI or EDI. */
inline int stos (code_ptr p,
          const WordPtr_ES_DI (&   unused1),
          const RegAX (&   unused2))
{
    return encode_instruction (p,
                               Prefix (Op16,Addr16),
                               Code (0xab));
}
/*  AB      op32  | For legacy mode, store EAX at address ES:(E)DI; For 64- bit mode store EAX at address RDI or EDI. */
inline int stos (code_ptr p,
          const DwordPtr_ES_EDI (&   unused))
{
    return encode_instruction (p,
                               Prefix (Op32,Addr32),
                               Code (0xab));
}
/*  AB      op32  | For legacy mode, store EAX at address ES:(E)DI; For 64- bit mode store EAX at address RDI or EDI. */
inline int stos (code_ptr p,
          const DwordPtr_ES_EDI (&   unused1),
          const RegEAX (&   unused2))
{
    return encode_instruction (p,
                               Prefix (Op32,Addr32),
                               Code (0xab));
}
/*  AB      op32  | For legacy mode, store EAX at address ES:(E)DI; For 64- bit mode store EAX at address RDI or EDI. */
inline int stos (code_ptr p,
          const DwordPtr_ES_DI (&   unused))
{
    return encode_instruction (p,
                               Prefix (Op32,Addr16),
                               Code (0xab));
}
/*  AB      op32  | For legacy mode, store EAX at address ES:(E)DI; For 64- bit mode store EAX at address RDI or EDI. */
inline int stos (code_ptr p,
          const DwordPtr_ES_DI (&   unused1),
          const RegEAX (&   unused2))
{
    return encode_instruction (p,
                               Prefix (Op32,Addr16),
                               Code (0xab));
}
/*  AA        | For legacy mode, store AL at address ES:(E)DI; For 64-bit mode store AL at address RDI or EDI. */
inline int stosb (code_ptr p)
{
    return encode_instruction (p,
                               Prefix (OpNothing,AddrNothing),
                               Code (0xaa));
}
/*  AB      op32  | For legacy mode, store EAX at address ES:(E)DI; For 64- bit mode store EAX at address RDI or EDI. */
inline int stosd (code_ptr p)
{
    return encode_instruction (p,
                               Prefix (Op32,AddrNothing),
                               Code (0xab));
}
/*  AB      op16  | For legacy mode, store AX at address ES:(E)DI; For 64- bit mode store AX at address RDI or EDI. */
inline int stosw (code_ptr p)
{
    return encode_instruction (p,
                               Prefix (Op16,AddrNothing),
                               Code (0xab));
}
/*  0F 00  /1 RMBoth     | Stores segment selector from TR in r/m16. */
inline int str (code_ptr p,
         const WordReg (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm)),
                               Code (0xf,0x0),
                               make_modrm (modrm_rm,1));
}
/*  0F 00  /1 RMBoth     | Stores segment selector from TR in r/m16. */
inline int str (code_ptr p,
         const WordPtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm)),
                               Code (0xf,0x0),
                               make_modrm (modrm_rm,1));
}
/*  2D     id op32  | Subtract imm32 from EAX. */
inline int sub (code_ptr p,
         const RegEAX (&   unused),
         imm32_t imm)
{
    return encode_instruction (p,
                               Prefix (Op32,AddrNothing),
                               Code (0x2d),
                               make_imm (imm));
}
/*  83  /5 RMBoth  ib op32  | Subtract sign-extended imm8 from r/m32. */
inline int sub (code_ptr p,
         const DwordReg_m_EAX (&   modrm_rm),
         imm8_t imm)
{
    return encode_instruction (p,
                               Prefix (Op32,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm)),
                               Code (0x83),
                               make_modrm (modrm_rm,5),
                               make_imm (imm));
}
/*  81  /5 RMBoth  id op32  | Subtract imm32 from r/m32. */
inline int sub (code_ptr p,
         const DwordReg_m_EAX (&   modrm_rm),
         imm32_t imm)
{
    return encode_instruction (p,
                               Prefix (Op32,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm)),
                               Code (0x81),
                               make_modrm (modrm_rm,5),
                               make_imm (imm));
}
/*  81  /5 RMBoth  id op32  | Subtract imm32 from r/m32. */
inline int sub (code_ptr p,
         const DwordPtr (&   modrm_rm),
         imm32_t imm)
{
    return encode_instruction (p,
                               Prefix (Op32,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm)),
                               Code (0x81),
                               make_modrm (modrm_rm,5),
                               make_imm (imm));
}
/*  83  /5 RMBoth  ib op32  | Subtract sign-extended imm8 from r/m32. */
inline int sub (code_ptr p,
         const RegEAX (&   modrm_rm),
         imm8_t imm)
{
    return encode_instruction (p,
                               Prefix (Op32,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm)),
                               Code (0x83),
                               make_modrm (modrm_rm,5),
                               make_imm (imm));
}
/*  83  /5 RMBoth  ib op32  | Subtract sign-extended imm8 from r/m32. */
inline int sub (code_ptr p,
         const DwordPtr (&   modrm_rm),
         imm8_t imm)
{
    return encode_instruction (p,
                               Prefix (Op32,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm)),
                               Code (0x83),
                               make_modrm (modrm_rm,5),
                               make_imm (imm));
}
/*  2D     iw op16  | Subtract imm16 from AX. */
inline int sub (code_ptr p,
         const RegAX (&   unused),
         imm16_t imm)
{
    return encode_instruction (p,
                               Prefix (Op16,AddrNothing),
                               Code (0x2d),
                               make_imm (imm));
}
/*  83  /5 RMBoth  ib op16  | Subtract sign-extended imm8 from r/m16. */
inline int sub (code_ptr p,
         const WordReg_m_AX (&   modrm_rm),
         imm8_t imm)
{
    return encode_instruction (p,
                               Prefix (Op16,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm)),
                               Code (0x83),
                               make_modrm (modrm_rm,5),
                               make_imm (imm));
}
/*  81  /5 RMBoth  iw op16  | Subtract imm16 from r/m16. */
inline int sub (code_ptr p,
         const WordReg_m_AX (&   modrm_rm),
         imm16_t imm)
{
    return encode_instruction (p,
                               Prefix (Op16,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm)),
                               Code (0x81),
                               make_modrm (modrm_rm,5),
                               make_imm (imm));
}
/*  81  /5 RMBoth  iw op16  | Subtract imm16 from r/m16. */
inline int sub (code_ptr p,
         const WordPtr (&   modrm_rm),
         imm16_t imm)
{
    return encode_instruction (p,
                               Prefix (Op16,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm)),
                               Code (0x81),
                               make_modrm (modrm_rm,5),
                               make_imm (imm));
}
/*  83  /5 RMBoth  ib op16  | Subtract sign-extended imm8 from r/m16. */
inline int sub (code_ptr p,
         const RegAX (&   modrm_rm),
         imm8_t imm)
{
    return encode_instruction (p,
                               Prefix (Op16,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm)),
                               Code (0x83),
                               make_modrm (modrm_rm,5),
                               make_imm (imm));
}
/*  83  /5 RMBoth  ib op16  | Subtract sign-extended imm8 from r/m16. */
inline int sub (code_ptr p,
         const WordPtr (&   modrm_rm),
         imm8_t imm)
{
    return encode_instruction (p,
                               Prefix (Op16,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm)),
                               Code (0x83),
                               make_modrm (modrm_rm,5),
                               make_imm (imm));
}
/*  2B  /r RMBoth   op32  | Subtract r/m32 from r32. */
inline int sub (code_ptr p,
         const DwordReg (&   modrm_reg),
         const DwordReg (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (Op32,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0x2b),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/*  2B  /r RMBoth   op32  | Subtract r/m32 from r32. */
inline int sub (code_ptr p,
         const DwordReg (&   modrm_reg),
         const DwordPtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (Op32,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0x2b),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/*  29  /r RMBoth   op32  | Subtract r32 from r/m32. */
inline int sub (code_ptr p,
         const DwordPtr (&   modrm_rm),
         const DwordReg (&   modrm_reg))
{
    return encode_instruction (p,
                               Prefix (Op32,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0x29),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/*  2B  /r RMBoth   op16  | Subtract r/m16 from r16. */
inline int sub (code_ptr p,
         const WordReg (&   modrm_reg),
         const WordReg (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (Op16,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0x2b),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/*  2B  /r RMBoth   op16  | Subtract r/m16 from r16. */
inline int sub (code_ptr p,
         const WordReg (&   modrm_reg),
         const WordPtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (Op16,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0x2b),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/*  29  /r RMBoth   op16  | Subtract r16 from r/m16. */
inline int sub (code_ptr p,
         const WordPtr (&   modrm_rm),
         const WordReg (&   modrm_reg))
{
    return encode_instruction (p,
                               Prefix (Op16,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0x29),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/*  2A  /r RMBoth     | Subtract r/m8 from r8. */
inline int sub (code_ptr p,
         const ByteReg (&   modrm_reg),
         const ByteReg (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0x2a),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/*  2A  /r RMBoth     | Subtract r/m8 from r8. */
inline int sub (code_ptr p,
         const ByteReg (&   modrm_reg),
         const BytePtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0x2a),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/*  28  /r RMBoth     | Subtract r8 from r/m8. */
inline int sub (code_ptr p,
         const BytePtr (&   modrm_rm),
         const ByteReg (&   modrm_reg))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0x28),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/*  2C     ib   | Subtract imm8 from AL. */
inline int sub (code_ptr p,
         const RegAL (&   unused),
         imm8_t imm)
{
    return encode_instruction (p,
                               Prefix (OpNothing,AddrNothing),
                               Code (0x2c),
                               make_imm (imm));
}
/*  80  /5 RMBoth  ib   | Subtract imm8 from r/m8. */
inline int sub (code_ptr p,
         const ByteReg (&   modrm_rm),
         imm8_t imm)
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm)),
                               Code (0x80),
                               make_modrm (modrm_rm,5),
                               make_imm (imm));
}
/*  80  /5 RMBoth  ib   | Subtract imm8 from r/m8. */
inline int sub (code_ptr p,
         const BytePtr (&   modrm_rm),
         imm8_t imm)
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm)),
                               Code (0x80),
                               make_modrm (modrm_rm,5),
                               make_imm (imm));
}
/* 66 0F 5C  /r RMBoth     | Subtract packed double- precision floating-point values in xmm2/m128 from xmm1. */
inline int subpd (code_ptr p,
           const XmmReg (&   modrm_reg),
           const XmmReg (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm,
                                       Prefix_OPERAND_SIZE),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x5c),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/* 66 0F 5C  /r RMBoth     | Subtract packed double- precision floating-point values in xmm2/m128 from xmm1. */
inline int subpd (code_ptr p,
           const XmmReg (&   modrm_reg),
           const XmmWordPtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm,
                                       Prefix_OPERAND_SIZE),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x5c),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/*  0F 5C  /r RMBoth     | Subtract packed single- precision floating-point values in xmm2/mem from xmm1. */
inline int subps (code_ptr p,
           const XmmReg (&   modrm_reg),
           const XmmReg (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x5c),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/*  0F 5C  /r RMBoth     | Subtract packed single- precision floating-point values in xmm2/mem from xmm1. */
inline int subps (code_ptr p,
           const XmmReg (&   modrm_reg),
           const XmmWordPtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x5c),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/* F2 0F 5C  /r RMBoth     | Subtracts the low double- precision floating-point values in xmm2/mem64 from xmm1. */
inline int subsd (code_ptr p,
           const XmmReg (&   modrm_reg),
           const XmmReg (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm,
                                       Prefix_REPNE),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x5c),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/* F2 0F 5C  /r RMBoth     | Subtracts the low double- precision floating-point values in xmm2/mem64 from xmm1. */
inline int subsd (code_ptr p,
           const XmmReg (&   modrm_reg),
           const QwordPtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm,
                                       Prefix_REPNE),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x5c),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/* F3 0F 5C  /r RMBoth     | Subtract the lower single- precision floating-point values in xmm2/m32 from xmm1. */
inline int subss (code_ptr p,
           const XmmReg (&   modrm_reg),
           const XmmReg (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm,
                                       Prefix_REP),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x5c),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/* F3 0F 5C  /r RMBoth     | Subtract the lower single- precision floating-point values in xmm2/m32 from xmm1. */
inline int subss (code_ptr p,
           const XmmReg (&   modrm_reg),
           const DwordPtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm,
                                       Prefix_REP),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x5c),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/*  0F 34        | Fast call to privilege level 0 system procedures. */
inline int sysenter (code_ptr p)
{
    return encode_instruction (p,
                               Prefix (OpNothing,AddrNothing),
                               Code (0xf,0x34));
}
/*  0F 35        | Fast return to privilege level 3 user code. */
inline int sysexit (code_ptr p)
{
    return encode_instruction (p,
                               Prefix (OpNothing,AddrNothing),
                               Code (0xf,0x35));
}
/*  A8     ib   | AND imm8 with AL; set SF, ZF, PF according to result. */
inline int test (code_ptr p,
          const RegAL (&   unused),
          imm8_t imm)
{
    return encode_instruction (p,
                               Prefix (OpNothing,AddrNothing),
                               Code (0xa8),
                               make_imm (imm));
}
/*  A9     iw op16  | AND imm16 with AX; set SF, ZF, PF according to result. */
inline int test (code_ptr p,
          const RegAX (&   unused),
          imm16_t imm)
{
    return encode_instruction (p,
                               Prefix (Op16,AddrNothing),
                               Code (0xa9),
                               make_imm (imm));
}
/*  A9     id op32  | AND imm32 with EAX; set SF, ZF, PF according to result. */
inline int test (code_ptr p,
          const RegEAX (&   unused),
          imm32_t imm)
{
    return encode_instruction (p,
                               Prefix (Op32,AddrNothing),
                               Code (0xa9),
                               make_imm (imm));
}
/*  F6  /0 RMBoth  ib   | AND imm8 with r/m8; set SF, ZF, PF according to result. */
inline int test (code_ptr p,
          const ByteReg (&   modrm_rm),
          imm8_t imm)
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm)),
                               Code (0xf6),
                               make_modrm (modrm_rm,0),
                               make_imm (imm));
}
/*  F6  /0 RMBoth  ib   | AND imm8 with r/m8; set SF, ZF, PF according to result. */
inline int test (code_ptr p,
          const BytePtr (&   modrm_rm),
          imm8_t imm)
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm)),
                               Code (0xf6),
                               make_modrm (modrm_rm,0),
                               make_imm (imm));
}
/*  84  /r RMBoth     | AND r8 with r/m8; set SF, ZF, PF according to result. */
inline int test (code_ptr p,
          const ByteReg (&   modrm_rm),
          const ByteReg (&   modrm_reg))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0x84),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/*  84  /r RMBoth     | AND r8 with r/m8; set SF, ZF, PF according to result. */
inline int test (code_ptr p,
          const BytePtr (&   modrm_rm),
          const ByteReg (&   modrm_reg))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0x84),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/*  F7  /0 RMBoth  iw op16  | AND imm16 with r/m16; set SF, ZF, PF according to result. */
inline int test (code_ptr p,
          const WordReg (&   modrm_rm),
          imm16_t imm)
{
    return encode_instruction (p,
                               Prefix (Op16,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm)),
                               Code (0xf7),
                               make_modrm (modrm_rm,0),
                               make_imm (imm));
}
/*  F7  /0 RMBoth  iw op16  | AND imm16 with r/m16; set SF, ZF, PF according to result. */
inline int test (code_ptr p,
          const WordPtr (&   modrm_rm),
          imm16_t imm)
{
    return encode_instruction (p,
                               Prefix (Op16,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm)),
                               Code (0xf7),
                               make_modrm (modrm_rm,0),
                               make_imm (imm));
}
/*  85  /r RMBoth   op16  | AND r16 with r/m16; set SF, ZF, PF according to result. */
inline int test (code_ptr p,
          const WordReg (&   modrm_rm),
          const WordReg (&   modrm_reg))
{
    return encode_instruction (p,
                               Prefix (Op16,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0x85),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/*  85  /r RMBoth   op16  | AND r16 with r/m16; set SF, ZF, PF according to result. */
inline int test (code_ptr p,
          const WordPtr (&   modrm_rm),
          const WordReg (&   modrm_reg))
{
    return encode_instruction (p,
                               Prefix (Op16,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0x85),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/*  F7  /0 RMBoth  id op32  | AND imm32 with r/m32; set SF, ZF, PF according to result. */
inline int test (code_ptr p,
          const DwordReg (&   modrm_rm),
          imm32_t imm)
{
    return encode_instruction (p,
                               Prefix (Op32,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm)),
                               Code (0xf7),
                               make_modrm (modrm_rm,0),
                               make_imm (imm));
}
/*  F7  /0 RMBoth  id op32  | AND imm32 with r/m32; set SF, ZF, PF according to result. */
inline int test (code_ptr p,
          const DwordPtr (&   modrm_rm),
          imm32_t imm)
{
    return encode_instruction (p,
                               Prefix (Op32,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm)),
                               Code (0xf7),
                               make_modrm (modrm_rm,0),
                               make_imm (imm));
}
/*  85  /r RMBoth   op32  | AND r32 with r/m32; set SF, ZF, PF according to result. */
inline int test (code_ptr p,
          const DwordReg (&   modrm_rm),
          const DwordReg (&   modrm_reg))
{
    return encode_instruction (p,
                               Prefix (Op32,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0x85),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/*  85  /r RMBoth   op32  | AND r32 with r/m32; set SF, ZF, PF according to result. */
inline int test (code_ptr p,
          const DwordPtr (&   modrm_rm),
          const DwordReg (&   modrm_reg))
{
    return encode_instruction (p,
                               Prefix (Op32,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0x85),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/* 66 0F 2E  /r RMBoth     | Compares (unordered) the low double-precision floating-point values in xmm1 and xmm2/m64 and set the EFLAGS accordingly. */
inline int ucomisd (code_ptr p,
             const XmmReg (&   modrm_reg),
             const XmmReg (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm,
                                       Prefix_OPERAND_SIZE),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x2e),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/* 66 0F 2E  /r RMBoth     | Compares (unordered) the low double-precision floating-point values in xmm1 and xmm2/m64 and set the EFLAGS accordingly. */
inline int ucomisd (code_ptr p,
             const XmmReg (&   modrm_reg),
             const QwordPtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm,
                                       Prefix_OPERAND_SIZE),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x2e),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/*  0F 2E  /r RMBoth     | Compare lower single- precision floating-point value in xmm1 register with lower single-precision floating-point value in xmm2/mem and set the status flags accordingly. */
inline int ucomiss (code_ptr p,
             const XmmReg (&   modrm_reg),
             const XmmReg (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x2e),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/*  0F 2E  /r RMBoth     | Compare lower single- precision floating-point value in xmm1 register with lower single-precision floating-point value in xmm2/mem and set the status flags accordingly. */
inline int ucomiss (code_ptr p,
             const XmmReg (&   modrm_reg),
             const DwordPtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x2e),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/*  0F 0B        | Raise invalid opcode exception. */
inline int ud2 (code_ptr p)
{
    return encode_instruction (p,
                               Prefix (OpNothing,AddrNothing),
                               Code (0xf,0xb));
}
/* 66 0F 15  /r RMBoth     | Unpacks and Interleaves double-precision floating- point values from high quadwords of xmm1 and xmm2/m128. */
inline int unpckhpd (code_ptr p,
              const XmmReg (&   modrm_reg),
              const XmmReg (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm,
                                       Prefix_OPERAND_SIZE),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x15),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/* 66 0F 15  /r RMBoth     | Unpacks and Interleaves double-precision floating- point values from high quadwords of xmm1 and xmm2/m128. */
inline int unpckhpd (code_ptr p,
              const XmmReg (&   modrm_reg),
              const XmmWordPtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm,
                                       Prefix_OPERAND_SIZE),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x15),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/*  0F 15  /r RMBoth     | Unpacks and Interleaves single-precision floating- point values from high quadwords of xmm1 and xmm2/mem into xmm1. */
inline int unpckhps (code_ptr p,
              const XmmReg (&   modrm_reg),
              const XmmReg (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x15),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/*  0F 15  /r RMBoth     | Unpacks and Interleaves single-precision floating- point values from high quadwords of xmm1 and xmm2/mem into xmm1. */
inline int unpckhps (code_ptr p,
              const XmmReg (&   modrm_reg),
              const XmmWordPtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x15),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/* 66 0F 14  /r RMBoth     | Unpacks and Interleaves double-precision floating- point values from low quadwords of xmm1 and xmm2/m128. */
inline int unpcklpd (code_ptr p,
              const XmmReg (&   modrm_reg),
              const XmmReg (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm,
                                       Prefix_OPERAND_SIZE),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x14),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/* 66 0F 14  /r RMBoth     | Unpacks and Interleaves double-precision floating- point values from low quadwords of xmm1 and xmm2/m128. */
inline int unpcklpd (code_ptr p,
              const XmmReg (&   modrm_reg),
              const XmmWordPtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm,
                                       Prefix_OPERAND_SIZE),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x14),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/*  0F 14  /r RMBoth     | Unpacks and Interleaves single-precision floating- point values from low quadwords of xmm1 and xmm2/mem into xmm1. */
inline int unpcklps (code_ptr p,
              const XmmReg (&   modrm_reg),
              const XmmReg (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x14),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/*  0F 14  /r RMBoth     | Unpacks and Interleaves single-precision floating- point values from low quadwords of xmm1 and xmm2/mem into xmm1. */
inline int unpcklps (code_ptr p,
              const XmmReg (&   modrm_reg),
              const XmmWordPtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x14),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/*  0F 00  /4 RMBoth     | Set ZF=1 if segment specified with r/m16 can be read. */
inline int verr (code_ptr p,
          const WordReg (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm)),
                               Code (0xf,0x0),
                               make_modrm (modrm_rm,4));
}
/*  0F 00  /4 RMBoth     | Set ZF=1 if segment specified with r/m16 can be read. */
inline int verr (code_ptr p,
          const WordPtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm)),
                               Code (0xf,0x0),
                               make_modrm (modrm_rm,4));
}
/*  0F 00  /5 RMBoth     | Set ZF=1 if segment specified with r/m16 can be written. */
inline int verw (code_ptr p,
          const WordReg (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm)),
                               Code (0xf,0x0),
                               make_modrm (modrm_rm,5));
}
/*  0F 00  /5 RMBoth     | Set ZF=1 if segment specified with r/m16 can be written. */
inline int verw (code_ptr p,
          const WordPtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm)),
                               Code (0xf,0x0),
                               make_modrm (modrm_rm,5));
}
/*  0F 01 C1        | Call to VM monitor by causing VM exit. */
inline int vmcall (code_ptr p)
{
    return encode_instruction (p,
                               Prefix (OpNothing,AddrNothing),
                               Code (0xf,0x1,0xc1));
}
/* 66 0F C7  /6 RMMemOnly     | Copy VMCS data to VMCS region in memory. */
inline int vmclear (code_ptr p,
             const QwordPtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm,
                                       Prefix_OPERAND_SIZE),
                               rexByte (rex_modrm_rm (modrm_rm)),
                               Code (0xf,0xc7),
                               make_modrm (modrm_rm,6));
}
/*  0F 01 C2        | Launch virtual machine managed by current VMCS. */
inline int vmlaunch (code_ptr p)
{
    return encode_instruction (p,
                               Prefix (OpNothing,AddrNothing),
                               Code (0xf,0x1,0xc2));
}
/*  0F C7  /6 RMMemOnly     | Loads the current VMCS pointer from memory. */
inline int vmptrld (code_ptr p,
             const QwordPtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm)),
                               Code (0xf,0xc7),
                               make_modrm (modrm_rm,6));
}
/*  0F C7  /7 RMMemOnly     | Stores the current VMCS pointer into memory. */
inline int vmptrst (code_ptr p,
             const QwordPtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm)),
                               Code (0xf,0xc7),
                               make_modrm (modrm_rm,7));
}
/*  0F 78  /r RMBoth     | Reads a specified VMCS field (outside 64-bit mode). */
inline int vmread (code_ptr p,
            const DwordReg (&   modrm_rm),
            const DwordReg (&   modrm_reg))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x78),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/*  0F 78  /r RMBoth     | Reads a specified VMCS field (outside 64-bit mode). */
inline int vmread (code_ptr p,
            const DwordPtr (&   modrm_rm),
            const DwordReg (&   modrm_reg))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x78),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/*  0F 01 C3        | Resume virtual machine managed by current VMCS. */
inline int vmresume (code_ptr p)
{
    return encode_instruction (p,
                               Prefix (OpNothing,AddrNothing),
                               Code (0xf,0x1,0xc3));
}
/*  0F 79  /r RMBoth     | Writes a specified VMCS field (outside 64-bit mode) */
inline int vmwrite (code_ptr p,
             const DwordReg (&   modrm_reg),
             const DwordReg (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x79),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/*  0F 79  /r RMBoth     | Writes a specified VMCS field (outside 64-bit mode) */
inline int vmwrite (code_ptr p,
             const DwordReg (&   modrm_reg),
             const DwordPtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x79),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/*  0F 01 C4        | Leaves VMX operation. */
inline int vmxoff (code_ptr p)
{
    return encode_instruction (p,
                               Prefix (OpNothing,AddrNothing),
                               Code (0xf,0x1,0xc4));
}
/* F3 0F C7  /6 RMMemOnly     | Enter VMX root operation. */
inline int vmxon (code_ptr p,
           const QwordPtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm,
                                       Prefix_REP),
                               rexByte (rex_modrm_rm (modrm_rm)),
                               Code (0xf,0xc7),
                               make_modrm (modrm_rm,6));
}
/*  9B        | Check pending unmasked floating-point exceptions. */
inline int wait_ (code_ptr p)
{
    return encode_instruction (p,
                               Prefix (OpNothing,AddrNothing),
                               Code (0x9b));
}
/*  0F 09        | Write back and flush Internal caches; initiate writing-back and flushing of external caches. */
inline int wbinvd (code_ptr p)
{
    return encode_instruction (p,
                               Prefix (OpNothing,AddrNothing),
                               Code (0xf,0x9));
}
/*  0F 30        | Write the value in EDX:EAX to MSR specified by ECX. */
inline int wrmsr (code_ptr p)
{
    return encode_instruction (p,
                               Prefix (OpNothing,AddrNothing),
                               Code (0xf,0x30));
}
/*  0F C0  /r RMBoth     | Exchange r8 and r/m8; load sum into r/m8. */
inline int xadd (code_ptr p,
          const ByteReg (&   modrm_rm),
          const ByteReg (&   modrm_reg))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0xc0),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/*  0F C0  /r RMBoth     | Exchange r8 and r/m8; load sum into r/m8. */
inline int xadd (code_ptr p,
          const BytePtr (&   modrm_rm),
          const ByteReg (&   modrm_reg))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0xc0),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/*  0F C1  /r RMBoth   op16  | Exchange r16 and r/m16; load sum into r/m16. */
inline int xadd (code_ptr p,
          const WordReg (&   modrm_rm),
          const WordReg (&   modrm_reg))
{
    return encode_instruction (p,
                               Prefix (Op16,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0xc1),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/*  0F C1  /r RMBoth   op16  | Exchange r16 and r/m16; load sum into r/m16. */
inline int xadd (code_ptr p,
          const WordPtr (&   modrm_rm),
          const WordReg (&   modrm_reg))
{
    return encode_instruction (p,
                               Prefix (Op16,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0xc1),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/*  0F C1  /r RMBoth   op32  | Exchange r32 and r/m32; load sum into r/m32. */
inline int xadd (code_ptr p,
          const DwordReg (&   modrm_rm),
          const DwordReg (&   modrm_reg))
{
    return encode_instruction (p,
                               Prefix (Op32,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0xc1),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/*  0F C1  /r RMBoth   op32  | Exchange r32 and r/m32; load sum into r/m32. */
inline int xadd (code_ptr p,
          const DwordPtr (&   modrm_rm),
          const DwordReg (&   modrm_reg))
{
    return encode_instruction (p,
                               Prefix (Op32,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0xc1),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/*  87  /r RMBoth   op32  | Exchange r32 with doubleword from r/m32. */
inline int xchg (code_ptr p,
          const RegEAX (&   modrm_rm),
          const DwordReg (&   modrm_reg))
{
    return encode_instruction (p,
                               Prefix (Op32,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0x87),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/*  87  /r RMBoth   op32  | Exchange r32 with doubleword from r/m32. */
inline int xchg (code_ptr p,
          const DwordReg_m_EAX (&   modrm_rm),
          const DwordReg (&   modrm_reg))
{
    return encode_instruction (p,
                               Prefix (Op32,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0x87),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/*  90    +rd  op32  | Exchange EAX with r32. */
inline int xchg (code_ptr p,
          const DwordReg_m_EAX (&   radd),
          const RegEAX (&   unused))
{
    return encode_instruction (p,
                               Prefix (Op32,AddrNothing),
                               rexByte (rex_regadd (RegAdd (radd))),
                               Code (0x90,RegAdd (radd)));
}
/*  87  /r RMBoth   op32  | Exchange r32 with doubleword from r/m32. */
inline int xchg (code_ptr p,
          const DwordPtr (&   modrm_rm),
          const DwordReg (&   modrm_reg))
{
    return encode_instruction (p,
                               Prefix (Op32,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0x87),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/*  87  /r RMBoth   op32  | Exchange doubleword from r/m32 with r32. */
inline int xchg (code_ptr p,
          const DwordReg (&   modrm_reg),
          const DwordPtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (Op32,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0x87),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/*  87  /r RMBoth   op16  | Exchange r16 with word from r/m16. */
inline int xchg (code_ptr p,
          const RegAX (&   modrm_rm),
          const WordReg (&   modrm_reg))
{
    return encode_instruction (p,
                               Prefix (Op16,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0x87),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/*  87  /r RMBoth   op16  | Exchange r16 with word from r/m16. */
inline int xchg (code_ptr p,
          const WordReg_m_AX (&   modrm_rm),
          const WordReg (&   modrm_reg))
{
    return encode_instruction (p,
                               Prefix (Op16,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0x87),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/*  90    +rw  op16  | Exchange AX with r16. */
inline int xchg (code_ptr p,
          const WordReg_m_AX (&   radd),
          const RegAX (&   unused))
{
    return encode_instruction (p,
                               Prefix (Op16,AddrNothing),
                               rexByte (rex_regadd (RegAdd (radd))),
                               Code (0x90,RegAdd (radd)));
}
/*  87  /r RMBoth   op16  | Exchange r16 with word from r/m16. */
inline int xchg (code_ptr p,
          const WordPtr (&   modrm_rm),
          const WordReg (&   modrm_reg))
{
    return encode_instruction (p,
                               Prefix (Op16,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0x87),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/*  87  /r RMBoth   op16  | Exchange word from r/m16 with r16. */
inline int xchg (code_ptr p,
          const WordReg (&   modrm_reg),
          const WordPtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (Op16,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0x87),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/*  86  /r RMBoth     | Exchange byte from r/m8 with r8 (byte register). */
inline int xchg (code_ptr p,
          const ByteReg (&   modrm_reg),
          const ByteReg (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0x86),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/*  86  /r RMBoth     | Exchange byte from r/m8 with r8 (byte register). */
inline int xchg (code_ptr p,
          const ByteReg (&   modrm_reg),
          const BytePtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0x86),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/*  86  /r RMBoth     | Exchange r8 (byte register) with byte from r/m8. */
inline int xchg (code_ptr p,
          const BytePtr (&   modrm_rm),
          const ByteReg (&   modrm_reg))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0x86),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/*  0F 01 D0        | Reads an XCR specified by ECX into EDX:EAX. */
inline int xgetbv (code_ptr p)
{
    return encode_instruction (p,
                               Prefix (OpNothing,AddrNothing),
                               Code (0xf,0x1,0xd0));
}
/*  D7        | Set AL to memory byte DS:[(E)BX + unsigned AL]. */
inline int xlat (code_ptr p,
          const BytePtr_EBX (&   ptr))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       Addr32,
                                       ptr.get_segment ()),
                               Code (0xd7));
}
/*  D7        | Set AL to memory byte DS:[(E)BX + unsigned AL]. */
inline int xlat (code_ptr p,
          const BytePtr_BX (&   ptr))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       Addr16,
                                       ptr.get_segment ()),
                               Code (0xd7));
}
/*  D7        | Set AL to memory byte DS:[(E)BX + unsigned AL]. */
inline int xlatb (code_ptr p)
{
    return encode_instruction (p,
                               Prefix (OpNothing,AddrNothing),
                               Code (0xd7));
}
/*  35     id op32  | EAX XOR imm32. */
inline int xor_ (code_ptr p,
          const RegEAX (&   unused),
          imm32_t imm)
{
    return encode_instruction (p,
                               Prefix (Op32,AddrNothing),
                               Code (0x35),
                               make_imm (imm));
}
/*  83  /6 RMBoth  ib op32  | r/m32 XOR imm8 (sign- extended). */
inline int xor_ (code_ptr p,
          const DwordReg_m_EAX (&   modrm_rm),
          imm8_t imm)
{
    return encode_instruction (p,
                               Prefix (Op32,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm)),
                               Code (0x83),
                               make_modrm (modrm_rm,6),
                               make_imm (imm));
}
/*  81  /6 RMBoth  id op32  | r/m32 XOR imm32. */
inline int xor_ (code_ptr p,
          const DwordReg_m_EAX (&   modrm_rm),
          imm32_t imm)
{
    return encode_instruction (p,
                               Prefix (Op32,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm)),
                               Code (0x81),
                               make_modrm (modrm_rm,6),
                               make_imm (imm));
}
/*  81  /6 RMBoth  id op32  | r/m32 XOR imm32. */
inline int xor_ (code_ptr p,
          const DwordPtr (&   modrm_rm),
          imm32_t imm)
{
    return encode_instruction (p,
                               Prefix (Op32,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm)),
                               Code (0x81),
                               make_modrm (modrm_rm,6),
                               make_imm (imm));
}
/*  83  /6 RMBoth  ib op32  | r/m32 XOR imm8 (sign- extended). */
inline int xor_ (code_ptr p,
          const RegEAX (&   modrm_rm),
          imm8_t imm)
{
    return encode_instruction (p,
                               Prefix (Op32,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm)),
                               Code (0x83),
                               make_modrm (modrm_rm,6),
                               make_imm (imm));
}
/*  83  /6 RMBoth  ib op32  | r/m32 XOR imm8 (sign- extended). */
inline int xor_ (code_ptr p,
          const DwordPtr (&   modrm_rm),
          imm8_t imm)
{
    return encode_instruction (p,
                               Prefix (Op32,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm)),
                               Code (0x83),
                               make_modrm (modrm_rm,6),
                               make_imm (imm));
}
/*  35     iw op16  | AX XOR imm16. */
inline int xor_ (code_ptr p,
          const RegAX (&   unused),
          imm16_t imm)
{
    return encode_instruction (p,
                               Prefix (Op16,AddrNothing),
                               Code (0x35),
                               make_imm (imm));
}
/*  83  /6 RMBoth  ib op16  | r/m16 XOR imm8 (sign- extended). */
inline int xor_ (code_ptr p,
          const WordReg_m_AX (&   modrm_rm),
          imm8_t imm)
{
    return encode_instruction (p,
                               Prefix (Op16,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm)),
                               Code (0x83),
                               make_modrm (modrm_rm,6),
                               make_imm (imm));
}
/*  81  /6 RMBoth  iw op16  | r/m16 XOR imm16. */
inline int xor_ (code_ptr p,
          const WordReg_m_AX (&   modrm_rm),
          imm16_t imm)
{
    return encode_instruction (p,
                               Prefix (Op16,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm)),
                               Code (0x81),
                               make_modrm (modrm_rm,6),
                               make_imm (imm));
}
/*  81  /6 RMBoth  iw op16  | r/m16 XOR imm16. */
inline int xor_ (code_ptr p,
          const WordPtr (&   modrm_rm),
          imm16_t imm)
{
    return encode_instruction (p,
                               Prefix (Op16,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm)),
                               Code (0x81),
                               make_modrm (modrm_rm,6),
                               make_imm (imm));
}
/*  83  /6 RMBoth  ib op16  | r/m16 XOR imm8 (sign- extended). */
inline int xor_ (code_ptr p,
          const RegAX (&   modrm_rm),
          imm8_t imm)
{
    return encode_instruction (p,
                               Prefix (Op16,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm)),
                               Code (0x83),
                               make_modrm (modrm_rm,6),
                               make_imm (imm));
}
/*  83  /6 RMBoth  ib op16  | r/m16 XOR imm8 (sign- extended). */
inline int xor_ (code_ptr p,
          const WordPtr (&   modrm_rm),
          imm8_t imm)
{
    return encode_instruction (p,
                               Prefix (Op16,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm)),
                               Code (0x83),
                               make_modrm (modrm_rm,6),
                               make_imm (imm));
}
/*  33  /r RMBoth   op32  | r32 XOR r/m32. */
inline int xor_ (code_ptr p,
          const DwordReg (&   modrm_reg),
          const DwordReg (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (Op32,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0x33),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/*  33  /r RMBoth   op32  | r32 XOR r/m32. */
inline int xor_ (code_ptr p,
          const DwordReg (&   modrm_reg),
          const DwordPtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (Op32,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0x33),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/*  31  /r RMBoth   op32  | r/m32 XOR r32. */
inline int xor_ (code_ptr p,
          const DwordPtr (&   modrm_rm),
          const DwordReg (&   modrm_reg))
{
    return encode_instruction (p,
                               Prefix (Op32,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0x31),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/*  33  /r RMBoth   op16  | r16 XOR r/m16. */
inline int xor_ (code_ptr p,
          const WordReg (&   modrm_reg),
          const WordReg (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (Op16,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0x33),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/*  33  /r RMBoth   op16  | r16 XOR r/m16. */
inline int xor_ (code_ptr p,
          const WordReg (&   modrm_reg),
          const WordPtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (Op16,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0x33),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/*  31  /r RMBoth   op16  | r/m16 XOR r16. */
inline int xor_ (code_ptr p,
          const WordPtr (&   modrm_rm),
          const WordReg (&   modrm_reg))
{
    return encode_instruction (p,
                               Prefix (Op16,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0x31),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/*  32  /r RMBoth     | r8 XOR r/m8. */
inline int xor_ (code_ptr p,
          const ByteReg (&   modrm_reg),
          const ByteReg (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0x32),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/*  32  /r RMBoth     | r8 XOR r/m8. */
inline int xor_ (code_ptr p,
          const ByteReg (&   modrm_reg),
          const BytePtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0x32),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/*  30  /r RMBoth     | r/m8 XOR r8. */
inline int xor_ (code_ptr p,
          const BytePtr (&   modrm_rm),
          const ByteReg (&   modrm_reg))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0x30),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/*  34     ib   | AL XOR imm8. */
inline int xor_ (code_ptr p,
          const RegAL (&   unused),
          imm8_t imm)
{
    return encode_instruction (p,
                               Prefix (OpNothing,AddrNothing),
                               Code (0x34),
                               make_imm (imm));
}
/*  80  /6 RMBoth  ib   | r/m8 XOR imm8. */
inline int xor_ (code_ptr p,
          const ByteReg (&   modrm_rm),
          imm8_t imm)
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm)),
                               Code (0x80),
                               make_modrm (modrm_rm,6),
                               make_imm (imm));
}
/*  80  /6 RMBoth  ib   | r/m8 XOR imm8. */
inline int xor_ (code_ptr p,
          const BytePtr (&   modrm_rm),
          imm8_t imm)
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm)),
                               Code (0x80),
                               make_modrm (modrm_rm,6),
                               make_imm (imm));
}
/* 66 0F 57  /r RMBoth     | Bitwise exclusive-OR of xmm2/m128 and xmm1. */
inline int xorpd (code_ptr p,
           const XmmReg (&   modrm_reg),
           const XmmReg (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm,
                                       Prefix_OPERAND_SIZE),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x57),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/* 66 0F 57  /r RMBoth     | Bitwise exclusive-OR of xmm2/m128 and xmm1. */
inline int xorpd (code_ptr p,
           const XmmReg (&   modrm_reg),
           const XmmWordPtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm,
                                       Prefix_OPERAND_SIZE),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x57),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/*  0F 57  /r RMBoth     | Bitwise exclusive-OR of xmm2/m128 and xmm1. */
inline int xorps (code_ptr p,
           const XmmReg (&   modrm_reg),
           const XmmReg (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x57),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/*  0F 57  /r RMBoth     | Bitwise exclusive-OR of xmm2/m128 and xmm1. */
inline int xorps (code_ptr p,
           const XmmReg (&   modrm_reg),
           const XmmWordPtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm),
                                        rex_modrm_r (modrm_reg)),
                               Code (0xf,0x57),
                               make_modrm (modrm_rm,
                                           modrm_reg));
}
/*  0F AE  /5 RMMemOnly     | Restore processor extended states from memory. The states are specified by EDX:EAX */
inline int xrstor (code_ptr p,
            const VoidPtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm)),
                               Code (0xf,0xae),
                               make_modrm (modrm_rm,5));
}
/*  0F AE  /4 RMMemOnly     | Save processor extended states to memory. The states are specified by EDX:EAX */
inline int xsave (code_ptr p,
           const VoidPtr (&   modrm_rm))
{
    return encode_instruction (p,
                               Prefix (OpNothing,
                                       AddrNothing,
                                       modrm_rm),
                               rexByte (rex_modrm_rm (modrm_rm)),
                               Code (0xf,0xae),
                               make_modrm (modrm_rm,4));
}
/*  0F 01 D1        | Write the value in EDX:EAX to the XCR specified by ECX. */
inline int xsetbv (code_ptr p)
{
    return encode_instruction (p,
                               Prefix (OpNothing,AddrNothing),
                               Code (0xf,0x1,0xd1));
}
}
}
}
}
