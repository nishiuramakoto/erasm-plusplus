---------------------------------
ERASM++ Installation Instructions
---------------------------------
 * Installation
 * Supported Platforms
 * Requirements

INSTALLATION
------------ 

I assume you have downloaded erasm-plusplus-0.11.tar.gz from **,
unpacked it,and cd'ed into the base directory.

./configure --prefix=your-private-directory 
make 
make install

This will install the necessary headers under PREFIX/include/erasm,
and libraries under PREFIX/lib.

We don't recommend installing on the system directories,as ERASM++ is still
in its alpha stage.

Note that due to the lack of standard C++ ABI, it is necessary to build the library
for *every* major version of every compiler toolset you use. So we recommend
something like (say) ./configure --prefix=$HOME/gcc-4.6 in the above example.

We have several options to ease the installation.
* Make Erasm++ a header-only library.
* Make Erasm++ a thin-wrapper around an equivalent, but more portable C library where possible.
* Adopt Boost-like library naming scheme and automate above process.

Each solution has its pros and cons. If you have an idea,please let me know!

SUPPORTED PLATFORMS
------------------

We have tested the library on following systems and compilers:

Debian Testing(squeeze) running on Intel Celeron M 1.3GHz,
g++ version 4.5.3.

Windows 7 32-bit running on Intel Pentium Dual Core 2.4GHz,
mingw g++ version 4.5.4 and 4.6.1.

Unfortunately,g++ 4.6.1 won't pass 'make check'. (it will eat up all the
user space. See README for the details.) However, there should be no problem
just to compile and install the library.

cl.exe bundled with Visual C++ 2011 Express looks fine, but not tested 
thoroughly yet.

Please report at nishiuramakoto@gmail.com if you have succeeded or failed to build and use Erasm++ on
other systems.


REQUIREMENTS
------------

Erasm++ requires:

* GNU make
* Boost static assert
* Boost stdint 
 (ERASM++ assumes the availability of int8_t,int16_t,int32_t,int64_t and
  their unsigned counterparts)
* Boost preprocessor

Check out http://www.boost.org and install above libraries.

Additionally, we use "#pragma pack" for struct packing.If your compiler
doesn't support this,please let me know.

Furthermore,the following additional requirements must be met in order to
pass 'make check':

* GoogleTest
* libopcodes (bundled with GNU binutils)
* GHC (Glasgow Haskell Compiler) >= 7.0.3
* cabal
* parsec,uulib,HUnit,QuickCheck >=2.4,HaskellForMaths >=0.4.0,fgl,pointless-haskell
  all of which are available through 'cabal install'.


